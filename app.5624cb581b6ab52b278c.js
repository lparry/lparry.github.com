/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = window["webpackJsonp"];
/******/ 	window["webpackJsonp"] = function webpackJsonpCallback(chunkIds, moreModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, callbacks = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId])
/******/ 				callbacks.push.apply(callbacks, installedChunks[chunkId]);
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			modules[moduleId] = moreModules[moduleId];
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);
/******/ 		while(callbacks.length)
/******/ 			callbacks.shift().call(null, __webpack_require__);

/******/ 	};

/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// object to store loaded and loading chunks
/******/ 	// "0" means "already loaded"
/******/ 	// Array means "loading", array contains callbacks
/******/ 	var installedChunks = {
/******/ 		0:0
/******/ 	};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}

/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId, callback) {
/******/ 		// "0" is the signal for "already loaded"
/******/ 		if(installedChunks[chunkId] === 0)
/******/ 			return callback.call(null, __webpack_require__);

/******/ 		// an array means "currently loading".
/******/ 		if(installedChunks[chunkId] !== undefined) {
/******/ 			installedChunks[chunkId].push(callback);
/******/ 		} else {
/******/ 			// start chunk loading
/******/ 			installedChunks[chunkId] = [callback];
/******/ 			var head = document.getElementsByTagName('head')[0];
/******/ 			var script = document.createElement('script');
/******/ 			script.type = 'text/javascript';
/******/ 			script.charset = 'utf-8';
/******/ 			script.async = true;

/******/ 			script.src = __webpack_require__.p + "" + chunkId + ".app." + "5624cb581b6ab52b278c" + ".js";
/******/ 			head.appendChild(script);
/******/ 		}
/******/ 	};

/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(557);
  module.exports = __webpack_require__(577);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  module.exports = __webpack_require__(1223);


/***/ },
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _react = __webpack_require__(1);

  var _react2 = _interopRequireDefault(_react);

  __webpack_require__(1044);

  var _Location = __webpack_require__(386);

  var _Location2 = _interopRequireDefault(_Location);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  function isLeftClickEvent(event) {
    return event.button === 0;
  }

  function isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
  }

  var Link = function (_Component) {
    _inherits(Link, _Component);

    function Link() {
      _classCallCheck(this, Link);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(Link).apply(this, arguments));
    }

    _createClass(Link, [{
      key: "render",
      value: function render() {
        var _props = this.props;
        var to = _props.to;
        var children = _props.children;

        var props = _objectWithoutProperties(_props, ["to", "children"]);

        return _react2.default.createElement(
          "a",
          _extends({}, props, { href: to, onClick: Link.handleClick.bind(this) }),
          children
        );
      }
    }]);

    return Link;
  }(_react.Component);

  Link.propTypes = {
    to: _react.PropTypes.string.isRequired,
    children: _react.PropTypes.node,
    state: _react.PropTypes.object,
    onClick: _react.PropTypes.func
  };

  Link.handleClick = function (event) {
    var allowTransition = true;
    var clickResult = void 0;

    if (undefined && undefined.props && undefined.props.onClick) {
      clickResult = undefined.props.onClick(event);
    }

    if (isModifiedEvent(event) || !isLeftClickEvent(event)) {
      return;
    }

    if (clickResult === false || event.defaultPrevented === true) {
      allowTransition = false;
    }

    event.preventDefault();

    if (allowTransition) {
      var link = event.currentTarget;
      if (undefined && undefined.props) {
        _Location2.default.push({
          pathname: undefined.props.to,
          search: undefined.props.state
        });
      } else {
        _Location2.default.push({
          pathname: link.pathname,
          search: link.search
        });
      }
    }
  };

  exports.default = Link;

/***/ },
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react = __webpack_require__(1);

  var _react2 = _interopRequireDefault(_react);

  var _Link = __webpack_require__(5);

  var _Link2 = _interopRequireDefault(_Link);

  __webpack_require__(1047);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function toTagUrl(tag) {
    return "/tags/" + tag.toLowerCase().replace(/ /g, "-");
  }

  var Tag = function Tag(_ref) {
    var tagName = _ref.tagName;
    return _react2.default.createElement(
      _Link2.default,
      { to: toTagUrl(tagName) },
      _react2.default.createElement(
        "div",
        { className: "tagCloud__tag" },
        tagName
      )
    );
  };
  Tag.propTypes = {
    tagName: _react.PropTypes.string
  };

  var TagCloud = function TagCloud(_ref2) {
    var noTitle = _ref2.noTitle;
    var className = _ref2.className;
    var tags = _ref2.tags;

    if (tags.length === 0) return null;
    return _react2.default.createElement(
      "div",
      { className: "tagCloud " + className },
      noTitle ? null : _react2.default.createElement(
        "div",
        { className: "tagCloud__title" },
        _react2.default.createElement("i", { className: "fa fa-tags fa-lg fa-fw" }),
        "Tags:"
      ),
      tags.map(function (tag, index) {
        return _react2.default.createElement(Tag, { key: index, tagName: tag });
      })
    );
  };
  TagCloud.propTypes = {
    tags: _react.PropTypes.arrayOf(_react.PropTypes.string),
    className: _react.PropTypes.string,
    noTitle: _react.PropTypes.bool
  };

  TagCloud.defaultProps = {
    noTitle: false,
    className: "",
    tags: []
  };

  exports.default = TagCloud;

/***/ },
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */,
/* 49 */,
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */,
/* 57 */,
/* 58 */,
/* 59 */,
/* 60 */,
/* 61 */,
/* 62 */,
/* 63 */,
/* 64 */,
/* 65 */,
/* 66 */,
/* 67 */,
/* 68 */,
/* 69 */,
/* 70 */,
/* 71 */,
/* 72 */,
/* 73 */,
/* 74 */,
/* 75 */,
/* 76 */,
/* 77 */,
/* 78 */,
/* 79 */,
/* 80 */,
/* 81 */,
/* 82 */,
/* 83 */,
/* 84 */,
/* 85 */,
/* 86 */,
/* 87 */,
/* 88 */,
/* 89 */
/***/ function(module, exports, __webpack_require__) {

  var global    = __webpack_require__(95)
    , core      = __webpack_require__(143)
    , hide      = __webpack_require__(117)
    , redefine  = __webpack_require__(119)
    , ctx       = __webpack_require__(152)
    , PROTOTYPE = 'prototype';

  var $export = function(type, name, source){
    var IS_FORCED = type & $export.F
      , IS_GLOBAL = type & $export.G
      , IS_STATIC = type & $export.S
      , IS_PROTO  = type & $export.P
      , IS_BIND   = type & $export.B
      , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE]
      , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
      , expProto  = exports[PROTOTYPE] || (exports[PROTOTYPE] = {})
      , key, own, out, exp;
    if(IS_GLOBAL)source = name;
    for(key in source){
      // contains in native
      own = !IS_FORCED && target && target[key] !== undefined;
      // export native or passed
      out = (own ? target : source)[key];
      // bind timers to global for call from export context
      exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
      // extend global
      if(target)redefine(target, key, out, type & $export.U);
      // export
      if(exports[key] != out)hide(exports, key, exp);
      if(IS_PROTO && expProto[key] != out)expProto[key] = out;
    }
  };
  global.core = core;
  // type bitmap
  $export.F = 1;   // forced
  $export.G = 2;   // global
  $export.S = 4;   // static
  $export.P = 8;   // proto
  $export.B = 16;  // bind
  $export.W = 32;  // wrap
  $export.U = 64;  // safe
  $export.R = 128; // real proto method for `library` 
  module.exports = $export;

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  exports.__esModule = true;
  exports.createTypeAnnotationBasedOnTypeof = exports.removeTypeDuplicates = exports.createUnionTypeAnnotation = exports.valueToNode = exports.toBlock = exports.toExpression = exports.toStatement = exports.toBindingIdentifierName = exports.toIdentifier = exports.toKeyAlias = exports.toSequenceExpression = exports.toComputedKey = exports.isImmutable = exports.isScope = exports.isSpecifierDefault = exports.isVar = exports.isBlockScoped = exports.isLet = exports.isValidIdentifier = exports.isReferenced = exports.isBinding = exports.getOuterBindingIdentifiers = exports.getBindingIdentifiers = exports.TYPES = exports.react = exports.DEPRECATED_KEYS = exports.BUILDER_KEYS = exports.NODE_FIELDS = exports.ALIAS_KEYS = exports.VISITOR_KEYS = exports.NOT_LOCAL_BINDING = exports.BLOCK_SCOPED_SYMBOL = exports.INHERIT_KEYS = exports.UNARY_OPERATORS = exports.STRING_UNARY_OPERATORS = exports.NUMBER_UNARY_OPERATORS = exports.BOOLEAN_UNARY_OPERATORS = exports.BINARY_OPERATORS = exports.NUMBER_BINARY_OPERATORS = exports.BOOLEAN_BINARY_OPERATORS = exports.COMPARISON_BINARY_OPERATORS = exports.EQUALITY_BINARY_OPERATORS = exports.BOOLEAN_NUMBER_BINARY_OPERATORS = exports.UPDATE_OPERATORS = exports.LOGICAL_OPERATORS = exports.COMMENT_KEYS = exports.FOR_INIT_KEYS = exports.FLATTENABLE_KEYS = exports.STATEMENT_OR_BLOCK_KEYS = undefined;

  var _getIterator2 = __webpack_require__(93);

  var _getIterator3 = _interopRequireDefault(_getIterator2);

  var _keys = __webpack_require__(190);

  var _keys2 = _interopRequireDefault(_keys);

  var _stringify = __webpack_require__(170);

  var _stringify2 = _interopRequireDefault(_stringify);

  var _constants = __webpack_require__(289);

  Object.defineProperty(exports, "STATEMENT_OR_BLOCK_KEYS", {
    enumerable: true,
    get: function get() {
      return _constants.STATEMENT_OR_BLOCK_KEYS;
    }
  });
  Object.defineProperty(exports, "FLATTENABLE_KEYS", {
    enumerable: true,
    get: function get() {
      return _constants.FLATTENABLE_KEYS;
    }
  });
  Object.defineProperty(exports, "FOR_INIT_KEYS", {
    enumerable: true,
    get: function get() {
      return _constants.FOR_INIT_KEYS;
    }
  });
  Object.defineProperty(exports, "COMMENT_KEYS", {
    enumerable: true,
    get: function get() {
      return _constants.COMMENT_KEYS;
    }
  });
  Object.defineProperty(exports, "LOGICAL_OPERATORS", {
    enumerable: true,
    get: function get() {
      return _constants.LOGICAL_OPERATORS;
    }
  });
  Object.defineProperty(exports, "UPDATE_OPERATORS", {
    enumerable: true,
    get: function get() {
      return _constants.UPDATE_OPERATORS;
    }
  });
  Object.defineProperty(exports, "BOOLEAN_NUMBER_BINARY_OPERATORS", {
    enumerable: true,
    get: function get() {
      return _constants.BOOLEAN_NUMBER_BINARY_OPERATORS;
    }
  });
  Object.defineProperty(exports, "EQUALITY_BINARY_OPERATORS", {
    enumerable: true,
    get: function get() {
      return _constants.EQUALITY_BINARY_OPERATORS;
    }
  });
  Object.defineProperty(exports, "COMPARISON_BINARY_OPERATORS", {
    enumerable: true,
    get: function get() {
      return _constants.COMPARISON_BINARY_OPERATORS;
    }
  });
  Object.defineProperty(exports, "BOOLEAN_BINARY_OPERATORS", {
    enumerable: true,
    get: function get() {
      return _constants.BOOLEAN_BINARY_OPERATORS;
    }
  });
  Object.defineProperty(exports, "NUMBER_BINARY_OPERATORS", {
    enumerable: true,
    get: function get() {
      return _constants.NUMBER_BINARY_OPERATORS;
    }
  });
  Object.defineProperty(exports, "BINARY_OPERATORS", {
    enumerable: true,
    get: function get() {
      return _constants.BINARY_OPERATORS;
    }
  });
  Object.defineProperty(exports, "BOOLEAN_UNARY_OPERATORS", {
    enumerable: true,
    get: function get() {
      return _constants.BOOLEAN_UNARY_OPERATORS;
    }
  });
  Object.defineProperty(exports, "NUMBER_UNARY_OPERATORS", {
    enumerable: true,
    get: function get() {
      return _constants.NUMBER_UNARY_OPERATORS;
    }
  });
  Object.defineProperty(exports, "STRING_UNARY_OPERATORS", {
    enumerable: true,
    get: function get() {
      return _constants.STRING_UNARY_OPERATORS;
    }
  });
  Object.defineProperty(exports, "UNARY_OPERATORS", {
    enumerable: true,
    get: function get() {
      return _constants.UNARY_OPERATORS;
    }
  });
  Object.defineProperty(exports, "INHERIT_KEYS", {
    enumerable: true,
    get: function get() {
      return _constants.INHERIT_KEYS;
    }
  });
  Object.defineProperty(exports, "BLOCK_SCOPED_SYMBOL", {
    enumerable: true,
    get: function get() {
      return _constants.BLOCK_SCOPED_SYMBOL;
    }
  });
  Object.defineProperty(exports, "NOT_LOCAL_BINDING", {
    enumerable: true,
    get: function get() {
      return _constants.NOT_LOCAL_BINDING;
    }
  });
  exports.is = is;
  exports.isType = isType;
  exports.validate = validate;
  exports.shallowEqual = shallowEqual;
  exports.appendToMemberExpression = appendToMemberExpression;
  exports.prependToMemberExpression = prependToMemberExpression;
  exports.ensureBlock = ensureBlock;
  exports.clone = clone;
  exports.cloneWithoutLoc = cloneWithoutLoc;
  exports.cloneDeep = cloneDeep;
  exports.buildMatchMemberExpression = buildMatchMemberExpression;
  exports.removeComments = removeComments;
  exports.inheritsComments = inheritsComments;
  exports.inheritTrailingComments = inheritTrailingComments;
  exports.inheritLeadingComments = inheritLeadingComments;
  exports.inheritInnerComments = inheritInnerComments;
  exports.inherits = inherits;
  exports.assertNode = assertNode;
  exports.isNode = isNode;

  var _retrievers = __webpack_require__(392);

  Object.defineProperty(exports, "getBindingIdentifiers", {
    enumerable: true,
    get: function get() {
      return _retrievers.getBindingIdentifiers;
    }
  });
  Object.defineProperty(exports, "getOuterBindingIdentifiers", {
    enumerable: true,
    get: function get() {
      return _retrievers.getOuterBindingIdentifiers;
    }
  });

  var _validators = __webpack_require__(772);

  Object.defineProperty(exports, "isBinding", {
    enumerable: true,
    get: function get() {
      return _validators.isBinding;
    }
  });
  Object.defineProperty(exports, "isReferenced", {
    enumerable: true,
    get: function get() {
      return _validators.isReferenced;
    }
  });
  Object.defineProperty(exports, "isValidIdentifier", {
    enumerable: true,
    get: function get() {
      return _validators.isValidIdentifier;
    }
  });
  Object.defineProperty(exports, "isLet", {
    enumerable: true,
    get: function get() {
      return _validators.isLet;
    }
  });
  Object.defineProperty(exports, "isBlockScoped", {
    enumerable: true,
    get: function get() {
      return _validators.isBlockScoped;
    }
  });
  Object.defineProperty(exports, "isVar", {
    enumerable: true,
    get: function get() {
      return _validators.isVar;
    }
  });
  Object.defineProperty(exports, "isSpecifierDefault", {
    enumerable: true,
    get: function get() {
      return _validators.isSpecifierDefault;
    }
  });
  Object.defineProperty(exports, "isScope", {
    enumerable: true,
    get: function get() {
      return _validators.isScope;
    }
  });
  Object.defineProperty(exports, "isImmutable", {
    enumerable: true,
    get: function get() {
      return _validators.isImmutable;
    }
  });

  var _converters = __webpack_require__(762);

  Object.defineProperty(exports, "toComputedKey", {
    enumerable: true,
    get: function get() {
      return _converters.toComputedKey;
    }
  });
  Object.defineProperty(exports, "toSequenceExpression", {
    enumerable: true,
    get: function get() {
      return _converters.toSequenceExpression;
    }
  });
  Object.defineProperty(exports, "toKeyAlias", {
    enumerable: true,
    get: function get() {
      return _converters.toKeyAlias;
    }
  });
  Object.defineProperty(exports, "toIdentifier", {
    enumerable: true,
    get: function get() {
      return _converters.toIdentifier;
    }
  });
  Object.defineProperty(exports, "toBindingIdentifierName", {
    enumerable: true,
    get: function get() {
      return _converters.toBindingIdentifierName;
    }
  });
  Object.defineProperty(exports, "toStatement", {
    enumerable: true,
    get: function get() {
      return _converters.toStatement;
    }
  });
  Object.defineProperty(exports, "toExpression", {
    enumerable: true,
    get: function get() {
      return _converters.toExpression;
    }
  });
  Object.defineProperty(exports, "toBlock", {
    enumerable: true,
    get: function get() {
      return _converters.toBlock;
    }
  });
  Object.defineProperty(exports, "valueToNode", {
    enumerable: true,
    get: function get() {
      return _converters.valueToNode;
    }
  });

  var _flow = __webpack_require__(770);

  Object.defineProperty(exports, "createUnionTypeAnnotation", {
    enumerable: true,
    get: function get() {
      return _flow.createUnionTypeAnnotation;
    }
  });
  Object.defineProperty(exports, "removeTypeDuplicates", {
    enumerable: true,
    get: function get() {
      return _flow.removeTypeDuplicates;
    }
  });
  Object.defineProperty(exports, "createTypeAnnotationBasedOnTypeof", {
    enumerable: true,
    get: function get() {
      return _flow.createTypeAnnotationBasedOnTypeof;
    }
  });

  var _toFastProperties = __webpack_require__(1294);

  var _toFastProperties2 = _interopRequireDefault(_toFastProperties);

  var _compact = __webpack_require__(1176);

  var _compact2 = _interopRequireDefault(_compact);

  var _clone = __webpack_require__(264);

  var _clone2 = _interopRequireDefault(_clone);

  var _each = __webpack_require__(353);

  var _each2 = _interopRequireDefault(_each);

  var _uniq = __webpack_require__(1197);

  var _uniq2 = _interopRequireDefault(_uniq);

  __webpack_require__(767);

  var _definitions = __webpack_require__(158);

  var _react2 = __webpack_require__(771);

  var _react = _interopRequireWildcard(_react2);

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var t = exports;

  /**
   * Registers `is[Type]` and `assert[Type]` generated functions for a given `type`.
   * Pass `skipAliasCheck` to force it to directly compare `node.type` with `type`.
   */

  function registerType(type) {
    var is = t["is" + type];
    if (!is) {
      is = t["is" + type] = function (node, opts) {
        return t.is(type, node, opts);
      };
    }

    t["assert" + type] = function (node, opts) {
      opts = opts || {};
      if (!is(node, opts)) {
        throw new Error("Expected type " + (0, _stringify2.default)(type) + " with option " + (0, _stringify2.default)(opts));
      }
    };
  }

  //

  exports.VISITOR_KEYS = _definitions.VISITOR_KEYS;
  exports.ALIAS_KEYS = _definitions.ALIAS_KEYS;
  exports.NODE_FIELDS = _definitions.NODE_FIELDS;
  exports.BUILDER_KEYS = _definitions.BUILDER_KEYS;
  exports.DEPRECATED_KEYS = _definitions.DEPRECATED_KEYS;
  exports.react = _react;

  /**
   * Registers `is[Type]` and `assert[Type]` for all types.
   */

  for (var type in t.VISITOR_KEYS) {
    registerType(type);
  }

  /**
   * Flip `ALIAS_KEYS` for faster access in the reverse direction.
   */

  t.FLIPPED_ALIAS_KEYS = {};

  (0, _each2.default)(t.ALIAS_KEYS, function (aliases, type) {
    (0, _each2.default)(aliases, function (alias) {
      var types = t.FLIPPED_ALIAS_KEYS[alias] = t.FLIPPED_ALIAS_KEYS[alias] || [];
      types.push(type);
    });
  });

  /**
   * Registers `is[Alias]` and `assert[Alias]` functions for all aliases.
   */

  (0, _each2.default)(t.FLIPPED_ALIAS_KEYS, function (types, type) {
    t[type.toUpperCase() + "_TYPES"] = types;
    registerType(type);
  });

  var TYPES = exports.TYPES = (0, _keys2.default)(t.VISITOR_KEYS).concat((0, _keys2.default)(t.FLIPPED_ALIAS_KEYS)).concat((0, _keys2.default)(t.DEPRECATED_KEYS));

  /**
   * Returns whether `node` is of given `type`.
   *
   * For better performance, use this instead of `is[Type]` when `type` is unknown.
   * Optionally, pass `skipAliasCheck` to directly compare `node.type` with `type`.
   */

  function is(type, node, opts) {
    if (!node) return false;

    var matches = isType(node.type, type);
    if (!matches) return false;

    if (typeof opts === "undefined") {
      return true;
    } else {
      return t.shallowEqual(node, opts);
    }
  }

  /**
   * Test if a `nodeType` is a `targetType` or if `targetType` is an alias of `nodeType`.
   */

  function isType(nodeType, targetType) {
    if (nodeType === targetType) return true;

    // This is a fast-path. If the test above failed, but an alias key is found, then the
    // targetType was a primary node type, so there's no need to check the aliases.
    if (t.ALIAS_KEYS[targetType]) return false;

    var aliases = t.FLIPPED_ALIAS_KEYS[targetType];
    if (aliases) {
      if (aliases[0] === nodeType) return true;

      for (var _iterator = aliases, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var alias = _ref;

        if (nodeType === alias) return true;
      }
    }

    return false;
  }

  /**
   * Description
   */

  (0, _each2.default)(t.BUILDER_KEYS, function (keys, type) {
    function builder() {
      if (arguments.length > keys.length) {
        throw new Error("t." + type + ": Too many arguments passed. Received " + arguments.length + " but can receive " + ("no more than " + keys.length));
      }

      var node = {};
      node.type = type;

      var i = 0;

      for (var _iterator2 = keys, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var _key = _ref2;

        var field = t.NODE_FIELDS[type][_key];

        var arg = arguments[i++];
        if (arg === undefined) arg = (0, _clone2.default)(field.default);

        node[_key] = arg;
      }

      for (var key in node) {
        validate(node, key, node[key]);
      }

      return node;
    }

    t[type] = builder;
    t[type[0].toLowerCase() + type.slice(1)] = builder;
  });

  /**
   * Description
   */

  var _loop = function _loop(_type) {
    var newType = t.DEPRECATED_KEYS[_type];

    function proxy(fn) {
      return function () {
        console.trace("The node type " + _type + " has been renamed to " + newType);
        return fn.apply(this, arguments);
      };
    }

    t[_type] = t[_type[0].toLowerCase() + _type.slice(1)] = proxy(t[newType]);
    t["is" + _type] = proxy(t["is" + newType]);
    t["assert" + _type] = proxy(t["assert" + newType]);
  };

  for (var _type in t.DEPRECATED_KEYS) {
    _loop(_type);
  }

  /**
   * Description
   */

  function validate(node, key, val) {
    if (!node) return;

    var fields = t.NODE_FIELDS[node.type];
    if (!fields) return;

    var field = fields[key];
    if (!field || !field.validate) return;
    if (field.optional && val == null) return;

    field.validate(node, key, val);
  }

  /**
   * Test if an object is shallowly equal.
   */

  function shallowEqual(actual, expected) {
    var keys = (0, _keys2.default)(expected);

    for (var _iterator3 = keys, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);;) {
      var _ref3;

      if (_isArray3) {
        if (_i3 >= _iterator3.length) break;
        _ref3 = _iterator3[_i3++];
      } else {
        _i3 = _iterator3.next();
        if (_i3.done) break;
        _ref3 = _i3.value;
      }

      var key = _ref3;

      if (actual[key] !== expected[key]) {
        return false;
      }
    }

    return true;
  }

  /**
   * Append a node to a member expression.
   */

  function appendToMemberExpression(member, append, computed) {
    member.object = t.memberExpression(member.object, member.property, member.computed);
    member.property = append;
    member.computed = !!computed;
    return member;
  }

  /**
   * Prepend a node to a member expression.
   */

  function prependToMemberExpression(member, prepend) {
    member.object = t.memberExpression(prepend, member.object);
    return member;
  }

  /**
   * Ensure the `key` (defaults to "body") of a `node` is a block.
   * Casting it to a block if it is not.
   */

  function ensureBlock(node) {
    var key = arguments.length <= 1 || arguments[1] === undefined ? "body" : arguments[1];

    return node[key] = t.toBlock(node[key], node);
  }

  /**
   * Create a shallow clone of a `node` excluding `_private` properties.
   */

  function clone(node) {
    var newNode = {};
    for (var key in node) {
      if (key[0] === "_") continue;
      newNode[key] = node[key];
    }
    return newNode;
  }

  /**
   * Create a shallow clone of a `node` excluding `_private` and location properties.
   */

  function cloneWithoutLoc(node) {
    var newNode = clone(node);
    delete newNode.loc;
    return newNode;
  }

  /**
   * Create a deep clone of a `node` and all of it's child nodes
   * exluding `_private` properties.
   */

  function cloneDeep(node) {
    var newNode = {};

    for (var key in node) {
      if (key[0] === "_") continue;

      var val = node[key];

      if (val) {
        if (val.type) {
          val = t.cloneDeep(val);
        } else if (Array.isArray(val)) {
          val = val.map(t.cloneDeep);
        }
      }

      newNode[key] = val;
    }

    return newNode;
  }

  /**
   * Build a function that when called will return whether or not the
   * input `node` `MemberExpression` matches the input `match`.
   *
   * For example, given the match `React.createClass` it would match the
   * parsed nodes of `React.createClass` and `React["createClass"]`.
   */

  function buildMatchMemberExpression(match, allowPartial) {
    var parts = match.split(".");

    return function (member) {
      // not a member expression
      if (!t.isMemberExpression(member)) return false;

      var search = [member];
      var i = 0;

      while (search.length) {
        var node = search.shift();

        if (allowPartial && i === parts.length) {
          return true;
        }

        if (t.isIdentifier(node)) {
          // this part doesn't match
          if (parts[i] !== node.name) return false;
        } else if (t.isStringLiteral(node)) {
          // this part doesn't match
          if (parts[i] !== node.value) return false;
        } else if (t.isMemberExpression(node)) {
          if (node.computed && !t.isStringLiteral(node.property)) {
            // we can't deal with this
            return false;
          } else {
            search.push(node.object);
            search.push(node.property);
            continue;
          }
        } else {
          // we can't deal with this
          return false;
        }

        // too many parts
        if (++i > parts.length) {
          return false;
        }
      }

      return true;
    };
  }

  /**
   * Remove comment properties from a node.
   */

  function removeComments(node) {
    for (var _iterator4 = t.COMMENT_KEYS, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4);;) {
      var _ref4;

      if (_isArray4) {
        if (_i4 >= _iterator4.length) break;
        _ref4 = _iterator4[_i4++];
      } else {
        _i4 = _iterator4.next();
        if (_i4.done) break;
        _ref4 = _i4.value;
      }

      var key = _ref4;

      delete node[key];
    }
    return node;
  }

  /**
   * Inherit all unique comments from `parent` node to `child` node.
   */

  function inheritsComments(child, parent) {
    inheritTrailingComments(child, parent);
    inheritLeadingComments(child, parent);
    inheritInnerComments(child, parent);
    return child;
  }

  function inheritTrailingComments(child, parent) {
    _inheritComments("trailingComments", child, parent);
  }

  function inheritLeadingComments(child, parent) {
    _inheritComments("leadingComments", child, parent);
  }

  function inheritInnerComments(child, parent) {
    _inheritComments("innerComments", child, parent);
  }

  function _inheritComments(key, child, parent) {
    if (child && parent) {
      child[key] = (0, _uniq2.default)((0, _compact2.default)([].concat(child[key], parent[key])));
    }
  }

  // Can't use import because of cyclic dependency between babel-traverse
  // and this module (babel-types). This require needs to appear after
  // we export the TYPES constant, so we lazy-initialize it before use.
  var traverse = void 0;

  /**
   * Inherit all contextual properties from `parent` node to `child` node.
   */

  function inherits(child, parent) {
    if (!traverse) traverse = __webpack_require__(128).default;

    if (!child || !parent) return child;

    // optionally inherit specific properties if not null
    for (var _iterator5 = t.INHERIT_KEYS.optional, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : (0, _getIterator3.default)(_iterator5);;) {
      var _ref5;

      if (_isArray5) {
        if (_i5 >= _iterator5.length) break;
        _ref5 = _iterator5[_i5++];
      } else {
        _i5 = _iterator5.next();
        if (_i5.done) break;
        _ref5 = _i5.value;
      }

      var _key2 = _ref5;

      if (child[_key2] == null) {
        child[_key2] = parent[_key2];
      }
    }

    // force inherit "private" properties
    for (var key in parent) {
      if (key[0] === "_") child[key] = parent[key];
    }

    // force inherit select properties
    for (var _iterator6 = t.INHERIT_KEYS.force, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : (0, _getIterator3.default)(_iterator6);;) {
      var _ref6;

      if (_isArray6) {
        if (_i6 >= _iterator6.length) break;
        _ref6 = _iterator6[_i6++];
      } else {
        _i6 = _iterator6.next();
        if (_i6.done) break;
        _ref6 = _i6.value;
      }

      var _key3 = _ref6;

      child[_key3] = parent[_key3];
    }

    t.inheritsComments(child, parent);
    traverse.copyCache(parent, child);

    return child;
  }

  /**
   * TODO
   */

  function assertNode(node) {
    if (!isNode(node)) {
      // $FlowFixMe
      throw new TypeError("Not a valid node " + (node && node.type));
    }
  }

  /**
   * TODO
   */

  function isNode(node) {
    return !!(node && _definitions.VISITOR_KEYS[node.type]);
  }

  // Optimize property access.
  (0, _toFastProperties2.default)(t);
  (0, _toFastProperties2.default)(t.VISITOR_KEYS);

  //

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   */

  'use strict';

  /**
   * Use invariant() to assert state which your program assumes to be true.
   *
   * Provide sprintf-style format (only %s is supported) and arguments
   * to provide information about what broke and what you were
   * expecting.
   *
   * The invariant message will be stripped in production, but the invariant
   * will remain to ensure logic does not differ in production.
   */

  function invariant(condition, format, a, b, c, d, e, f) {
    if (true) {
      if (format === undefined) {
        throw new Error('invariant requires an error message argument');
      }
    }

    if (!condition) {
      var error;
      if (format === undefined) {
        error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1; // we don't care about invariant's own frame
      throw error;
    }
  }

  module.exports = invariant;

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

  var isObject = __webpack_require__(98);
  module.exports = function(it){
    if(!isObject(it))throw TypeError(it + ' is not an object!');
    return it;
  };

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = { "default": __webpack_require__(797), __esModule: true };

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2014-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   */

  'use strict';

  var emptyFunction = __webpack_require__(124);

  /**
   * Similar to invariant but only logs a warning if the condition is not met.
   * This can be used to log issues in development environments in critical
   * paths. Removing the logging code for production environments will keep the
   * same logic and follow the same code paths.
   */

  var warning = emptyFunction;

  if (true) {
    warning = function warning(condition, format) {
      for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      if (format === undefined) {
        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
      }

      if (format.indexOf('Failed Composite propType: ') === 0) {
        return; // Ignore CompositeComponent proptype check.
      }

      if (!condition) {
        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function () {
          return args[argIndex++];
        });
        if (typeof console !== 'undefined') {
          console.error(message);
        }
        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      }
    };
  }

  module.exports = warning;

/***/ },
/* 95 */
/***/ function(module, exports) {

  // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
  var global = module.exports = typeof window != 'undefined' && window.Math == Math
    ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
  if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 96 */
/***/ function(module, exports) {

  module.exports = function(exec){
    try {
      return !!exec();
    } catch(e){
      return true;
    }
  };

/***/ },
/* 97 */
/***/ function(module, exports) {

  "use strict";

  exports.__esModule = true;

  exports.default = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

/***/ },
/* 98 */
/***/ function(module, exports) {

  module.exports = function(it){
    return typeof it === 'object' ? it !== null : typeof it === 'function';
  };

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

  var store      = __webpack_require__(247)('wks')
    , uid        = __webpack_require__(184)
    , Symbol     = __webpack_require__(95).Symbol
    , USE_SYMBOL = typeof Symbol == 'function';

  var $exports = module.exports = function(name){
    return store[name] || (store[name] =
      USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
  };

  $exports.store = store;

/***/ },
/* 100 */
/***/ function(module, exports) {

  'use strict';
  /* eslint-disable no-unused-vars */
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var propIsEnumerable = Object.prototype.propertyIsEnumerable;

  function toObject(val) {
  	if (val === null || val === undefined) {
  		throw new TypeError('Object.assign cannot be called with null or undefined');
  	}

  	return Object(val);
  }

  function shouldUseNative() {
  	try {
  		if (!Object.assign) {
  			return false;
  		}

  		// Detect buggy property enumeration order in older V8 versions.

  		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
  		var test1 = new String('abc');  // eslint-disable-line
  		test1[5] = 'de';
  		if (Object.getOwnPropertyNames(test1)[0] === '5') {
  			return false;
  		}

  		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
  		var test2 = {};
  		for (var i = 0; i < 10; i++) {
  			test2['_' + String.fromCharCode(i)] = i;
  		}
  		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
  			return test2[n];
  		});
  		if (order2.join('') !== '0123456789') {
  			return false;
  		}

  		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
  		var test3 = {};
  		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
  			test3[letter] = letter;
  		});
  		if (Object.keys(Object.assign({}, test3)).join('') !==
  				'abcdefghijklmnopqrst') {
  			return false;
  		}

  		return true;
  	} catch (e) {
  		// We don't expect any of the above to throw, but better to be safe.
  		return false;
  	}
  }

  module.exports = shouldUseNative() ? Object.assign : function (target, source) {
  	var from;
  	var to = toObject(target);
  	var symbols;

  	for (var s = 1; s < arguments.length; s++) {
  		from = Object(arguments[s]);

  		for (var key in from) {
  			if (hasOwnProperty.call(from, key)) {
  				to[key] = from[key];
  			}
  		}

  		if (Object.getOwnPropertySymbols) {
  			symbols = Object.getOwnPropertySymbols(from);
  			for (var i = 0; i < symbols.length; i++) {
  				if (propIsEnumerable.call(from, symbols[i])) {
  					to[symbols[i]] = from[symbols[i]];
  				}
  			}
  		}
  	}

  	return to;
  };


/***/ },
/* 101 */,
/* 102 */,
/* 103 */,
/* 104 */,
/* 105 */,
/* 106 */
/***/ function(module, exports, __webpack_require__) {

  // Thank's IE8 for his funny defineProperty
  module.exports = !__webpack_require__(96)(function(){
    return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
  });

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

  var anObject       = __webpack_require__(92)
    , IE8_DOM_DEFINE = __webpack_require__(415)
    , toPrimitive    = __webpack_require__(145)
    , dP             = Object.defineProperty;

  exports.f = __webpack_require__(106) ? Object.defineProperty : function defineProperty(O, P, Attributes){
    anObject(O);
    P = toPrimitive(P, true);
    anObject(Attributes);
    if(IE8_DOM_DEFINE)try {
      return dP(O, P, Attributes);
    } catch(e){ /* empty */ }
    if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
    if('value' in Attributes)O[P] = Attributes.value;
    return O;
  };

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMComponentTree
   */

  'use strict';

  var DOMProperty = __webpack_require__(187);
  var ReactDOMComponentFlags = __webpack_require__(493);

  var invariant = __webpack_require__(91);

  var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
  var Flags = ReactDOMComponentFlags;

  var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);

  /**
   * Drill down (through composites and empty components) until we get a native or
   * native text component.
   *
   * This is pretty polymorphic but unavoidable with the current structure we have
   * for `_renderedChildren`.
   */
  function getRenderedNativeOrTextFromComponent(component) {
    var rendered;
    while (rendered = component._renderedComponent) {
      component = rendered;
    }
    return component;
  }

  /**
   * Populate `_nativeNode` on the rendered native/text component with the given
   * DOM node. The passed `inst` can be a composite.
   */
  function precacheNode(inst, node) {
    var nativeInst = getRenderedNativeOrTextFromComponent(inst);
    nativeInst._nativeNode = node;
    node[internalInstanceKey] = nativeInst;
  }

  function uncacheNode(inst) {
    var node = inst._nativeNode;
    if (node) {
      delete node[internalInstanceKey];
      inst._nativeNode = null;
    }
  }

  /**
   * Populate `_nativeNode` on each child of `inst`, assuming that the children
   * match up with the DOM (element) children of `node`.
   *
   * We cache entire levels at once to avoid an n^2 problem where we access the
   * children of a node sequentially and have to walk from the start to our target
   * node every time.
   *
   * Since we update `_renderedChildren` and the actual DOM at (slightly)
   * different times, we could race here and see a newer `_renderedChildren` than
   * the DOM nodes we see. To avoid this, ReactMultiChild calls
   * `prepareToManageChildren` before we change `_renderedChildren`, at which
   * time the container's child nodes are always cached (until it unmounts).
   */
  function precacheChildNodes(inst, node) {
    if (inst._flags & Flags.hasCachedChildNodes) {
      return;
    }
    var children = inst._renderedChildren;
    var childNode = node.firstChild;
    outer: for (var name in children) {
      if (!children.hasOwnProperty(name)) {
        continue;
      }
      var childInst = children[name];
      var childID = getRenderedNativeOrTextFromComponent(childInst)._domID;
      if (childID == null) {
        // We're currently unmounting this child in ReactMultiChild; skip it.
        continue;
      }
      // We assume the child nodes are in the same order as the child instances.
      for (; childNode !== null; childNode = childNode.nextSibling) {
        if (childNode.nodeType === 1 && childNode.getAttribute(ATTR_NAME) === String(childID) || childNode.nodeType === 8 && childNode.nodeValue === ' react-text: ' + childID + ' ' || childNode.nodeType === 8 && childNode.nodeValue === ' react-empty: ' + childID + ' ') {
          precacheNode(childInst, childNode);
          continue outer;
        }
      }
      // We reached the end of the DOM children without finding an ID match.
       true ?  true ? invariant(false, 'Unable to find element with ID %s.', childID) : invariant(false) : void 0;
    }
    inst._flags |= Flags.hasCachedChildNodes;
  }

  /**
   * Given a DOM node, return the closest ReactDOMComponent or
   * ReactDOMTextComponent instance ancestor.
   */
  function getClosestInstanceFromNode(node) {
    if (node[internalInstanceKey]) {
      return node[internalInstanceKey];
    }

    // Walk up the tree until we find an ancestor whose instance we have cached.
    var parents = [];
    while (!node[internalInstanceKey]) {
      parents.push(node);
      if (node.parentNode) {
        node = node.parentNode;
      } else {
        // Top of the tree. This node must not be part of a React tree (or is
        // unmounted, potentially).
        return null;
      }
    }

    var closest;
    var inst;
    for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
      closest = inst;
      if (parents.length) {
        precacheChildNodes(inst, node);
      }
    }

    return closest;
  }

  /**
   * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
   * instance, or null if the node was not rendered by this React.
   */
  function getInstanceFromNode(node) {
    var inst = getClosestInstanceFromNode(node);
    if (inst != null && inst._nativeNode === node) {
      return inst;
    } else {
      return null;
    }
  }

  /**
   * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
   * DOM node.
   */
  function getNodeFromInstance(inst) {
    // Without this first invariant, passing a non-DOM-component triggers the next
    // invariant for a missing parent, which is super confusing.
    !(inst._nativeNode !== undefined) ?  true ? invariant(false, 'getNodeFromInstance: Invalid argument.') : invariant(false) : void 0;

    if (inst._nativeNode) {
      return inst._nativeNode;
    }

    // Walk up the tree until we find an ancestor whose DOM node we have cached.
    var parents = [];
    while (!inst._nativeNode) {
      parents.push(inst);
      !inst._nativeParent ?  true ? invariant(false, 'React DOM tree root should always have a node reference.') : invariant(false) : void 0;
      inst = inst._nativeParent;
    }

    // Now parents contains each ancestor that does *not* have a cached native
    // node, and `inst` is the deepest ancestor that does.
    for (; parents.length; inst = parents.pop()) {
      precacheChildNodes(inst, inst._nativeNode);
    }

    return inst._nativeNode;
  }

  var ReactDOMComponentTree = {
    getClosestInstanceFromNode: getClosestInstanceFromNode,
    getInstanceFromNode: getInstanceFromNode,
    getNodeFromInstance: getNodeFromInstance,
    precacheChildNodes: precacheChildNodes,
    precacheNode: precacheNode,
    uncacheNode: uncacheNode
  };

  module.exports = ReactDOMComponentTree;

/***/ },
/* 109 */
/***/ function(module, exports) {

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   */

  'use strict';

  var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

  /**
   * Simple, lightweight module assisting with the detection and context of
   * Worker. Helps avoid circular dependencies and allows code to reason about
   * whether or not they are in a Worker, even if they never include the main
   * `ReactWorker` dependency.
   */
  var ExecutionEnvironment = {

    canUseDOM: canUseDOM,

    canUseWorkers: typeof Worker !== 'undefined',

    canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

    canUseViewport: canUseDOM && !!window.screen,

    isInWorker: !canUseDOM // For now, this is true - might change in the future.

  };

  module.exports = ExecutionEnvironment;

/***/ },
/* 110 */
/***/ function(module, exports) {

  var core = module.exports = {version: '2.4.0'};
  if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 111 */
/***/ function(module, exports) {

  // shim for using process in browser

  var process = module.exports = {};
  var queue = [];
  var draining = false;
  var currentQueue;
  var queueIndex = -1;

  function cleanUpNextTick() {
      if (!draining || !currentQueue) {
          return;
      }
      draining = false;
      if (currentQueue.length) {
          queue = currentQueue.concat(queue);
      } else {
          queueIndex = -1;
      }
      if (queue.length) {
          drainQueue();
      }
  }

  function drainQueue() {
      if (draining) {
          return;
      }
      var timeout = setTimeout(cleanUpNextTick);
      draining = true;

      var len = queue.length;
      while(len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
              if (currentQueue) {
                  currentQueue[queueIndex].run();
              }
          }
          queueIndex = -1;
          len = queue.length;
      }
      currentQueue = null;
      draining = false;
      clearTimeout(timeout);
  }

  process.nextTick = function (fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
          }
      }
      queue.push(new Item(fun, args));
      if (queue.length === 1 && !draining) {
          setTimeout(drainQueue, 0);
      }
  };

  // v8 likes predictible objects
  function Item(fun, array) {
      this.fun = fun;
      this.array = array;
  }
  Item.prototype.run = function () {
      this.fun.apply(null, this.array);
  };
  process.title = 'browser';
  process.browser = true;
  process.env = {};
  process.argv = [];
  process.version = ''; // empty string to avoid regexp issues
  process.versions = {};

  function noop() {}

  process.on = noop;
  process.addListener = noop;
  process.once = noop;
  process.off = noop;
  process.removeListener = noop;
  process.removeAllListeners = noop;
  process.emit = noop;

  process.binding = function (name) {
      throw new Error('process.binding is not supported');
  };

  process.cwd = function () { return '/' };
  process.chdir = function (dir) {
      throw new Error('process.chdir is not supported');
  };
  process.umask = function() { return 0; };


/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

  // 7.1.15 ToLength
  var toInteger = __webpack_require__(162)
    , min       = Math.min;
  module.exports = function(it){
    return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
  };

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

  // 7.1.13 ToObject(argument)
  var defined = __webpack_require__(131);
  module.exports = function(it){
    return Object(defined(it));
  };

/***/ },
/* 114 */
/***/ function(module, exports) {

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @type {Function}
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified,
   *  else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray = Array.isArray;

  module.exports = isArray;


/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer, global) {/*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
   * @license  MIT
   */
  /* eslint-disable no-proto */

  'use strict'

  var base64 = __webpack_require__(1297)
  var ieee754 = __webpack_require__(450)
  var isArray = __webpack_require__(451)

  exports.Buffer = Buffer
  exports.SlowBuffer = SlowBuffer
  exports.INSPECT_MAX_BYTES = 50
  Buffer.poolSize = 8192 // not used by this implementation

  var rootParent = {}

  /**
   * If `Buffer.TYPED_ARRAY_SUPPORT`:
   *   === true    Use Uint8Array implementation (fastest)
   *   === false   Use Object implementation (most compatible, even IE6)
   *
   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
   * Opera 11.6+, iOS 4.2+.
   *
   * Due to various browser bugs, sometimes the Object implementation will be used even
   * when the browser supports typed arrays.
   *
   * Note:
   *
   *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
   *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
   *
   *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property
   *     on objects.
   *
   *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
   *
   *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
   *     incorrect length in some situations.

   * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
   * get the Object implementation, which is slower but behaves correctly.
   */
  Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
    ? global.TYPED_ARRAY_SUPPORT
    : typedArraySupport()

  function typedArraySupport () {
    function Bar () {}
    try {
      var arr = new Uint8Array(1)
      arr.foo = function () { return 42 }
      arr.constructor = Bar
      return arr.foo() === 42 && // typed array instances can be augmented
          arr.constructor === Bar && // constructor can be set
          typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
          arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
    } catch (e) {
      return false
    }
  }

  function kMaxLength () {
    return Buffer.TYPED_ARRAY_SUPPORT
      ? 0x7fffffff
      : 0x3fffffff
  }

  /**
   * Class: Buffer
   * =============
   *
   * The Buffer constructor returns instances of `Uint8Array` that are augmented
   * with function properties for all the node `Buffer` API functions. We use
   * `Uint8Array` so that square bracket notation works as expected -- it returns
   * a single octet.
   *
   * By augmenting the instances, we can avoid modifying the `Uint8Array`
   * prototype.
   */
  function Buffer (arg) {
    if (!(this instanceof Buffer)) {
      // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
      if (arguments.length > 1) return new Buffer(arg, arguments[1])
      return new Buffer(arg)
    }

    if (!Buffer.TYPED_ARRAY_SUPPORT) {
      this.length = 0
      this.parent = undefined
    }

    // Common case.
    if (typeof arg === 'number') {
      return fromNumber(this, arg)
    }

    // Slightly less common case.
    if (typeof arg === 'string') {
      return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
    }

    // Unusual.
    return fromObject(this, arg)
  }

  function fromNumber (that, length) {
    that = allocate(that, length < 0 ? 0 : checked(length) | 0)
    if (!Buffer.TYPED_ARRAY_SUPPORT) {
      for (var i = 0; i < length; i++) {
        that[i] = 0
      }
    }
    return that
  }

  function fromString (that, string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

    // Assumption: byteLength() return value is always < kMaxLength.
    var length = byteLength(string, encoding) | 0
    that = allocate(that, length)

    that.write(string, encoding)
    return that
  }

  function fromObject (that, object) {
    if (Buffer.isBuffer(object)) return fromBuffer(that, object)

    if (isArray(object)) return fromArray(that, object)

    if (object == null) {
      throw new TypeError('must start with number, buffer, array or string')
    }

    if (typeof ArrayBuffer !== 'undefined') {
      if (object.buffer instanceof ArrayBuffer) {
        return fromTypedArray(that, object)
      }
      if (object instanceof ArrayBuffer) {
        return fromArrayBuffer(that, object)
      }
    }

    if (object.length) return fromArrayLike(that, object)

    return fromJsonObject(that, object)
  }

  function fromBuffer (that, buffer) {
    var length = checked(buffer.length) | 0
    that = allocate(that, length)
    buffer.copy(that, 0, 0, length)
    return that
  }

  function fromArray (that, array) {
    var length = checked(array.length) | 0
    that = allocate(that, length)
    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255
    }
    return that
  }

  // Duplicate of fromArray() to keep fromArray() monomorphic.
  function fromTypedArray (that, array) {
    var length = checked(array.length) | 0
    that = allocate(that, length)
    // Truncating the elements is probably not what people expect from typed
    // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
    // of the old Buffer constructor.
    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255
    }
    return that
  }

  function fromArrayBuffer (that, array) {
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      array.byteLength
      that = Buffer._augment(new Uint8Array(array))
    } else {
      // Fallback: Return an object instance of the Buffer class
      that = fromTypedArray(that, new Uint8Array(array))
    }
    return that
  }

  function fromArrayLike (that, array) {
    var length = checked(array.length) | 0
    that = allocate(that, length)
    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255
    }
    return that
  }

  // Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
  // Returns a zero-length buffer for inputs that don't conform to the spec.
  function fromJsonObject (that, object) {
    var array
    var length = 0

    if (object.type === 'Buffer' && isArray(object.data)) {
      array = object.data
      length = checked(array.length) | 0
    }
    that = allocate(that, length)

    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255
    }
    return that
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    Buffer.prototype.__proto__ = Uint8Array.prototype
    Buffer.__proto__ = Uint8Array
  } else {
    // pre-set for values that may exist in the future
    Buffer.prototype.length = undefined
    Buffer.prototype.parent = undefined
  }

  function allocate (that, length) {
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = Buffer._augment(new Uint8Array(length))
      that.__proto__ = Buffer.prototype
    } else {
      // Fallback: Return an object instance of the Buffer class
      that.length = length
      that._isBuffer = true
    }

    var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
    if (fromPool) that.parent = rootParent

    return that
  }

  function checked (length) {
    // Note: cannot use `length < kMaxLength` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= kMaxLength()) {
      throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                           'size: 0x' + kMaxLength().toString(16) + ' bytes')
    }
    return length | 0
  }

  function SlowBuffer (subject, encoding) {
    if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

    var buf = new Buffer(subject, encoding)
    delete buf.parent
    return buf
  }

  Buffer.isBuffer = function isBuffer (b) {
    return !!(b != null && b._isBuffer)
  }

  Buffer.compare = function compare (a, b) {
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
      throw new TypeError('Arguments must be Buffers')
    }

    if (a === b) return 0

    var x = a.length
    var y = b.length

    var i = 0
    var len = Math.min(x, y)
    while (i < len) {
      if (a[i] !== b[i]) break

      ++i
    }

    if (i !== len) {
      x = a[i]
      y = b[i]
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  }

  Buffer.isEncoding = function isEncoding (encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'binary':
      case 'base64':
      case 'raw':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true
      default:
        return false
    }
  }

  Buffer.concat = function concat (list, length) {
    if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

    if (list.length === 0) {
      return new Buffer(0)
    }

    var i
    if (length === undefined) {
      length = 0
      for (i = 0; i < list.length; i++) {
        length += list[i].length
      }
    }

    var buf = new Buffer(length)
    var pos = 0
    for (i = 0; i < list.length; i++) {
      var item = list[i]
      item.copy(buf, pos)
      pos += item.length
    }
    return buf
  }

  function byteLength (string, encoding) {
    if (typeof string !== 'string') string = '' + string

    var len = string.length
    if (len === 0) return 0

    // Use a for loop to avoid recursion
    var loweredCase = false
    for (;;) {
      switch (encoding) {
        case 'ascii':
        case 'binary':
        // Deprecated
        case 'raw':
        case 'raws':
          return len
        case 'utf8':
        case 'utf-8':
          return utf8ToBytes(string).length
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2
        case 'hex':
          return len >>> 1
        case 'base64':
          return base64ToBytes(string).length
        default:
          if (loweredCase) return utf8ToBytes(string).length // assume utf8
          encoding = ('' + encoding).toLowerCase()
          loweredCase = true
      }
    }
  }
  Buffer.byteLength = byteLength

  function slowToString (encoding, start, end) {
    var loweredCase = false

    start = start | 0
    end = end === undefined || end === Infinity ? this.length : end | 0

    if (!encoding) encoding = 'utf8'
    if (start < 0) start = 0
    if (end > this.length) end = this.length
    if (end <= start) return ''

    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this, start, end)

        case 'utf8':
        case 'utf-8':
          return utf8Slice(this, start, end)

        case 'ascii':
          return asciiSlice(this, start, end)

        case 'binary':
          return binarySlice(this, start, end)

        case 'base64':
          return base64Slice(this, start, end)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this, start, end)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = (encoding + '').toLowerCase()
          loweredCase = true
      }
    }
  }

  Buffer.prototype.toString = function toString () {
    var length = this.length | 0
    if (length === 0) return ''
    if (arguments.length === 0) return utf8Slice(this, 0, length)
    return slowToString.apply(this, arguments)
  }

  Buffer.prototype.equals = function equals (b) {
    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
    if (this === b) return true
    return Buffer.compare(this, b) === 0
  }

  Buffer.prototype.inspect = function inspect () {
    var str = ''
    var max = exports.INSPECT_MAX_BYTES
    if (this.length > 0) {
      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
      if (this.length > max) str += ' ... '
    }
    return '<Buffer ' + str + '>'
  }

  Buffer.prototype.compare = function compare (b) {
    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
    if (this === b) return 0
    return Buffer.compare(this, b)
  }

  Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
    if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
    else if (byteOffset < -0x80000000) byteOffset = -0x80000000
    byteOffset >>= 0

    if (this.length === 0) return -1
    if (byteOffset >= this.length) return -1

    // Negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

    if (typeof val === 'string') {
      if (val.length === 0) return -1 // special case: looking for empty string always fails
      return String.prototype.indexOf.call(this, val, byteOffset)
    }
    if (Buffer.isBuffer(val)) {
      return arrayIndexOf(this, val, byteOffset)
    }
    if (typeof val === 'number') {
      if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
        return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
      }
      return arrayIndexOf(this, [ val ], byteOffset)
    }

    function arrayIndexOf (arr, val, byteOffset) {
      var foundIndex = -1
      for (var i = 0; byteOffset + i < arr.length; i++) {
        if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
          if (foundIndex === -1) foundIndex = i
          if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
        } else {
          foundIndex = -1
        }
      }
      return -1
    }

    throw new TypeError('val must be string, number or Buffer')
  }

  // `get` is deprecated
  Buffer.prototype.get = function get (offset) {
    console.log('.get() is deprecated. Access using array indexes instead.')
    return this.readUInt8(offset)
  }

  // `set` is deprecated
  Buffer.prototype.set = function set (v, offset) {
    console.log('.set() is deprecated. Access using array indexes instead.')
    return this.writeUInt8(v, offset)
  }

  function hexWrite (buf, string, offset, length) {
    offset = Number(offset) || 0
    var remaining = buf.length - offset
    if (!length) {
      length = remaining
    } else {
      length = Number(length)
      if (length > remaining) {
        length = remaining
      }
    }

    // must be an even number of digits
    var strLen = string.length
    if (strLen % 2 !== 0) throw new Error('Invalid hex string')

    if (length > strLen / 2) {
      length = strLen / 2
    }
    for (var i = 0; i < length; i++) {
      var parsed = parseInt(string.substr(i * 2, 2), 16)
      if (isNaN(parsed)) throw new Error('Invalid hex string')
      buf[offset + i] = parsed
    }
    return i
  }

  function utf8Write (buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
  }

  function asciiWrite (buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length)
  }

  function binaryWrite (buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length)
  }

  function base64Write (buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length)
  }

  function ucs2Write (buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
  }

  Buffer.prototype.write = function write (string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
      encoding = 'utf8'
      length = this.length
      offset = 0
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset
      length = this.length
      offset = 0
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
      offset = offset | 0
      if (isFinite(length)) {
        length = length | 0
        if (encoding === undefined) encoding = 'utf8'
      } else {
        encoding = length
        length = undefined
      }
    // legacy write(string, encoding, offset, length) - remove in v0.13
    } else {
      var swap = encoding
      encoding = offset
      offset = length | 0
      length = swap
    }

    var remaining = this.length - offset
    if (length === undefined || length > remaining) length = remaining

    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
      throw new RangeError('attempt to write outside buffer bounds')
    }

    if (!encoding) encoding = 'utf8'

    var loweredCase = false
    for (;;) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this, string, offset, length)

        case 'utf8':
        case 'utf-8':
          return utf8Write(this, string, offset, length)

        case 'ascii':
          return asciiWrite(this, string, offset, length)

        case 'binary':
          return binaryWrite(this, string, offset, length)

        case 'base64':
          // Warning: maxLength not taken into account in base64Write
          return base64Write(this, string, offset, length)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this, string, offset, length)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = ('' + encoding).toLowerCase()
          loweredCase = true
      }
    }
  }

  Buffer.prototype.toJSON = function toJSON () {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    }
  }

  function base64Slice (buf, start, end) {
    if (start === 0 && end === buf.length) {
      return base64.fromByteArray(buf)
    } else {
      return base64.fromByteArray(buf.slice(start, end))
    }
  }

  function utf8Slice (buf, start, end) {
    end = Math.min(buf.length, end)
    var res = []

    var i = start
    while (i < end) {
      var firstByte = buf[i]
      var codePoint = null
      var bytesPerSequence = (firstByte > 0xEF) ? 4
        : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
        : 1

      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint

        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte
            }
            break
          case 2:
            secondByte = buf[i + 1]
            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint
              }
            }
            break
          case 3:
            secondByte = buf[i + 1]
            thirdByte = buf[i + 2]
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint
              }
            }
            break
          case 4:
            secondByte = buf[i + 1]
            thirdByte = buf[i + 2]
            fourthByte = buf[i + 3]
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint
              }
            }
        }
      }

      if (codePoint === null) {
        // we did not generate a valid codePoint so insert a
        // replacement char (U+FFFD) and advance only 1 byte
        codePoint = 0xFFFD
        bytesPerSequence = 1
      } else if (codePoint > 0xFFFF) {
        // encode to utf16 (surrogate pair dance)
        codePoint -= 0x10000
        res.push(codePoint >>> 10 & 0x3FF | 0xD800)
        codePoint = 0xDC00 | codePoint & 0x3FF
      }

      res.push(codePoint)
      i += bytesPerSequence
    }

    return decodeCodePointsArray(res)
  }

  // Based on http://stackoverflow.com/a/22747272/680742, the browser with
  // the lowest limit is Chrome, with 0x10000 args.
  // We go 1 magnitude less, for safety
  var MAX_ARGUMENTS_LENGTH = 0x1000

  function decodeCodePointsArray (codePoints) {
    var len = codePoints.length
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    }

    // Decode in chunks to avoid "call stack size exceeded".
    var res = ''
    var i = 0
    while (i < len) {
      res += String.fromCharCode.apply(
        String,
        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
      )
    }
    return res
  }

  function asciiSlice (buf, start, end) {
    var ret = ''
    end = Math.min(buf.length, end)

    for (var i = start; i < end; i++) {
      ret += String.fromCharCode(buf[i] & 0x7F)
    }
    return ret
  }

  function binarySlice (buf, start, end) {
    var ret = ''
    end = Math.min(buf.length, end)

    for (var i = start; i < end; i++) {
      ret += String.fromCharCode(buf[i])
    }
    return ret
  }

  function hexSlice (buf, start, end) {
    var len = buf.length

    if (!start || start < 0) start = 0
    if (!end || end < 0 || end > len) end = len

    var out = ''
    for (var i = start; i < end; i++) {
      out += toHex(buf[i])
    }
    return out
  }

  function utf16leSlice (buf, start, end) {
    var bytes = buf.slice(start, end)
    var res = ''
    for (var i = 0; i < bytes.length; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
    }
    return res
  }

  Buffer.prototype.slice = function slice (start, end) {
    var len = this.length
    start = ~~start
    end = end === undefined ? len : ~~end

    if (start < 0) {
      start += len
      if (start < 0) start = 0
    } else if (start > len) {
      start = len
    }

    if (end < 0) {
      end += len
      if (end < 0) end = 0
    } else if (end > len) {
      end = len
    }

    if (end < start) end = start

    var newBuf
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      newBuf = Buffer._augment(this.subarray(start, end))
    } else {
      var sliceLen = end - start
      newBuf = new Buffer(sliceLen, undefined)
      for (var i = 0; i < sliceLen; i++) {
        newBuf[i] = this[i + start]
      }
    }

    if (newBuf.length) newBuf.parent = this.parent || this

    return newBuf
  }

  /*
   * Need to make sure that buffer isn't trying to write out of bounds.
   */
  function checkOffset (offset, ext, length) {
    if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
  }

  Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
    offset = offset | 0
    byteLength = byteLength | 0
    if (!noAssert) checkOffset(offset, byteLength, this.length)

    var val = this[offset]
    var mul = 1
    var i = 0
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul
    }

    return val
  }

  Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
    offset = offset | 0
    byteLength = byteLength | 0
    if (!noAssert) {
      checkOffset(offset, byteLength, this.length)
    }

    var val = this[offset + --byteLength]
    var mul = 1
    while (byteLength > 0 && (mul *= 0x100)) {
      val += this[offset + --byteLength] * mul
    }

    return val
  }

  Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length)
    return this[offset]
  }

  Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length)
    return this[offset] | (this[offset + 1] << 8)
  }

  Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length)
    return (this[offset] << 8) | this[offset + 1]
  }

  Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length)

    return ((this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16)) +
        (this[offset + 3] * 0x1000000)
  }

  Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length)

    return (this[offset] * 0x1000000) +
      ((this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      this[offset + 3])
  }

  Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
    offset = offset | 0
    byteLength = byteLength | 0
    if (!noAssert) checkOffset(offset, byteLength, this.length)

    var val = this[offset]
    var mul = 1
    var i = 0
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul
    }
    mul *= 0x80

    if (val >= mul) val -= Math.pow(2, 8 * byteLength)

    return val
  }

  Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
    offset = offset | 0
    byteLength = byteLength | 0
    if (!noAssert) checkOffset(offset, byteLength, this.length)

    var i = byteLength
    var mul = 1
    var val = this[offset + --i]
    while (i > 0 && (mul *= 0x100)) {
      val += this[offset + --i] * mul
    }
    mul *= 0x80

    if (val >= mul) val -= Math.pow(2, 8 * byteLength)

    return val
  }

  Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length)
    if (!(this[offset] & 0x80)) return (this[offset])
    return ((0xff - this[offset] + 1) * -1)
  }

  Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length)
    var val = this[offset] | (this[offset + 1] << 8)
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  }

  Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length)
    var val = this[offset + 1] | (this[offset] << 8)
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  }

  Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length)

    return (this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16) |
      (this[offset + 3] << 24)
  }

  Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length)

    return (this[offset] << 24) |
      (this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      (this[offset + 3])
  }

  Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length)
    return ieee754.read(this, offset, true, 23, 4)
  }

  Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length)
    return ieee754.read(this, offset, false, 23, 4)
  }

  Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length)
    return ieee754.read(this, offset, true, 52, 8)
  }

  Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length)
    return ieee754.read(this, offset, false, 52, 8)
  }

  function checkInt (buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
    if (value > max || value < min) throw new RangeError('value is out of bounds')
    if (offset + ext > buf.length) throw new RangeError('index out of range')
  }

  Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset | 0
    byteLength = byteLength | 0
    if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

    var mul = 1
    var i = 0
    this[offset] = value & 0xFF
    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF
    }

    return offset + byteLength
  }

  Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset | 0
    byteLength = byteLength | 0
    if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

    var i = byteLength - 1
    var mul = 1
    this[offset + i] = value & 0xFF
    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF
    }

    return offset + byteLength
  }

  Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
    this[offset] = (value & 0xff)
    return offset + 1
  }

  function objectWriteUInt16 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffff + value + 1
    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
      buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
        (littleEndian ? i : 1 - i) * 8
    }
  }

  Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff)
      this[offset + 1] = (value >>> 8)
    } else {
      objectWriteUInt16(this, value, offset, true)
    }
    return offset + 2
  }

  Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8)
      this[offset + 1] = (value & 0xff)
    } else {
      objectWriteUInt16(this, value, offset, false)
    }
    return offset + 2
  }

  function objectWriteUInt32 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffffffff + value + 1
    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
      buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
    }
  }

  Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset + 3] = (value >>> 24)
      this[offset + 2] = (value >>> 16)
      this[offset + 1] = (value >>> 8)
      this[offset] = (value & 0xff)
    } else {
      objectWriteUInt32(this, value, offset, true)
    }
    return offset + 4
  }

  Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24)
      this[offset + 1] = (value >>> 16)
      this[offset + 2] = (value >>> 8)
      this[offset + 3] = (value & 0xff)
    } else {
      objectWriteUInt32(this, value, offset, false)
    }
    return offset + 4
  }

  Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1)

      checkInt(this, value, offset, byteLength, limit - 1, -limit)
    }

    var i = 0
    var mul = 1
    var sub = value < 0 ? 1 : 0
    this[offset] = value & 0xFF
    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
    }

    return offset + byteLength
  }

  Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1)

      checkInt(this, value, offset, byteLength, limit - 1, -limit)
    }

    var i = byteLength - 1
    var mul = 1
    var sub = value < 0 ? 1 : 0
    this[offset + i] = value & 0xFF
    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
    }

    return offset + byteLength
  }

  Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
    if (value < 0) value = 0xff + value + 1
    this[offset] = (value & 0xff)
    return offset + 1
  }

  Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff)
      this[offset + 1] = (value >>> 8)
    } else {
      objectWriteUInt16(this, value, offset, true)
    }
    return offset + 2
  }

  Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8)
      this[offset + 1] = (value & 0xff)
    } else {
      objectWriteUInt16(this, value, offset, false)
    }
    return offset + 2
  }

  Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff)
      this[offset + 1] = (value >>> 8)
      this[offset + 2] = (value >>> 16)
      this[offset + 3] = (value >>> 24)
    } else {
      objectWriteUInt32(this, value, offset, true)
    }
    return offset + 4
  }

  Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
    if (value < 0) value = 0xffffffff + value + 1
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24)
      this[offset + 1] = (value >>> 16)
      this[offset + 2] = (value >>> 8)
      this[offset + 3] = (value & 0xff)
    } else {
      objectWriteUInt32(this, value, offset, false)
    }
    return offset + 4
  }

  function checkIEEE754 (buf, value, offset, ext, max, min) {
    if (value > max || value < min) throw new RangeError('value is out of bounds')
    if (offset + ext > buf.length) throw new RangeError('index out of range')
    if (offset < 0) throw new RangeError('index out of range')
  }

  function writeFloat (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
    }
    ieee754.write(buf, value, offset, littleEndian, 23, 4)
    return offset + 4
  }

  Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert)
  }

  Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert)
  }

  function writeDouble (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
    }
    ieee754.write(buf, value, offset, littleEndian, 52, 8)
    return offset + 8
  }

  Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert)
  }

  Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert)
  }

  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
  Buffer.prototype.copy = function copy (target, targetStart, start, end) {
    if (!start) start = 0
    if (!end && end !== 0) end = this.length
    if (targetStart >= target.length) targetStart = target.length
    if (!targetStart) targetStart = 0
    if (end > 0 && end < start) end = start

    // Copy 0 bytes; we're done
    if (end === start) return 0
    if (target.length === 0 || this.length === 0) return 0

    // Fatal error conditions
    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds')
    }
    if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
    if (end < 0) throw new RangeError('sourceEnd out of bounds')

    // Are we oob?
    if (end > this.length) end = this.length
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start
    }

    var len = end - start
    var i

    if (this === target && start < targetStart && targetStart < end) {
      // descending copy from end
      for (i = len - 1; i >= 0; i--) {
        target[i + targetStart] = this[i + start]
      }
    } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
      // ascending copy from start
      for (i = 0; i < len; i++) {
        target[i + targetStart] = this[i + start]
      }
    } else {
      target._set(this.subarray(start, start + len), targetStart)
    }

    return len
  }

  // fill(value, start=0, end=buffer.length)
  Buffer.prototype.fill = function fill (value, start, end) {
    if (!value) value = 0
    if (!start) start = 0
    if (!end) end = this.length

    if (end < start) throw new RangeError('end < start')

    // Fill 0 bytes; we're done
    if (end === start) return
    if (this.length === 0) return

    if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
    if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

    var i
    if (typeof value === 'number') {
      for (i = start; i < end; i++) {
        this[i] = value
      }
    } else {
      var bytes = utf8ToBytes(value.toString())
      var len = bytes.length
      for (i = start; i < end; i++) {
        this[i] = bytes[i % len]
      }
    }

    return this
  }

  /**
   * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
   * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
   */
  Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
    if (typeof Uint8Array !== 'undefined') {
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        return (new Buffer(this)).buffer
      } else {
        var buf = new Uint8Array(this.length)
        for (var i = 0, len = buf.length; i < len; i += 1) {
          buf[i] = this[i]
        }
        return buf.buffer
      }
    } else {
      throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
    }
  }

  // HELPER FUNCTIONS
  // ================

  var BP = Buffer.prototype

  /**
   * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
   */
  Buffer._augment = function _augment (arr) {
    arr.constructor = Buffer
    arr._isBuffer = true

    // save reference to original Uint8Array set method before overwriting
    arr._set = arr.set

    // deprecated
    arr.get = BP.get
    arr.set = BP.set

    arr.write = BP.write
    arr.toString = BP.toString
    arr.toLocaleString = BP.toString
    arr.toJSON = BP.toJSON
    arr.equals = BP.equals
    arr.compare = BP.compare
    arr.indexOf = BP.indexOf
    arr.copy = BP.copy
    arr.slice = BP.slice
    arr.readUIntLE = BP.readUIntLE
    arr.readUIntBE = BP.readUIntBE
    arr.readUInt8 = BP.readUInt8
    arr.readUInt16LE = BP.readUInt16LE
    arr.readUInt16BE = BP.readUInt16BE
    arr.readUInt32LE = BP.readUInt32LE
    arr.readUInt32BE = BP.readUInt32BE
    arr.readIntLE = BP.readIntLE
    arr.readIntBE = BP.readIntBE
    arr.readInt8 = BP.readInt8
    arr.readInt16LE = BP.readInt16LE
    arr.readInt16BE = BP.readInt16BE
    arr.readInt32LE = BP.readInt32LE
    arr.readInt32BE = BP.readInt32BE
    arr.readFloatLE = BP.readFloatLE
    arr.readFloatBE = BP.readFloatBE
    arr.readDoubleLE = BP.readDoubleLE
    arr.readDoubleBE = BP.readDoubleBE
    arr.writeUInt8 = BP.writeUInt8
    arr.writeUIntLE = BP.writeUIntLE
    arr.writeUIntBE = BP.writeUIntBE
    arr.writeUInt16LE = BP.writeUInt16LE
    arr.writeUInt16BE = BP.writeUInt16BE
    arr.writeUInt32LE = BP.writeUInt32LE
    arr.writeUInt32BE = BP.writeUInt32BE
    arr.writeIntLE = BP.writeIntLE
    arr.writeIntBE = BP.writeIntBE
    arr.writeInt8 = BP.writeInt8
    arr.writeInt16LE = BP.writeInt16LE
    arr.writeInt16BE = BP.writeInt16BE
    arr.writeInt32LE = BP.writeInt32LE
    arr.writeInt32BE = BP.writeInt32BE
    arr.writeFloatLE = BP.writeFloatLE
    arr.writeFloatBE = BP.writeFloatBE
    arr.writeDoubleLE = BP.writeDoubleLE
    arr.writeDoubleBE = BP.writeDoubleBE
    arr.fill = BP.fill
    arr.inspect = BP.inspect
    arr.toArrayBuffer = BP.toArrayBuffer

    return arr
  }

  var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

  function base64clean (str) {
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = stringtrim(str).replace(INVALID_BASE64_RE, '')
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return ''
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while (str.length % 4 !== 0) {
      str = str + '='
    }
    return str
  }

  function stringtrim (str) {
    if (str.trim) return str.trim()
    return str.replace(/^\s+|\s+$/g, '')
  }

  function toHex (n) {
    if (n < 16) return '0' + n.toString(16)
    return n.toString(16)
  }

  function utf8ToBytes (string, units) {
    units = units || Infinity
    var codePoint
    var length = string.length
    var leadSurrogate = null
    var bytes = []

    for (var i = 0; i < length; i++) {
      codePoint = string.charCodeAt(i)

      // is surrogate component
      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        // last char was a lead
        if (!leadSurrogate) {
          // no lead yet
          if (codePoint > 0xDBFF) {
            // unexpected trail
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
            continue
          } else if (i + 1 === length) {
            // unpaired lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
            continue
          }

          // valid lead
          leadSurrogate = codePoint

          continue
        }

        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          leadSurrogate = codePoint
          continue
        }

        // valid surrogate pair
        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
      } else if (leadSurrogate) {
        // valid bmp char, but last char was a lead
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
      }

      leadSurrogate = null

      // encode utf8
      if (codePoint < 0x80) {
        if ((units -= 1) < 0) break
        bytes.push(codePoint)
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) break
        bytes.push(
          codePoint >> 0x6 | 0xC0,
          codePoint & 0x3F | 0x80
        )
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) break
        bytes.push(
          codePoint >> 0xC | 0xE0,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        )
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) break
        bytes.push(
          codePoint >> 0x12 | 0xF0,
          codePoint >> 0xC & 0x3F | 0x80,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        )
      } else {
        throw new Error('Invalid code point')
      }
    }

    return bytes
  }

  function asciiToBytes (str) {
    var byteArray = []
    for (var i = 0; i < str.length; i++) {
      // Node's code seems to be doing this and not & 0x7F..
      byteArray.push(str.charCodeAt(i) & 0xFF)
    }
    return byteArray
  }

  function utf16leToBytes (str, units) {
    var c, hi, lo
    var byteArray = []
    for (var i = 0; i < str.length; i++) {
      if ((units -= 2) < 0) break

      c = str.charCodeAt(i)
      hi = c >> 8
      lo = c % 256
      byteArray.push(lo)
      byteArray.push(hi)
    }

    return byteArray
  }

  function base64ToBytes (str) {
    return base64.toByteArray(base64clean(str))
  }

  function blitBuffer (src, dst, offset, length) {
    for (var i = 0; i < length; i++) {
      if ((i + offset >= dst.length) || (i >= src.length)) break
      dst[i + offset] = src[i]
    }
    return i
  }

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(115).Buffer, (function() { return this; }())))

/***/ },
/* 116 */
/***/ function(module, exports) {

  var hasOwnProperty = {}.hasOwnProperty;
  module.exports = function(it, key){
    return hasOwnProperty.call(it, key);
  };

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

  var dP         = __webpack_require__(107)
    , createDesc = __webpack_require__(161);
  module.exports = __webpack_require__(106) ? function(object, key, value){
    return dP.f(object, key, createDesc(1, value));
  } : function(object, key, value){
    object[key] = value;
    return object;
  };

/***/ },
/* 118 */
/***/ function(module, exports) {

  module.exports = function(it){
    if(typeof it != 'function')throw TypeError(it + ' is not a function!');
    return it;
  };

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

  var global    = __webpack_require__(95)
    , hide      = __webpack_require__(117)
    , has       = __webpack_require__(116)
    , SRC       = __webpack_require__(184)('src')
    , TO_STRING = 'toString'
    , $toString = Function[TO_STRING]
    , TPL       = ('' + $toString).split(TO_STRING);

  __webpack_require__(143).inspectSource = function(it){
    return $toString.call(it);
  };

  (module.exports = function(O, key, val, safe){
    var isFunction = typeof val == 'function';
    if(isFunction)has(val, 'name') || hide(val, 'name', key);
    if(O[key] === val)return;
    if(isFunction)has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
    if(O === global){
      O[key] = val;
    } else {
      if(!safe){
        delete O[key];
        hide(O, key, val);
      } else {
        if(O[key])O[key] = val;
        else hide(O, key, val);
      }
    }
  // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
  })(Function.prototype, TO_STRING, function toString(){
    return typeof this == 'function' && this[SRC] || $toString.call(this);
  });

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

  var $export = __webpack_require__(89)
    , fails   = __webpack_require__(96)
    , defined = __webpack_require__(131)
    , quot    = /"/g;
  // B.2.3.2.1 CreateHTML(string, tag, attribute, value)
  var createHTML = function(string, tag, attribute, value) {
    var S  = String(defined(string))
      , p1 = '<' + tag;
    if(attribute !== '')p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
    return p1 + '>' + S + '</' + tag + '>';
  };
  module.exports = function(NAME, exec){
    var O = {};
    O[NAME] = exec(createHTML);
    $export($export.P + $export.F * fails(function(){
      var test = ''[NAME]('"');
      return test !== test.toLowerCase() || test.split('"').length > 3;
    }), 'String', O);
  };

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

  // to indexed object, toObject with fallback for non-array-like ES3 strings
  var IObject = __webpack_require__(209)
    , defined = __webpack_require__(131);
  module.exports = function(it){
    return IObject(defined(it));
  };

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

  var pIE            = __webpack_require__(210)
    , createDesc     = __webpack_require__(161)
    , toIObject      = __webpack_require__(121)
    , toPrimitive    = __webpack_require__(145)
    , has            = __webpack_require__(116)
    , IE8_DOM_DEFINE = __webpack_require__(415)
    , gOPD           = Object.getOwnPropertyDescriptor;

  exports.f = __webpack_require__(106) ? gOPD : function getOwnPropertyDescriptor(O, P){
    O = toIObject(O);
    P = toPrimitive(P, true);
    if(IE8_DOM_DEFINE)try {
      return gOPD(O, P);
    } catch(e){ /* empty */ }
    if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
  };

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
  var has         = __webpack_require__(116)
    , toObject    = __webpack_require__(113)
    , IE_PROTO    = __webpack_require__(327)('IE_PROTO')
    , ObjectProto = Object.prototype;

  module.exports = Object.getPrototypeOf || function(O){
    O = toObject(O);
    if(has(O, IE_PROTO))return O[IE_PROTO];
    if(typeof O.constructor == 'function' && O instanceof O.constructor){
      return O.constructor.prototype;
    } return O instanceof Object ? ObjectProto : null;
  };

/***/ },
/* 124 */
/***/ function(module, exports) {

  "use strict";

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * 
   */

  function makeEmptyFunction(arg) {
    return function () {
      return arg;
    };
  }

  /**
   * This function accepts and discards inputs; it has no side effects. This is
   * primarily useful idiomatically for overridable function endpoints which
   * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
   */
  var emptyFunction = function emptyFunction() {};

  emptyFunction.thatReturns = makeEmptyFunction;
  emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
  emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
  emptyFunction.thatReturnsNull = makeEmptyFunction(null);
  emptyFunction.thatReturnsThis = function () {
    return this;
  };
  emptyFunction.thatReturnsArgument = function (arg) {
    return arg;
  };

  module.exports = emptyFunction;

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2016-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactInstrumentation
   */

  'use strict';

  var ReactDebugTool = __webpack_require__(1244);

  module.exports = { debugTool: ReactDebugTool };

/***/ },
/* 126 */
/***/ function(module, exports) {

  

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  exports.__esModule = true;

  var _iterator = __webpack_require__(742);

  var _iterator2 = _interopRequireDefault(_iterator);

  var _symbol = __webpack_require__(286);

  var _symbol2 = _interopRequireDefault(_symbol);

  var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj; };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof(obj);
  } : function (obj) {
    return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
  };

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;
  exports.visitors = exports.Hub = exports.Scope = exports.NodePath = undefined;

  var _getOwnPropertySymbols = __webpack_require__(738);

  var _getOwnPropertySymbols2 = _interopRequireDefault(_getOwnPropertySymbols);

  var _getIterator2 = __webpack_require__(93);

  var _getIterator3 = _interopRequireDefault(_getIterator2);

  var _path = __webpack_require__(173);

  Object.defineProperty(exports, "NodePath", {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(_path).default;
    }
  });
  /*istanbul ignore next*/
  var _scope = __webpack_require__(288);

  Object.defineProperty(exports, "Scope", {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(_scope).default;
    }
  });
  /*istanbul ignore next*/
  var _hub = __webpack_require__(389);

  Object.defineProperty(exports, "Hub", {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(_hub).default;
    }
  });
  /*istanbul ignore next*/exports.default = traverse;

  var /*istanbul ignore next*/_context = __webpack_require__(744);

  /*istanbul ignore next*/
  var _context2 = _interopRequireDefault(_context);

  var /*istanbul ignore next*/_visitors = __webpack_require__(761);

  /*istanbul ignore next*/
  var visitors = _interopRequireWildcard(_visitors);

  var /*istanbul ignore next*/_babelMessages = __webpack_require__(157);

  /*istanbul ignore next*/
  var messages = _interopRequireWildcard(_babelMessages);

  var /*istanbul ignore next*/_includes = __webpack_require__(265);

  /*istanbul ignore next*/
  var _includes2 = _interopRequireDefault(_includes);

  var /*istanbul ignore next*/_babelTypes = __webpack_require__(90);

  /*istanbul ignore next*/
  var t = _interopRequireWildcard(_babelTypes);

  var /*istanbul ignore next*/_cache = __webpack_require__(226);

  /*istanbul ignore next*/
  var cache = _interopRequireWildcard(_cache);

  /*istanbul ignore next*/
  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  exports.visitors = visitors;
  function traverse(parent, opts, scope, state, parentPath) {
    if (!parent) return;
    if (!opts) opts = {};

    if (!opts.noScope && !scope) {
      if (parent.type !== "Program" && parent.type !== "File") {
        throw new Error(messages.get("traverseNeedsParent", parent.type));
      }
    }

    visitors.explode(opts);

    traverse.node(parent, opts, scope, state, parentPath);
  }

  traverse.visitors = visitors;
  traverse.verify = visitors.verify;
  traverse.explode = visitors.explode;

  traverse.NodePath = __webpack_require__(173);
  traverse.Scope = __webpack_require__(288);
  traverse.Hub = __webpack_require__(389);

  traverse.cheap = function (node, enter) {
    if (!node) return;

    var keys = t.VISITOR_KEYS[node.type];
    if (!keys) return;

    enter(node);

    for ( /*istanbul ignore next*/var _iterator = keys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
      /*istanbul ignore next*/
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var key = _ref;

      var subNode = node[key];

      if (Array.isArray(subNode)) {
        for ( /*istanbul ignore next*/var _iterator2 = subNode, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
          /*istanbul ignore next*/
          var _ref2;

          if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref2 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref2 = _i2.value;
          }

          var _node = _ref2;

          traverse.cheap(_node, enter);
        }
      } else {
        traverse.cheap(subNode, enter);
      }
    }
  };

  traverse.node = function (node, opts, scope, state, parentPath, skipKeys) {
    var keys = t.VISITOR_KEYS[node.type];
    if (!keys) return;

    var context = new /*istanbul ignore next*/_context2.default(scope, opts, state, parentPath);
    for ( /*istanbul ignore next*/var _iterator3 = keys, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);;) {
      /*istanbul ignore next*/
      var _ref3;

      if (_isArray3) {
        if (_i3 >= _iterator3.length) break;
        _ref3 = _iterator3[_i3++];
      } else {
        _i3 = _iterator3.next();
        if (_i3.done) break;
        _ref3 = _i3.value;
      }

      var key = _ref3;

      if (skipKeys && skipKeys[key]) continue;
      if (context.visit(node, key)) return;
    }
  };

  var CLEAR_KEYS = t.COMMENT_KEYS.concat(["tokens", "comments", "start", "end", "loc", "raw", "rawValue"]);

  traverse.clearNode = function (node) {
    for ( /*istanbul ignore next*/var _iterator4 = CLEAR_KEYS, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4);;) {
      /*istanbul ignore next*/
      var _ref4;

      if (_isArray4) {
        if (_i4 >= _iterator4.length) break;
        _ref4 = _iterator4[_i4++];
      } else {
        _i4 = _iterator4.next();
        if (_i4.done) break;
        _ref4 = _i4.value;
      }

      var _key = _ref4;

      if (node[_key] != null) node[_key] = undefined;
    }

    for (var key in node) {
      if (key[0] === "_" && node[key] != null) node[key] = undefined;
    }

    cache.path.delete(node);

    var syms = /*istanbul ignore next*/(0, _getOwnPropertySymbols2.default)(node);
    for ( /*istanbul ignore next*/var _iterator5 = syms, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : (0, _getIterator3.default)(_iterator5);;) {
      /*istanbul ignore next*/
      var _ref5;

      if (_isArray5) {
        if (_i5 >= _iterator5.length) break;
        _ref5 = _iterator5[_i5++];
      } else {
        _i5 = _iterator5.next();
        if (_i5.done) break;
        _ref5 = _i5.value;
      }

      var sym = _ref5;

      node[sym] = null;
    }
  };

  traverse.removeProperties = function (tree) {
    traverse.cheap(tree, traverse.clearNode);
    return tree;
  };

  function hasBlacklistedType(path, state) {
    if (path.node.type === state.type) {
      state.has = true;
      path.stop();
    }
  }

  traverse.hasType = function (tree, scope, type, blacklistTypes) {
    // the node we're searching in is blacklisted
    if ( /*istanbul ignore next*/(0, _includes2.default)(blacklistTypes, tree.type)) return false;

    // the type we're looking for is the same as the passed node
    if (tree.type === type) return true;

    var state = {
      has: false,
      type: type
    };

    traverse(tree, {
      blacklist: blacklistTypes,
      enter: hasBlacklistedType
    }, scope, state);

    return state.has;
  };

  traverse.clearCache = function () {
    cache.clear();
  };

  traverse.copyCache = function (source, destination) {
    if (cache.path.has(source)) {
      cache.path.set(destination, cache.path.get(source));
    }
  };

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

  var store      = __webpack_require__(303)('wks')
    , uid        = __webpack_require__(235)
    , Symbol     = __webpack_require__(140).Symbol
    , USE_SYMBOL = typeof Symbol == 'function';

  var $exports = module.exports = function(name){
    return store[name] || (store[name] =
      USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
  };

  $exports.store = store;

/***/ },
/* 130 */
/***/ function(module, exports) {

  var toString = {}.toString;

  module.exports = function(it){
    return toString.call(it).slice(8, -1);
  };

/***/ },
/* 131 */
/***/ function(module, exports) {

  // 7.2.1 RequireObjectCoercible(argument)
  module.exports = function(it){
    if(it == undefined)throw TypeError("Can't call method on  " + it);
    return it;
  };

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

  var fails = __webpack_require__(96);

  module.exports = function(method, arg){
    return !!method && fails(function(){
      arg ? method.call(null, function(){}, 1) : method.call(null);
    });
  };

/***/ },
/* 133 */
/***/ function(module, exports) {

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  module.exports = isObject;


/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  // resolves . and .. elements in a path array with directory names there
  // must be no slashes, empty elements, or device names (c:\) in the array
  // (so also no leading and trailing slashes - it does not distinguish
  // relative and absolute paths)
  function normalizeArray(parts, allowAboveRoot) {
    // if the path tries to go above the root, `up` ends up > 0
    var up = 0;
    for (var i = parts.length - 1; i >= 0; i--) {
      var last = parts[i];
      if (last === '.') {
        parts.splice(i, 1);
      } else if (last === '..') {
        parts.splice(i, 1);
        up++;
      } else if (up) {
        parts.splice(i, 1);
        up--;
      }
    }

    // if the path is allowed to go above the root, restore leading ..s
    if (allowAboveRoot) {
      for (; up--; up) {
        parts.unshift('..');
      }
    }

    return parts;
  }

  // Split a filename into [root, dir, basename, ext], unix version
  // 'root' is just a slash, or nothing.
  var splitPathRe =
      /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
  var splitPath = function(filename) {
    return splitPathRe.exec(filename).slice(1);
  };

  // path.resolve([from ...], to)
  // posix version
  exports.resolve = function() {
    var resolvedPath = '',
        resolvedAbsolute = false;

    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path = (i >= 0) ? arguments[i] : process.cwd();

      // Skip empty and invalid entries
      if (typeof path !== 'string') {
        throw new TypeError('Arguments to path.resolve must be strings');
      } else if (!path) {
        continue;
      }

      resolvedPath = path + '/' + resolvedPath;
      resolvedAbsolute = path.charAt(0) === '/';
    }

    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)

    // Normalize the path
    resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
      return !!p;
    }), !resolvedAbsolute).join('/');

    return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
  };

  // path.normalize(path)
  // posix version
  exports.normalize = function(path) {
    var isAbsolute = exports.isAbsolute(path),
        trailingSlash = substr(path, -1) === '/';

    // Normalize the path
    path = normalizeArray(filter(path.split('/'), function(p) {
      return !!p;
    }), !isAbsolute).join('/');

    if (!path && !isAbsolute) {
      path = '.';
    }
    if (path && trailingSlash) {
      path += '/';
    }

    return (isAbsolute ? '/' : '') + path;
  };

  // posix version
  exports.isAbsolute = function(path) {
    return path.charAt(0) === '/';
  };

  // posix version
  exports.join = function() {
    var paths = Array.prototype.slice.call(arguments, 0);
    return exports.normalize(filter(paths, function(p, index) {
      if (typeof p !== 'string') {
        throw new TypeError('Arguments to path.join must be strings');
      }
      return p;
    }).join('/'));
  };


  // path.relative(from, to)
  // posix version
  exports.relative = function(from, to) {
    from = exports.resolve(from).substr(1);
    to = exports.resolve(to).substr(1);

    function trim(arr) {
      var start = 0;
      for (; start < arr.length; start++) {
        if (arr[start] !== '') break;
      }

      var end = arr.length - 1;
      for (; end >= 0; end--) {
        if (arr[end] !== '') break;
      }

      if (start > end) return [];
      return arr.slice(start, end - start + 1);
    }

    var fromParts = trim(from.split('/'));
    var toParts = trim(to.split('/'));

    var length = Math.min(fromParts.length, toParts.length);
    var samePartsLength = length;
    for (var i = 0; i < length; i++) {
      if (fromParts[i] !== toParts[i]) {
        samePartsLength = i;
        break;
      }
    }

    var outputParts = [];
    for (var i = samePartsLength; i < fromParts.length; i++) {
      outputParts.push('..');
    }

    outputParts = outputParts.concat(toParts.slice(samePartsLength));

    return outputParts.join('/');
  };

  exports.sep = '/';
  exports.delimiter = ':';

  exports.dirname = function(path) {
    var result = splitPath(path),
        root = result[0],
        dir = result[1];

    if (!root && !dir) {
      // No dirname whatsoever
      return '.';
    }

    if (dir) {
      // It has a dirname, strip trailing slash
      dir = dir.substr(0, dir.length - 1);
    }

    return root + dir;
  };


  exports.basename = function(path, ext) {
    var f = splitPath(path)[2];
    // TODO: make this comparison case-insensitive on windows?
    if (ext && f.substr(-1 * ext.length) === ext) {
      f = f.substr(0, f.length - ext.length);
    }
    return f;
  };


  exports.extname = function(path) {
    return splitPath(path)[3];
  };

  function filter (xs, f) {
      if (xs.filter) return xs.filter(f);
      var res = [];
      for (var i = 0; i < xs.length; i++) {
          if (f(xs[i], i, xs)) res.push(xs[i]);
      }
      return res;
  }

  // String.prototype.substr - negative index don't work in IE8
  var substr = 'ab'.substr(-1) === 'b'
      ? function (str, start, len) { return str.substr(start, len) }
      : function (str, start, len) {
          if (start < 0) start = str.length + start;
          return str.substr(start, len);
      }
  ;

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(111)))

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2014-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactElement
   */

  'use strict';

  var _assign = __webpack_require__(100);

  var ReactCurrentOwner = __webpack_require__(167);

  var warning = __webpack_require__(94);
  var canDefineProperty = __webpack_require__(365);

  // The Symbol used to tag the ReactElement type. If there is no native Symbol
  // nor polyfill, then a plain number is used for performance.
  var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

  var RESERVED_PROPS = {
    key: true,
    ref: true,
    __self: true,
    __source: true
  };

  var specialPropKeyWarningShown, specialPropRefWarningShown;

  /**
   * Factory method to create a new React element. This no longer adheres to
   * the class pattern, so do not use new to call it. Also, no instanceof check
   * will work. Instead test $$typeof field against Symbol.for('react.element') to check
   * if something is a React Element.
   *
   * @param {*} type
   * @param {*} key
   * @param {string|object} ref
   * @param {*} self A *temporary* helper to detect places where `this` is
   * different from the `owner` when React.createElement is called, so that we
   * can warn. We want to get rid of owner and replace string `ref`s with arrow
   * functions, and as long as `this` and owner are the same, there will be no
   * change in behavior.
   * @param {*} source An annotation object (added by a transpiler or otherwise)
   * indicating filename, line number, and/or other information.
   * @param {*} owner
   * @param {*} props
   * @internal
   */
  var ReactElement = function (type, key, ref, self, source, owner, props) {
    var element = {
      // This tag allow us to uniquely identify this as a React Element
      $$typeof: REACT_ELEMENT_TYPE,

      // Built-in properties that belong on the element
      type: type,
      key: key,
      ref: ref,
      props: props,

      // Record the component responsible for creating this element.
      _owner: owner
    };

    if (true) {
      // The validation flag is currently mutative. We put it on
      // an external backing store so that we can freeze the whole object.
      // This can be replaced with a WeakMap once they are implemented in
      // commonly used development environments.
      element._store = {};

      // To make comparing ReactElements easier for testing purposes, we make
      // the validation flag non-enumerable (where possible, which should
      // include every environment we run tests in), so the test framework
      // ignores it.
      if (canDefineProperty) {
        Object.defineProperty(element._store, 'validated', {
          configurable: false,
          enumerable: false,
          writable: true,
          value: false
        });
        // self and source are DEV only properties.
        Object.defineProperty(element, '_self', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: self
        });
        // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, '_source', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: source
        });
      } else {
        element._store.validated = false;
        element._self = self;
        element._source = source;
      }
      if (Object.freeze) {
        Object.freeze(element.props);
        Object.freeze(element);
      }
    }

    return element;
  };

  /**
   * Create and return a new ReactElement of the given type.
   * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
   */
  ReactElement.createElement = function (type, config, children) {
    var propName;

    // Reserved names are extracted
    var props = {};

    var key = null;
    var ref = null;
    var self = null;
    var source = null;

    if (config != null) {
      if (true) {
         true ? warning(
        /* eslint-disable no-proto */
        config.__proto__ == null || config.__proto__ === Object.prototype,
        /* eslint-enable no-proto */
        'React.createElement(...): Expected props argument to be a plain object. ' + 'Properties defined in its prototype chain will be ignored.') : void 0;
        ref = !config.hasOwnProperty('ref') || Object.getOwnPropertyDescriptor(config, 'ref').get ? null : config.ref;
        key = !config.hasOwnProperty('key') || Object.getOwnPropertyDescriptor(config, 'key').get ? null : '' + config.key;
      } else {
        ref = config.ref === undefined ? null : config.ref;
        key = config.key === undefined ? null : '' + config.key;
      }
      self = config.__self === undefined ? null : config.__self;
      source = config.__source === undefined ? null : config.__source;
      // Remaining properties are added to a new props object
      for (propName in config) {
        if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
          props[propName] = config[propName];
        }
      }
    }

    // Children can be more than one argument, and those are transferred onto
    // the newly allocated props object.
    var childrenLength = arguments.length - 2;
    if (childrenLength === 1) {
      props.children = children;
    } else if (childrenLength > 1) {
      var childArray = Array(childrenLength);
      for (var i = 0; i < childrenLength; i++) {
        childArray[i] = arguments[i + 2];
      }
      props.children = childArray;
    }

    // Resolve default props
    if (type && type.defaultProps) {
      var defaultProps = type.defaultProps;
      for (propName in defaultProps) {
        if (props[propName] === undefined) {
          props[propName] = defaultProps[propName];
        }
      }
    }
    if (true) {
      // Create dummy `key` and `ref` property to `props` to warn users
      // against its use
      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
        if (!props.hasOwnProperty('key')) {
          Object.defineProperty(props, 'key', {
            get: function () {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                 true ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', typeof type === 'function' && 'displayName' in type ? type.displayName : 'Element') : void 0;
              }
              return undefined;
            },
            configurable: true
          });
        }
        if (!props.hasOwnProperty('ref')) {
          Object.defineProperty(props, 'ref', {
            get: function () {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                 true ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', typeof type === 'function' && 'displayName' in type ? type.displayName : 'Element') : void 0;
              }
              return undefined;
            },
            configurable: true
          });
        }
      }
    }
    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
  };

  /**
   * Return a function that produces ReactElements of a given type.
   * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
   */
  ReactElement.createFactory = function (type) {
    var factory = ReactElement.createElement.bind(null, type);
    // Expose the type on the factory and the prototype so that it can be
    // easily accessed on elements. E.g. `<Foo />.type === Foo`.
    // This should not be named `constructor` since this may not be the function
    // that created the element, and it may not even be a constructor.
    // Legacy hook TODO: Warn if this is accessed
    factory.type = type;
    return factory;
  };

  ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
    var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

    return newElement;
  };

  /**
   * Clone and return a new ReactElement using element as the starting point.
   * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
   */
  ReactElement.cloneElement = function (element, config, children) {
    var propName;

    // Original props are copied
    var props = _assign({}, element.props);

    // Reserved names are extracted
    var key = element.key;
    var ref = element.ref;
    // Self is preserved since the owner is preserved.
    var self = element._self;
    // Source is preserved since cloneElement is unlikely to be targeted by a
    // transpiler, and the original source is probably a better indicator of the
    // true owner.
    var source = element._source;

    // Owner will be preserved, unless ref is overridden
    var owner = element._owner;

    if (config != null) {
      if (true) {
         true ? warning(
        /* eslint-disable no-proto */
        config.__proto__ == null || config.__proto__ === Object.prototype,
        /* eslint-enable no-proto */
        'React.cloneElement(...): Expected props argument to be a plain object. ' + 'Properties defined in its prototype chain will be ignored.') : void 0;
      }
      if (config.ref !== undefined) {
        // Silently steal the ref from the parent.
        ref = config.ref;
        owner = ReactCurrentOwner.current;
      }
      if (config.key !== undefined) {
        key = '' + config.key;
      }
      // Remaining properties override existing props
      var defaultProps;
      if (element.type && element.type.defaultProps) {
        defaultProps = element.type.defaultProps;
      }
      for (propName in config) {
        if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
          if (config[propName] === undefined && defaultProps !== undefined) {
            // Resolve default props
            props[propName] = defaultProps[propName];
          } else {
            props[propName] = config[propName];
          }
        }
      }
    }

    // Children can be more than one argument, and those are transferred onto
    // the newly allocated props object.
    var childrenLength = arguments.length - 2;
    if (childrenLength === 1) {
      props.children = children;
    } else if (childrenLength > 1) {
      var childArray = Array(childrenLength);
      for (var i = 0; i < childrenLength; i++) {
        childArray[i] = arguments[i + 2];
      }
      props.children = childArray;
    }

    return ReactElement(element.type, key, ref, self, source, owner, props);
  };

  /**
   * Verifies the object is a ReactElement.
   * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
   * @param {?object} object
   * @return {boolean} True if `object` is a valid component.
   * @final
   */
  ReactElement.isValidElement = function (object) {
    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
  };

  module.exports = ReactElement;

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.plugins = undefined;

  var _getIterator2 = __webpack_require__(93);

  var _getIterator3 = _interopRequireDefault(_getIterator2);

  var _getPrototypeOf = __webpack_require__(739);

  var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

  var _classCallCheck2 = __webpack_require__(97);

  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

  var _createClass2 = __webpack_require__(225);

  var _createClass3 = _interopRequireDefault(_createClass2);

  var _possibleConstructorReturn2 = __webpack_require__(172);

  var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

  var _inherits2 = __webpack_require__(171);

  var _inherits3 = _interopRequireDefault(_inherits2);

  var _identifier = __webpack_require__(204);

  var _options = __webpack_require__(773);

  var _tokenizer = __webpack_require__(393);

  var _tokenizer2 = _interopRequireDefault(_tokenizer);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var plugins = exports.plugins = {};

  var Parser = function (_Tokenizer) {
    (0, _inherits3.default)(Parser, _Tokenizer);

    function Parser(options, input) {
      (0, _classCallCheck3.default)(this, Parser);

      options = (0, _options.getOptions)(options);

      var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(Parser).call(this, options, input));

      _this.options = options;
      _this.inModule = _this.options.sourceType === "module";
      _this.isReservedWord = _identifier.reservedWords[6];
      _this.input = input;
      _this.plugins = _this.loadPlugins(_this.options.plugins);
      _this.filename = options.sourceFilename;

      // If enabled, skip leading hashbang line.
      if (_this.state.pos === 0 && _this.input[0] === "#" && _this.input[1] === "!") {
        _this.skipLineComment(2);
      }
      return _this;
    }

    (0, _createClass3.default)(Parser, [{
      key: "hasPlugin",
      value: function hasPlugin(name) {
        return !!(this.plugins["*"] || this.plugins[name]);
      }
    }, {
      key: "extend",
      value: function extend(name, f) {
        this[name] = f(this[name]);
      }
    }, {
      key: "loadPlugins",
      value: function loadPlugins(plugins) {
        var pluginMap = {};

        if (plugins.indexOf("flow") >= 0) {
          // ensure flow plugin loads last
          plugins = plugins.filter(function (plugin) {
            return plugin !== "flow";
          });
          plugins.push("flow");
        }

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = (0, _getIterator3.default)(plugins), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var name = _step.value;

            if (!pluginMap[name]) {
              pluginMap[name] = true;

              var plugin = exports.plugins[name];
              if (plugin) plugin(this);
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return pluginMap;
      }
    }, {
      key: "parse",
      value: function parse() {
        var file = this.startNode();
        var program = this.startNode();
        this.nextToken();
        return this.parseTopLevel(file, program);
      }
    }]);
    return Parser;
  }(_tokenizer2.default);

  exports.default = Parser;

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.keywords = exports.types = exports.TokenType = undefined;

  var _classCallCheck2 = __webpack_require__(97);

  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  // ## Token types

  // The assignment of fine-grained, information-carrying type objects
  // allows the tokenizer to store the information it has about a
  // token in a way that is very cheap for the parser to look up.

  // All token type variables start with an underscore, to make them
  // easy to recognize.

  // The `beforeExpr` property is used to disambiguate between regular
  // expressions and divisions. It is set on all token types that can
  // be followed by an expression (thus, a slash after them would be a
  // regular expression).
  //
  // `isLoop` marks a keyword as starting a loop, which is important
  // to know when parsing a label, in order to allow or disallow
  // continue jumps to that label.

  var TokenType = exports.TokenType = function TokenType(label) {
    var conf = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    (0, _classCallCheck3.default)(this, TokenType);

    this.label = label;
    this.keyword = conf.keyword;
    this.beforeExpr = !!conf.beforeExpr;
    this.startsExpr = !!conf.startsExpr;
    this.rightAssociative = !!conf.rightAssociative;
    this.isLoop = !!conf.isLoop;
    this.isAssign = !!conf.isAssign;
    this.prefix = !!conf.prefix;
    this.postfix = !!conf.postfix;
    this.binop = conf.binop || null;
    this.updateContext = null;
  };

  function binop(name, prec) {
    return new TokenType(name, { beforeExpr: true, binop: prec });
  }
  var beforeExpr = { beforeExpr: true },
      startsExpr = { startsExpr: true };

  var types = exports.types = {
    num: new TokenType("num", startsExpr),
    regexp: new TokenType("regexp", startsExpr),
    string: new TokenType("string", startsExpr),
    name: new TokenType("name", startsExpr),
    eof: new TokenType("eof"),

    // Punctuation token types.
    bracketL: new TokenType("[", { beforeExpr: true, startsExpr: true }),
    bracketR: new TokenType("]"),
    braceL: new TokenType("{", { beforeExpr: true, startsExpr: true }),
    braceR: new TokenType("}"),
    parenL: new TokenType("(", { beforeExpr: true, startsExpr: true }),
    parenR: new TokenType(")"),
    comma: new TokenType(",", beforeExpr),
    semi: new TokenType(";", beforeExpr),
    colon: new TokenType(":", beforeExpr),
    doubleColon: new TokenType("::", beforeExpr),
    dot: new TokenType("."),
    question: new TokenType("?", beforeExpr),
    arrow: new TokenType("=>", beforeExpr),
    template: new TokenType("template"),
    ellipsis: new TokenType("...", beforeExpr),
    backQuote: new TokenType("`", startsExpr),
    dollarBraceL: new TokenType("${", { beforeExpr: true, startsExpr: true }),
    at: new TokenType("@"),

    // Operators. These carry several kinds of properties to help the
    // parser use them properly (the presence of these properties is
    // what categorizes them as operators).
    //
    // `binop`, when present, specifies that this operator is a binary
    // operator, and will refer to its precedence.
    //
    // `prefix` and `postfix` mark the operator as a prefix or postfix
    // unary operator.
    //
    // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
    // binary operators with a very low precedence, that should result
    // in AssignmentExpression nodes.

    eq: new TokenType("=", { beforeExpr: true, isAssign: true }),
    assign: new TokenType("_=", { beforeExpr: true, isAssign: true }),
    incDec: new TokenType("++/--", { prefix: true, postfix: true, startsExpr: true }),
    prefix: new TokenType("prefix", { beforeExpr: true, prefix: true, startsExpr: true }),
    logicalOR: binop("||", 1),
    logicalAND: binop("&&", 2),
    bitwiseOR: binop("|", 3),
    bitwiseXOR: binop("^", 4),
    bitwiseAND: binop("&", 5),
    equality: binop("==/!=", 6),
    relational: binop("</>", 7),
    bitShift: binop("<</>>", 8),
    plusMin: new TokenType("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }),
    modulo: binop("%", 10),
    star: binop("*", 10),
    slash: binop("/", 10),
    exponent: new TokenType("**", { beforeExpr: true, binop: 11, rightAssociative: true })
  };

  // Map keyword names to token types.

  var keywords = exports.keywords = {};

  // Succinct definitions of keyword token types
  function kw(name) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    options.keyword = name;
    keywords[name] = types["_" + name] = new TokenType(name, options);
  }

  kw("break");
  kw("case", beforeExpr);
  kw("catch");
  kw("continue");
  kw("debugger");
  kw("default", beforeExpr);
  kw("do", { isLoop: true, beforeExpr: true });
  kw("else", beforeExpr);
  kw("finally");
  kw("for", { isLoop: true });
  kw("function", startsExpr);
  kw("if");
  kw("return", beforeExpr);
  kw("switch");
  kw("throw", beforeExpr);
  kw("try");
  kw("var");
  kw("let");
  kw("const");
  kw("while", { isLoop: true });
  kw("with");
  kw("new", { beforeExpr: true, startsExpr: true });
  kw("this", startsExpr);
  kw("super", startsExpr);
  kw("class");
  kw("extends", beforeExpr);
  kw("export");
  kw("import");
  kw("yield", { beforeExpr: true, startsExpr: true });
  kw("null", startsExpr);
  kw("true", startsExpr);
  kw("false", startsExpr);
  kw("in", { beforeExpr: true, binop: 7 });
  kw("instanceof", { beforeExpr: true, binop: 7 });
  kw("typeof", { beforeExpr: true, prefix: true, startsExpr: true });
  kw("void", { beforeExpr: true, prefix: true, startsExpr: true });
  kw("delete", { beforeExpr: true, prefix: true, startsExpr: true });

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

  // Thank's IE8 for his funny defineProperty
  module.exports = !__webpack_require__(174)(function(){
    return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
  });

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

  var global    = __webpack_require__(140)
    , core      = __webpack_require__(110)
    , ctx       = __webpack_require__(205)
    , hide      = __webpack_require__(150)
    , PROTOTYPE = 'prototype';

  var $export = function(type, name, source){
    var IS_FORCED = type & $export.F
      , IS_GLOBAL = type & $export.G
      , IS_STATIC = type & $export.S
      , IS_PROTO  = type & $export.P
      , IS_BIND   = type & $export.B
      , IS_WRAP   = type & $export.W
      , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
      , expProto  = exports[PROTOTYPE]
      , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
      , key, own, out;
    if(IS_GLOBAL)source = name;
    for(key in source){
      // contains in native
      own = !IS_FORCED && target && target[key] !== undefined;
      if(own && key in exports)continue;
      // export native or passed
      out = own ? target[key] : source[key];
      // prevent global pollution for namespaces
      exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
      // bind timers to global for call from export context
      : IS_BIND && own ? ctx(out, global)
      // wrap global constructors for prevent change them in library
      : IS_WRAP && target[key] == out ? (function(C){
        var F = function(a, b, c){
          if(this instanceof C){
            switch(arguments.length){
              case 0: return new C;
              case 1: return new C(a);
              case 2: return new C(a, b);
            } return new C(a, b, c);
          } return C.apply(this, arguments);
        };
        F[PROTOTYPE] = C[PROTOTYPE];
        return F;
      // make static versions for prototype methods
      })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
      // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
      if(IS_PROTO){
        (exports.virtual || (exports.virtual = {}))[key] = out;
        // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
        if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
      }
    }
  };
  // type bitmap
  $export.F = 1;   // forced
  $export.G = 2;   // global
  $export.S = 4;   // static
  $export.P = 8;   // proto
  $export.B = 16;  // bind
  $export.W = 32;  // wrap
  $export.U = 64;  // safe
  $export.R = 128; // real proto method for `library` 
  module.exports = $export;

/***/ },
/* 140 */
/***/ function(module, exports) {

  // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
  var global = module.exports = typeof window != 'undefined' && window.Math == Math
    ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
  if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

  var anObject       = __webpack_require__(148)
    , IE8_DOM_DEFINE = __webpack_require__(397)
    , toPrimitive    = __webpack_require__(306)
    , dP             = Object.defineProperty;

  exports.f = __webpack_require__(138) ? Object.defineProperty : function defineProperty(O, P, Attributes){
    anObject(O);
    P = toPrimitive(P, true);
    anObject(Attributes);
    if(IE8_DOM_DEFINE)try {
      return dP(O, P, Attributes);
    } catch(e){ /* empty */ }
    if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
    if('value' in Attributes)O[P] = Attributes.value;
    return O;
  };

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

  // 0 -> Array#forEach
  // 1 -> Array#map
  // 2 -> Array#filter
  // 3 -> Array#some
  // 4 -> Array#every
  // 5 -> Array#find
  // 6 -> Array#findIndex
  var ctx      = __webpack_require__(152)
    , IObject  = __webpack_require__(209)
    , toObject = __webpack_require__(113)
    , toLength = __webpack_require__(112)
    , asc      = __webpack_require__(848);
  module.exports = function(TYPE, $create){
    var IS_MAP        = TYPE == 1
      , IS_FILTER     = TYPE == 2
      , IS_SOME       = TYPE == 3
      , IS_EVERY      = TYPE == 4
      , IS_FIND_INDEX = TYPE == 6
      , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX
      , create        = $create || asc;
    return function($this, callbackfn, that){
      var O      = toObject($this)
        , self   = IObject(O)
        , f      = ctx(callbackfn, that, 3)
        , length = toLength(self.length)
        , index  = 0
        , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined
        , val, res;
      for(;length > index; index++)if(NO_HOLES || index in self){
        val = self[index];
        res = f(val, index, O);
        if(TYPE){
          if(IS_MAP)result[index] = res;            // map
          else if(res)switch(TYPE){
            case 3: return true;                    // some
            case 5: return val;                     // find
            case 6: return index;                   // findIndex
            case 2: result.push(val);               // filter
          } else if(IS_EVERY)return false;          // every
        }
      }
      return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
    };
  };

/***/ },
/* 143 */
/***/ function(module, exports) {

  var core = module.exports = {version: '2.4.0'};
  if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

  // most Object methods by ES6 should accept primitives
  var $export = __webpack_require__(89)
    , core    = __webpack_require__(143)
    , fails   = __webpack_require__(96);
  module.exports = function(KEY, exec){
    var fn  = (core.Object || {})[KEY] || Object[KEY]
      , exp = {};
    exp[KEY] = exec(fn);
    $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
  };

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

  // 7.1.1 ToPrimitive(input [, PreferredType])
  var isObject = __webpack_require__(98);
  // instead of the ES6 spec version, we didn't implement @@toPrimitive case
  // and the second argument - flag - preferred type is a string
  module.exports = function(it, S){
    if(!isObject(it))return it;
    var fn, val;
    if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
    if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
    if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
    throw TypeError("Can't convert object to primitive value");
  };

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(global) {var checkGlobal = __webpack_require__(1119);

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = checkGlobal(typeof global == 'object' && global);

  /** Detect free variable `self`. */
  var freeSelf = checkGlobal(typeof self == 'object' && self);

  /** Detect `this` as the global object. */
  var thisGlobal = checkGlobal(typeof this == 'object' && this);

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || thisGlobal || Function('return this')();

  module.exports = root;

  /* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactUpdates
   */

  'use strict';

  var _assign = __webpack_require__(100);

  var CallbackQueue = __webpack_require__(487);
  var PooledClass = __webpack_require__(166);
  var ReactFeatureFlags = __webpack_require__(497);
  var ReactInstrumentation = __webpack_require__(125);
  var ReactReconciler = __webpack_require__(201);
  var Transaction = __webpack_require__(276);

  var invariant = __webpack_require__(91);

  var dirtyComponents = [];
  var updateBatchNumber = 0;
  var asapCallbackQueue = CallbackQueue.getPooled();
  var asapEnqueued = false;

  var batchingStrategy = null;

  function ensureInjected() {
    !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ?  true ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : void 0;
  }

  var NESTED_UPDATES = {
    initialize: function () {
      this.dirtyComponentsLength = dirtyComponents.length;
    },
    close: function () {
      if (this.dirtyComponentsLength !== dirtyComponents.length) {
        // Additional updates were enqueued by componentDidUpdate handlers or
        // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
        // these new updates so that if A's componentDidUpdate calls setState on
        // B, B will update before the callback A's updater provided when calling
        // setState.
        dirtyComponents.splice(0, this.dirtyComponentsLength);
        flushBatchedUpdates();
      } else {
        dirtyComponents.length = 0;
      }
    }
  };

  var UPDATE_QUEUEING = {
    initialize: function () {
      this.callbackQueue.reset();
    },
    close: function () {
      this.callbackQueue.notifyAll();
    }
  };

  var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

  function ReactUpdatesFlushTransaction() {
    this.reinitializeTransaction();
    this.dirtyComponentsLength = null;
    this.callbackQueue = CallbackQueue.getPooled();
    this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
    /* useCreateElement */true);
  }

  _assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
    getTransactionWrappers: function () {
      return TRANSACTION_WRAPPERS;
    },

    destructor: function () {
      this.dirtyComponentsLength = null;
      CallbackQueue.release(this.callbackQueue);
      this.callbackQueue = null;
      ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
      this.reconcileTransaction = null;
    },

    perform: function (method, scope, a) {
      // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
      // with this transaction's wrappers around it.
      return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
    }
  });

  PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

  function batchedUpdates(callback, a, b, c, d, e) {
    ensureInjected();
    batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
  }

  /**
   * Array comparator for ReactComponents by mount ordering.
   *
   * @param {ReactComponent} c1 first component you're comparing
   * @param {ReactComponent} c2 second component you're comparing
   * @return {number} Return value usable by Array.prototype.sort().
   */
  function mountOrderComparator(c1, c2) {
    return c1._mountOrder - c2._mountOrder;
  }

  function runBatchedUpdates(transaction) {
    var len = transaction.dirtyComponentsLength;
    !(len === dirtyComponents.length) ?  true ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : void 0;

    // Since reconciling a component higher in the owner hierarchy usually (not
    // always -- see shouldComponentUpdate()) will reconcile children, reconcile
    // them before their children by sorting the array.
    dirtyComponents.sort(mountOrderComparator);

    // Any updates enqueued while reconciling must be performed after this entire
    // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
    // C, B could update twice in a single batch if C's render enqueues an update
    // to B (since B would have already updated, we should skip it, and the only
    // way we can know to do so is by checking the batch counter).
    updateBatchNumber++;

    for (var i = 0; i < len; i++) {
      // If a component is unmounted before pending changes apply, it will still
      // be here, but we assume that it has cleared its _pendingCallbacks and
      // that performUpdateIfNecessary is a noop.
      var component = dirtyComponents[i];

      // If performUpdateIfNecessary happens to enqueue any new updates, we
      // shouldn't execute the callbacks until the next render happens, so
      // stash the callbacks first
      var callbacks = component._pendingCallbacks;
      component._pendingCallbacks = null;

      var markerName;
      if (ReactFeatureFlags.logTopLevelRenders) {
        var namedComponent = component;
        // Duck type TopLevelWrapper. This is probably always true.
        if (component._currentElement.props === component._renderedComponent._currentElement) {
          namedComponent = component._renderedComponent;
        }
        markerName = 'React update: ' + namedComponent.getName();
        console.time(markerName);
      }

      ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);

      if (markerName) {
        console.timeEnd(markerName);
      }

      if (callbacks) {
        for (var j = 0; j < callbacks.length; j++) {
          transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
        }
      }
    }
  }

  var flushBatchedUpdates = function () {
    if (true) {
      ReactInstrumentation.debugTool.onBeginFlush();
    }

    // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
    // array and perform any updates enqueued by mount-ready handlers (i.e.,
    // componentDidUpdate) but we need to check here too in order to catch
    // updates enqueued by setState callbacks and asap calls.
    while (dirtyComponents.length || asapEnqueued) {
      if (dirtyComponents.length) {
        var transaction = ReactUpdatesFlushTransaction.getPooled();
        transaction.perform(runBatchedUpdates, null, transaction);
        ReactUpdatesFlushTransaction.release(transaction);
      }

      if (asapEnqueued) {
        asapEnqueued = false;
        var queue = asapCallbackQueue;
        asapCallbackQueue = CallbackQueue.getPooled();
        queue.notifyAll();
        CallbackQueue.release(queue);
      }
    }

    if (true) {
      ReactInstrumentation.debugTool.onEndFlush();
    }
  };

  /**
   * Mark a component as needing a rerender, adding an optional callback to a
   * list of functions which will be executed once the rerender occurs.
   */
  function enqueueUpdate(component) {
    ensureInjected();

    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (This is called by each top-level update
    // function, like setProps, setState, forceUpdate, etc.; creation and
    // destruction of top-level components is guarded in ReactMount.)

    if (!batchingStrategy.isBatchingUpdates) {
      batchingStrategy.batchedUpdates(enqueueUpdate, component);
      return;
    }

    dirtyComponents.push(component);
    if (component._updateBatchNumber == null) {
      component._updateBatchNumber = updateBatchNumber + 1;
    }
  }

  /**
   * Enqueue a callback to be run at the end of the current batching cycle. Throws
   * if no updates are currently being performed.
   */
  function asap(callback, context) {
    !batchingStrategy.isBatchingUpdates ?  true ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : void 0;
    asapCallbackQueue.enqueue(callback, context);
    asapEnqueued = true;
  }

  var ReactUpdatesInjection = {
    injectReconcileTransaction: function (ReconcileTransaction) {
      !ReconcileTransaction ?  true ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : void 0;
      ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
    },

    injectBatchingStrategy: function (_batchingStrategy) {
      !_batchingStrategy ?  true ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : void 0;
      !(typeof _batchingStrategy.batchedUpdates === 'function') ?  true ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : void 0;
      !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ?  true ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : void 0;
      batchingStrategy = _batchingStrategy;
    }
  };

  var ReactUpdates = {
    /**
     * React references `ReactReconcileTransaction` using this property in order
     * to allow dependency injection.
     *
     * @internal
     */
    ReactReconcileTransaction: null,

    batchedUpdates: batchedUpdates,
    enqueueUpdate: enqueueUpdate,
    flushBatchedUpdates: flushBatchedUpdates,
    injection: ReactUpdatesInjection,
    asap: asap
  };

  module.exports = ReactUpdates;

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

  var isObject = __webpack_require__(151);
  module.exports = function(it){
    if(!isObject(it))throw TypeError(it + ' is not an object!');
    return it;
  };

/***/ },
/* 149 */
/***/ function(module, exports) {

  var hasOwnProperty = {}.hasOwnProperty;
  module.exports = function(it, key){
    return hasOwnProperty.call(it, key);
  };

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

  var dP         = __webpack_require__(141)
    , createDesc = __webpack_require__(233);
  module.exports = __webpack_require__(138) ? function(object, key, value){
    return dP.f(object, key, createDesc(1, value));
  } : function(object, key, value){
    object[key] = value;
    return object;
  };

/***/ },
/* 151 */
/***/ function(module, exports) {

  module.exports = function(it){
    return typeof it === 'object' ? it !== null : typeof it === 'function';
  };

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

  // optional / simple context binding
  var aFunction = __webpack_require__(118);
  module.exports = function(fn, that, length){
    aFunction(fn);
    if(that === undefined)return fn;
    switch(length){
      case 1: return function(a){
        return fn.call(that, a);
      };
      case 2: return function(a, b){
        return fn.call(that, a, b);
      };
      case 3: return function(a, b, c){
        return fn.call(that, a, b, c);
      };
    }
    return function(/* ...args */){
      return fn.apply(that, arguments);
    };
  };

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

  var Map     = __webpack_require__(430)
    , $export = __webpack_require__(89)
    , shared  = __webpack_require__(247)('metadata')
    , store   = shared.store || (shared.store = new (__webpack_require__(433)));

  var getOrCreateMetadataMap = function(target, targetKey, create){
    var targetMetadata = store.get(target);
    if(!targetMetadata){
      if(!create)return undefined;
      store.set(target, targetMetadata = new Map);
    }
    var keyMetadata = targetMetadata.get(targetKey);
    if(!keyMetadata){
      if(!create)return undefined;
      targetMetadata.set(targetKey, keyMetadata = new Map);
    } return keyMetadata;
  };
  var ordinaryHasOwnMetadata = function(MetadataKey, O, P){
    var metadataMap = getOrCreateMetadataMap(O, P, false);
    return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
  };
  var ordinaryGetOwnMetadata = function(MetadataKey, O, P){
    var metadataMap = getOrCreateMetadataMap(O, P, false);
    return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
  };
  var ordinaryDefineOwnMetadata = function(MetadataKey, MetadataValue, O, P){
    getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
  };
  var ordinaryOwnMetadataKeys = function(target, targetKey){
    var metadataMap = getOrCreateMetadataMap(target, targetKey, false)
      , keys        = [];
    if(metadataMap)metadataMap.forEach(function(_, key){ keys.push(key); });
    return keys;
  };
  var toMetaKey = function(it){
    return it === undefined || typeof it == 'symbol' ? it : String(it);
  };
  var exp = function(O){
    $export($export.S, 'Reflect', O);
  };

  module.exports = {
    store: store,
    map: getOrCreateMetadataMap,
    has: ordinaryHasOwnMetadata,
    get: ordinaryGetOwnMetadata,
    set: ordinaryDefineOwnMetadata,
    keys: ordinaryOwnMetadataKeys,
    key: toMetaKey,
    exp: exp
  };

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  if(__webpack_require__(106)){
    var LIBRARY             = __webpack_require__(177)
      , global              = __webpack_require__(95)
      , fails               = __webpack_require__(96)
      , $export             = __webpack_require__(89)
      , $typed              = __webpack_require__(248)
      , $buffer             = __webpack_require__(334)
      , ctx                 = __webpack_require__(152)
      , anInstance          = __webpack_require__(159)
      , propertyDesc        = __webpack_require__(161)
      , hide                = __webpack_require__(117)
      , redefineAll         = __webpack_require__(181)
      , isInteger           = __webpack_require__(321)
      , toInteger           = __webpack_require__(162)
      , toLength            = __webpack_require__(112)
      , toIndex             = __webpack_require__(183)
      , toPrimitive         = __webpack_require__(145)
      , has                 = __webpack_require__(116)
      , same                = __webpack_require__(427)
      , classof             = __webpack_require__(194)
      , isObject            = __webpack_require__(98)
      , toObject            = __webpack_require__(113)
      , isArrayIter         = __webpack_require__(319)
      , create              = __webpack_require__(178)
      , getPrototypeOf      = __webpack_require__(123)
      , gOPN                = __webpack_require__(179).f
      , isIterable          = __webpack_require__(855)
      , getIterFn           = __webpack_require__(336)
      , uid                 = __webpack_require__(184)
      , wks                 = __webpack_require__(99)
      , createArrayMethod   = __webpack_require__(142)
      , createArrayIncludes = __webpack_require__(237)
      , speciesConstructor  = __webpack_require__(328)
      , ArrayIterators      = __webpack_require__(337)
      , Iterators           = __webpack_require__(176)
      , $iterDetect         = __webpack_require__(243)
      , setSpecies          = __webpack_require__(182)
      , arrayFill           = __webpack_require__(312)
      , arrayCopyWithin     = __webpack_require__(408)
      , $DP                 = __webpack_require__(107)
      , $GOPD               = __webpack_require__(122)
      , dP                  = $DP.f
      , gOPD                = $GOPD.f
      , RangeError          = global.RangeError
      , TypeError           = global.TypeError
      , Uint8Array          = global.Uint8Array
      , ARRAY_BUFFER        = 'ArrayBuffer'
      , SHARED_BUFFER       = 'Shared' + ARRAY_BUFFER
      , BYTES_PER_ELEMENT   = 'BYTES_PER_ELEMENT'
      , PROTOTYPE           = 'prototype'
      , ArrayProto          = Array[PROTOTYPE]
      , $ArrayBuffer        = $buffer.ArrayBuffer
      , $DataView           = $buffer.DataView
      , arrayForEach        = createArrayMethod(0)
      , arrayFilter         = createArrayMethod(2)
      , arraySome           = createArrayMethod(3)
      , arrayEvery          = createArrayMethod(4)
      , arrayFind           = createArrayMethod(5)
      , arrayFindIndex      = createArrayMethod(6)
      , arrayIncludes       = createArrayIncludes(true)
      , arrayIndexOf        = createArrayIncludes(false)
      , arrayValues         = ArrayIterators.values
      , arrayKeys           = ArrayIterators.keys
      , arrayEntries        = ArrayIterators.entries
      , arrayLastIndexOf    = ArrayProto.lastIndexOf
      , arrayReduce         = ArrayProto.reduce
      , arrayReduceRight    = ArrayProto.reduceRight
      , arrayJoin           = ArrayProto.join
      , arraySort           = ArrayProto.sort
      , arraySlice          = ArrayProto.slice
      , arrayToString       = ArrayProto.toString
      , arrayToLocaleString = ArrayProto.toLocaleString
      , ITERATOR            = wks('iterator')
      , TAG                 = wks('toStringTag')
      , TYPED_CONSTRUCTOR   = uid('typed_constructor')
      , DEF_CONSTRUCTOR     = uid('def_constructor')
      , ALL_CONSTRUCTORS    = $typed.CONSTR
      , TYPED_ARRAY         = $typed.TYPED
      , VIEW                = $typed.VIEW
      , WRONG_LENGTH        = 'Wrong length!';

    var $map = createArrayMethod(1, function(O, length){
      return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
    });

    var LITTLE_ENDIAN = fails(function(){
      return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
    });

    var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function(){
      new Uint8Array(1).set({});
    });

    var strictToLength = function(it, SAME){
      if(it === undefined)throw TypeError(WRONG_LENGTH);
      var number = +it
        , length = toLength(it);
      if(SAME && !same(number, length))throw RangeError(WRONG_LENGTH);
      return length;
    };

    var toOffset = function(it, BYTES){
      var offset = toInteger(it);
      if(offset < 0 || offset % BYTES)throw RangeError('Wrong offset!');
      return offset;
    };

    var validate = function(it){
      if(isObject(it) && TYPED_ARRAY in it)return it;
      throw TypeError(it + ' is not a typed array!');
    };

    var allocate = function(C, length){
      if(!(isObject(C) && TYPED_CONSTRUCTOR in C)){
        throw TypeError('It is not a typed array constructor!');
      } return new C(length);
    };

    var speciesFromList = function(O, list){
      return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
    };

    var fromList = function(C, list){
      var index  = 0
        , length = list.length
        , result = allocate(C, length);
      while(length > index)result[index] = list[index++];
      return result;
    };

    var addGetter = function(it, key, internal){
      dP(it, key, {get: function(){ return this._d[internal]; }});
    };

    var $from = function from(source /*, mapfn, thisArg */){
      var O       = toObject(source)
        , aLen    = arguments.length
        , mapfn   = aLen > 1 ? arguments[1] : undefined
        , mapping = mapfn !== undefined
        , iterFn  = getIterFn(O)
        , i, length, values, result, step, iterator;
      if(iterFn != undefined && !isArrayIter(iterFn)){
        for(iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++){
          values.push(step.value);
        } O = values;
      }
      if(mapping && aLen > 2)mapfn = ctx(mapfn, arguments[2], 2);
      for(i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++){
        result[i] = mapping ? mapfn(O[i], i) : O[i];
      }
      return result;
    };

    var $of = function of(/*...items*/){
      var index  = 0
        , length = arguments.length
        , result = allocate(this, length);
      while(length > index)result[index] = arguments[index++];
      return result;
    };

    // iOS Safari 6.x fails here
    var TO_LOCALE_BUG = !!Uint8Array && fails(function(){ arrayToLocaleString.call(new Uint8Array(1)); });

    var $toLocaleString = function toLocaleString(){
      return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
    };

    var proto = {
      copyWithin: function copyWithin(target, start /*, end */){
        return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
      },
      every: function every(callbackfn /*, thisArg */){
        return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      },
      fill: function fill(value /*, start, end */){ // eslint-disable-line no-unused-vars
        return arrayFill.apply(validate(this), arguments);
      },
      filter: function filter(callbackfn /*, thisArg */){
        return speciesFromList(this, arrayFilter(validate(this), callbackfn,
          arguments.length > 1 ? arguments[1] : undefined));
      },
      find: function find(predicate /*, thisArg */){
        return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
      },
      findIndex: function findIndex(predicate /*, thisArg */){
        return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
      },
      forEach: function forEach(callbackfn /*, thisArg */){
        arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      },
      indexOf: function indexOf(searchElement /*, fromIndex */){
        return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
      },
      includes: function includes(searchElement /*, fromIndex */){
        return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
      },
      join: function join(separator){ // eslint-disable-line no-unused-vars
        return arrayJoin.apply(validate(this), arguments);
      },
      lastIndexOf: function lastIndexOf(searchElement /*, fromIndex */){ // eslint-disable-line no-unused-vars
        return arrayLastIndexOf.apply(validate(this), arguments);
      },
      map: function map(mapfn /*, thisArg */){
        return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
      },
      reduce: function reduce(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
        return arrayReduce.apply(validate(this), arguments);
      },
      reduceRight: function reduceRight(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
        return arrayReduceRight.apply(validate(this), arguments);
      },
      reverse: function reverse(){
        var that   = this
          , length = validate(that).length
          , middle = Math.floor(length / 2)
          , index  = 0
          , value;
        while(index < middle){
          value         = that[index];
          that[index++] = that[--length];
          that[length]  = value;
        } return that;
      },
      some: function some(callbackfn /*, thisArg */){
        return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      },
      sort: function sort(comparefn){
        return arraySort.call(validate(this), comparefn);
      },
      subarray: function subarray(begin, end){
        var O      = validate(this)
          , length = O.length
          , $begin = toIndex(begin, length);
        return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
          O.buffer,
          O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
          toLength((end === undefined ? length : toIndex(end, length)) - $begin)
        );
      }
    };

    var $slice = function slice(start, end){
      return speciesFromList(this, arraySlice.call(validate(this), start, end));
    };

    var $set = function set(arrayLike /*, offset */){
      validate(this);
      var offset = toOffset(arguments[1], 1)
        , length = this.length
        , src    = toObject(arrayLike)
        , len    = toLength(src.length)
        , index  = 0;
      if(len + offset > length)throw RangeError(WRONG_LENGTH);
      while(index < len)this[offset + index] = src[index++];
    };

    var $iterators = {
      entries: function entries(){
        return arrayEntries.call(validate(this));
      },
      keys: function keys(){
        return arrayKeys.call(validate(this));
      },
      values: function values(){
        return arrayValues.call(validate(this));
      }
    };

    var isTAIndex = function(target, key){
      return isObject(target)
        && target[TYPED_ARRAY]
        && typeof key != 'symbol'
        && key in target
        && String(+key) == String(key);
    };
    var $getDesc = function getOwnPropertyDescriptor(target, key){
      return isTAIndex(target, key = toPrimitive(key, true))
        ? propertyDesc(2, target[key])
        : gOPD(target, key);
    };
    var $setDesc = function defineProperty(target, key, desc){
      if(isTAIndex(target, key = toPrimitive(key, true))
        && isObject(desc)
        && has(desc, 'value')
        && !has(desc, 'get')
        && !has(desc, 'set')
        // TODO: add validation descriptor w/o calling accessors
        && !desc.configurable
        && (!has(desc, 'writable') || desc.writable)
        && (!has(desc, 'enumerable') || desc.enumerable)
      ){
        target[key] = desc.value;
        return target;
      } else return dP(target, key, desc);
    };

    if(!ALL_CONSTRUCTORS){
      $GOPD.f = $getDesc;
      $DP.f   = $setDesc;
    }

    $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
      getOwnPropertyDescriptor: $getDesc,
      defineProperty:           $setDesc
    });

    if(fails(function(){ arrayToString.call({}); })){
      arrayToString = arrayToLocaleString = function toString(){
        return arrayJoin.call(this);
      }
    }

    var $TypedArrayPrototype$ = redefineAll({}, proto);
    redefineAll($TypedArrayPrototype$, $iterators);
    hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
    redefineAll($TypedArrayPrototype$, {
      slice:          $slice,
      set:            $set,
      constructor:    function(){ /* noop */ },
      toString:       arrayToString,
      toLocaleString: $toLocaleString
    });
    addGetter($TypedArrayPrototype$, 'buffer', 'b');
    addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
    addGetter($TypedArrayPrototype$, 'byteLength', 'l');
    addGetter($TypedArrayPrototype$, 'length', 'e');
    dP($TypedArrayPrototype$, TAG, {
      get: function(){ return this[TYPED_ARRAY]; }
    });

    module.exports = function(KEY, BYTES, wrapper, CLAMPED){
      CLAMPED = !!CLAMPED;
      var NAME       = KEY + (CLAMPED ? 'Clamped' : '') + 'Array'
        , ISNT_UINT8 = NAME != 'Uint8Array'
        , GETTER     = 'get' + KEY
        , SETTER     = 'set' + KEY
        , TypedArray = global[NAME]
        , Base       = TypedArray || {}
        , TAC        = TypedArray && getPrototypeOf(TypedArray)
        , FORCED     = !TypedArray || !$typed.ABV
        , O          = {}
        , TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
      var getter = function(that, index){
        var data = that._d;
        return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
      };
      var setter = function(that, index, value){
        var data = that._d;
        if(CLAMPED)value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
        data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
      };
      var addElement = function(that, index){
        dP(that, index, {
          get: function(){
            return getter(this, index);
          },
          set: function(value){
            return setter(this, index, value);
          },
          enumerable: true
        });
      };
      if(FORCED){
        TypedArray = wrapper(function(that, data, $offset, $length){
          anInstance(that, TypedArray, NAME, '_d');
          var index  = 0
            , offset = 0
            , buffer, byteLength, length, klass;
          if(!isObject(data)){
            length     = strictToLength(data, true)
            byteLength = length * BYTES;
            buffer     = new $ArrayBuffer(byteLength);
          } else if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
            buffer = data;
            offset = toOffset($offset, BYTES);
            var $len = data.byteLength;
            if($length === undefined){
              if($len % BYTES)throw RangeError(WRONG_LENGTH);
              byteLength = $len - offset;
              if(byteLength < 0)throw RangeError(WRONG_LENGTH);
            } else {
              byteLength = toLength($length) * BYTES;
              if(byteLength + offset > $len)throw RangeError(WRONG_LENGTH);
            }
            length = byteLength / BYTES;
          } else if(TYPED_ARRAY in data){
            return fromList(TypedArray, data);
          } else {
            return $from.call(TypedArray, data);
          }
          hide(that, '_d', {
            b: buffer,
            o: offset,
            l: byteLength,
            e: length,
            v: new $DataView(buffer)
          });
          while(index < length)addElement(that, index++);
        });
        TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
        hide(TypedArrayPrototype, 'constructor', TypedArray);
      } else if(!$iterDetect(function(iter){
        // V8 works with iterators, but fails in many other cases
        // https://code.google.com/p/v8/issues/detail?id=4552
        new TypedArray(null); // eslint-disable-line no-new
        new TypedArray(iter); // eslint-disable-line no-new
      }, true)){
        TypedArray = wrapper(function(that, data, $offset, $length){
          anInstance(that, TypedArray, NAME);
          var klass;
          // `ws` module bug, temporarily remove validation length for Uint8Array
          // https://github.com/websockets/ws/pull/645
          if(!isObject(data))return new Base(strictToLength(data, ISNT_UINT8));
          if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
            return $length !== undefined
              ? new Base(data, toOffset($offset, BYTES), $length)
              : $offset !== undefined
                ? new Base(data, toOffset($offset, BYTES))
                : new Base(data);
          }
          if(TYPED_ARRAY in data)return fromList(TypedArray, data);
          return $from.call(TypedArray, data);
        });
        arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function(key){
          if(!(key in TypedArray))hide(TypedArray, key, Base[key]);
        });
        TypedArray[PROTOTYPE] = TypedArrayPrototype;
        if(!LIBRARY)TypedArrayPrototype.constructor = TypedArray;
      }
      var $nativeIterator   = TypedArrayPrototype[ITERATOR]
        , CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined)
        , $iterator         = $iterators.values;
      hide(TypedArray, TYPED_CONSTRUCTOR, true);
      hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
      hide(TypedArrayPrototype, VIEW, true);
      hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

      if(CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)){
        dP(TypedArrayPrototype, TAG, {
          get: function(){ return NAME; }
        });
      }

      O[NAME] = TypedArray;

      $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

      $export($export.S, NAME, {
        BYTES_PER_ELEMENT: BYTES,
        from: $from,
        of: $of
      });

      if(!(BYTES_PER_ELEMENT in TypedArrayPrototype))hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

      $export($export.P, NAME, proto);

      setSpecies(NAME);

      $export($export.P + $export.F * FORCED_SET, NAME, {set: $set});

      $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

      $export($export.P + $export.F * (TypedArrayPrototype.toString != arrayToString), NAME, {toString: arrayToString});

      $export($export.P + $export.F * fails(function(){
        new TypedArray(1).slice();
      }), NAME, {slice: $slice});

      $export($export.P + $export.F * (fails(function(){
        return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString()
      }) || !fails(function(){
        TypedArrayPrototype.toLocaleString.call([1, 2]);
      })), NAME, {toLocaleString: $toLocaleString});

      Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
      if(!LIBRARY && !CORRECT_ITER_NAME)hide(TypedArrayPrototype, ITERATOR, $iterator);
    };
  } else module.exports = function(){ /* empty */ };

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule EventConstants
   */

  'use strict';

  var keyMirror = __webpack_require__(250);

  var PropagationPhases = keyMirror({ bubbled: null, captured: null });

  /**
   * Types of raw signals from the browser caught at the top level.
   */
  var topLevelTypes = keyMirror({
    topAbort: null,
    topAnimationEnd: null,
    topAnimationIteration: null,
    topAnimationStart: null,
    topBlur: null,
    topCanPlay: null,
    topCanPlayThrough: null,
    topChange: null,
    topClick: null,
    topCompositionEnd: null,
    topCompositionStart: null,
    topCompositionUpdate: null,
    topContextMenu: null,
    topCopy: null,
    topCut: null,
    topDoubleClick: null,
    topDrag: null,
    topDragEnd: null,
    topDragEnter: null,
    topDragExit: null,
    topDragLeave: null,
    topDragOver: null,
    topDragStart: null,
    topDrop: null,
    topDurationChange: null,
    topEmptied: null,
    topEncrypted: null,
    topEnded: null,
    topError: null,
    topFocus: null,
    topInput: null,
    topInvalid: null,
    topKeyDown: null,
    topKeyPress: null,
    topKeyUp: null,
    topLoad: null,
    topLoadedData: null,
    topLoadedMetadata: null,
    topLoadStart: null,
    topMouseDown: null,
    topMouseMove: null,
    topMouseOut: null,
    topMouseOver: null,
    topMouseUp: null,
    topPaste: null,
    topPause: null,
    topPlay: null,
    topPlaying: null,
    topProgress: null,
    topRateChange: null,
    topReset: null,
    topScroll: null,
    topSeeked: null,
    topSeeking: null,
    topSelectionChange: null,
    topStalled: null,
    topSubmit: null,
    topSuspend: null,
    topTextInput: null,
    topTimeUpdate: null,
    topTouchCancel: null,
    topTouchEnd: null,
    topTouchMove: null,
    topTouchStart: null,
    topTransitionEnd: null,
    topVolumeChange: null,
    topWaiting: null,
    topWheel: null
  });

  var EventConstants = {
    topLevelTypes: topLevelTypes,
    PropagationPhases: PropagationPhases
  };

  module.exports = EventConstants;

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SyntheticEvent
   */

  'use strict';

  var _assign = __webpack_require__(100);

  var PooledClass = __webpack_require__(166);

  var emptyFunction = __webpack_require__(124);
  var warning = __webpack_require__(94);

  var didWarnForAddedNewProperty = false;
  var isProxySupported = typeof Proxy === 'function';

  var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

  /**
   * @interface Event
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */
  var EventInterface = {
    type: null,
    target: null,
    // currentTarget is set when dispatching; no use in copying it here
    currentTarget: emptyFunction.thatReturnsNull,
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function (event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
  };

  /**
   * Synthetic events are dispatched by event plugins, typically in response to a
   * top-level event delegation handler.
   *
   * These systems should generally use pooling to reduce the frequency of garbage
   * collection. The system should check `isPersistent` to determine whether the
   * event should be released into the pool after being dispatched. Users that
   * need a persisted event should invoke `persist`.
   *
   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
   * normalizing browser quirks. Subclasses do not necessarily have to implement a
   * DOM interface; custom application-specific events can also subclass this.
   *
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {*} targetInst Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @param {DOMEventTarget} nativeEventTarget Target node.
   */
  function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    if (true) {
      // these have a getter/setter for warnings
      delete this.nativeEvent;
      delete this.preventDefault;
      delete this.stopPropagation;
    }

    this.dispatchConfig = dispatchConfig;
    this._targetInst = targetInst;
    this.nativeEvent = nativeEvent;

    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      if (!Interface.hasOwnProperty(propName)) {
        continue;
      }
      if (true) {
        delete this[propName]; // this has a getter/setter for warnings
      }
      var normalize = Interface[propName];
      if (normalize) {
        this[propName] = normalize(nativeEvent);
      } else {
        if (propName === 'target') {
          this.target = nativeEventTarget;
        } else {
          this[propName] = nativeEvent[propName];
        }
      }
    }

    var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
    if (defaultPrevented) {
      this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
    } else {
      this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
    }
    this.isPropagationStopped = emptyFunction.thatReturnsFalse;
    return this;
  }

  _assign(SyntheticEvent.prototype, {

    preventDefault: function () {
      this.defaultPrevented = true;
      var event = this.nativeEvent;
      if (!event) {
        return;
      }

      if (event.preventDefault) {
        event.preventDefault();
      } else {
        event.returnValue = false;
      }
      this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
    },

    stopPropagation: function () {
      var event = this.nativeEvent;
      if (!event) {
        return;
      }

      if (event.stopPropagation) {
        event.stopPropagation();
      } else {
        event.cancelBubble = true;
      }
      this.isPropagationStopped = emptyFunction.thatReturnsTrue;
    },

    /**
     * We release all dispatched `SyntheticEvent`s after each event loop, adding
     * them back into the pool. This allows a way to hold onto a reference that
     * won't be added back into the pool.
     */
    persist: function () {
      this.isPersistent = emptyFunction.thatReturnsTrue;
    },

    /**
     * Checks if this event should be released back into the pool.
     *
     * @return {boolean} True if this should not be released, false otherwise.
     */
    isPersistent: emptyFunction.thatReturnsFalse,

    /**
     * `PooledClass` looks for `destructor` on each instance it releases.
     */
    destructor: function () {
      var Interface = this.constructor.Interface;
      for (var propName in Interface) {
        if (true) {
          Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
        } else {
          this[propName] = null;
        }
      }
      for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
        this[shouldBeReleasedProperties[i]] = null;
      }
      if (true) {
        var noop = __webpack_require__(124);
        Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
        Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', noop));
        Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', noop));
      }
    }

  });

  SyntheticEvent.Interface = EventInterface;

  if (true) {
    if (isProxySupported) {
      /*eslint-disable no-func-assign */
      SyntheticEvent = new Proxy(SyntheticEvent, {
        construct: function (target, args) {
          return this.apply(target, Object.create(target.prototype), args);
        },
        apply: function (constructor, that, args) {
          return new Proxy(constructor.apply(that, args), {
            set: function (target, prop, value) {
              if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
                 true ? warning(didWarnForAddedNewProperty || target.isPersistent(), 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re adding a new property in the synthetic event object. ' + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
                didWarnForAddedNewProperty = true;
              }
              target[prop] = value;
              return true;
            }
          });
        }
      });
      /*eslint-enable no-func-assign */
    }
  }
  /**
   * Helper to reduce boilerplate when creating subclasses.
   *
   * @param {function} Class
   * @param {?object} Interface
   */
  SyntheticEvent.augmentClass = function (Class, Interface) {
    var Super = this;

    var E = function () {};
    E.prototype = Super.prototype;
    var prototype = new E();

    _assign(prototype, Class.prototype);
    Class.prototype = prototype;
    Class.prototype.constructor = Class;

    Class.Interface = _assign({}, Super.Interface, Interface);
    Class.augmentClass = Super.augmentClass;

    PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
  };

  PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

  module.exports = SyntheticEvent;

  /**
    * Helper to nullify syntheticEvent instance properties when destructing
    *
    * @param {object} SyntheticEvent
    * @param {String} propName
    * @return {object} defineProperty object
    */
  function getPooledWarningPropertyDefinition(propName, getVal) {
    var isFunction = typeof getVal === 'function';
    return {
      configurable: true,
      set: set,
      get: get
    };

    function set(val) {
      var action = isFunction ? 'setting the method' : 'setting the property';
      warn(action, 'This is effectively a no-op');
      return val;
    }

    function get() {
      var action = isFunction ? 'accessing the method' : 'accessing the property';
      var result = isFunction ? 'This is a no-op function' : 'This is set to null';
      warn(action, result);
      return getVal;
    }

    function warn(action, result) {
      var warningCondition = false;
       true ? warning(warningCondition, 'This synthetic event is reused for performance reasons. If you\'re seeing this, ' + 'you\'re %s `%s` on a released/nullified synthetic event. %s. ' + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
    }
  }

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;
  exports.MESSAGES = undefined;

  var _stringify = __webpack_require__(170);

  var _stringify2 = _interopRequireDefault(_stringify);

  exports.get = get;
  /*istanbul ignore next*/exports.parseArgs = parseArgs;

  var /*istanbul ignore next*/_util = __webpack_require__(168);

  /*istanbul ignore next*/
  var util = _interopRequireWildcard(_util);

  /*istanbul ignore next*/
  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Mapping of messages to be used in Babel.
   * Messages can include $0-style placeholders.
   */

  var MESSAGES = /*istanbul ignore next*/exports.MESSAGES = {
    tailCallReassignmentDeopt: "Function reference has been reassigned, so it will probably be dereferenced, therefore we can't optimise this with confidence",
    classesIllegalBareSuper: "Illegal use of bare super",
    classesIllegalSuperCall: "Direct super call is illegal in non-constructor, use super.$1() instead",
    scopeDuplicateDeclaration: "Duplicate declaration $1",
    settersNoRest: "Setters aren't allowed to have a rest",
    noAssignmentsInForHead: "No assignments allowed in for-in/of head",
    expectedMemberExpressionOrIdentifier: "Expected type MemberExpression or Identifier",
    invalidParentForThisNode: "We don't know how to handle this node within the current parent - please open an issue",
    readOnly: "$1 is read-only",
    unknownForHead: "Unknown node type $1 in ForStatement",
    didYouMean: "Did you mean $1?",
    codeGeneratorDeopt: "Note: The code generator has deoptimised the styling of $1 as it exceeds the max of $2.",
    missingTemplatesDirectory: "no templates directory - this is most likely the result of a broken `npm publish`. Please report to https://github.com/babel/babel/issues",
    unsupportedOutputType: "Unsupported output type $1",
    illegalMethodName: "Illegal method name $1",
    lostTrackNodePath: "We lost track of this node's position, likely because the AST was directly manipulated",

    modulesIllegalExportName: "Illegal export $1",
    modulesDuplicateDeclarations: "Duplicate module declarations with the same source but in different scopes",

    undeclaredVariable: "Reference to undeclared variable $1",
    undeclaredVariableType: "Referencing a type alias outside of a type annotation",
    undeclaredVariableSuggestion: "Reference to undeclared variable $1 - did you mean $2?",

    traverseNeedsParent: "You must pass a scope and parentPath unless traversing a Program/File. Instead of that you tried to traverse a $1 node without passing scope and parentPath.",
    traverseVerifyRootFunction: "You passed `traverse()` a function when it expected a visitor object, are you sure you didn't mean `{ enter: Function }`?",
    traverseVerifyVisitorProperty: "You passed `traverse()` a visitor object with the property $1 that has the invalid property $2",
    traverseVerifyNodeType: "You gave us a visitor for the node type $1 but it's not a valid type",

    pluginNotObject: "Plugin $2 specified in $1 was expected to return an object when invoked but returned $3",
    pluginNotFunction: "Plugin $2 specified in $1 was expected to return a function but returned $3",
    pluginUnknown: "Unknown plugin $1 specified in $2 at $3, attempted to resolve relative to $4",
    pluginInvalidProperty: "Plugin $2 specified in $1 provided an invalid property of $3"
  };

  /**
   * Get a message with $0 placeholders replaced by arguments.
   */

  /* eslint max-len: 0 */

  function get(key) {
    /*istanbul ignore next*/
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var msg = MESSAGES[key];
    if (!msg) throw new ReferenceError( /*istanbul ignore next*/"Unknown message " + /*istanbul ignore next*/(0, _stringify2.default)(key));

    // stringify args
    args = parseArgs(args);

    // replace $0 placeholders with args
    return msg.replace(/\$(\d+)/g, function (str, i) {
      return args[i - 1];
    });
  }

  /**
   * Stingify arguments to be used inside messages.
   */

  function parseArgs(args) {
    return args.map(function (val) {
      if (val != null && val.inspect) {
        return val.inspect();
      } else {
        try {
          return (/*istanbul ignore next*/(0, _stringify2.default)(val) || val + ""
          );
        } catch (e) {
          return util.inspect(val);
        }
      }
    });
  }

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  exports.__esModule = true;
  exports.DEPRECATED_KEYS = exports.BUILDER_KEYS = exports.NODE_FIELDS = exports.ALIAS_KEYS = exports.VISITOR_KEYS = undefined;

  var _getIterator2 = __webpack_require__(93);

  var _getIterator3 = _interopRequireDefault(_getIterator2);

  var _stringify = __webpack_require__(170);

  var _stringify2 = _interopRequireDefault(_stringify);

  var _typeof2 = __webpack_require__(127);

  var _typeof3 = _interopRequireDefault(_typeof2);

  exports.assertEach = assertEach;
  exports.assertOneOf = assertOneOf;
  exports.assertNodeType = assertNodeType;
  exports.assertNodeOrValueType = assertNodeOrValueType;
  exports.assertValueType = assertValueType;
  exports.chain = chain;
  exports.default = defineType;

  var _index = __webpack_require__(90);

  var t = _interopRequireWildcard(_index);

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var VISITOR_KEYS = exports.VISITOR_KEYS = {};
  var ALIAS_KEYS = exports.ALIAS_KEYS = {};
  var NODE_FIELDS = exports.NODE_FIELDS = {};
  var BUILDER_KEYS = exports.BUILDER_KEYS = {};
  var DEPRECATED_KEYS = exports.DEPRECATED_KEYS = {};

  function getType(val) {
    if (Array.isArray(val)) {
      return "array";
    } else if (val === null) {
      return "null";
    } else if (val === undefined) {
      return "undefined";
    } else {
      return typeof val === "undefined" ? "undefined" : (0, _typeof3.default)(val);
    }
  }

  function assertEach(callback) {
    function validator(node, key, val) {
      if (!Array.isArray(val)) return;

      for (var i = 0; i < val.length; i++) {
        callback(node, key + "[" + i + "]", val[i]);
      }
    }
    validator.each = callback;
    return validator;
  }

  function assertOneOf() {
    for (var _len = arguments.length, vals = Array(_len), _key = 0; _key < _len; _key++) {
      vals[_key] = arguments[_key];
    }

    function validate(node, key, val) {
      if (vals.indexOf(val) < 0) {
        throw new TypeError("Property " + key + " expected value to be one of " + (0, _stringify2.default)(vals) + " but got " + (0, _stringify2.default)(val));
      }
    }

    validate.oneOf = vals;

    return validate;
  }

  function assertNodeType() {
    for (var _len2 = arguments.length, types = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      types[_key2] = arguments[_key2];
    }

    function validate(node, key, val) {
      var valid = false;

      for (var _iterator = types, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var type = _ref;

        if (t.is(type, val)) {
          valid = true;
          break;
        }
      }

      if (!valid) {
        throw new TypeError("Property " + key + " of " + node.type + " expected node to be of a type " + (0, _stringify2.default)(types) + " " + ("but instead got " + (0, _stringify2.default)(val && val.type)));
      }
    }

    validate.oneOfNodeTypes = types;

    return validate;
  }

  function assertNodeOrValueType() {
    for (var _len3 = arguments.length, types = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      types[_key3] = arguments[_key3];
    }

    function validate(node, key, val) {
      var valid = false;

      for (var _iterator2 = types, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var type = _ref2;

        if (getType(val) === type || t.is(type, val)) {
          valid = true;
          break;
        }
      }

      if (!valid) {
        throw new TypeError("Property " + key + " of " + node.type + " expected node to be of a type " + (0, _stringify2.default)(types) + " " + ("but instead got " + (0, _stringify2.default)(val && val.type)));
      }
    }

    validate.oneOfNodeOrValueTypes = types;

    return validate;
  }

  function assertValueType(type) {
    function validate(node, key, val) {
      var valid = getType(val) === type;

      if (!valid) {
        throw new TypeError("Property " + key + " expected type of " + type + " but got " + getType(val));
      }
    }

    validate.type = type;

    return validate;
  }

  function chain() {
    for (var _len4 = arguments.length, fns = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      fns[_key4] = arguments[_key4];
    }

    function validate() {
      for (var _iterator3 = fns, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);;) {
        var _ref3;

        if (_isArray3) {
          if (_i3 >= _iterator3.length) break;
          _ref3 = _iterator3[_i3++];
        } else {
          _i3 = _iterator3.next();
          if (_i3.done) break;
          _ref3 = _i3.value;
        }

        var fn = _ref3;

        fn.apply(undefined, arguments);
      }
    }
    validate.chainOf = fns;
    return validate;
  }

  function defineType(type) {
    var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var inherits = opts.inherits && store[opts.inherits] || {};

    opts.fields = opts.fields || inherits.fields || {};
    opts.visitor = opts.visitor || inherits.visitor || [];
    opts.aliases = opts.aliases || inherits.aliases || [];
    opts.builder = opts.builder || inherits.builder || opts.visitor || [];

    if (opts.deprecatedAlias) {
      DEPRECATED_KEYS[opts.deprecatedAlias] = type;
    }

    // ensure all field keys are represented in `fields`
    for (var _iterator4 = opts.visitor.concat(opts.builder), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4);;) {
      var _ref4;

      if (_isArray4) {
        if (_i4 >= _iterator4.length) break;
        _ref4 = _iterator4[_i4++];
      } else {
        _i4 = _iterator4.next();
        if (_i4.done) break;
        _ref4 = _i4.value;
      }

      var _key5 = _ref4;

      opts.fields[_key5] = opts.fields[_key5] || {};
    }

    for (var key in opts.fields) {
      var field = opts.fields[key];

      if (field.default === undefined) {
        field.default = null;
      } else if (!field.validate) {
        field.validate = assertValueType(getType(field.default));
      }
    }

    VISITOR_KEYS[type] = opts.visitor;
    BUILDER_KEYS[type] = opts.builder;
    NODE_FIELDS[type] = opts.fields;
    ALIAS_KEYS[type] = opts.aliases;

    store[type] = opts;
  }

  var store = {};

/***/ },
/* 159 */
/***/ function(module, exports) {

  module.exports = function(it, Constructor, name, forbiddenField){
    if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
      throw TypeError(name + ': incorrect invocation!');
    } return it;
  };

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

  var META     = __webpack_require__(184)('meta')
    , isObject = __webpack_require__(98)
    , has      = __webpack_require__(116)
    , setDesc  = __webpack_require__(107).f
    , id       = 0;
  var isExtensible = Object.isExtensible || function(){
    return true;
  };
  var FREEZE = !__webpack_require__(96)(function(){
    return isExtensible(Object.preventExtensions({}));
  });
  var setMeta = function(it){
    setDesc(it, META, {value: {
      i: 'O' + ++id, // object ID
      w: {}          // weak collections IDs
    }});
  };
  var fastKey = function(it, create){
    // return primitive with prefix
    if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
    if(!has(it, META)){
      // can't set metadata to uncaught frozen object
      if(!isExtensible(it))return 'F';
      // not necessary to add metadata
      if(!create)return 'E';
      // add missing metadata
      setMeta(it);
    // return object ID
    } return it[META].i;
  };
  var getWeak = function(it, create){
    if(!has(it, META)){
      // can't set metadata to uncaught frozen object
      if(!isExtensible(it))return true;
      // not necessary to add metadata
      if(!create)return false;
      // add missing metadata
      setMeta(it);
    // return hash weak collections IDs
    } return it[META].w;
  };
  // add metadata on freeze-family methods calling
  var onFreeze = function(it){
    if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
    return it;
  };
  var meta = module.exports = {
    KEY:      META,
    NEED:     false,
    fastKey:  fastKey,
    getWeak:  getWeak,
    onFreeze: onFreeze
  };

/***/ },
/* 161 */
/***/ function(module, exports) {

  module.exports = function(bitmap, value){
    return {
      enumerable  : !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable    : !(bitmap & 4),
      value       : value
    };
  };

/***/ },
/* 162 */
/***/ function(module, exports) {

  // 7.1.4 ToInteger
  var ceil  = Math.ceil
    , floor = Math.floor;
  module.exports = function(it){
    return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
  };

/***/ },
/* 163 */
/***/ function(module, exports) {

  "use strict";

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   */

  /**
   * Allows extraction of a minified key. Let's the build system minify keys
   * without losing the ability to dynamically use key strings as values
   * themselves. Pass in an object with a single key/val pair and it will return
   * you the string key of that single record. Suppose you want to grab the
   * value for a key 'className' inside of an object. Key/val minification may
   * have aliased that key to be 'xa12'. keyOf({className: null}) will return
   * 'xa12' in that case. Resolve keys you want to use once at startup time, then
   * reuse those resolutions.
   */
  var keyOf = function keyOf(oneKeyObj) {
    var key;
    for (key in oneKeyObj) {
      if (!oneKeyObj.hasOwnProperty(key)) {
        continue;
      }
      return key;
    }
    return null;
  };

  module.exports = keyOf;

/***/ },
/* 164 */
/***/ function(module, exports) {

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  module.exports = isObjectLike;


/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

  var baseHas = __webpack_require__(344),
      baseKeys = __webpack_require__(1101),
      indexKeys = __webpack_require__(471),
      isArrayLike = __webpack_require__(186),
      isIndex = __webpack_require__(258),
      isPrototype = __webpack_require__(260);

  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */
  function keys(object) {
    var isProto = isPrototype(object);
    if (!(isProto || isArrayLike(object))) {
      return baseKeys(object);
    }
    var indexes = indexKeys(object),
        skipIndexes = !!indexes,
        result = indexes || [],
        length = result.length;

    for (var key in object) {
      if (baseHas(object, key) &&
          !(skipIndexes && (key == 'length' || isIndex(key, length))) &&
          !(isProto && key == 'constructor')) {
        result.push(key);
      }
    }
    return result;
  }

  module.exports = keys;


/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule PooledClass
   */

  'use strict';

  var invariant = __webpack_require__(91);

  /**
   * Static poolers. Several custom versions for each potential number of
   * arguments. A completely generic pooler is easy to implement, but would
   * require accessing the `arguments` object. In each of these, `this` refers to
   * the Class itself, not an instance. If any others are needed, simply add them
   * here, or in their own files.
   */
  var oneArgumentPooler = function (copyFieldsFrom) {
    var Klass = this;
    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, copyFieldsFrom);
      return instance;
    } else {
      return new Klass(copyFieldsFrom);
    }
  };

  var twoArgumentPooler = function (a1, a2) {
    var Klass = this;
    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, a1, a2);
      return instance;
    } else {
      return new Klass(a1, a2);
    }
  };

  var threeArgumentPooler = function (a1, a2, a3) {
    var Klass = this;
    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, a1, a2, a3);
      return instance;
    } else {
      return new Klass(a1, a2, a3);
    }
  };

  var fourArgumentPooler = function (a1, a2, a3, a4) {
    var Klass = this;
    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, a1, a2, a3, a4);
      return instance;
    } else {
      return new Klass(a1, a2, a3, a4);
    }
  };

  var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
    var Klass = this;
    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, a1, a2, a3, a4, a5);
      return instance;
    } else {
      return new Klass(a1, a2, a3, a4, a5);
    }
  };

  var standardReleaser = function (instance) {
    var Klass = this;
    !(instance instanceof Klass) ?  true ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : void 0;
    instance.destructor();
    if (Klass.instancePool.length < Klass.poolSize) {
      Klass.instancePool.push(instance);
    }
  };

  var DEFAULT_POOL_SIZE = 10;
  var DEFAULT_POOLER = oneArgumentPooler;

  /**
   * Augments `CopyConstructor` to be a poolable class, augmenting only the class
   * itself (statically) not adding any prototypical fields. Any CopyConstructor
   * you give this may have a `poolSize` property, and will look for a
   * prototypical `destructor` on instances (optional).
   *
   * @param {Function} CopyConstructor Constructor that can be used to reset.
   * @param {Function} pooler Customizable pooler.
   */
  var addPoolingTo = function (CopyConstructor, pooler) {
    var NewKlass = CopyConstructor;
    NewKlass.instancePool = [];
    NewKlass.getPooled = pooler || DEFAULT_POOLER;
    if (!NewKlass.poolSize) {
      NewKlass.poolSize = DEFAULT_POOL_SIZE;
    }
    NewKlass.release = standardReleaser;
    return NewKlass;
  };

  var PooledClass = {
    addPoolingTo: addPoolingTo,
    oneArgumentPooler: oneArgumentPooler,
    twoArgumentPooler: twoArgumentPooler,
    threeArgumentPooler: threeArgumentPooler,
    fourArgumentPooler: fourArgumentPooler,
    fiveArgumentPooler: fiveArgumentPooler
  };

  module.exports = PooledClass;

/***/ },
/* 167 */
/***/ function(module, exports) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactCurrentOwner
   */

  'use strict';

  /**
   * Keeps track of the current owner.
   *
   * The current owner is the component who should own any components that are
   * currently being constructed.
   */

  var ReactCurrentOwner = {

    /**
     * @internal
     * @type {ReactComponent}
     */
    current: null

  };

  module.exports = ReactCurrentOwner;

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  var formatRegExp = /%[sdj%]/g;
  exports.format = function(f) {
    if (!isString(f)) {
      var objects = [];
      for (var i = 0; i < arguments.length; i++) {
        objects.push(inspect(arguments[i]));
      }
      return objects.join(' ');
    }

    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace(formatRegExp, function(x) {
      if (x === '%%') return '%';
      if (i >= len) return x;
      switch (x) {
        case '%s': return String(args[i++]);
        case '%d': return Number(args[i++]);
        case '%j':
          try {
            return JSON.stringify(args[i++]);
          } catch (_) {
            return '[Circular]';
          }
        default:
          return x;
      }
    });
    for (var x = args[i]; i < len; x = args[++i]) {
      if (isNull(x) || !isObject(x)) {
        str += ' ' + x;
      } else {
        str += ' ' + inspect(x);
      }
    }
    return str;
  };


  // Mark that a method should not be used.
  // Returns a modified function which warns once by default.
  // If --no-deprecation is set, then it is a no-op.
  exports.deprecate = function(fn, msg) {
    // Allow for deprecating things in the process of starting up.
    if (isUndefined(global.process)) {
      return function() {
        return exports.deprecate(fn, msg).apply(this, arguments);
      };
    }

    if (process.noDeprecation === true) {
      return fn;
    }

    var warned = false;
    function deprecated() {
      if (!warned) {
        if (process.throwDeprecation) {
          throw new Error(msg);
        } else if (process.traceDeprecation) {
          console.trace(msg);
        } else {
          console.error(msg);
        }
        warned = true;
      }
      return fn.apply(this, arguments);
    }

    return deprecated;
  };


  var debugs = {};
  var debugEnviron;
  exports.debuglog = function(set) {
    if (isUndefined(debugEnviron))
      debugEnviron = process.env.NODE_DEBUG || '';
    set = set.toUpperCase();
    if (!debugs[set]) {
      if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
        var pid = process.pid;
        debugs[set] = function() {
          var msg = exports.format.apply(exports, arguments);
          console.error('%s %d: %s', set, pid, msg);
        };
      } else {
        debugs[set] = function() {};
      }
    }
    return debugs[set];
  };


  /**
   * Echos the value of a value. Trys to print the value out
   * in the best way possible given the different types.
   *
   * @param {Object} obj The object to print out.
   * @param {Object} opts Optional options object that alters the output.
   */
  /* legacy: obj, showHidden, depth, colors*/
  function inspect(obj, opts) {
    // default options
    var ctx = {
      seen: [],
      stylize: stylizeNoColor
    };
    // legacy...
    if (arguments.length >= 3) ctx.depth = arguments[2];
    if (arguments.length >= 4) ctx.colors = arguments[3];
    if (isBoolean(opts)) {
      // legacy...
      ctx.showHidden = opts;
    } else if (opts) {
      // got an "options" object
      exports._extend(ctx, opts);
    }
    // set default options
    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
    if (isUndefined(ctx.depth)) ctx.depth = 2;
    if (isUndefined(ctx.colors)) ctx.colors = false;
    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
    if (ctx.colors) ctx.stylize = stylizeWithColor;
    return formatValue(ctx, obj, ctx.depth);
  }
  exports.inspect = inspect;


  // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
  inspect.colors = {
    'bold' : [1, 22],
    'italic' : [3, 23],
    'underline' : [4, 24],
    'inverse' : [7, 27],
    'white' : [37, 39],
    'grey' : [90, 39],
    'black' : [30, 39],
    'blue' : [34, 39],
    'cyan' : [36, 39],
    'green' : [32, 39],
    'magenta' : [35, 39],
    'red' : [31, 39],
    'yellow' : [33, 39]
  };

  // Don't use 'blue' not visible on cmd.exe
  inspect.styles = {
    'special': 'cyan',
    'number': 'yellow',
    'boolean': 'yellow',
    'undefined': 'grey',
    'null': 'bold',
    'string': 'green',
    'date': 'magenta',
    // "name": intentionally not styling
    'regexp': 'red'
  };


  function stylizeWithColor(str, styleType) {
    var style = inspect.styles[styleType];

    if (style) {
      return '\u001b[' + inspect.colors[style][0] + 'm' + str +
             '\u001b[' + inspect.colors[style][1] + 'm';
    } else {
      return str;
    }
  }


  function stylizeNoColor(str, styleType) {
    return str;
  }


  function arrayToHash(array) {
    var hash = {};

    array.forEach(function(val, idx) {
      hash[val] = true;
    });

    return hash;
  }


  function formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (ctx.customInspect &&
        value &&
        isFunction(value.inspect) &&
        // Filter out the util module, it's inspect function is special
        value.inspect !== exports.inspect &&
        // Also filter out any prototype objects using the circular check.
        !(value.constructor && value.constructor.prototype === value)) {
      var ret = value.inspect(recurseTimes, ctx);
      if (!isString(ret)) {
        ret = formatValue(ctx, ret, recurseTimes);
      }
      return ret;
    }

    // Primitive types cannot have properties
    var primitive = formatPrimitive(ctx, value);
    if (primitive) {
      return primitive;
    }

    // Look up the keys of the object.
    var keys = Object.keys(value);
    var visibleKeys = arrayToHash(keys);

    if (ctx.showHidden) {
      keys = Object.getOwnPropertyNames(value);
    }

    // IE doesn't make error fields non-enumerable
    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
    if (isError(value)
        && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
      return formatError(value);
    }

    // Some type of object without properties can be shortcutted.
    if (keys.length === 0) {
      if (isFunction(value)) {
        var name = value.name ? ': ' + value.name : '';
        return ctx.stylize('[Function' + name + ']', 'special');
      }
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      }
      if (isDate(value)) {
        return ctx.stylize(Date.prototype.toString.call(value), 'date');
      }
      if (isError(value)) {
        return formatError(value);
      }
    }

    var base = '', array = false, braces = ['{', '}'];

    // Make Array say that they are Array
    if (isArray(value)) {
      array = true;
      braces = ['[', ']'];
    }

    // Make functions say that they are functions
    if (isFunction(value)) {
      var n = value.name ? ': ' + value.name : '';
      base = ' [Function' + n + ']';
    }

    // Make RegExps say that they are RegExps
    if (isRegExp(value)) {
      base = ' ' + RegExp.prototype.toString.call(value);
    }

    // Make dates with properties first say the date
    if (isDate(value)) {
      base = ' ' + Date.prototype.toUTCString.call(value);
    }

    // Make error with message first say the error
    if (isError(value)) {
      base = ' ' + formatError(value);
    }

    if (keys.length === 0 && (!array || value.length == 0)) {
      return braces[0] + base + braces[1];
    }

    if (recurseTimes < 0) {
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      } else {
        return ctx.stylize('[Object]', 'special');
      }
    }

    ctx.seen.push(value);

    var output;
    if (array) {
      output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    } else {
      output = keys.map(function(key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
      });
    }

    ctx.seen.pop();

    return reduceToSingleString(output, base, braces);
  }


  function formatPrimitive(ctx, value) {
    if (isUndefined(value))
      return ctx.stylize('undefined', 'undefined');
    if (isString(value)) {
      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                               .replace(/'/g, "\\'")
                                               .replace(/\\"/g, '"') + '\'';
      return ctx.stylize(simple, 'string');
    }
    if (isNumber(value))
      return ctx.stylize('' + value, 'number');
    if (isBoolean(value))
      return ctx.stylize('' + value, 'boolean');
    // For some reason typeof null is "object", so special case here.
    if (isNull(value))
      return ctx.stylize('null', 'null');
  }


  function formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
  }


  function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];
    for (var i = 0, l = value.length; i < l; ++i) {
      if (hasOwnProperty(value, String(i))) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            String(i), true));
      } else {
        output.push('');
      }
    }
    keys.forEach(function(key) {
      if (!key.match(/^\d+$/)) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            key, true));
      }
    });
    return output;
  }


  function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
    if (desc.get) {
      if (desc.set) {
        str = ctx.stylize('[Getter/Setter]', 'special');
      } else {
        str = ctx.stylize('[Getter]', 'special');
      }
    } else {
      if (desc.set) {
        str = ctx.stylize('[Setter]', 'special');
      }
    }
    if (!hasOwnProperty(visibleKeys, key)) {
      name = '[' + key + ']';
    }
    if (!str) {
      if (ctx.seen.indexOf(desc.value) < 0) {
        if (isNull(recurseTimes)) {
          str = formatValue(ctx, desc.value, null);
        } else {
          str = formatValue(ctx, desc.value, recurseTimes - 1);
        }
        if (str.indexOf('\n') > -1) {
          if (array) {
            str = str.split('\n').map(function(line) {
              return '  ' + line;
            }).join('\n').substr(2);
          } else {
            str = '\n' + str.split('\n').map(function(line) {
              return '   ' + line;
            }).join('\n');
          }
        }
      } else {
        str = ctx.stylize('[Circular]', 'special');
      }
    }
    if (isUndefined(name)) {
      if (array && key.match(/^\d+$/)) {
        return str;
      }
      name = JSON.stringify('' + key);
      if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
        name = name.substr(1, name.length - 2);
        name = ctx.stylize(name, 'name');
      } else {
        name = name.replace(/'/g, "\\'")
                   .replace(/\\"/g, '"')
                   .replace(/(^"|"$)/g, "'");
        name = ctx.stylize(name, 'string');
      }
    }

    return name + ': ' + str;
  }


  function reduceToSingleString(output, base, braces) {
    var numLinesEst = 0;
    var length = output.reduce(function(prev, cur) {
      numLinesEst++;
      if (cur.indexOf('\n') >= 0) numLinesEst++;
      return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
    }, 0);

    if (length > 60) {
      return braces[0] +
             (base === '' ? '' : base + '\n ') +
             ' ' +
             output.join(',\n  ') +
             ' ' +
             braces[1];
    }

    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
  }


  // NOTE: These type checking functions intentionally don't use `instanceof`
  // because it is fragile and can be easily faked with `Object.create()`.
  function isArray(ar) {
    return Array.isArray(ar);
  }
  exports.isArray = isArray;

  function isBoolean(arg) {
    return typeof arg === 'boolean';
  }
  exports.isBoolean = isBoolean;

  function isNull(arg) {
    return arg === null;
  }
  exports.isNull = isNull;

  function isNullOrUndefined(arg) {
    return arg == null;
  }
  exports.isNullOrUndefined = isNullOrUndefined;

  function isNumber(arg) {
    return typeof arg === 'number';
  }
  exports.isNumber = isNumber;

  function isString(arg) {
    return typeof arg === 'string';
  }
  exports.isString = isString;

  function isSymbol(arg) {
    return typeof arg === 'symbol';
  }
  exports.isSymbol = isSymbol;

  function isUndefined(arg) {
    return arg === void 0;
  }
  exports.isUndefined = isUndefined;

  function isRegExp(re) {
    return isObject(re) && objectToString(re) === '[object RegExp]';
  }
  exports.isRegExp = isRegExp;

  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }
  exports.isObject = isObject;

  function isDate(d) {
    return isObject(d) && objectToString(d) === '[object Date]';
  }
  exports.isDate = isDate;

  function isError(e) {
    return isObject(e) &&
        (objectToString(e) === '[object Error]' || e instanceof Error);
  }
  exports.isError = isError;

  function isFunction(arg) {
    return typeof arg === 'function';
  }
  exports.isFunction = isFunction;

  function isPrimitive(arg) {
    return arg === null ||
           typeof arg === 'boolean' ||
           typeof arg === 'number' ||
           typeof arg === 'string' ||
           typeof arg === 'symbol' ||  // ES6 symbol
           typeof arg === 'undefined';
  }
  exports.isPrimitive = isPrimitive;

  exports.isBuffer = __webpack_require__(1296);

  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }


  function pad(n) {
    return n < 10 ? '0' + n.toString(10) : n.toString(10);
  }


  var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
                'Oct', 'Nov', 'Dec'];

  // 26 Feb 16:19:34
  function timestamp() {
    var d = new Date();
    var time = [pad(d.getHours()),
                pad(d.getMinutes()),
                pad(d.getSeconds())].join(':');
    return [d.getDate(), months[d.getMonth()], time].join(' ');
  }


  // log is just a thin wrapper to console.log that prepends a timestamp
  exports.log = function() {
    console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
  };


  /**
   * Inherit the prototype methods from one constructor into another.
   *
   * The Function.prototype.inherits from lang.js rewritten as a standalone
   * function (not on Function.prototype). NOTE: If this file is to be loaded
   * during bootstrapping this function needs to be rewritten using some native
   * functions as prototype setup using normal JavaScript does not work as
   * expected during bootstrapping (see mirror.js in r114903).
   *
   * @param {function} ctor Constructor function which needs to inherit the
   *     prototype.
   * @param {function} superCtor Constructor function to inherit prototype from.
   */
  exports.inherits = __webpack_require__(185);

  exports._extend = function(origin, add) {
    // Don't do anything if add isn't an object
    if (!add || !isObject(add)) return origin;

    var keys = Object.keys(add);
    var i = keys.length;
    while (i--) {
      origin[keys[i]] = add[keys[i]];
    }
    return origin;
  };

  function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  /* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(111)))

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2014-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   */

  'use strict';

  /**
   * Similar to invariant but only logs a warning if the condition is not met.
   * This can be used to log issues in development environments in critical
   * paths. Removing the logging code for production environments will keep the
   * same logic and follow the same code paths.
   */

  var warning = function() {};

  if (true) {
    warning = function(condition, format, args) {
      var len = arguments.length;
      args = new Array(len > 2 ? len - 2 : 0);
      for (var key = 2; key < len; key++) {
        args[key - 2] = arguments[key];
      }
      if (format === undefined) {
        throw new Error(
          '`warning(condition, format, ...args)` requires a warning ' +
          'message argument'
        );
      }

      if (format.length < 10 || (/^[s\W]*$/).test(format)) {
        throw new Error(
          'The warning format should be able to uniquely identify this ' +
          'warning. Please, use a more descriptive format than: ' + format
        );
      }

      if (!condition) {
        var argIndex = 0;
        var message = 'Warning: ' +
          format.replace(/%s/g, function() {
            return args[argIndex++];
          });
        if (typeof console !== 'undefined') {
          console.error(message);
        }
        try {
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch(x) {}
      }
    };
  }

  module.exports = warning;


/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = { "default": __webpack_require__(798), __esModule: true };

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  exports.__esModule = true;

  var _setPrototypeOf = __webpack_require__(740);

  var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

  var _create = __webpack_require__(189);

  var _create2 = _interopRequireDefault(_create);

  var _typeof2 = __webpack_require__(127);

  var _typeof3 = _interopRequireDefault(_typeof2);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  exports.default = function (subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
    }

    subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
  };

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  exports.__esModule = true;

  var _typeof2 = __webpack_require__(127);

  var _typeof3 = _interopRequireDefault(_typeof2);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  exports.default = function (self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
  };

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;

  var _getIterator2 = __webpack_require__(93);

  var _getIterator3 = _interopRequireDefault(_getIterator2);

  var _classCallCheck2 = __webpack_require__(97);

  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

  var /*istanbul ignore next*/_virtualTypes = __webpack_require__(390);

  /*istanbul ignore next*/
  var virtualTypes = _interopRequireWildcard(_virtualTypes);

  var /*istanbul ignore next*/_debug2 = __webpack_require__(1028);

  /*istanbul ignore next*/
  var _debug3 = _interopRequireDefault(_debug2);

  var /*istanbul ignore next*/_invariant = __webpack_require__(251);

  /*istanbul ignore next*/
  var _invariant2 = _interopRequireDefault(_invariant);

  var /*istanbul ignore next*/_index = __webpack_require__(128);

  /*istanbul ignore next*/
  var _index2 = _interopRequireDefault(_index);

  var /*istanbul ignore next*/_assign = __webpack_require__(352);

  /*istanbul ignore next*/
  var _assign2 = _interopRequireDefault(_assign);

  var /*istanbul ignore next*/_scope = __webpack_require__(288);

  /*istanbul ignore next*/
  var _scope2 = _interopRequireDefault(_scope);

  var /*istanbul ignore next*/_babelTypes = __webpack_require__(90);

  /*istanbul ignore next*/
  var t = _interopRequireWildcard(_babelTypes);

  var /*istanbul ignore next*/_cache = __webpack_require__(226);

  /*istanbul ignore next*/
  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /* eslint max-len: 0 */

  var _debug = /*istanbul ignore next*/(0, _debug3.default)("babel");

  /*istanbul ignore next*/
  var NodePath = function () {
    function /*istanbul ignore next*/NodePath(hub, parent) {
      /*istanbul ignore next*/(0, _classCallCheck3.default)(this, NodePath);

      this.parent = parent;
      this.hub = hub;
      this.contexts = [];
      this.data = {};
      this.shouldSkip = false;
      this.shouldStop = false;
      this.removed = false;
      this.state = null;
      this.opts = null;
      this.skipKeys = null;
      this.parentPath = null;
      this.context = null;
      this.container = null;
      this.listKey = null;
      this.inList = false;
      this.parentKey = null;
      this.key = null;
      this.node = null;
      this.scope = null;
      this.type = null;
      this.typeAnnotation = null;
    }

    NodePath.get = function get(_ref) {
      /*istanbul ignore next*/var hub = _ref.hub;
      /*istanbul ignore next*/var parentPath = _ref.parentPath;
      /*istanbul ignore next*/var parent = _ref.parent;
      /*istanbul ignore next*/var container = _ref.container;
      /*istanbul ignore next*/var listKey = _ref.listKey;
      /*istanbul ignore next*/var key = _ref.key;

      if (!hub && parentPath) {
        hub = parentPath.hub;
      }

      /*istanbul ignore next*/(0, _invariant2.default)(parent, "To get a node path the parent needs to exist");

      var targetNode = container[key];

      var paths = /*istanbul ignore next*/_cache.path.get(parent) || [];
      if (! /*istanbul ignore next*/_cache.path.has(parent)) {
        /*istanbul ignore next*/_cache.path.set(parent, paths);
      }

      var path = /*istanbul ignore next*/void 0;

      for (var i = 0; i < paths.length; i++) {
        var pathCheck = paths[i];
        if (pathCheck.node === targetNode) {
          path = pathCheck;
          break;
        }
      }

      if (!path) {
        path = new NodePath(hub, parent);
        paths.push(path);
      }

      path.setup(parentPath, container, listKey, key);

      return path;
    };

    NodePath.prototype.getScope = function getScope(scope) {
      var ourScope = scope;

      // we're entering a new scope so let's construct it!
      if (this.isScope()) {
        ourScope = new /*istanbul ignore next*/_scope2.default(this, scope);
      }

      return ourScope;
    };

    NodePath.prototype.setData = function setData(key, val) {
      return this.data[key] = val;
    };

    NodePath.prototype.getData = function getData(key, def) {
      var val = this.data[key];
      if (!val && def) val = this.data[key] = def;
      return val;
    };

    NodePath.prototype.buildCodeFrameError = function buildCodeFrameError(msg) {
      /*istanbul ignore next*/var Error = arguments.length <= 1 || arguments[1] === undefined ? SyntaxError : arguments[1];

      return this.hub.file.buildCodeFrameError(this.node, msg, Error);
    };

    NodePath.prototype.traverse = function traverse(visitor, state) {
      /*istanbul ignore next*/(0, _index2.default)(this.node, visitor, this.scope, state, this);
    };

    NodePath.prototype.mark = function mark(type, message) {
      this.hub.file.metadata.marked.push({
        type: type,
        message: message,
        loc: this.node.loc
      });
    };

    NodePath.prototype.set = function set(key, node) {
      t.validate(this.node, key, node);
      this.node[key] = node;
    };

    NodePath.prototype.getPathLocation = function getPathLocation() {
      var parts = [];
      var path = this;
      do {
        var key = path.key;
        if (path.inList) key = /*istanbul ignore next*/path.listKey + "[" + key + "]";
        parts.unshift(key);
      } while (path = path.parentPath);
      return parts.join(".");
    };

    NodePath.prototype.debug = function debug(buildMessage) {
      if (!_debug.enabled) return;
      _debug( /*istanbul ignore next*/this.getPathLocation() + " " + this.type + ": " + buildMessage());
    };

    return NodePath;
  }();

  /*istanbul ignore next*/exports.default = NodePath;


  /*istanbul ignore next*/(0, _assign2.default)(NodePath.prototype, __webpack_require__(745));
  /*istanbul ignore next*/(0, _assign2.default)(NodePath.prototype, __webpack_require__(751));
  /*istanbul ignore next*/(0, _assign2.default)(NodePath.prototype, __webpack_require__(759));
  /*istanbul ignore next*/(0, _assign2.default)(NodePath.prototype, __webpack_require__(749));
  /*istanbul ignore next*/(0, _assign2.default)(NodePath.prototype, __webpack_require__(748));
  /*istanbul ignore next*/(0, _assign2.default)(NodePath.prototype, __webpack_require__(754));
  /*istanbul ignore next*/(0, _assign2.default)(NodePath.prototype, __webpack_require__(747));
  /*istanbul ignore next*/(0, _assign2.default)(NodePath.prototype, __webpack_require__(758));
  /*istanbul ignore next*/(0, _assign2.default)(NodePath.prototype, __webpack_require__(757));
  /*istanbul ignore next*/(0, _assign2.default)(NodePath.prototype, __webpack_require__(750));
  /*istanbul ignore next*/(0, _assign2.default)(NodePath.prototype, __webpack_require__(746));

  /*istanbul ignore next*/
  var _loop2 = function _loop2() {
    if (_isArray) {
      if (_i >= _iterator.length) return "break";
      _ref2 = _iterator[_i++];
    } else {
      _i = _iterator.next();
      if (_i.done) return "break";
      _ref2 = _i.value;
    }

    var type = _ref2;

    var typeKey = /*istanbul ignore next*/"is" + type;
    NodePath.prototype[typeKey] = function (opts) {
      return t[typeKey](this.node, opts);
    };

    NodePath.prototype[/*istanbul ignore next*/"assert" + type] = function (opts) {
      if (!this[typeKey](opts)) {
        throw new TypeError( /*istanbul ignore next*/"Expected node path of type " + type);
      }
    };
  };

  for ( /*istanbul ignore next*/var _iterator = t.TYPES, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
    /*istanbul ignore next*/
    var _ref2;

    var _ret2 = _loop2();

    if (_ret2 === "break") break;
  }

  /*istanbul ignore next*/
  var _loop = function _loop(type) {
    if (type[0] === "_") return (/*istanbul ignore next*/"continue"
      );
    if (t.TYPES.indexOf(type) < 0) t.TYPES.push(type);

    var virtualType = virtualTypes[type];

    NodePath.prototype[/*istanbul ignore next*/"is" + type] = function (opts) {
      return virtualType.checkPath(this, opts);
    };
  };

  for (var type in virtualTypes) {
    /*istanbul ignore next*/
    var _ret = _loop(type);

    /*istanbul ignore next*/if (_ret === "continue") continue;
  }
  /*istanbul ignore next*/module.exports = exports["default"];

/***/ },
/* 174 */
/***/ function(module, exports) {

  module.exports = function(exec){
    try {
      return !!exec();
    } catch(e){
      return true;
    }
  };

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

  // to indexed object, toObject with fallback for non-array-like ES3 strings
  var IObject = __webpack_require__(296)
    , defined = __webpack_require__(229);
  module.exports = function(it){
    return IObject(defined(it));
  };

/***/ },
/* 176 */
/***/ function(module, exports) {

  module.exports = {};

/***/ },
/* 177 */
/***/ function(module, exports) {

  module.exports = false;

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
  var anObject    = __webpack_require__(92)
    , dPs         = __webpack_require__(420)
    , enumBugKeys = __webpack_require__(315)
    , IE_PROTO    = __webpack_require__(327)('IE_PROTO')
    , Empty       = function(){ /* empty */ }
    , PROTOTYPE   = 'prototype';

  // Create object with fake `null` prototype: use iframe Object with cleared prototype
  var createDict = function(){
    // Thrash, waste and sodomy: IE GC bug
    var iframe = __webpack_require__(314)('iframe')
      , i      = enumBugKeys.length
      , gt     = '>'
      , iframeDocument;
    iframe.style.display = 'none';
    __webpack_require__(317).appendChild(iframe);
    iframe.src = 'javascript:'; // eslint-disable-line no-script-url
    // createDict = iframe.contentWindow.Object;
    // html.removeChild(iframe);
    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write('<script>document.F=Object</script' + gt);
    iframeDocument.close();
    createDict = iframeDocument.F;
    while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
    return createDict();
  };

  module.exports = Object.create || function create(O, Properties){
    var result;
    if(O !== null){
      Empty[PROTOTYPE] = anObject(O);
      result = new Empty;
      Empty[PROTOTYPE] = null;
      // add "__proto__" for Object.getPrototypeOf polyfill
      result[IE_PROTO] = O;
    } else result = createDict();
    return Properties === undefined ? result : dPs(result, Properties);
  };

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
  var $keys      = __webpack_require__(422)
    , hiddenKeys = __webpack_require__(315).concat('length', 'prototype');

  exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
    return $keys(O, hiddenKeys);
  };

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.2.14 / 15.2.3.14 Object.keys(O)
  var $keys       = __webpack_require__(422)
    , enumBugKeys = __webpack_require__(315);

  module.exports = Object.keys || function keys(O){
    return $keys(O, enumBugKeys);
  };

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

  var redefine = __webpack_require__(119);
  module.exports = function(target, src, safe){
    for(var key in src)redefine(target, key, src[key], safe);
    return target;
  };

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var global      = __webpack_require__(95)
    , dP          = __webpack_require__(107)
    , DESCRIPTORS = __webpack_require__(106)
    , SPECIES     = __webpack_require__(99)('species');

  module.exports = function(KEY){
    var C = global[KEY];
    if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
      configurable: true,
      get: function(){ return this; }
    });
  };

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

  var toInteger = __webpack_require__(162)
    , max       = Math.max
    , min       = Math.min;
  module.exports = function(index, length){
    index = toInteger(index);
    return index < 0 ? max(index + length, 0) : min(index, length);
  };

/***/ },
/* 184 */
/***/ function(module, exports) {

  var id = 0
    , px = Math.random();
  module.exports = function(key){
    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
  };

/***/ },
/* 185 */
/***/ function(module, exports) {

  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }


/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

  var getLength = __webpack_require__(1137),
      isFunction = __webpack_require__(199),
      isLength = __webpack_require__(267);

  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */
  function isArrayLike(value) {
    return value != null && isLength(getLength(value)) && !isFunction(value);
  }

  module.exports = isArrayLike;


/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule DOMProperty
   */

  'use strict';

  var invariant = __webpack_require__(91);

  function checkMask(value, bitmask) {
    return (value & bitmask) === bitmask;
  }

  var DOMPropertyInjection = {
    /**
     * Mapping from normalized, camelcased property names to a configuration that
     * specifies how the associated DOM property should be accessed or rendered.
     */
    MUST_USE_PROPERTY: 0x1,
    HAS_SIDE_EFFECTS: 0x2,
    HAS_BOOLEAN_VALUE: 0x4,
    HAS_NUMERIC_VALUE: 0x8,
    HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
    HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,

    /**
     * Inject some specialized knowledge about the DOM. This takes a config object
     * with the following properties:
     *
     * isCustomAttribute: function that given an attribute name will return true
     * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
     * attributes where it's impossible to enumerate all of the possible
     * attribute names,
     *
     * Properties: object mapping DOM property name to one of the
     * DOMPropertyInjection constants or null. If your attribute isn't in here,
     * it won't get written to the DOM.
     *
     * DOMAttributeNames: object mapping React attribute name to the DOM
     * attribute name. Attribute names not specified use the **lowercase**
     * normalized name.
     *
     * DOMAttributeNamespaces: object mapping React attribute name to the DOM
     * attribute namespace URL. (Attribute names not specified use no namespace.)
     *
     * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
     * Property names not specified use the normalized name.
     *
     * DOMMutationMethods: Properties that require special mutation methods. If
     * `value` is undefined, the mutation method should unset the property.
     *
     * @param {object} domPropertyConfig the config as described above.
     */
    injectDOMPropertyConfig: function (domPropertyConfig) {
      var Injection = DOMPropertyInjection;
      var Properties = domPropertyConfig.Properties || {};
      var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
      var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
      var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
      var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

      if (domPropertyConfig.isCustomAttribute) {
        DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
      }

      for (var propName in Properties) {
        !!DOMProperty.properties.hasOwnProperty(propName) ?  true ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : void 0;

        var lowerCased = propName.toLowerCase();
        var propConfig = Properties[propName];

        var propertyInfo = {
          attributeName: lowerCased,
          attributeNamespace: null,
          propertyName: propName,
          mutationMethod: null,

          mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
          hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
          hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
          hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
          hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
          hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
        };

        !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ?  true ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : void 0;
        !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ?  true ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : void 0;

        if (true) {
          DOMProperty.getPossibleStandardName[lowerCased] = propName;
        }

        if (DOMAttributeNames.hasOwnProperty(propName)) {
          var attributeName = DOMAttributeNames[propName];
          propertyInfo.attributeName = attributeName;
          if (true) {
            DOMProperty.getPossibleStandardName[attributeName] = propName;
          }
        }

        if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
          propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
        }

        if (DOMPropertyNames.hasOwnProperty(propName)) {
          propertyInfo.propertyName = DOMPropertyNames[propName];
        }

        if (DOMMutationMethods.hasOwnProperty(propName)) {
          propertyInfo.mutationMethod = DOMMutationMethods[propName];
        }

        DOMProperty.properties[propName] = propertyInfo;
      }
    }
  };

  /* eslint-disable max-len */
  var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
  /* eslint-enable max-len */

  /**
   * DOMProperty exports lookup objects that can be used like functions:
   *
   *   > DOMProperty.isValid['id']
   *   true
   *   > DOMProperty.isValid['foobar']
   *   undefined
   *
   * Although this may be confusing, it performs better in general.
   *
   * @see http://jsperf.com/key-exists
   * @see http://jsperf.com/key-missing
   */
  var DOMProperty = {

    ID_ATTRIBUTE_NAME: 'data-reactid',
    ROOT_ATTRIBUTE_NAME: 'data-reactroot',

    ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
    ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\uB7\\u0300-\\u036F\\u203F-\\u2040',

    /**
     * Map from property "standard name" to an object with info about how to set
     * the property in the DOM. Each object contains:
     *
     * attributeName:
     *   Used when rendering markup or with `*Attribute()`.
     * attributeNamespace
     * propertyName:
     *   Used on DOM node instances. (This includes properties that mutate due to
     *   external factors.)
     * mutationMethod:
     *   If non-null, used instead of the property or `setAttribute()` after
     *   initial render.
     * mustUseProperty:
     *   Whether the property must be accessed and mutated as an object property.
     * hasSideEffects:
     *   Whether or not setting a value causes side effects such as triggering
     *   resources to be loaded or text selection changes. If true, we read from
     *   the DOM before updating to ensure that the value is only set if it has
     *   changed.
     * hasBooleanValue:
     *   Whether the property should be removed when set to a falsey value.
     * hasNumericValue:
     *   Whether the property must be numeric or parse as a numeric and should be
     *   removed when set to a falsey value.
     * hasPositiveNumericValue:
     *   Whether the property must be positive numeric or parse as a positive
     *   numeric and should be removed when set to a falsey value.
     * hasOverloadedBooleanValue:
     *   Whether the property can be used as a flag as well as with a value.
     *   Removed when strictly equal to false; present without a value when
     *   strictly equal to true; present with a value otherwise.
     */
    properties: {},

    /**
     * Mapping from lowercase property names to the properly cased version, used
     * to warn in the case of missing properties. Available only in __DEV__.
     * @type {Object}
     */
    getPossibleStandardName:  true ? {} : null,

    /**
     * All of the isCustomAttribute() functions that have been injected.
     */
    _isCustomAttributeFunctions: [],

    /**
     * Checks whether a property name is a custom attribute.
     * @method
     */
    isCustomAttribute: function (attributeName) {
      for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
        var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
        if (isCustomAttributeFn(attributeName)) {
          return true;
        }
      }
      return false;
    },

    injection: DOMPropertyInjection
  };

  module.exports = DOMProperty;

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  // a duplex stream is just a stream that is both readable and writable.
  // Since JS doesn't have multiple prototypal inheritance, this class
  // prototypally inherits from Readable, and then parasitically from
  // Writable.

  module.exports = Duplex;

  /*<replacement>*/
  var objectKeys = Object.keys || function (obj) {
    var keys = [];
    for (var key in obj) keys.push(key);
    return keys;
  }
  /*</replacement>*/


  /*<replacement>*/
  var util = __webpack_require__(211);
  util.inherits = __webpack_require__(185);
  /*</replacement>*/

  var Readable = __webpack_require__(525);
  var Writable = __webpack_require__(377);

  util.inherits(Duplex, Readable);

  forEach(objectKeys(Writable.prototype), function(method) {
    if (!Duplex.prototype[method])
      Duplex.prototype[method] = Writable.prototype[method];
  });

  function Duplex(options) {
    if (!(this instanceof Duplex))
      return new Duplex(options);

    Readable.call(this, options);
    Writable.call(this, options);

    if (options && options.readable === false)
      this.readable = false;

    if (options && options.writable === false)
      this.writable = false;

    this.allowHalfOpen = true;
    if (options && options.allowHalfOpen === false)
      this.allowHalfOpen = false;

    this.once('end', onend);
  }

  // the no-half-open enforcer
  function onend() {
    // if we allow half-open state, or if the writable side ended,
    // then we're ok.
    if (this.allowHalfOpen || this._writableState.ended)
      return;

    // no more data can be written.
    // But allow more writes to happen in this tick.
    process.nextTick(this.end.bind(this));
  }

  function forEach (xs, f) {
    for (var i = 0, l = xs.length; i < l; i++) {
      f(xs[i], i);
    }
  }

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(111)))

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = { "default": __webpack_require__(802), __esModule: true };

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = { "default": __webpack_require__(806), __esModule: true };

/***/ },
/* 191 */
/***/ function(module, exports) {

  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isNewLine = isNewLine;
  // Matches a whole line break (where CRLF is considered a single
  // line break). Used to count lines.

  var lineBreak = exports.lineBreak = /\r\n?|\n|\u2028|\u2029/;
  var lineBreakG = exports.lineBreakG = new RegExp(lineBreak.source, "g");

  function isNewLine(code) {
    return code === 10 || code === 13 || code === 0x2028 || code === 0x2029;
  }

  var nonASCIIwhitespace = exports.nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.2.14 / 15.2.3.14 Object.keys(O)
  var $keys       = __webpack_require__(404)
    , enumBugKeys = __webpack_require__(295);

  module.exports = Object.keys || function keys(O){
    return $keys(O, enumBugKeys);
  };

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

  // 22.1.3.31 Array.prototype[@@unscopables]
  var UNSCOPABLES = __webpack_require__(99)('unscopables')
    , ArrayProto  = Array.prototype;
  if(ArrayProto[UNSCOPABLES] == undefined)__webpack_require__(117)(ArrayProto, UNSCOPABLES, {});
  module.exports = function(key){
    ArrayProto[UNSCOPABLES][key] = true;
  };

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

  // getting tag from 19.1.3.6 Object.prototype.toString()
  var cof = __webpack_require__(130)
    , TAG = __webpack_require__(99)('toStringTag')
    // ES3 wrong here
    , ARG = cof(function(){ return arguments; }()) == 'Arguments';

  // fallback for IE11 Script Access Denied error
  var tryGet = function(it, key){
    try {
      return it[key];
    } catch(e){ /* empty */ }
  };

  module.exports = function(it){
    var O, T, B;
    return it === undefined ? 'Undefined' : it === null ? 'Null'
      // @@toStringTag case
      : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
      // builtinTag case
      : ARG ? cof(O)
      // ES3 arguments fallback
      : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
  };

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

  var ctx         = __webpack_require__(152)
    , call        = __webpack_require__(416)
    , isArrayIter = __webpack_require__(319)
    , anObject    = __webpack_require__(92)
    , toLength    = __webpack_require__(112)
    , getIterFn   = __webpack_require__(336)
    , BREAK       = {}
    , RETURN      = {};
  var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
    var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
      , f      = ctx(fn, that, entries ? 2 : 1)
      , index  = 0
      , length, step, iterator, result;
    if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
    // fast case for arrays with default iterator
    if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
      result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
      if(result === BREAK || result === RETURN)return result;
    } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
      result = call(iterator, f, step.value, entries);
      if(result === BREAK || result === RETURN)return result;
    }
  };
  exports.BREAK  = BREAK;
  exports.RETURN = RETURN;

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

  var def = __webpack_require__(107).f
    , has = __webpack_require__(116)
    , TAG = __webpack_require__(99)('toStringTag');

  module.exports = function(it, tag, stat){
    if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
  };

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

  var $export = __webpack_require__(89)
    , defined = __webpack_require__(131)
    , fails   = __webpack_require__(96)
    , spaces  = __webpack_require__(332)
    , space   = '[' + spaces + ']'
    , non     = '\u200b\u0085'
    , ltrim   = RegExp('^' + space + space + '*')
    , rtrim   = RegExp(space + space + '*$');

  var exporter = function(KEY, exec, ALIAS){
    var exp   = {};
    var FORCE = fails(function(){
      return !!spaces[KEY]() || non[KEY]() != non;
    });
    var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
    if(ALIAS)exp[ALIAS] = fn;
    $export($export.P + $export.F * FORCE, 'String', exp);
  };

  // 1 -> String#trimLeft
  // 2 -> String#trimRight
  // 3 -> String#trim
  var trim = exporter.trim = function(string, TYPE){
    string = String(defined(string));
    if(TYPE & 1)string = string.replace(ltrim, '');
    if(TYPE & 2)string = string.replace(rtrim, '');
    return string;
  };

  module.exports = exporter;

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

  var baseIsNative = __webpack_require__(1100),
      getValue = __webpack_require__(1139);

  /**
   * Gets the native function at `key` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the method to get.
   * @returns {*} Returns the function if it's native, else `undefined`.
   */
  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  }

  module.exports = getNative;


/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

  var isObject = __webpack_require__(133);

  /** `Object#toString` result references. */
  var funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]';

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objectToString = objectProto.toString;

  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified,
   *  else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction(value) {
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 8 which returns 'object' for typed array and weak map constructors,
    // and PhantomJS 1.9 which returns 'function' for `NodeList` instances.
    var tag = isObject(value) ? objectToString.call(value) : '';
    return tag == funcTag || tag == genTag;
  }

  module.exports = isFunction;


/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2015-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule DOMLazyTree
   */

  'use strict';

  var DOMNamespaces = __webpack_require__(488);

  var createMicrosoftUnsafeLocalFunction = __webpack_require__(366);
  var setTextContent = __webpack_require__(514);

  var ELEMENT_NODE_TYPE = 1;
  var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

  /**
   * In IE (8-11) and Edge, appending nodes with no children is dramatically
   * faster than appending a full subtree, so we essentially queue up the
   * .appendChild calls here and apply them so each node is added to its parent
   * before any children are added.
   *
   * In other browsers, doing so is slower or neutral compared to the other order
   * (in Firefox, twice as slow) so we only do this inversion in IE.
   *
   * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
   */
  var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);

  function insertTreeChildren(tree) {
    if (!enableLazy) {
      return;
    }
    var node = tree.node;
    var children = tree.children;
    if (children.length) {
      for (var i = 0; i < children.length; i++) {
        insertTreeBefore(node, children[i], null);
      }
    } else if (tree.html != null) {
      node.innerHTML = tree.html;
    } else if (tree.text != null) {
      setTextContent(node, tree.text);
    }
  }

  var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
    // DocumentFragments aren't actually part of the DOM after insertion so
    // appending children won't update the DOM. We need to ensure the fragment
    // is properly populated first, breaking out of our lazy approach for just
    // this level. Also, some <object> plugins (like Flash Player) will read
    // <param> nodes immediately upon insertion into the DOM, so <object>
    // must also be populated prior to insertion into the DOM.
    if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
      insertTreeChildren(tree);
      parentNode.insertBefore(tree.node, referenceNode);
    } else {
      parentNode.insertBefore(tree.node, referenceNode);
      insertTreeChildren(tree);
    }
  });

  function replaceChildWithTree(oldNode, newTree) {
    oldNode.parentNode.replaceChild(newTree.node, oldNode);
    insertTreeChildren(newTree);
  }

  function queueChild(parentTree, childTree) {
    if (enableLazy) {
      parentTree.children.push(childTree);
    } else {
      parentTree.node.appendChild(childTree.node);
    }
  }

  function queueHTML(tree, html) {
    if (enableLazy) {
      tree.html = html;
    } else {
      tree.node.innerHTML = html;
    }
  }

  function queueText(tree, text) {
    if (enableLazy) {
      tree.text = text;
    } else {
      setTextContent(tree.node, text);
    }
  }

  function toString() {
    return this.node.nodeName;
  }

  function DOMLazyTree(node) {
    return {
      node: node,
      children: [],
      html: null,
      text: null,
      toString: toString
    };
  }

  DOMLazyTree.insertTreeBefore = insertTreeBefore;
  DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
  DOMLazyTree.queueChild = queueChild;
  DOMLazyTree.queueHTML = queueHTML;
  DOMLazyTree.queueText = queueText;

  module.exports = DOMLazyTree;

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactReconciler
   */

  'use strict';

  var ReactRef = __webpack_require__(1256);
  var ReactInstrumentation = __webpack_require__(125);

  var invariant = __webpack_require__(91);

  /**
   * Helper to call ReactRef.attachRefs with this composite component, split out
   * to avoid allocations in the transaction mount-ready queue.
   */
  function attachRefs() {
    ReactRef.attachRefs(this, this._currentElement);
  }

  var ReactReconciler = {

    /**
     * Initializes the component, renders markup, and registers event listeners.
     *
     * @param {ReactComponent} internalInstance
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @param {?object} the containing native component instance
     * @param {?object} info about the native container
     * @return {?string} Rendered markup to be inserted into the DOM.
     * @final
     * @internal
     */
    mountComponent: function (internalInstance, transaction, nativeParent, nativeContainerInfo, context) {
      if (true) {
        if (internalInstance._debugID !== 0) {
          ReactInstrumentation.debugTool.onBeginReconcilerTimer(internalInstance._debugID, 'mountComponent');
        }
      }
      var markup = internalInstance.mountComponent(transaction, nativeParent, nativeContainerInfo, context);
      if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
        transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
      }
      if (true) {
        if (internalInstance._debugID !== 0) {
          ReactInstrumentation.debugTool.onEndReconcilerTimer(internalInstance._debugID, 'mountComponent');
          ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
        }
      }
      return markup;
    },

    /**
     * Returns a value that can be passed to
     * ReactComponentEnvironment.replaceNodeWithMarkup.
     */
    getNativeNode: function (internalInstance) {
      return internalInstance.getNativeNode();
    },

    /**
     * Releases any resources allocated by `mountComponent`.
     *
     * @final
     * @internal
     */
    unmountComponent: function (internalInstance, safely) {
      if (true) {
        if (internalInstance._debugID !== 0) {
          ReactInstrumentation.debugTool.onBeginReconcilerTimer(internalInstance._debugID, 'unmountComponent');
        }
      }
      ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
      internalInstance.unmountComponent(safely);
      if (true) {
        if (internalInstance._debugID !== 0) {
          ReactInstrumentation.debugTool.onEndReconcilerTimer(internalInstance._debugID, 'unmountComponent');
          ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
        }
      }
    },

    /**
     * Update a component using a new element.
     *
     * @param {ReactComponent} internalInstance
     * @param {ReactElement} nextElement
     * @param {ReactReconcileTransaction} transaction
     * @param {object} context
     * @internal
     */
    receiveComponent: function (internalInstance, nextElement, transaction, context) {
      var prevElement = internalInstance._currentElement;

      if (nextElement === prevElement && context === internalInstance._context) {
        // Since elements are immutable after the owner is rendered,
        // we can do a cheap identity compare here to determine if this is a
        // superfluous reconcile. It's possible for state to be mutable but such
        // change should trigger an update of the owner which would recreate
        // the element. We explicitly check for the existence of an owner since
        // it's possible for an element created outside a composite to be
        // deeply mutated and reused.

        // TODO: Bailing out early is just a perf optimization right?
        // TODO: Removing the return statement should affect correctness?
        return;
      }

      if (true) {
        if (internalInstance._debugID !== 0) {
          ReactInstrumentation.debugTool.onBeginReconcilerTimer(internalInstance._debugID, 'receiveComponent');
        }
      }

      var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

      if (refsChanged) {
        ReactRef.detachRefs(internalInstance, prevElement);
      }

      internalInstance.receiveComponent(nextElement, transaction, context);

      if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
        transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
      }

      if (true) {
        if (internalInstance._debugID !== 0) {
          ReactInstrumentation.debugTool.onEndReconcilerTimer(internalInstance._debugID, 'receiveComponent');
          ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
        }
      }
    },

    /**
     * Flush any dirty changes in a component.
     *
     * @param {ReactComponent} internalInstance
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {
      if (internalInstance._updateBatchNumber !== updateBatchNumber) {
        // The component's enqueued batch number should always be the current
        // batch or the following one.
        !(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1) ?  true ? invariant(false, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : invariant(false) : void 0;
        return;
      }
      if (true) {
        if (internalInstance._debugID !== 0) {
          ReactInstrumentation.debugTool.onBeginReconcilerTimer(internalInstance._debugID, 'performUpdateIfNecessary');
        }
      }
      internalInstance.performUpdateIfNecessary(transaction);
      if (true) {
        if (internalInstance._debugID !== 0) {
          ReactInstrumentation.debugTool.onEndReconcilerTimer(internalInstance._debugID, 'performUpdateIfNecessary');
          ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
        }
      }
    }

  };

  module.exports = ReactReconciler;

/***/ },
/* 202 */
/***/ function(module, exports) {

  "use strict";

  /* eslint max-len: 0 */

  module.exports = {
    filename: {
      type: "filename",
      description: "filename to use when reading from stdin - this will be used in source-maps, errors etc",
      default: "unknown",
      shorthand: "f"
    },

    filenameRelative: {
      hidden: true,
      type: "string"
    },

    inputSourceMap: {
      hidden: true
    },

    env: {
      hidden: true,
      default: {}
    },

    mode: {
      description: "",
      hidden: true
    },

    retainLines: {
      type: "boolean",
      default: false,
      description: "retain line numbers - will result in really ugly code"
    },

    highlightCode: {
      description: "enable/disable ANSI syntax highlighting of code frames (on by default)",
      type: "boolean",
      default: true
    },

    suppressDeprecationMessages: {
      type: "boolean",
      default: false,
      hidden: true
    },

    presets: {
      type: "list",
      description: "",
      default: []
    },

    plugins: {
      type: "list",
      default: [],
      description: ""
    },

    ignore: {
      type: "list",
      description: "list of glob paths to **not** compile",
      default: []
    },

    only: {
      type: "list",
      description: "list of glob paths to **only** compile"
    },

    code: {
      hidden: true,
      default: true,
      type: "boolean"
    },

    metadata: {
      hidden: true,
      default: true,
      type: "boolean"
    },

    ast: {
      hidden: true,
      default: true,
      type: "boolean"
    },

    extends: {
      type: "string",
      hidden: true
    },

    comments: {
      type: "boolean",
      default: true,
      description: "write comments to generated output (true by default)"
    },

    shouldPrintComment: {
      hidden: true,
      description: "optional callback to control whether a comment should be inserted, when this is used the comments option is ignored"
    },

    compact: {
      type: "booleanString",
      default: "auto",
      description: "do not include superfluous whitespace characters and line terminators [true|false|auto]"
    },

    minified: {
      type: "boolean",
      default: false,
      description: "save as much bytes when printing [true|false]"
    },

    sourceMap: {
      alias: "sourceMaps",
      hidden: true
    },

    sourceMaps: {
      type: "booleanString",
      description: "[true|false|inline]",
      default: false,
      shorthand: "s"
    },

    sourceMapTarget: {
      type: "string",
      description: "set `file` on returned source map"
    },

    sourceFileName: {
      type: "string",
      description: "set `sources[0]` on returned source map"
    },

    sourceRoot: {
      type: "filename",
      description: "the root from which all sources are relative"
    },

    babelrc: {
      description: "Whether or not to look up .babelrc and .babelignore files",
      type: "boolean",
      default: true
    },

    sourceType: {
      description: "",
      default: "module"
    },

    auxiliaryCommentBefore: {
      type: "string",
      description: "print a comment before any injected non-user code"
    },

    auxiliaryCommentAfter: {
      type: "string",
      description: "print a comment after any injected non-user code"
    },

    resolveModuleSource: {
      hidden: true
    },

    getModuleId: {
      hidden: true
    },

    moduleRoot: {
      type: "filename",
      description: "optional prefix for the AMD module formatter that will be prepend to the filename on module definitions"
    },

    moduleIds: {
      type: "boolean",
      default: false,
      shorthand: "M",
      description: "insert an explicit id for modules"
    },

    moduleId: {
      description: "specify a custom name for module ids",
      type: "string"
    },

    passPerPreset: {
      description: "Whether to spawn a traversal pass per a preset. By default all presets are merged.",
      type: "boolean",
      default: false,
      hidden: true
    }
  };

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(process) {"use strict";

  exports.__esModule = true;

  var _stringify = __webpack_require__(170);

  var _stringify2 = _interopRequireDefault(_stringify);

  var _assign = __webpack_require__(285);

  var _assign2 = _interopRequireDefault(_assign);

  var _getIterator2 = __webpack_require__(93);

  var _getIterator3 = _interopRequireDefault(_getIterator2);

  var _typeof2 = __webpack_require__(127);

  var _typeof3 = _interopRequireDefault(_typeof2);

  var _classCallCheck2 = __webpack_require__(97);

  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

  var _node = __webpack_require__(380);

  var context = _interopRequireWildcard(_node);

  var _plugin2 = __webpack_require__(224);

  var _plugin3 = _interopRequireDefault(_plugin2);

  var _babelMessages = __webpack_require__(157);

  var messages = _interopRequireWildcard(_babelMessages);

  var _index = __webpack_require__(281);

  var _resolve = __webpack_require__(532);

  var _resolve2 = _interopRequireDefault(_resolve);

  var _json = __webpack_require__(1076);

  var _json2 = _interopRequireDefault(_json);

  var _pathIsAbsolute = __webpack_require__(1211);

  var _pathIsAbsolute2 = _interopRequireDefault(_pathIsAbsolute);

  var _pathExists = __webpack_require__(1210);

  var _pathExists2 = _interopRequireDefault(_pathExists);

  var _cloneDeepWith = __webpack_require__(1175);

  var _cloneDeepWith2 = _interopRequireDefault(_cloneDeepWith);

  var _clone = __webpack_require__(264);

  var _clone2 = _interopRequireDefault(_clone);

  var _merge = __webpack_require__(530);

  var _merge2 = _interopRequireDefault(_merge);

  var _config = __webpack_require__(202);

  var _config2 = _interopRequireDefault(_config);

  var _removed = __webpack_require__(283);

  var _removed2 = _interopRequireDefault(_removed);

  var _path = __webpack_require__(134);

  var _path2 = _interopRequireDefault(_path);

  var _fs = __webpack_require__(126);

  var _fs2 = _interopRequireDefault(_fs);

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var existsCache = {}; /* eslint max-len: 0 */

  var jsonCache = {};

  var BABELIGNORE_FILENAME = ".babelignore";
  var BABELRC_FILENAME = ".babelrc";
  var PACKAGE_FILENAME = "package.json";

  function exists(filename) {
    var cached = existsCache[filename];
    if (cached == null) {
      return existsCache[filename] = _pathExists2.default.sync(filename);
    } else {
      return cached;
    }
  }

  var OptionManager = function () {
    function OptionManager(log) {
      (0, _classCallCheck3.default)(this, OptionManager);

      this.resolvedConfigs = [];
      this.options = OptionManager.createBareOptions();
      this.log = log;
    }

    OptionManager.memoisePluginContainer = function memoisePluginContainer(fn, loc, i, alias) {
      for (var _iterator = OptionManager.memoisedPlugins, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var cache = _ref;

        if (cache.container === fn) return cache.plugin;
      }

      var obj = void 0;

      if (typeof fn === "function") {
        obj = fn(context);
      } else {
        obj = fn;
      }

      if ((typeof obj === "undefined" ? "undefined" : (0, _typeof3.default)(obj)) === "object") {
        var _plugin = new _plugin3.default(obj, alias);
        OptionManager.memoisedPlugins.push({
          container: fn,
          plugin: _plugin
        });
        return _plugin;
      } else {
        throw new TypeError(messages.get("pluginNotObject", loc, i, typeof obj === "undefined" ? "undefined" : (0, _typeof3.default)(obj)) + loc + i);
      }
    };

    OptionManager.createBareOptions = function createBareOptions() {
      var opts = {};

      for (var _key in _config2.default) {
        var opt = _config2.default[_key];
        opts[_key] = (0, _clone2.default)(opt.default);
      }

      return opts;
    };

    OptionManager.normalisePlugin = function normalisePlugin(plugin, loc, i, alias) {
      plugin = plugin.__esModule ? plugin.default : plugin;

      if (!(plugin instanceof _plugin3.default)) {
        // allow plugin containers to be specified so they don't have to manually require
        if (typeof plugin === "function" || (typeof plugin === "undefined" ? "undefined" : (0, _typeof3.default)(plugin)) === "object") {
          plugin = OptionManager.memoisePluginContainer(plugin, loc, i, alias);
        } else {
          throw new TypeError(messages.get("pluginNotFunction", loc, i, typeof plugin === "undefined" ? "undefined" : (0, _typeof3.default)(plugin)));
        }
      }

      plugin.init(loc, i);

      return plugin;
    };

    OptionManager.normalisePlugins = function normalisePlugins(loc, dirname, plugins) {
      return plugins.map(function (val, i) {
        var plugin = void 0,
            options = void 0;

        if (!val) {
          throw new TypeError("Falsy value found in plugins");
        }

        // destructure plugins
        if (Array.isArray(val)) {
          plugin = val[0];
          options = val[1];
        } else {
          plugin = val;
        }

        var alias = typeof plugin === "string" ? plugin : loc + "$" + i;

        // allow plugins to be specified as strings
        if (typeof plugin === "string") {
          var pluginLoc = (0, _resolve2.default)("babel-plugin-" + plugin, dirname) || (0, _resolve2.default)(plugin, dirname);
          if (pluginLoc) {
            plugin = __webpack_require__(381)(pluginLoc);
          } else {
            throw new ReferenceError(messages.get("pluginUnknown", plugin, loc, i, dirname));
          }
        }

        plugin = OptionManager.normalisePlugin(plugin, loc, i, alias);

        return [plugin, options];
      });
    };

    OptionManager.prototype.addConfig = function addConfig(loc, key) {
      var json = arguments.length <= 2 || arguments[2] === undefined ? _json2.default : arguments[2];

      if (this.resolvedConfigs.indexOf(loc) >= 0) {
        return false;
      }

      var content = _fs2.default.readFileSync(loc, "utf8");
      var opts = void 0;

      try {
        opts = jsonCache[content] = jsonCache[content] || json.parse(content);
        if (key) opts = opts[key];
      } catch (err) {
        err.message = loc + ": Error while parsing JSON - " + err.message;
        throw err;
      }

      this.mergeOptions({
        options: opts,
        alias: loc,
        dirname: _path2.default.dirname(loc)
      });
      this.resolvedConfigs.push(loc);

      return !!opts;
    };

    /**
     * This is called when we want to merge the input `opts` into the
     * base options (passed as the `extendingOpts`: at top-level it's the
     * main options, at presets level it's presets options).
     *
     *  - `alias` is used to output pretty traces back to the original source.
     *  - `loc` is used to point to the original config.
     *  - `dirname` is used to resolve plugins relative to it.
     */

    OptionManager.prototype.mergeOptions = function mergeOptions(_ref2) {
      var _this = this;

      var rawOpts = _ref2.options;
      var extendingOpts = _ref2.extending;
      var alias = _ref2.alias;
      var loc = _ref2.loc;
      var dirname = _ref2.dirname;

      alias = alias || "foreign";
      if (!rawOpts) return;

      //
      if ((typeof rawOpts === "undefined" ? "undefined" : (0, _typeof3.default)(rawOpts)) !== "object" || Array.isArray(rawOpts)) {
        this.log.error("Invalid options type for " + alias, TypeError);
      }

      //
      var opts = (0, _cloneDeepWith2.default)(rawOpts, function (val) {
        if (val instanceof _plugin3.default) {
          return val;
        }
      });

      //
      dirname = dirname || process.cwd();
      loc = loc || alias;

      for (var _key2 in opts) {
        var option = _config2.default[_key2];

        // check for an unknown option
        if (!option && this.log) {
          var pluginOptsInfo = "Check out http://babeljs.io/docs/usage/options/ for more info";

          if (_removed2.default[_key2]) {
            this.log.error("Using removed Babel 5 option: " + alias + "." + _key2 + " - " + _removed2.default[_key2].message, ReferenceError);
          } else {
            this.log.error("Unknown option: " + alias + "." + _key2 + ". " + pluginOptsInfo, ReferenceError);
          }
        }
      }

      // normalise options
      (0, _index.normaliseOptions)(opts);

      // resolve plugins
      if (opts.plugins) {
        opts.plugins = OptionManager.normalisePlugins(loc, dirname, opts.plugins);
      }

      // add extends clause
      if (opts.extends) {
        var extendsLoc = (0, _resolve2.default)(opts.extends, dirname);
        if (extendsLoc) {
          this.addConfig(extendsLoc);
        } else {
          if (this.log) this.log.error("Couldn't resolve extends clause of " + opts.extends + " in " + alias);
        }
        delete opts.extends;
      }

      // resolve presets
      if (opts.presets) {
        // If we're in the "pass per preset" mode, we resolve the presets
        // and keep them for further execution to calculate the options.
        if (opts.passPerPreset) {
          opts.presets = this.resolvePresets(opts.presets, dirname, function (preset, presetLoc) {
            _this.mergeOptions({
              options: preset,
              extending: preset,
              alias: presetLoc,
              loc: presetLoc,
              dirname: dirname
            });
          });
        } else {
          // Otherwise, just merge presets options into the main options.
          this.mergePresets(opts.presets, dirname);
          delete opts.presets;
        }
      }

      // env
      var envOpts = void 0;
      var envKey = process.env.BABEL_ENV || ("development") || "development";
      if (opts.env) {
        envOpts = opts.env[envKey];
        delete opts.env;
      }

      // Merge them into current extending options in case of top-level
      // options. In case of presets, just re-assign options which are got
      // normalized during the `mergeOptions`.
      if (rawOpts === extendingOpts) {
        (0, _assign2.default)(extendingOpts, opts);
      } else {
        (0, _merge2.default)(extendingOpts || this.options, opts);
      }

      // merge in env options
      this.mergeOptions({
        options: envOpts,
        extending: extendingOpts,
        alias: alias + ".env." + envKey,
        dirname: dirname
      });
    };

    /**
     * Merges all presets into the main options in case we are not in the
     * "pass per preset" mode. Otherwise, options are calculated per preset.
     */


    OptionManager.prototype.mergePresets = function mergePresets(presets, dirname) {
      var _this2 = this;

      this.resolvePresets(presets, dirname, function (presetOpts, presetLoc) {
        _this2.mergeOptions({
          options: presetOpts,
          alias: presetLoc,
          loc: presetLoc,
          dirname: _path2.default.dirname(presetLoc || "")
        });
      });
    };

    /**
     * Resolves presets options which can be either direct object data,
     * or a module name to require.
     */


    OptionManager.prototype.resolvePresets = function resolvePresets(presets, dirname, onResolve) {
      return presets.map(function (val) {
        if (typeof val === "string") {
          var presetLoc = (0, _resolve2.default)("babel-preset-" + val, dirname) || (0, _resolve2.default)(val, dirname);
          if (presetLoc) {
            var _val = __webpack_require__(381)(presetLoc);
            onResolve && onResolve(_val, presetLoc);
            return _val;
          } else {
            throw new Error("Couldn't find preset " + (0, _stringify2.default)(val) + " relative to directory " + (0, _stringify2.default)(dirname));
          }
        } else if ((typeof val === "undefined" ? "undefined" : (0, _typeof3.default)(val)) === "object") {
          onResolve && onResolve(val);
          return val;
        } else {
          throw new Error("Unsupported preset format: " + val + ".");
        }
      });
    };

    OptionManager.prototype.addIgnoreConfig = function addIgnoreConfig(loc) {
      var file = _fs2.default.readFileSync(loc, "utf8");
      var lines = file.split("\n");

      lines = lines.map(function (line) {
        return line.replace(/#(.*?)$/, "").trim();
      }).filter(function (line) {
        return !!line;
      });

      this.mergeOptions({
        options: { ignore: lines },
        loc: loc
      });
    };

    OptionManager.prototype.findConfigs = function findConfigs(loc) {
      if (!loc) return;

      if (!(0, _pathIsAbsolute2.default)(loc)) {
        loc = _path2.default.join(process.cwd(), loc);
      }

      var foundConfig = false;
      var foundIgnore = false;

      while (loc !== (loc = _path2.default.dirname(loc))) {
        if (!foundConfig) {
          var configLoc = _path2.default.join(loc, BABELRC_FILENAME);
          if (exists(configLoc)) {
            this.addConfig(configLoc);
            foundConfig = true;
          }

          var pkgLoc = _path2.default.join(loc, PACKAGE_FILENAME);
          if (!foundConfig && exists(pkgLoc)) {
            foundConfig = this.addConfig(pkgLoc, "babel", JSON);
          }
        }

        if (!foundIgnore) {
          var ignoreLoc = _path2.default.join(loc, BABELIGNORE_FILENAME);
          if (exists(ignoreLoc)) {
            this.addIgnoreConfig(ignoreLoc);
            foundIgnore = true;
          }
        }

        if (foundIgnore && foundConfig) return;
      }
    };

    OptionManager.prototype.normaliseOptions = function normaliseOptions() {
      var opts = this.options;

      for (var _key3 in _config2.default) {
        var option = _config2.default[_key3];
        var val = opts[_key3];

        // optional
        if (!val && option.optional) continue;

        // aliases
        if (option.alias) {
          opts[option.alias] = opts[option.alias] || val;
        } else {
          opts[_key3] = val;
        }
      }
    };

    OptionManager.prototype.init = function init() {
      var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

      var filename = opts.filename;

      // resolve all .babelrc files
      if (opts.babelrc !== false) {
        this.findConfigs(filename);
      }

      // merge in base options
      this.mergeOptions({
        options: opts,
        alias: "base",
        dirname: filename && _path2.default.dirname(filename)
      });

      // normalise
      this.normaliseOptions(opts);

      return this.options;
    };

    return OptionManager;
  }();

  exports.default = OptionManager;


  OptionManager.memoisedPlugins = [];
  module.exports = exports["default"];
  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(111)))

/***/ },
/* 204 */
/***/ function(module, exports) {

  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isIdentifierStart = isIdentifierStart;
  exports.isIdentifierChar = isIdentifierChar;
  /* eslint max-len: 0 */

  // This is a trick taken from Esprima. It turns out that, on
  // non-Chrome browsers, to check whether a string is in a set, a
  // predicate containing a big ugly `switch` statement is faster than
  // a regular expression, and on Chrome the two are about on par.
  // This function uses `eval` (non-lexical) to produce such a
  // predicate from a space-separated string of words.
  //
  // It starts by sorting the words by length.

  function makePredicate(words) {
    words = words.split(" ");
    return function (str) {
      return words.indexOf(str) >= 0;
    };
  }

  // Reserved word lists for various dialects of the language

  var reservedWords = exports.reservedWords = {
    6: makePredicate("enum await"),
    strict: makePredicate("implements interface let package private protected public static yield"),
    strictBind: makePredicate("eval arguments")
  };

  // And the keywords

  var isKeyword = exports.isKeyword = makePredicate("break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this let const class extends export import yield super");

  // ## Character categories

  // Big ugly regular expressions that match characters in the
  // whitespace, identifier, and identifier-start categories. These
  // are only applied when a character is found to actually have a
  // code point above 128.
  // Generated by `tools/generate-identifier-regex.js`.

  var nonASCIIidentifierStartChars = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ";
  var nonASCIIidentifierChars = "‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࣤ-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఃా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഁ-ഃാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ංඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ູົຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏ᦰ-ᧀᧈᧉ᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭ᳲ-᳴᳸᳹᷀-᷵᷼-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-꣄꣐-꣙꣠-꣱꤀-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︭︳︴﹍-﹏０-９＿";

  var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
  var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");

  nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;

  // These are a run-length and offset encoded representation of the
  // >0xffff code points that are a valid part of identifiers. The
  // offset starts at 0x10000, and each pair of numbers represents an
  // offset to the next range, and then a size of the range. They were
  // generated by tools/generate-identifier-regex.js
  var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 17, 26, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 99, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 98, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 26, 45, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 955, 52, 76, 44, 33, 24, 27, 35, 42, 34, 4, 0, 13, 47, 15, 3, 22, 0, 38, 17, 2, 24, 133, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 32, 4, 287, 47, 21, 1, 2, 0, 185, 46, 82, 47, 21, 0, 60, 42, 502, 63, 32, 0, 449, 56, 1288, 920, 104, 110, 2962, 1070, 13266, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 881, 68, 12, 0, 67, 12, 16481, 1, 3071, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 4149, 196, 1340, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 16355, 541];
  var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 1306, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 52, 0, 13, 2, 49, 13, 16, 9, 83, 11, 168, 11, 6, 9, 8, 2, 57, 0, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 316, 19, 13, 9, 214, 6, 3, 8, 112, 16, 16, 9, 82, 12, 9, 9, 535, 9, 20855, 9, 135, 4, 60, 6, 26, 9, 1016, 45, 17, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 4305, 6, 792618, 239];

  // This has a complexity linear to the value of the code. The
  // assumption is that looking up astral identifier characters is
  // rare.
  function isInAstralSet(code, set) {
    var pos = 0x10000;
    for (var i = 0; i < set.length; i += 2) {
      pos += set[i];
      if (pos > code) return false;

      pos += set[i + 1];
      if (pos >= code) return true;
    }
  }

  // Test whether a given character code starts an identifier.

  function isIdentifierStart(code) {
    if (code < 65) return code === 36;
    if (code < 91) return true;
    if (code < 97) return code === 95;
    if (code < 123) return true;
    if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
    return isInAstralSet(code, astralIdentifierStartCodes);
  }

  // Test whether a given character is part of an identifier.

  function isIdentifierChar(code) {
    if (code < 48) return code === 36;
    if (code < 58) return true;
    if (code < 65) return false;
    if (code < 91) return true;
    if (code < 97) return code === 95;
    if (code < 123) return true;
    if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
    return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
  }

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

  // optional / simple context binding
  var aFunction = __webpack_require__(812);
  module.exports = function(fn, that, length){
    aFunction(fn);
    if(that === undefined)return fn;
    switch(length){
      case 1: return function(a){
        return fn.call(that, a);
      };
      case 2: return function(a, b){
        return fn.call(that, a, b);
      };
      case 3: return function(a, b, c){
        return fn.call(that, a, b, c);
      };
    }
    return function(/* ...args */){
      return fn.apply(that, arguments);
    };
  };

/***/ },
/* 206 */
/***/ function(module, exports) {

  module.exports = {};

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

  var META     = __webpack_require__(235)('meta')
    , isObject = __webpack_require__(151)
    , has      = __webpack_require__(149)
    , setDesc  = __webpack_require__(141).f
    , id       = 0;
  var isExtensible = Object.isExtensible || function(){
    return true;
  };
  var FREEZE = !__webpack_require__(174)(function(){
    return isExtensible(Object.preventExtensions({}));
  });
  var setMeta = function(it){
    setDesc(it, META, {value: {
      i: 'O' + ++id, // object ID
      w: {}          // weak collections IDs
    }});
  };
  var fastKey = function(it, create){
    // return primitive with prefix
    if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
    if(!has(it, META)){
      // can't set metadata to uncaught frozen object
      if(!isExtensible(it))return 'F';
      // not necessary to add metadata
      if(!create)return 'E';
      // add missing metadata
      setMeta(it);
    // return object ID
    } return it[META].i;
  };
  var getWeak = function(it, create){
    if(!has(it, META)){
      // can't set metadata to uncaught frozen object
      if(!isExtensible(it))return true;
      // not necessary to add metadata
      if(!create)return false;
      // add missing metadata
      setMeta(it);
    // return hash weak collections IDs
    } return it[META].w;
  };
  // add metadata on freeze-family methods calling
  var onFreeze = function(it){
    if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
    return it;
  };
  var meta = module.exports = {
    KEY:      META,
    NEED:     false,
    fastKey:  fastKey,
    getWeak:  getWeak,
    onFreeze: onFreeze
  };

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

  // 7.1.13 ToObject(argument)
  var defined = __webpack_require__(229);
  module.exports = function(it){
    return Object(defined(it));
  };

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

  // fallback for non-array-like ES3 and non-enumerable old V8 strings
  var cof = __webpack_require__(130);
  module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
    return cof(it) == 'String' ? it.split('') : Object(it);
  };

/***/ },
/* 210 */
/***/ function(module, exports) {

  exports.f = {}.propertyIsEnumerable;

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  // NOTE: These type checking functions intentionally don't use `instanceof`
  // because it is fragile and can be easily faked with `Object.create()`.

  function isArray(arg) {
    if (Array.isArray) {
      return Array.isArray(arg);
    }
    return objectToString(arg) === '[object Array]';
  }
  exports.isArray = isArray;

  function isBoolean(arg) {
    return typeof arg === 'boolean';
  }
  exports.isBoolean = isBoolean;

  function isNull(arg) {
    return arg === null;
  }
  exports.isNull = isNull;

  function isNullOrUndefined(arg) {
    return arg == null;
  }
  exports.isNullOrUndefined = isNullOrUndefined;

  function isNumber(arg) {
    return typeof arg === 'number';
  }
  exports.isNumber = isNumber;

  function isString(arg) {
    return typeof arg === 'string';
  }
  exports.isString = isString;

  function isSymbol(arg) {
    return typeof arg === 'symbol';
  }
  exports.isSymbol = isSymbol;

  function isUndefined(arg) {
    return arg === void 0;
  }
  exports.isUndefined = isUndefined;

  function isRegExp(re) {
    return objectToString(re) === '[object RegExp]';
  }
  exports.isRegExp = isRegExp;

  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }
  exports.isObject = isObject;

  function isDate(d) {
    return objectToString(d) === '[object Date]';
  }
  exports.isDate = isDate;

  function isError(e) {
    return (objectToString(e) === '[object Error]' || e instanceof Error);
  }
  exports.isError = isError;

  function isFunction(arg) {
    return typeof arg === 'function';
  }
  exports.isFunction = isFunction;

  function isPrimitive(arg) {
    return arg === null ||
           typeof arg === 'boolean' ||
           typeof arg === 'number' ||
           typeof arg === 'string' ||
           typeof arg === 'symbol' ||  // ES6 symbol
           typeof arg === 'undefined';
  }
  exports.isPrimitive = isPrimitive;

  exports.isBuffer = Buffer.isBuffer;

  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(115).Buffer))

/***/ },
/* 212 */
/***/ function(module, exports) {

  /**
   * Indicates that navigation was caused by a call to history.push.
   */
  'use strict';

  exports.__esModule = true;
  var PUSH = 'PUSH';

  exports.PUSH = PUSH;
  /**
   * Indicates that navigation was caused by a call to history.replace.
   */
  var REPLACE = 'REPLACE';

  exports.REPLACE = REPLACE;
  /**
   * Indicates that navigation was caused by some other action such
   * as using a browser's back/forward buttons and/or manually manipulating
   * the URL in a browser's location bar. This is the default.
   *
   * See https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate
   * for more information.
   */
  var POP = 'POP';

  exports.POP = POP;
  exports['default'] = {
    PUSH: PUSH,
    REPLACE: REPLACE,
    POP: POP
  };

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  exports.__esModule = true;
  exports.extractPath = extractPath;
  exports.parsePath = parsePath;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _warning = __webpack_require__(169);

  var _warning2 = _interopRequireDefault(_warning);

  function extractPath(string) {
    var match = string.match(/^https?:\/\/[^\/]*/);

    if (match == null) return string;

    return string.substring(match[0].length);
  }

  function parsePath(path) {
    var pathname = extractPath(path);
    var search = '';
    var hash = '';

     true ? _warning2['default'](path === pathname, 'A path must be pathname + search + hash only, not a fully qualified URL like "%s"', path) : undefined;

    var hashIndex = pathname.indexOf('#');
    if (hashIndex !== -1) {
      hash = pathname.substring(hashIndex);
      pathname = pathname.substring(0, hashIndex);
    }

    var searchIndex = pathname.indexOf('?');
    if (searchIndex !== -1) {
      search = pathname.substring(searchIndex);
      pathname = pathname.substring(0, searchIndex);
    }

    if (pathname === '') pathname = '/';

    return {
      pathname: pathname,
      search: search,
      hash: hash
    };
  }

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

  var assignValue = __webpack_require__(343);

  /**
   * Copies properties of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy properties from.
   * @param {Array} props The property identifiers to copy.
   * @param {Object} [object={}] The object to copy properties to.
   * @param {Function} [customizer] The function to customize copied values.
   * @returns {Object} Returns `object`.
   */
  function copyObject(source, props, object, customizer) {
    object || (object = {});

    var index = -1,
        length = props.length;

    while (++index < length) {
      var key = props[index];

      var newValue = customizer
        ? customizer(object[key], source[key], key, object, source)
        : source[key];

      assignValue(object, key, newValue);
    }
    return object;
  }

  module.exports = copyObject;


/***/ },
/* 215 */
/***/ function(module, exports) {

  /**
   * Performs a
   * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
   * comparison between two values to determine if they are equivalent.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'user': 'fred' };
   * var other = { 'user': 'fred' };
   *
   * _.eq(object, object);
   * // => true
   *
   * _.eq(object, other);
   * // => false
   *
   * _.eq('a', 'a');
   * // => true
   *
   * _.eq('a', Object('a'));
   * // => false
   *
   * _.eq(NaN, NaN);
   * // => true
   */
  function eq(value, other) {
    return value === other || (value !== value && other !== other);
  }

  module.exports = eq;


/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

  var isArray = __webpack_require__(114),
      isObjectLike = __webpack_require__(164);

  /** `Object#toString` result references. */
  var stringTag = '[object String]';

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objectToString = objectProto.toString;

  /**
   * Checks if `value` is classified as a `String` primitive or object.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified,
   *  else `false`.
   * @example
   *
   * _.isString('abc');
   * // => true
   *
   * _.isString(1);
   * // => false
   */
  function isString(value) {
    return typeof value == 'string' ||
      (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);
  }

  module.exports = isString;


/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

  var isObjectLike = __webpack_require__(164);

  /** `Object#toString` result references. */
  var symbolTag = '[object Symbol]';

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objectToString = objectProto.toString;

  /**
   * Checks if `value` is classified as a `Symbol` primitive or object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified,
   *  else `false`.
   * @example
   *
   * _.isSymbol(Symbol.iterator);
   * // => true
   *
   * _.isSymbol('abc');
   * // => false
   */
  function isSymbol(value) {
    return typeof value == 'symbol' ||
      (isObjectLike(value) && objectToString.call(value) == symbolTag);
  }

  module.exports = isSymbol;


/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

  var toFinite = __webpack_require__(1193);

  /**
   * Converts `value` to an integer.
   *
   * **Note:** This method is loosely based on
   * [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted integer.
   * @example
   *
   * _.toInteger(3.2);
   * // => 3
   *
   * _.toInteger(Number.MIN_VALUE);
   * // => 0
   *
   * _.toInteger(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toInteger('3.2');
   * // => 3
   */
  function toInteger(value) {
    var result = toFinite(value),
        remainder = result % 1;

    return result === result ? (remainder ? result - remainder : result) : 0;
  }

  module.exports = toInteger;


/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

  var baseToString = __webpack_require__(347);

  /**
   * Converts `value` to a string. An empty string is returned for `null`
   * and `undefined` values. The sign of `-0` is preserved.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   * @example
   *
   * _.toString(null);
   * // => ''
   *
   * _.toString(-0);
   * // => '-0'
   *
   * _.toString([1, 2, 3]);
   * // => '1,2,3'
   */
  function toString(value) {
    return value == null ? '' : baseToString(value);
  }

  module.exports = toString;


/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule EventPluginHub
   */

  'use strict';

  var EventPluginRegistry = __webpack_require__(271);
  var EventPluginUtils = __webpack_require__(359);
  var ReactErrorUtils = __webpack_require__(363);

  var accumulateInto = __webpack_require__(508);
  var forEachAccumulated = __webpack_require__(509);
  var invariant = __webpack_require__(91);

  /**
   * Internal store for event listeners
   */
  var listenerBank = {};

  /**
   * Internal queue of events that have accumulated their dispatches and are
   * waiting to have their dispatches executed.
   */
  var eventQueue = null;

  /**
   * Dispatches an event and releases it back into the pool, unless persistent.
   *
   * @param {?object} event Synthetic event to be dispatched.
   * @param {boolean} simulated If the event is simulated (changes exn behavior)
   * @private
   */
  var executeDispatchesAndRelease = function (event, simulated) {
    if (event) {
      EventPluginUtils.executeDispatchesInOrder(event, simulated);

      if (!event.isPersistent()) {
        event.constructor.release(event);
      }
    }
  };
  var executeDispatchesAndReleaseSimulated = function (e) {
    return executeDispatchesAndRelease(e, true);
  };
  var executeDispatchesAndReleaseTopLevel = function (e) {
    return executeDispatchesAndRelease(e, false);
  };

  /**
   * This is a unified interface for event plugins to be installed and configured.
   *
   * Event plugins can implement the following properties:
   *
   *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
   *     Required. When a top-level event is fired, this method is expected to
   *     extract synthetic events that will in turn be queued and dispatched.
   *
   *   `eventTypes` {object}
   *     Optional, plugins that fire events must publish a mapping of registration
   *     names that are used to register listeners. Values of this mapping must
   *     be objects that contain `registrationName` or `phasedRegistrationNames`.
   *
   *   `executeDispatch` {function(object, function, string)}
   *     Optional, allows plugins to override how an event gets dispatched. By
   *     default, the listener is simply invoked.
   *
   * Each plugin that is injected into `EventsPluginHub` is immediately operable.
   *
   * @public
   */
  var EventPluginHub = {

    /**
     * Methods for injecting dependencies.
     */
    injection: {

      /**
       * @param {array} InjectedEventPluginOrder
       * @public
       */
      injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

      /**
       * @param {object} injectedNamesToPlugins Map from names to plugin modules.
       */
      injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

    },

    /**
     * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
     *
     * @param {object} inst The instance, which is the source of events.
     * @param {string} registrationName Name of listener (e.g. `onClick`).
     * @param {function} listener The callback to store.
     */
    putListener: function (inst, registrationName, listener) {
      !(typeof listener === 'function') ?  true ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : void 0;

      var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
      bankForRegistrationName[inst._rootNodeID] = listener;

      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
      if (PluginModule && PluginModule.didPutListener) {
        PluginModule.didPutListener(inst, registrationName, listener);
      }
    },

    /**
     * @param {object} inst The instance, which is the source of events.
     * @param {string} registrationName Name of listener (e.g. `onClick`).
     * @return {?function} The stored callback.
     */
    getListener: function (inst, registrationName) {
      var bankForRegistrationName = listenerBank[registrationName];
      return bankForRegistrationName && bankForRegistrationName[inst._rootNodeID];
    },

    /**
     * Deletes a listener from the registration bank.
     *
     * @param {object} inst The instance, which is the source of events.
     * @param {string} registrationName Name of listener (e.g. `onClick`).
     */
    deleteListener: function (inst, registrationName) {
      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
      if (PluginModule && PluginModule.willDeleteListener) {
        PluginModule.willDeleteListener(inst, registrationName);
      }

      var bankForRegistrationName = listenerBank[registrationName];
      // TODO: This should never be null -- when is it?
      if (bankForRegistrationName) {
        delete bankForRegistrationName[inst._rootNodeID];
      }
    },

    /**
     * Deletes all listeners for the DOM element with the supplied ID.
     *
     * @param {object} inst The instance, which is the source of events.
     */
    deleteAllListeners: function (inst) {
      for (var registrationName in listenerBank) {
        if (!listenerBank[registrationName][inst._rootNodeID]) {
          continue;
        }

        var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
        if (PluginModule && PluginModule.willDeleteListener) {
          PluginModule.willDeleteListener(inst, registrationName);
        }

        delete listenerBank[registrationName][inst._rootNodeID];
      }
    },

    /**
     * Allows registered plugins an opportunity to extract events from top-level
     * native browser events.
     *
     * @return {*} An accumulation of synthetic events.
     * @internal
     */
    extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var events;
      var plugins = EventPluginRegistry.plugins;
      for (var i = 0; i < plugins.length; i++) {
        // Not every plugin in the ordering may be loaded at runtime.
        var possiblePlugin = plugins[i];
        if (possiblePlugin) {
          var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
          if (extractedEvents) {
            events = accumulateInto(events, extractedEvents);
          }
        }
      }
      return events;
    },

    /**
     * Enqueues a synthetic event that should be dispatched when
     * `processEventQueue` is invoked.
     *
     * @param {*} events An accumulation of synthetic events.
     * @internal
     */
    enqueueEvents: function (events) {
      if (events) {
        eventQueue = accumulateInto(eventQueue, events);
      }
    },

    /**
     * Dispatches all synthetic events on the event queue.
     *
     * @internal
     */
    processEventQueue: function (simulated) {
      // Set `eventQueue` to null before processing it so that we can tell if more
      // events get enqueued while processing.
      var processingEventQueue = eventQueue;
      eventQueue = null;
      if (simulated) {
        forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
      } else {
        forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
      }
      !!eventQueue ?  true ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : void 0;
      // This would be a good time to rethrow if any of the event handlers threw.
      ReactErrorUtils.rethrowCaughtError();
    },

    /**
     * These are needed for tests only. Do not use!
     */
    __purge: function () {
      listenerBank = {};
    },

    __getListenerBank: function () {
      return listenerBank;
    }

  };

  module.exports = EventPluginHub;

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule EventPropagators
   */

  'use strict';

  var EventConstants = __webpack_require__(155);
  var EventPluginHub = __webpack_require__(220);
  var EventPluginUtils = __webpack_require__(359);

  var accumulateInto = __webpack_require__(508);
  var forEachAccumulated = __webpack_require__(509);
  var warning = __webpack_require__(94);

  var PropagationPhases = EventConstants.PropagationPhases;
  var getListener = EventPluginHub.getListener;

  /**
   * Some event types have a notion of different registration names for different
   * "phases" of propagation. This finds listeners by a given phase.
   */
  function listenerAtPhase(inst, event, propagationPhase) {
    var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
    return getListener(inst, registrationName);
  }

  /**
   * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
   * here, allows us to not have to bind or create functions for each event.
   * Mutating the event's members allows us to not have to create a wrapping
   * "dispatch" object that pairs the event with the listener.
   */
  function accumulateDirectionalDispatches(inst, upwards, event) {
    if (true) {
       true ? warning(inst, 'Dispatching inst must not be null') : void 0;
    }
    var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
    var listener = listenerAtPhase(inst, event, phase);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
    }
  }

  /**
   * Collect dispatches (must be entirely collected before dispatching - see unit
   * tests). Lazily allocate the array to conserve memory.  We must loop through
   * each event and perform the traversal for each one. We cannot perform a
   * single traversal for the entire collection of events because each event may
   * have a different target.
   */
  function accumulateTwoPhaseDispatchesSingle(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
    }
  }

  /**
   * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
   */
  function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      var targetInst = event._targetInst;
      var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
      EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
    }
  }

  /**
   * Accumulates without regard to direction, does not look for phased
   * registration names. Same as `accumulateDirectDispatchesSingle` but without
   * requiring that the `dispatchMarker` be the same as the dispatched ID.
   */
  function accumulateDispatches(inst, ignoredDirection, event) {
    if (event && event.dispatchConfig.registrationName) {
      var registrationName = event.dispatchConfig.registrationName;
      var listener = getListener(inst, registrationName);
      if (listener) {
        event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
        event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
      }
    }
  }

  /**
   * Accumulates dispatches on an `SyntheticEvent`, but only for the
   * `dispatchMarker`.
   * @param {SyntheticEvent} event
   */
  function accumulateDirectDispatchesSingle(event) {
    if (event && event.dispatchConfig.registrationName) {
      accumulateDispatches(event._targetInst, null, event);
    }
  }

  function accumulateTwoPhaseDispatches(events) {
    forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
  }

  function accumulateTwoPhaseDispatchesSkipTarget(events) {
    forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
  }

  function accumulateEnterLeaveDispatches(leave, enter, from, to) {
    EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
  }

  function accumulateDirectDispatches(events) {
    forEachAccumulated(events, accumulateDirectDispatchesSingle);
  }

  /**
   * A small set of propagation patterns, each of which will accept a small amount
   * of information, and generate a set of "dispatch ready event objects" - which
   * are sets of events that have already been annotated with a set of dispatched
   * listener functions/ids. The API is designed this way to discourage these
   * propagation strategies from actually executing the dispatches, since we
   * always want to collect the entire set of dispatches before executing event a
   * single one.
   *
   * @constructor EventPropagators
   */
  var EventPropagators = {
    accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
    accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
    accumulateDirectDispatches: accumulateDirectDispatches,
    accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
  };

  module.exports = EventPropagators;

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SyntheticUIEvent
   */

  'use strict';

  var SyntheticEvent = __webpack_require__(156);

  var getEventTarget = __webpack_require__(369);

  /**
   * @interface UIEvent
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */
  var UIEventInterface = {
    view: function (event) {
      if (event.view) {
        return event.view;
      }

      var target = getEventTarget(event);
      if (target != null && target.window === target) {
        // target is a window object
        return target;
      }

      var doc = target.ownerDocument;
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      if (doc) {
        return doc.defaultView || doc.parentWindow;
      } else {
        return window;
      }
    },
    detail: function (event) {
      return event.detail || 0;
    }
  };

  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticEvent}
   */
  function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }

  SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

  module.exports = SyntheticUIEvent;

/***/ },
/* 223 */
/***/ function(module, exports) {

  /* -*- Mode: js; js-indent-level: 2; -*- */
  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */

  /**
   * This is a helper function for getting values from parameter/options
   * objects.
   *
   * @param args The object we are extracting values from
   * @param name The name of the property we are getting.
   * @param defaultValue An optional value to return if the property is missing
   * from the object. If this is not specified and the property is missing, an
   * error will be thrown.
   */
  function getArg(aArgs, aName, aDefaultValue) {
    if (aName in aArgs) {
      return aArgs[aName];
    } else if (arguments.length === 3) {
      return aDefaultValue;
    } else {
      throw new Error('"' + aName + '" is a required argument.');
    }
  }
  exports.getArg = getArg;

  var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
  var dataUrlRegexp = /^data:.+\,.+$/;

  function urlParse(aUrl) {
    var match = aUrl.match(urlRegexp);
    if (!match) {
      return null;
    }
    return {
      scheme: match[1],
      auth: match[2],
      host: match[3],
      port: match[4],
      path: match[5]
    };
  }
  exports.urlParse = urlParse;

  function urlGenerate(aParsedUrl) {
    var url = '';
    if (aParsedUrl.scheme) {
      url += aParsedUrl.scheme + ':';
    }
    url += '//';
    if (aParsedUrl.auth) {
      url += aParsedUrl.auth + '@';
    }
    if (aParsedUrl.host) {
      url += aParsedUrl.host;
    }
    if (aParsedUrl.port) {
      url += ":" + aParsedUrl.port
    }
    if (aParsedUrl.path) {
      url += aParsedUrl.path;
    }
    return url;
  }
  exports.urlGenerate = urlGenerate;

  /**
   * Normalizes a path, or the path portion of a URL:
   *
   * - Replaces consecutive slashes with one slash.
   * - Removes unnecessary '.' parts.
   * - Removes unnecessary '<dir>/..' parts.
   *
   * Based on code in the Node.js 'path' core module.
   *
   * @param aPath The path or url to normalize.
   */
  function normalize(aPath) {
    var path = aPath;
    var url = urlParse(aPath);
    if (url) {
      if (!url.path) {
        return aPath;
      }
      path = url.path;
    }
    var isAbsolute = exports.isAbsolute(path);

    var parts = path.split(/\/+/);
    for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
      part = parts[i];
      if (part === '.') {
        parts.splice(i, 1);
      } else if (part === '..') {
        up++;
      } else if (up > 0) {
        if (part === '') {
          // The first part is blank if the path is absolute. Trying to go
          // above the root is a no-op. Therefore we can remove all '..' parts
          // directly after the root.
          parts.splice(i + 1, up);
          up = 0;
        } else {
          parts.splice(i, 2);
          up--;
        }
      }
    }
    path = parts.join('/');

    if (path === '') {
      path = isAbsolute ? '/' : '.';
    }

    if (url) {
      url.path = path;
      return urlGenerate(url);
    }
    return path;
  }
  exports.normalize = normalize;

  /**
   * Joins two paths/URLs.
   *
   * @param aRoot The root path or URL.
   * @param aPath The path or URL to be joined with the root.
   *
   * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
   *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
   *   first.
   * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
   *   is updated with the result and aRoot is returned. Otherwise the result
   *   is returned.
   *   - If aPath is absolute, the result is aPath.
   *   - Otherwise the two paths are joined with a slash.
   * - Joining for example 'http://' and 'www.example.com' is also supported.
   */
  function join(aRoot, aPath) {
    if (aRoot === "") {
      aRoot = ".";
    }
    if (aPath === "") {
      aPath = ".";
    }
    var aPathUrl = urlParse(aPath);
    var aRootUrl = urlParse(aRoot);
    if (aRootUrl) {
      aRoot = aRootUrl.path || '/';
    }

    // `join(foo, '//www.example.org')`
    if (aPathUrl && !aPathUrl.scheme) {
      if (aRootUrl) {
        aPathUrl.scheme = aRootUrl.scheme;
      }
      return urlGenerate(aPathUrl);
    }

    if (aPathUrl || aPath.match(dataUrlRegexp)) {
      return aPath;
    }

    // `join('http://', 'www.example.com')`
    if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
      aRootUrl.host = aPath;
      return urlGenerate(aRootUrl);
    }

    var joined = aPath.charAt(0) === '/'
      ? aPath
      : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

    if (aRootUrl) {
      aRootUrl.path = joined;
      return urlGenerate(aRootUrl);
    }
    return joined;
  }
  exports.join = join;

  exports.isAbsolute = function (aPath) {
    return aPath.charAt(0) === '/' || !!aPath.match(urlRegexp);
  };

  /**
   * Make a path relative to a URL or another path.
   *
   * @param aRoot The root path or URL.
   * @param aPath The path or URL to be made relative to aRoot.
   */
  function relative(aRoot, aPath) {
    if (aRoot === "") {
      aRoot = ".";
    }

    aRoot = aRoot.replace(/\/$/, '');

    // It is possible for the path to be above the root. In this case, simply
    // checking whether the root is a prefix of the path won't work. Instead, we
    // need to remove components from the root one by one, until either we find
    // a prefix that fits, or we run out of components to remove.
    var level = 0;
    while (aPath.indexOf(aRoot + '/') !== 0) {
      var index = aRoot.lastIndexOf("/");
      if (index < 0) {
        return aPath;
      }

      // If the only part of the root that is left is the scheme (i.e. http://,
      // file:///, etc.), one or more slashes (/), or simply nothing at all, we
      // have exhausted all components, so the path is not relative to the root.
      aRoot = aRoot.slice(0, index);
      if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
        return aPath;
      }

      ++level;
    }

    // Make sure we add a "../" for each component we removed from the root.
    return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
  }
  exports.relative = relative;

  var supportsNullProto = (function () {
    var obj = Object.create(null);
    return !('__proto__' in obj);
  }());

  function identity (s) {
    return s;
  }

  /**
   * Because behavior goes wacky when you set `__proto__` on objects, we
   * have to prefix all the strings in our set with an arbitrary character.
   *
   * See https://github.com/mozilla/source-map/pull/31 and
   * https://github.com/mozilla/source-map/issues/30
   *
   * @param String aStr
   */
  function toSetString(aStr) {
    if (isProtoString(aStr)) {
      return '$' + aStr;
    }

    return aStr;
  }
  exports.toSetString = supportsNullProto ? identity : toSetString;

  function fromSetString(aStr) {
    if (isProtoString(aStr)) {
      return aStr.slice(1);
    }

    return aStr;
  }
  exports.fromSetString = supportsNullProto ? identity : fromSetString;

  function isProtoString(s) {
    if (!s) {
      return false;
    }

    var length = s.length;

    if (length < 9 /* "__proto__".length */) {
      return false;
    }

    if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
        s.charCodeAt(length - 2) !== 95  /* '_' */ ||
        s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
        s.charCodeAt(length - 4) !== 116 /* 't' */ ||
        s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
        s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
        s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
        s.charCodeAt(length - 8) !== 95  /* '_' */ ||
        s.charCodeAt(length - 9) !== 95  /* '_' */) {
      return false;
    }

    for (var i = length - 10; i >= 0; i--) {
      if (s.charCodeAt(i) !== 36 /* '$' */) {
        return false;
      }
    }

    return true;
  }

  /**
   * Comparator between two mappings where the original positions are compared.
   *
   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
   * mappings with the same original source/line/column, but different generated
   * line and column the same. Useful when searching for a mapping with a
   * stubbed out mapping.
   */
  function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
    var cmp = mappingA.source - mappingB.source;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0 || onlyCompareOriginal) {
      return cmp;
    }

    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) {
      return cmp;
    }

    return mappingA.name - mappingB.name;
  }
  exports.compareByOriginalPositions = compareByOriginalPositions;

  /**
   * Comparator between two mappings with deflated source and name indices where
   * the generated positions are compared.
   *
   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
   * mappings with the same generated line and column, but different
   * source/name/original line and column the same. Useful when searching for a
   * mapping with a stubbed out mapping.
   */
  function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
    var cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0 || onlyCompareGenerated) {
      return cmp;
    }

    cmp = mappingA.source - mappingB.source;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0) {
      return cmp;
    }

    return mappingA.name - mappingB.name;
  }
  exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

  function strcmp(aStr1, aStr2) {
    if (aStr1 === aStr2) {
      return 0;
    }

    if (aStr1 > aStr2) {
      return 1;
    }

    return -1;
  }

  /**
   * Comparator between two mappings with inflated source and name strings where
   * the generated positions are compared.
   */
  function compareByGeneratedPositionsInflated(mappingA, mappingB) {
    var cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0) {
      return cmp;
    }

    return strcmp(mappingA.name, mappingB.name);
  }
  exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;


/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  exports.__esModule = true;

  var _getIterator2 = __webpack_require__(93);

  var _getIterator3 = _interopRequireDefault(_getIterator2);

  var _classCallCheck2 = __webpack_require__(97);

  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

  var _possibleConstructorReturn2 = __webpack_require__(172);

  var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

  var _inherits2 = __webpack_require__(171);

  var _inherits3 = _interopRequireDefault(_inherits2);

  var _optionManager = __webpack_require__(203);

  var _optionManager2 = _interopRequireDefault(_optionManager);

  var _babelMessages = __webpack_require__(157);

  var messages = _interopRequireWildcard(_babelMessages);

  var _store = __webpack_require__(279);

  var _store2 = _interopRequireDefault(_store);

  var _babelTraverse = __webpack_require__(128);

  var _babelTraverse2 = _interopRequireDefault(_babelTraverse);

  var _assign = __webpack_require__(352);

  var _assign2 = _interopRequireDefault(_assign);

  var _clone = __webpack_require__(264);

  var _clone2 = _interopRequireDefault(_clone);

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /* eslint max-len: 0 */

  var GLOBAL_VISITOR_PROPS = ["enter", "exit"];

  var Plugin = function (_Store) {
    (0, _inherits3.default)(Plugin, _Store);

    function Plugin(plugin, key) {
      (0, _classCallCheck3.default)(this, Plugin);

      var _this = (0, _possibleConstructorReturn3.default)(this, _Store.call(this));

      _this.initialized = false;
      _this.raw = (0, _assign2.default)({}, plugin);
      _this.key = key;

      _this.manipulateOptions = _this.take("manipulateOptions");
      _this.post = _this.take("post");
      _this.pre = _this.take("pre");
      _this.visitor = _this.normaliseVisitor((0, _clone2.default)(_this.take("visitor")) || {});
      return _this;
    }

    Plugin.prototype.take = function take(key) {
      var val = this.raw[key];
      delete this.raw[key];
      return val;
    };

    Plugin.prototype.chain = function chain(target, key) {
      if (!target[key]) return this[key];
      if (!this[key]) return target[key];

      var fns = [target[key], this[key]];

      return function () {
        var val = void 0;

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        for (var _iterator = fns, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
          var _ref;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
          }

          var fn = _ref;

          if (fn) {
            var ret = fn.apply(this, args);
            if (ret != null) val = ret;
          }
        }
        return val;
      };
    };

    Plugin.prototype.maybeInherit = function maybeInherit(loc) {
      var inherits = this.take("inherits");
      if (!inherits) return;

      inherits = _optionManager2.default.normalisePlugin(inherits, loc, "inherits");

      this.manipulateOptions = this.chain(inherits, "manipulateOptions");
      this.post = this.chain(inherits, "post");
      this.pre = this.chain(inherits, "pre");
      this.visitor = _babelTraverse2.default.visitors.merge([inherits.visitor, this.visitor]);
    };

    /**
     * We lazy initialise parts of a plugin that rely on contextual information such as
     * position on disk and how it was specified.
     */

    Plugin.prototype.init = function init(loc, i) {
      if (this.initialized) return;
      this.initialized = true;

      this.maybeInherit(loc);

      for (var key in this.raw) {
        throw new Error(messages.get("pluginInvalidProperty", loc, i, key));
      }
    };

    Plugin.prototype.normaliseVisitor = function normaliseVisitor(visitor) {
      for (var _iterator2 = GLOBAL_VISITOR_PROPS, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var key = _ref2;

        if (visitor[key]) {
          throw new Error("Plugins aren't allowed to specify catch-all enter/exit handlers. Please target individual nodes.");
        }
      }

      _babelTraverse2.default.explode(visitor);
      return visitor;
    };

    return Plugin;
  }(_store2.default);

  exports.default = Plugin;
  module.exports = exports["default"];

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  exports.__esModule = true;

  var _defineProperty = __webpack_require__(737);

  var _defineProperty2 = _interopRequireDefault(_defineProperty);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  exports.default = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        (0, _defineProperty2.default)(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;
  exports.scope = exports.path = undefined;

  var _weakMap = __webpack_require__(743);

  var _weakMap2 = _interopRequireDefault(_weakMap);

  exports.clear = clear;
  /*istanbul ignore next*/
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var path = /*istanbul ignore next*/exports.path = new /*istanbul ignore next*/_weakMap2.default();
  var scope = /*istanbul ignore next*/exports.scope = new /*istanbul ignore next*/_weakMap2.default();

  function clear() {
    /*istanbul ignore next*/exports.path = path = new /*istanbul ignore next*/_weakMap2.default();
    /*istanbul ignore next*/exports.scope = scope = new /*istanbul ignore next*/_weakMap2.default();
  }

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.types = exports.TokContext = undefined;

  var _classCallCheck2 = __webpack_require__(97);

  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

  var _types = __webpack_require__(137);

  var _whitespace = __webpack_require__(191);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  // The algorithm used to determine whether a regexp can appear at a
  // given point in the program is loosely based on sweet.js' approach.
  // See https://github.com/mozilla/sweet.js/wiki/design

  var TokContext = exports.TokContext = function TokContext(token, isExpr, preserveSpace, override) {
    (0, _classCallCheck3.default)(this, TokContext);

    this.token = token;
    this.isExpr = !!isExpr;
    this.preserveSpace = !!preserveSpace;
    this.override = override;
  };

  var types = exports.types = {
    b_stat: new TokContext("{", false),
    b_expr: new TokContext("{", true),
    b_tmpl: new TokContext("${", true),
    p_stat: new TokContext("(", false),
    p_expr: new TokContext("(", true),
    q_tmpl: new TokContext("`", true, true, function (p) {
      return p.readTmplToken();
    }),
    f_expr: new TokContext("function", true)
  };

  // Token-specific context update code

  _types.types.parenR.updateContext = _types.types.braceR.updateContext = function () {
    if (this.state.context.length === 1) {
      this.state.exprAllowed = true;
      return;
    }

    var out = this.state.context.pop();
    if (out === types.b_stat && this.curContext() === types.f_expr) {
      this.state.context.pop();
      this.state.exprAllowed = false;
    } else if (out === types.b_tmpl) {
      this.state.exprAllowed = true;
    } else {
      this.state.exprAllowed = !out.isExpr;
    }
  };

  _types.types.name.updateContext = function (prevType) {
    this.state.exprAllowed = false;

    if (prevType === _types.types._let || prevType === _types.types._const || prevType === _types.types._var) {
      if (_whitespace.lineBreak.test(this.input.slice(this.state.end))) {
        this.state.exprAllowed = true;
      }
    }
  };

  _types.types.braceL.updateContext = function (prevType) {
    this.state.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);
    this.state.exprAllowed = true;
  };

  _types.types.dollarBraceL.updateContext = function () {
    this.state.context.push(types.b_tmpl);
    this.state.exprAllowed = true;
  };

  _types.types.parenL.updateContext = function (prevType) {
    var statementParens = prevType === _types.types._if || prevType === _types.types._for || prevType === _types.types._with || prevType === _types.types._while;
    this.state.context.push(statementParens ? types.p_stat : types.p_expr);
    this.state.exprAllowed = true;
  };

  _types.types.incDec.updateContext = function () {
    // tokExprAllowed stays unchanged
  };

  _types.types._function.updateContext = function () {
    if (this.curContext() !== types.b_stat) {
      this.state.context.push(types.f_expr);
    }

    this.state.exprAllowed = false;
  };

  _types.types.backQuote.updateContext = function () {
    if (this.curContext() === types.q_tmpl) {
      this.state.context.pop();
    } else {
      this.state.context.push(types.q_tmpl);
    }
    this.state.exprAllowed = false;
  };

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SourceLocation = exports.Position = undefined;

  var _classCallCheck2 = __webpack_require__(97);

  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

  exports.getLineInfo = getLineInfo;

  var _whitespace = __webpack_require__(191);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  // These are used when `options.locations` is on, for the
  // `startLoc` and `endLoc` properties.

  var Position = exports.Position = function Position(line, col) {
    (0, _classCallCheck3.default)(this, Position);

    this.line = line;
    this.column = col;
  };

  var SourceLocation = exports.SourceLocation = function SourceLocation(start, end) {
    (0, _classCallCheck3.default)(this, SourceLocation);

    this.start = start;
    this.end = end;
  };

  // The `getLineInfo` function is mostly useful when the
  // `locations` option is off (for performance reasons) and you
  // want to find the line/column position for a given character
  // offset. `input` should be the code string that the offset refers
  // into.

  function getLineInfo(input, offset) {
    for (var line = 1, cur = 0;;) {
      _whitespace.lineBreakG.lastIndex = cur;
      var match = _whitespace.lineBreakG.exec(input);
      if (match && match.index < offset) {
        ++line;
        cur = match.index + match[0].length;
      } else {
        return new Position(line, offset - cur);
      }
    }
  }

/***/ },
/* 229 */
/***/ function(module, exports) {

  // 7.2.1 RequireObjectCoercible(argument)
  module.exports = function(it){
    if(it == undefined)throw TypeError("Can't call method on  " + it);
    return it;
  };

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

  var ctx         = __webpack_require__(205)
    , call        = __webpack_require__(824)
    , isArrayIter = __webpack_require__(823)
    , anObject    = __webpack_require__(148)
    , toLength    = __webpack_require__(305)
    , getIterFn   = __webpack_require__(406)
    , BREAK       = {}
    , RETURN      = {};
  var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
    var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
      , f      = ctx(fn, that, entries ? 2 : 1)
      , index  = 0
      , length, step, iterator, result;
    if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
    // fast case for arrays with default iterator
    if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
      result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
      if(result === BREAK || result === RETURN)return result;
    } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
      result = call(iterator, f, step.value, entries);
      if(result === BREAK || result === RETURN)return result;
    }
  };
  exports.BREAK  = BREAK;
  exports.RETURN = RETURN;

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
  var anObject    = __webpack_require__(148)
    , dPs         = __webpack_require__(827)
    , enumBugKeys = __webpack_require__(295)
    , IE_PROTO    = __webpack_require__(302)('IE_PROTO')
    , Empty       = function(){ /* empty */ }
    , PROTOTYPE   = 'prototype';

  // Create object with fake `null` prototype: use iframe Object with cleared prototype
  var createDict = function(){
    // Thrash, waste and sodomy: IE GC bug
    var iframe = __webpack_require__(396)('iframe')
      , i      = enumBugKeys.length
      , gt     = '>'
      , iframeDocument;
    iframe.style.display = 'none';
    __webpack_require__(822).appendChild(iframe);
    iframe.src = 'javascript:'; // eslint-disable-line no-script-url
    // createDict = iframe.contentWindow.Object;
    // html.removeChild(iframe);
    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write('<script>document.F=Object</script' + gt);
    iframeDocument.close();
    createDict = iframeDocument.F;
    while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
    return createDict();
  };

  module.exports = Object.create || function create(O, Properties){
    var result;
    if(O !== null){
      Empty[PROTOTYPE] = anObject(O);
      result = new Empty;
      Empty[PROTOTYPE] = null;
      // add "__proto__" for Object.getPrototypeOf polyfill
      result[IE_PROTO] = O;
    } else result = createDict();
    return Properties === undefined ? result : dPs(result, Properties);
  };

/***/ },
/* 232 */
/***/ function(module, exports) {

  exports.f = {}.propertyIsEnumerable;

/***/ },
/* 233 */
/***/ function(module, exports) {

  module.exports = function(bitmap, value){
    return {
      enumerable  : !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable    : !(bitmap & 4),
      value       : value
    };
  };

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

  var def = __webpack_require__(141).f
    , has = __webpack_require__(149)
    , TAG = __webpack_require__(129)('toStringTag');

  module.exports = function(it, tag, stat){
    if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
  };

/***/ },
/* 235 */
/***/ function(module, exports) {

  var id = 0
    , px = Math.random();
  module.exports = function(key){
    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
  };

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(834);
  var global        = __webpack_require__(140)
    , hide          = __webpack_require__(150)
    , Iterators     = __webpack_require__(206)
    , TO_STRING_TAG = __webpack_require__(129)('toStringTag');

  for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
    var NAME       = collections[i]
      , Collection = global[NAME]
      , proto      = Collection && Collection.prototype;
    if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = Iterators.Array;
  }

/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

  // false -> Array#indexOf
  // true  -> Array#includes
  var toIObject = __webpack_require__(121)
    , toLength  = __webpack_require__(112)
    , toIndex   = __webpack_require__(183);
  module.exports = function(IS_INCLUDES){
    return function($this, el, fromIndex){
      var O      = toIObject($this)
        , length = toLength(O.length)
        , index  = toIndex(fromIndex, length)
        , value;
      // Array#includes uses SameValueZero equality algorithm
      if(IS_INCLUDES && el != el)while(length > index){
        value = O[index++];
        if(value != value)return true;
      // Array#toIndex ignores holes, Array#includes - not
      } else for(;length > index; index++)if(IS_INCLUDES || index in O){
        if(O[index] === el)return IS_INCLUDES || index || 0;
      } return !IS_INCLUDES && -1;
    };
  };

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var global            = __webpack_require__(95)
    , $export           = __webpack_require__(89)
    , redefine          = __webpack_require__(119)
    , redefineAll       = __webpack_require__(181)
    , meta              = __webpack_require__(160)
    , forOf             = __webpack_require__(195)
    , anInstance        = __webpack_require__(159)
    , isObject          = __webpack_require__(98)
    , fails             = __webpack_require__(96)
    , $iterDetect       = __webpack_require__(243)
    , setToStringTag    = __webpack_require__(196)
    , inheritIfRequired = __webpack_require__(318);

  module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
    var Base  = global[NAME]
      , C     = Base
      , ADDER = IS_MAP ? 'set' : 'add'
      , proto = C && C.prototype
      , O     = {};
    var fixMethod = function(KEY){
      var fn = proto[KEY];
      redefine(proto, KEY,
        KEY == 'delete' ? function(a){
          return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
        } : KEY == 'has' ? function has(a){
          return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
        } : KEY == 'get' ? function get(a){
          return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
        } : KEY == 'add' ? function add(a){ fn.call(this, a === 0 ? 0 : a); return this; }
          : function set(a, b){ fn.call(this, a === 0 ? 0 : a, b); return this; }
      );
    };
    if(typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
      new C().entries().next();
    }))){
      // create collection constructor
      C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
      redefineAll(C.prototype, methods);
      meta.NEED = true;
    } else {
      var instance             = new C
        // early implementations not supports chaining
        , HASNT_CHAINING       = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance
        // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
        , THROWS_ON_PRIMITIVES = fails(function(){ instance.has(1); })
        // most early implementations doesn't supports iterables, most modern - not close it correctly
        , ACCEPT_ITERABLES     = $iterDetect(function(iter){ new C(iter); }) // eslint-disable-line no-new
        // for early implementations -0 and +0 not the same
        , BUGGY_ZERO = !IS_WEAK && fails(function(){
          // V8 ~ Chromium 42- fails only with 5+ elements
          var $instance = new C()
            , index     = 5;
          while(index--)$instance[ADDER](index, index);
          return !$instance.has(-0);
        });
      if(!ACCEPT_ITERABLES){ 
        C = wrapper(function(target, iterable){
          anInstance(target, C, NAME);
          var that = inheritIfRequired(new Base, target, C);
          if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
          return that;
        });
        C.prototype = proto;
        proto.constructor = C;
      }
      if(THROWS_ON_PRIMITIVES || BUGGY_ZERO){
        fixMethod('delete');
        fixMethod('has');
        IS_MAP && fixMethod('get');
      }
      if(BUGGY_ZERO || HASNT_CHAINING)fixMethod(ADDER);
      // weak collections should not contains .clear method
      if(IS_WEAK && proto.clear)delete proto.clear;
    }

    setToStringTag(C, NAME);

    O[NAME] = C;
    $export($export.G + $export.W + $export.F * (C != Base), O);

    if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);

    return C;
  };

/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var hide     = __webpack_require__(117)
    , redefine = __webpack_require__(119)
    , fails    = __webpack_require__(96)
    , defined  = __webpack_require__(131)
    , wks      = __webpack_require__(99);

  module.exports = function(KEY, length, exec){
    var SYMBOL   = wks(KEY)
      , fns      = exec(defined, SYMBOL, ''[KEY])
      , strfn    = fns[0]
      , rxfn     = fns[1];
    if(fails(function(){
      var O = {};
      O[SYMBOL] = function(){ return 7; };
      return ''[KEY](O) != 7;
    })){
      redefine(String.prototype, KEY, strfn);
      hide(RegExp.prototype, SYMBOL, length == 2
        // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
        // 21.2.5.11 RegExp.prototype[@@split](string, limit)
        ? function(string, arg){ return rxfn.call(string, this, arg); }
        // 21.2.5.6 RegExp.prototype[@@match](string)
        // 21.2.5.9 RegExp.prototype[@@search](string)
        : function(string){ return rxfn.call(string, this); }
      );
    }
  };

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // 21.2.5.3 get RegExp.prototype.flags
  var anObject = __webpack_require__(92);
  module.exports = function(){
    var that   = anObject(this)
      , result = '';
    if(that.global)     result += 'g';
    if(that.ignoreCase) result += 'i';
    if(that.multiline)  result += 'm';
    if(that.unicode)    result += 'u';
    if(that.sticky)     result += 'y';
    return result;
  };

/***/ },
/* 241 */
/***/ function(module, exports) {

  // fast apply, http://jsperf.lnkit.com/fast-apply/5
  module.exports = function(fn, args, that){
    var un = that === undefined;
    switch(args.length){
      case 0: return un ? fn()
                        : fn.call(that);
      case 1: return un ? fn(args[0])
                        : fn.call(that, args[0]);
      case 2: return un ? fn(args[0], args[1])
                        : fn.call(that, args[0], args[1]);
      case 3: return un ? fn(args[0], args[1], args[2])
                        : fn.call(that, args[0], args[1], args[2]);
      case 4: return un ? fn(args[0], args[1], args[2], args[3])
                        : fn.call(that, args[0], args[1], args[2], args[3]);
    } return              fn.apply(that, args);
  };

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

  // 7.2.8 IsRegExp(argument)
  var isObject = __webpack_require__(98)
    , cof      = __webpack_require__(130)
    , MATCH    = __webpack_require__(99)('match');
  module.exports = function(it){
    var isRegExp;
    return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
  };

/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

  var ITERATOR     = __webpack_require__(99)('iterator')
    , SAFE_CLOSING = false;

  try {
    var riter = [7][ITERATOR]();
    riter['return'] = function(){ SAFE_CLOSING = true; };
    Array.from(riter, function(){ throw 2; });
  } catch(e){ /* empty */ }

  module.exports = function(exec, skipClosing){
    if(!skipClosing && !SAFE_CLOSING)return false;
    var safe = false;
    try {
      var arr  = [7]
        , iter = arr[ITERATOR]();
      iter.next = function(){ return {done: safe = true}; };
      arr[ITERATOR] = function(){ return iter; };
      exec(arr);
    } catch(e){ /* empty */ }
    return safe;
  };

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

  // Forced replacement prototype accessors methods
  module.exports = __webpack_require__(177)|| !__webpack_require__(96)(function(){
    var K = Math.random();
    // In FF throws only define methods
    __defineSetter__.call(null, K, function(){ /* empty */});
    delete __webpack_require__(95)[K];
  });

/***/ },
/* 245 */
/***/ function(module, exports) {

  exports.f = Object.getOwnPropertySymbols;

/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

  // Works with __proto__ only. Old v8 can't work with null proto objects.
  /* eslint-disable no-proto */
  var isObject = __webpack_require__(98)
    , anObject = __webpack_require__(92);
  var check = function(O, proto){
    anObject(O);
    if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
  };
  module.exports = {
    set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
      function(test, buggy, set){
        try {
          set = __webpack_require__(152)(Function.call, __webpack_require__(122).f(Object.prototype, '__proto__').set, 2);
          set(test, []);
          buggy = !(test instanceof Array);
        } catch(e){ buggy = true; }
        return function setPrototypeOf(O, proto){
          check(O, proto);
          if(buggy)O.__proto__ = proto;
          else set(O, proto);
          return O;
        };
      }({}, false) : undefined),
    check: check
  };

/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

  var global = __webpack_require__(95)
    , SHARED = '__core-js_shared__'
    , store  = global[SHARED] || (global[SHARED] = {});
  module.exports = function(key){
    return store[key] || (store[key] = {});
  };

/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

  var global = __webpack_require__(95)
    , hide   = __webpack_require__(117)
    , uid    = __webpack_require__(184)
    , TYPED  = uid('typed_array')
    , VIEW   = uid('view')
    , ABV    = !!(global.ArrayBuffer && global.DataView)
    , CONSTR = ABV
    , i = 0, l = 9, Typed;

  var TypedArrayConstructors = (
    'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
  ).split(',');

  while(i < l){
    if(Typed = global[TypedArrayConstructors[i++]]){
      hide(Typed.prototype, TYPED, true);
      hide(Typed.prototype, VIEW, true);
    } else CONSTR = false;
  }

  module.exports = {
    ABV:    ABV,
    CONSTR: CONSTR,
    TYPED:  TYPED,
    VIEW:   VIEW
  };

/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   */

  'use strict';

  var emptyObject = {};

  if (true) {
    Object.freeze(emptyObject);
  }

  module.exports = emptyObject;

/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @typechecks static-only
   */

  'use strict';

  var invariant = __webpack_require__(91);

  /**
   * Constructs an enumeration with keys equal to their value.
   *
   * For example:
   *
   *   var COLORS = keyMirror({blue: null, red: null});
   *   var myColor = COLORS.blue;
   *   var isColorValid = !!COLORS[myColor];
   *
   * The last line could not be performed if the values of the generated enum were
   * not equal to their keys.
   *
   *   Input:  {key1: val1, key2: val2}
   *   Output: {key1: key1, key2: key2}
   *
   * @param {object} obj
   * @return {object}
   */
  var keyMirror = function keyMirror(obj) {
    var ret = {};
    var key;
    !(obj instanceof Object && !Array.isArray(obj)) ?  true ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : void 0;
    for (key in obj) {
      if (!obj.hasOwnProperty(key)) {
        continue;
      }
      ret[key] = key;
    }
    return ret;
  };

  module.exports = keyMirror;

/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   */

  'use strict';

  /**
   * Use invariant() to assert state which your program assumes to be true.
   *
   * Provide sprintf-style format (only %s is supported) and arguments
   * to provide information about what broke and what you were
   * expecting.
   *
   * The invariant message will be stripped in production, but the invariant
   * will remain to ensure logic does not differ in production.
   */

  var invariant = function(condition, format, a, b, c, d, e, f) {
    if (true) {
      if (format === undefined) {
        throw new Error('invariant requires an error message argument');
      }
    }

    if (!condition) {
      var error;
      if (format === undefined) {
        error = new Error(
          'Minified exception occurred; use the non-minified dev environment ' +
          'for the full error message and additional helpful warnings.'
        );
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(
          format.replace(/%s/g, function() { return args[argIndex++]; })
        );
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1; // we don't care about invariant's own frame
      throw error;
    }
  };

  module.exports = invariant;


/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

  var listCacheClear = __webpack_require__(1154),
      listCacheDelete = __webpack_require__(1155),
      listCacheGet = __webpack_require__(1156),
      listCacheHas = __webpack_require__(1157),
      listCacheSet = __webpack_require__(1158);

  /**
   * Creates an list cache object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function ListCache(entries) {
    var index = -1,
        length = entries ? entries.length : 0;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `ListCache`.
  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype['delete'] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;

  module.exports = ListCache;


/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

  var ListCache = __webpack_require__(252),
      stackClear = __webpack_require__(1166),
      stackDelete = __webpack_require__(1167),
      stackGet = __webpack_require__(1168),
      stackHas = __webpack_require__(1169),
      stackSet = __webpack_require__(1170);

  /**
   * Creates a stack cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Stack(entries) {
    this.__data__ = new ListCache(entries);
  }

  // Add methods to `Stack`.
  Stack.prototype.clear = stackClear;
  Stack.prototype['delete'] = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;

  module.exports = Stack;


/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

  var eq = __webpack_require__(215);

  /**
   * Gets the index at which the `key` is found in `array` of key-value pairs.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} key The key to search for.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function assocIndexOf(array, key) {
    var length = array.length;
    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }

  module.exports = assocIndexOf;


/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

  var Stack = __webpack_require__(253),
      arrayEach = __webpack_require__(341),
      assignValue = __webpack_require__(343),
      baseAssign = __webpack_require__(1090),
      cloneBuffer = __webpack_require__(1120),
      copyArray = __webpack_require__(466),
      copySymbols = __webpack_require__(1129),
      getAllKeys = __webpack_require__(1136),
      getTag = __webpack_require__(469),
      initCloneArray = __webpack_require__(1146),
      initCloneByTag = __webpack_require__(1147),
      initCloneObject = __webpack_require__(1148),
      isArray = __webpack_require__(114),
      isBuffer = __webpack_require__(1182),
      isHostObject = __webpack_require__(257),
      isObject = __webpack_require__(133),
      keys = __webpack_require__(165);

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /**
   * The base implementation of `_.clone` and `_.cloneDeep` which tracks
   * traversed objects.
   *
   * @private
   * @param {*} value The value to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @param {boolean} [isFull] Specify a clone including symbols.
   * @param {Function} [customizer] The function to customize cloning.
   * @param {string} [key] The key of `value`.
   * @param {Object} [object] The parent object of `value`.
   * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
   * @returns {*} Returns the cloned value.
   */
  function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
    var result;
    if (customizer) {
      result = object ? customizer(value, key, object, stack) : customizer(value);
    }
    if (result !== undefined) {
      return result;
    }
    if (!isObject(value)) {
      return value;
    }
    var isArr = isArray(value);
    if (isArr) {
      result = initCloneArray(value);
      if (!isDeep) {
        return copyArray(value, result);
      }
    } else {
      var tag = getTag(value),
          isFunc = tag == funcTag || tag == genTag;

      if (isBuffer(value)) {
        return cloneBuffer(value, isDeep);
      }
      if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
        if (isHostObject(value)) {
          return object ? value : {};
        }
        result = initCloneObject(isFunc ? {} : value);
        if (!isDeep) {
          return copySymbols(value, baseAssign(result, value));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object ? value : {};
        }
        result = initCloneByTag(value, tag, baseClone, isDeep);
      }
    }
    // Check for circular references and return its corresponding clone.
    stack || (stack = new Stack);
    var stacked = stack.get(value);
    if (stacked) {
      return stacked;
    }
    stack.set(value, result);

    if (!isArr) {
      var props = isFull ? getAllKeys(value) : keys(value);
    }
    // Recursively populate clone (susceptible to call stack limits).
    arrayEach(props || value, function(subValue, key) {
      if (props) {
        key = subValue;
        subValue = value[key];
      }
      assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
    });
    return result;
  }

  module.exports = baseClone;


/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

  var isKeyable = __webpack_require__(1151);

  /**
   * Gets the data for `map`.
   *
   * @private
   * @param {Object} map The map to query.
   * @param {string} key The reference key.
   * @returns {*} Returns the map data.
   */
  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key)
      ? data[typeof key == 'string' ? 'string' : 'hash']
      : data.map;
  }

  module.exports = getMapData;


/***/ },
/* 257 */
/***/ function(module, exports) {

  /**
   * Checks if `value` is a host object in IE < 9.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
   */
  function isHostObject(value) {
    // Many host objects are `Object` objects that can coerce to strings
    // despite having improperly defined `toString` methods.
    var result = false;
    if (value != null && typeof value.toString != 'function') {
      try {
        result = !!(value + '');
      } catch (e) {}
    }
    return result;
  }

  module.exports = isHostObject;


/***/ },
/* 258 */
/***/ function(module, exports) {

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER = 9007199254740991;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex(value, length) {
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length &&
      (typeof value == 'number' || reIsUint.test(value)) &&
      (value > -1 && value % 1 == 0 && value < length);
  }

  module.exports = isIndex;


/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

  var isArray = __webpack_require__(114),
      isSymbol = __webpack_require__(217);

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/;

  /**
   * Checks if `value` is a property name and not a property path.
   *
   * @private
   * @param {*} value The value to check.
   * @param {Object} [object] The object to query keys on.
   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
   */
  function isKey(value, object) {
    if (isArray(value)) {
      return false;
    }
    var type = typeof value;
    if (type == 'number' || type == 'symbol' || type == 'boolean' ||
        value == null || isSymbol(value)) {
      return true;
    }
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
      (object != null && value in Object(object));
  }

  module.exports = isKey;


/***/ },
/* 260 */
/***/ function(module, exports) {

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /**
   * Checks if `value` is likely a prototype object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
   */
  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

    return value === proto;
  }

  module.exports = isPrototype;


/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

  var getNative = __webpack_require__(198);

  /* Built-in method references that are verified to be native. */
  var nativeCreate = getNative(Object, 'create');

  module.exports = nativeCreate;


/***/ },
/* 262 */
/***/ function(module, exports) {

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  module.exports = setToArray;


/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

  var isSymbol = __webpack_require__(217);

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0;

  /**
   * Converts `value` to a string key if it's not a string or symbol.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {string|symbol} Returns the key.
   */
  function toKey(value) {
    if (typeof value == 'string' || isSymbol(value)) {
      return value;
    }
    var result = (value + '');
    return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
  }

  module.exports = toKey;


/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

  var baseClone = __webpack_require__(255);

  /**
   * Creates a shallow clone of `value`.
   *
   * **Note:** This method is loosely based on the
   * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
   * and supports cloning arrays, array buffers, booleans, date objects, maps,
   * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
   * arrays. The own enumerable properties of `arguments` objects are cloned
   * as plain objects. An empty object is returned for uncloneable values such
   * as error objects, functions, DOM nodes, and WeakMaps.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to clone.
   * @returns {*} Returns the cloned value.
   * @see _.cloneDeep
   * @example
   *
   * var objects = [{ 'a': 1 }, { 'b': 2 }];
   *
   * var shallow = _.clone(objects);
   * console.log(shallow[0] === objects[0]);
   * // => true
   */
  function clone(value) {
    return baseClone(value, false, true);
  }

  module.exports = clone;


/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

  var baseIndexOf = __webpack_require__(345),
      isArrayLike = __webpack_require__(186),
      isString = __webpack_require__(216),
      toInteger = __webpack_require__(218),
      values = __webpack_require__(1198);

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax = Math.max;

  /**
   * Checks if `value` is in `collection`. If `collection` is a string, it's
   * checked for a substring of `value`, otherwise
   * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
   * is used for equality comparisons. If `fromIndex` is negative, it's used as
   * the offset from the end of `collection`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object|string} collection The collection to search.
   * @param {*} value The value to search for.
   * @param {number} [fromIndex=0] The index to search from.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
   * @returns {boolean} Returns `true` if `value` is found, else `false`.
   * @example
   *
   * _.includes([1, 2, 3], 1);
   * // => true
   *
   * _.includes([1, 2, 3], 1, 2);
   * // => false
   *
   * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
   * // => true
   *
   * _.includes('pebbles', 'eb');
   * // => true
   */
  function includes(collection, value, fromIndex, guard) {
    collection = isArrayLike(collection) ? collection : values(collection);
    fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

    var length = collection.length;
    if (fromIndex < 0) {
      fromIndex = nativeMax(length + fromIndex, 0);
    }
    return isString(collection)
      ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
      : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
  }

  module.exports = includes;


/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

  var isArrayLikeObject = __webpack_require__(478);

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]';

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objectToString = objectProto.toString;

  /** Built-in value references. */
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;

  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  function isArguments(value) {
    // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.
    return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
      (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
  }

  module.exports = isArguments;


/***/ },
/* 267 */
/***/ function(module, exports) {

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER = 9007199254740991;

  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This function is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length,
   *  else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */
  function isLength(value) {
    return typeof value == 'number' &&
      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  module.exports = isLength;


/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

  var baseRepeat = __webpack_require__(1109),
      isIterateeCall = __webpack_require__(351),
      toInteger = __webpack_require__(218),
      toString = __webpack_require__(219);

  /**
   * Repeats the given string `n` times.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to repeat.
   * @param {number} [n=1] The number of times to repeat the string.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {string} Returns the repeated string.
   * @example
   *
   * _.repeat('*', 3);
   * // => '***'
   *
   * _.repeat('abc', 2);
   * // => 'abcabc'
   *
   * _.repeat('abc', 0);
   * // => ''
   */
  function repeat(string, n, guard) {
    if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
      n = 1;
    } else {
      n = toInteger(n);
    }
    return baseRepeat(toString(string), n);
  }

  module.exports = repeat;


/***/ },
/* 269 */
/***/ function(module, exports) {

  'use strict';


  var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
                  (typeof Uint16Array !== 'undefined') &&
                  (typeof Int32Array !== 'undefined');


  exports.assign = function (obj /*from1, from2, from3, ...*/) {
    var sources = Array.prototype.slice.call(arguments, 1);
    while (sources.length) {
      var source = sources.shift();
      if (!source) { continue; }

      if (typeof source !== 'object') {
        throw new TypeError(source + 'must be non-object');
      }

      for (var p in source) {
        if (source.hasOwnProperty(p)) {
          obj[p] = source[p];
        }
      }
    }

    return obj;
  };


  // reduce buffer size, avoiding mem copy
  exports.shrinkBuf = function (buf, size) {
    if (buf.length === size) { return buf; }
    if (buf.subarray) { return buf.subarray(0, size); }
    buf.length = size;
    return buf;
  };


  var fnTyped = {
    arraySet: function (dest, src, src_offs, len, dest_offs) {
      if (src.subarray && dest.subarray) {
        dest.set(src.subarray(src_offs, src_offs+len), dest_offs);
        return;
      }
      // Fallback to ordinary array
      for (var i=0; i<len; i++) {
        dest[dest_offs + i] = src[src_offs + i];
      }
    },
    // Join array of chunks to single array.
    flattenChunks: function(chunks) {
      var i, l, len, pos, chunk, result;

      // calculate data length
      len = 0;
      for (i=0, l=chunks.length; i<l; i++) {
        len += chunks[i].length;
      }

      // join chunks
      result = new Uint8Array(len);
      pos = 0;
      for (i=0, l=chunks.length; i<l; i++) {
        chunk = chunks[i];
        result.set(chunk, pos);
        pos += chunk.length;
      }

      return result;
    }
  };

  var fnUntyped = {
    arraySet: function (dest, src, src_offs, len, dest_offs) {
      for (var i=0; i<len; i++) {
        dest[dest_offs + i] = src[src_offs + i];
      }
    },
    // Join array of chunks to single array.
    flattenChunks: function(chunks) {
      return [].concat.apply([], chunks);
    }
  };


  // Enable/Disable typed arrays use, for testing
  //
  exports.setTyped = function (on) {
    if (on) {
      exports.Buf8  = Uint8Array;
      exports.Buf16 = Uint16Array;
      exports.Buf32 = Int32Array;
      exports.assign(exports, fnTyped);
    } else {
      exports.Buf8  = Array;
      exports.Buf16 = Array;
      exports.Buf32 = Array;
      exports.assign(exports, fnUntyped);
    }
  };

  exports.setTyped(TYPED_OK);


/***/ },
/* 270 */
/***/ function(module, exports) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule DisabledInputUtils
   */

  'use strict';

  var disableableMouseListenerNames = {
    onClick: true,
    onDoubleClick: true,
    onMouseDown: true,
    onMouseMove: true,
    onMouseUp: true,

    onClickCapture: true,
    onDoubleClickCapture: true,
    onMouseDownCapture: true,
    onMouseMoveCapture: true,
    onMouseUpCapture: true
  };

  /**
   * Implements a native component that does not receive mouse events
   * when `disabled` is set.
   */
  var DisabledInputUtils = {
    getNativeProps: function (inst, props) {
      if (!props.disabled) {
        return props;
      }

      // Copy the props, except the mouse listeners
      var nativeProps = {};
      for (var key in props) {
        if (!disableableMouseListenerNames[key] && props.hasOwnProperty(key)) {
          nativeProps[key] = props[key];
        }
      }

      return nativeProps;
    }
  };

  module.exports = DisabledInputUtils;

/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule EventPluginRegistry
   */

  'use strict';

  var invariant = __webpack_require__(91);

  /**
   * Injectable ordering of event plugins.
   */
  var EventPluginOrder = null;

  /**
   * Injectable mapping from names to event plugin modules.
   */
  var namesToPlugins = {};

  /**
   * Recomputes the plugin list using the injected plugins and plugin ordering.
   *
   * @private
   */
  function recomputePluginOrdering() {
    if (!EventPluginOrder) {
      // Wait until an `EventPluginOrder` is injected.
      return;
    }
    for (var pluginName in namesToPlugins) {
      var PluginModule = namesToPlugins[pluginName];
      var pluginIndex = EventPluginOrder.indexOf(pluginName);
      !(pluginIndex > -1) ?  true ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : void 0;
      if (EventPluginRegistry.plugins[pluginIndex]) {
        continue;
      }
      !PluginModule.extractEvents ?  true ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : void 0;
      EventPluginRegistry.plugins[pluginIndex] = PluginModule;
      var publishedEvents = PluginModule.eventTypes;
      for (var eventName in publishedEvents) {
        !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ?  true ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : void 0;
      }
    }
  }

  /**
   * Publishes an event so that it can be dispatched by the supplied plugin.
   *
   * @param {object} dispatchConfig Dispatch configuration for the event.
   * @param {object} PluginModule Plugin publishing the event.
   * @return {boolean} True if the event was successfully published.
   * @private
   */
  function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
    !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ?  true ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : void 0;
    EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

    var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
    if (phasedRegistrationNames) {
      for (var phaseName in phasedRegistrationNames) {
        if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
          var phasedRegistrationName = phasedRegistrationNames[phaseName];
          publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
        }
      }
      return true;
    } else if (dispatchConfig.registrationName) {
      publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
      return true;
    }
    return false;
  }

  /**
   * Publishes a registration name that is used to identify dispatched events and
   * can be used with `EventPluginHub.putListener` to register listeners.
   *
   * @param {string} registrationName Registration name to add.
   * @param {object} PluginModule Plugin publishing the event.
   * @private
   */
  function publishRegistrationName(registrationName, PluginModule, eventName) {
    !!EventPluginRegistry.registrationNameModules[registrationName] ?  true ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : void 0;
    EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
    EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;

    if (true) {
      var lowerCasedName = registrationName.toLowerCase();
      EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;
    }
  }

  /**
   * Registers plugins so that they can extract and dispatch events.
   *
   * @see {EventPluginHub}
   */
  var EventPluginRegistry = {

    /**
     * Ordered list of injected plugins.
     */
    plugins: [],

    /**
     * Mapping from event name to dispatch config
     */
    eventNameDispatchConfigs: {},

    /**
     * Mapping from registration name to plugin module
     */
    registrationNameModules: {},

    /**
     * Mapping from registration name to event name
     */
    registrationNameDependencies: {},

    /**
     * Mapping from lowercase registration names to the properly cased version,
     * used to warn in the case of missing event handlers. Available
     * only in __DEV__.
     * @type {Object}
     */
    possibleRegistrationNames:  true ? {} : null,

    /**
     * Injects an ordering of plugins (by plugin name). This allows the ordering
     * to be decoupled from injection of the actual plugins so that ordering is
     * always deterministic regardless of packaging, on-the-fly injection, etc.
     *
     * @param {array} InjectedEventPluginOrder
     * @internal
     * @see {EventPluginHub.injection.injectEventPluginOrder}
     */
    injectEventPluginOrder: function (InjectedEventPluginOrder) {
      !!EventPluginOrder ?  true ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : void 0;
      // Clone the ordering so it cannot be dynamically mutated.
      EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
      recomputePluginOrdering();
    },

    /**
     * Injects plugins to be used by `EventPluginHub`. The plugin names must be
     * in the ordering injected by `injectEventPluginOrder`.
     *
     * Plugins can be injected as part of page initialization or on-the-fly.
     *
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     * @internal
     * @see {EventPluginHub.injection.injectEventPluginsByName}
     */
    injectEventPluginsByName: function (injectedNamesToPlugins) {
      var isOrderingDirty = false;
      for (var pluginName in injectedNamesToPlugins) {
        if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
          continue;
        }
        var PluginModule = injectedNamesToPlugins[pluginName];
        if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
          !!namesToPlugins[pluginName] ?  true ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : void 0;
          namesToPlugins[pluginName] = PluginModule;
          isOrderingDirty = true;
        }
      }
      if (isOrderingDirty) {
        recomputePluginOrdering();
      }
    },

    /**
     * Looks up the plugin for the supplied event.
     *
     * @param {object} event A synthetic event.
     * @return {?object} The plugin that created the supplied event.
     * @internal
     */
    getPluginModuleForEvent: function (event) {
      var dispatchConfig = event.dispatchConfig;
      if (dispatchConfig.registrationName) {
        return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
      }
      for (var phase in dispatchConfig.phasedRegistrationNames) {
        if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
          continue;
        }
        var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
        if (PluginModule) {
          return PluginModule;
        }
      }
      return null;
    },

    /**
     * Exposed for unit testing.
     * @private
     */
    _resetEventPlugins: function () {
      EventPluginOrder = null;
      for (var pluginName in namesToPlugins) {
        if (namesToPlugins.hasOwnProperty(pluginName)) {
          delete namesToPlugins[pluginName];
        }
      }
      EventPluginRegistry.plugins.length = 0;

      var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
      for (var eventName in eventNameDispatchConfigs) {
        if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
          delete eventNameDispatchConfigs[eventName];
        }
      }

      var registrationNameModules = EventPluginRegistry.registrationNameModules;
      for (var registrationName in registrationNameModules) {
        if (registrationNameModules.hasOwnProperty(registrationName)) {
          delete registrationNameModules[registrationName];
        }
      }

      if (true) {
        var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
        for (var lowerCasedName in possibleRegistrationNames) {
          if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
            delete possibleRegistrationNames[lowerCasedName];
          }
        }
      }
    }

  };

  module.exports = EventPluginRegistry;

/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactBrowserEventEmitter
   */

  'use strict';

  var _assign = __webpack_require__(100);

  var EventConstants = __webpack_require__(155);
  var EventPluginRegistry = __webpack_require__(271);
  var ReactEventEmitterMixin = __webpack_require__(1247);
  var ViewportMetrics = __webpack_require__(507);

  var getVendorPrefixedEventName = __webpack_require__(1277);
  var isEventSupported = __webpack_require__(371);

  /**
   * Summary of `ReactBrowserEventEmitter` event handling:
   *
   *  - Top-level delegation is used to trap most native browser events. This
   *    may only occur in the main thread and is the responsibility of
   *    ReactEventListener, which is injected and can therefore support pluggable
   *    event sources. This is the only work that occurs in the main thread.
   *
   *  - We normalize and de-duplicate events to account for browser quirks. This
   *    may be done in the worker thread.
   *
   *  - Forward these native events (with the associated top-level type used to
   *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
   *    to extract any synthetic events.
   *
   *  - The `EventPluginHub` will then process each event by annotating them with
   *    "dispatches", a sequence of listeners and IDs that care about that event.
   *
   *  - The `EventPluginHub` then dispatches the events.
   *
   * Overview of React and the event system:
   *
   * +------------+    .
   * |    DOM     |    .
   * +------------+    .
   *       |           .
   *       v           .
   * +------------+    .
   * | ReactEvent |    .
   * |  Listener  |    .
   * +------------+    .                         +-----------+
   *       |           .               +--------+|SimpleEvent|
   *       |           .               |         |Plugin     |
   * +-----|------+    .               v         +-----------+
   * |     |      |    .    +--------------+                    +------------+
   * |     +-----------.--->|EventPluginHub|                    |    Event   |
   * |            |    .    |              |     +-----------+  | Propagators|
   * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
   * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
   * |            |    .    |              |     +-----------+  |  utilities |
   * |     +-----------.--->|              |                    +------------+
   * |     |      |    .    +--------------+
   * +-----|------+    .                ^        +-----------+
   *       |           .                |        |Enter/Leave|
   *       +           .                +-------+|Plugin     |
   * +-------------+   .                         +-----------+
   * | application |   .
   * |-------------|   .
   * |             |   .
   * |             |   .
   * +-------------+   .
   *                   .
   *    React Core     .  General Purpose Event Plugin System
   */

  var hasEventPageXY;
  var alreadyListeningTo = {};
  var isMonitoringScrollValue = false;
  var reactTopListenersCounter = 0;

  // For events like 'submit' which don't consistently bubble (which we trap at a
  // lower node than `document`), binding at `document` would cause duplicate
  // events so we don't include them here
  var topEventMapping = {
    topAbort: 'abort',
    topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
    topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
    topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
    topBlur: 'blur',
    topCanPlay: 'canplay',
    topCanPlayThrough: 'canplaythrough',
    topChange: 'change',
    topClick: 'click',
    topCompositionEnd: 'compositionend',
    topCompositionStart: 'compositionstart',
    topCompositionUpdate: 'compositionupdate',
    topContextMenu: 'contextmenu',
    topCopy: 'copy',
    topCut: 'cut',
    topDoubleClick: 'dblclick',
    topDrag: 'drag',
    topDragEnd: 'dragend',
    topDragEnter: 'dragenter',
    topDragExit: 'dragexit',
    topDragLeave: 'dragleave',
    topDragOver: 'dragover',
    topDragStart: 'dragstart',
    topDrop: 'drop',
    topDurationChange: 'durationchange',
    topEmptied: 'emptied',
    topEncrypted: 'encrypted',
    topEnded: 'ended',
    topError: 'error',
    topFocus: 'focus',
    topInput: 'input',
    topKeyDown: 'keydown',
    topKeyPress: 'keypress',
    topKeyUp: 'keyup',
    topLoadedData: 'loadeddata',
    topLoadedMetadata: 'loadedmetadata',
    topLoadStart: 'loadstart',
    topMouseDown: 'mousedown',
    topMouseMove: 'mousemove',
    topMouseOut: 'mouseout',
    topMouseOver: 'mouseover',
    topMouseUp: 'mouseup',
    topPaste: 'paste',
    topPause: 'pause',
    topPlay: 'play',
    topPlaying: 'playing',
    topProgress: 'progress',
    topRateChange: 'ratechange',
    topScroll: 'scroll',
    topSeeked: 'seeked',
    topSeeking: 'seeking',
    topSelectionChange: 'selectionchange',
    topStalled: 'stalled',
    topSuspend: 'suspend',
    topTextInput: 'textInput',
    topTimeUpdate: 'timeupdate',
    topTouchCancel: 'touchcancel',
    topTouchEnd: 'touchend',
    topTouchMove: 'touchmove',
    topTouchStart: 'touchstart',
    topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
    topVolumeChange: 'volumechange',
    topWaiting: 'waiting',
    topWheel: 'wheel'
  };

  /**
   * To ensure no conflicts with other potential React instances on the page
   */
  var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

  function getListeningForDocument(mountAt) {
    // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
    // directly.
    if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
      mountAt[topListenersIDKey] = reactTopListenersCounter++;
      alreadyListeningTo[mountAt[topListenersIDKey]] = {};
    }
    return alreadyListeningTo[mountAt[topListenersIDKey]];
  }

  /**
   * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
   * example:
   *
   *   EventPluginHub.putListener('myID', 'onClick', myFunction);
   *
   * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
   *
   * @internal
   */
  var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {

    /**
     * Injectable event backend
     */
    ReactEventListener: null,

    injection: {
      /**
       * @param {object} ReactEventListener
       */
      injectReactEventListener: function (ReactEventListener) {
        ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
        ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
      }
    },

    /**
     * Sets whether or not any created callbacks should be enabled.
     *
     * @param {boolean} enabled True if callbacks should be enabled.
     */
    setEnabled: function (enabled) {
      if (ReactBrowserEventEmitter.ReactEventListener) {
        ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
      }
    },

    /**
     * @return {boolean} True if callbacks are enabled.
     */
    isEnabled: function () {
      return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
    },

    /**
     * We listen for bubbled touch events on the document object.
     *
     * Firefox v8.01 (and possibly others) exhibited strange behavior when
     * mounting `onmousemove` events at some node that was not the document
     * element. The symptoms were that if your mouse is not moving over something
     * contained within that mount point (for example on the background) the
     * top-level listeners for `onmousemove` won't be called. However, if you
     * register the `mousemove` on the document object, then it will of course
     * catch all `mousemove`s. This along with iOS quirks, justifies restricting
     * top-level listeners to the document object only, at least for these
     * movement types of events and possibly all events.
     *
     * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
     *
     * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
     * they bubble to document.
     *
     * @param {string} registrationName Name of listener (e.g. `onClick`).
     * @param {object} contentDocumentHandle Document which owns the container
     */
    listenTo: function (registrationName, contentDocumentHandle) {
      var mountAt = contentDocumentHandle;
      var isListening = getListeningForDocument(mountAt);
      var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

      var topLevelTypes = EventConstants.topLevelTypes;
      for (var i = 0; i < dependencies.length; i++) {
        var dependency = dependencies[i];
        if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
          if (dependency === topLevelTypes.topWheel) {
            if (isEventSupported('wheel')) {
              ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
            } else if (isEventSupported('mousewheel')) {
              ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
            } else {
              // Firefox needs to capture a different mouse scroll event.
              // @see http://www.quirksmode.org/dom/events/tests/scroll.html
              ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
            }
          } else if (dependency === topLevelTypes.topScroll) {

            if (isEventSupported('scroll', true)) {
              ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
            } else {
              ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
            }
          } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {

            if (isEventSupported('focus', true)) {
              ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
              ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
            } else if (isEventSupported('focusin')) {
              // IE has `focusin` and `focusout` events which bubble.
              // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
              ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
              ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
            }

            // to make sure blur and focus event listeners are only attached once
            isListening[topLevelTypes.topBlur] = true;
            isListening[topLevelTypes.topFocus] = true;
          } else if (topEventMapping.hasOwnProperty(dependency)) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
          }

          isListening[dependency] = true;
        }
      }
    },

    trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
      return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
    },

    trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
      return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
    },

    /**
     * Listens to window scroll and resize events. We cache scroll values so that
     * application code can access them without triggering reflows.
     *
     * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
     * pageX/pageY isn't supported (legacy browsers).
     *
     * NOTE: Scroll events do not bubble.
     *
     * @see http://www.quirksmode.org/dom/events/scroll.html
     */
    ensureScrollValueMonitoring: function () {
      if (hasEventPageXY === undefined) {
        hasEventPageXY = document.createEvent && 'pageX' in document.createEvent('MouseEvent');
      }
      if (!hasEventPageXY && !isMonitoringScrollValue) {
        var refresh = ViewportMetrics.refreshScrollValues;
        ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
        isMonitoringScrollValue = true;
      }
    }

  });

  module.exports = ReactBrowserEventEmitter;

/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactPropTypeLocationNames
   */

  'use strict';

  var ReactPropTypeLocationNames = {};

  if (true) {
    ReactPropTypeLocationNames = {
      prop: 'prop',
      context: 'context',
      childContext: 'child context'
    };
  }

  module.exports = ReactPropTypeLocationNames;

/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactPropTypeLocations
   */

  'use strict';

  var keyMirror = __webpack_require__(250);

  var ReactPropTypeLocations = keyMirror({
    prop: null,
    context: null,
    childContext: null
  });

  module.exports = ReactPropTypeLocations;

/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SyntheticMouseEvent
   */

  'use strict';

  var SyntheticUIEvent = __webpack_require__(222);
  var ViewportMetrics = __webpack_require__(507);

  var getEventModifierState = __webpack_require__(368);

  /**
   * @interface MouseEvent
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */
  var MouseEventInterface = {
    screenX: null,
    screenY: null,
    clientX: null,
    clientY: null,
    ctrlKey: null,
    shiftKey: null,
    altKey: null,
    metaKey: null,
    getModifierState: getEventModifierState,
    button: function (event) {
      // Webkit, Firefox, IE9+
      // which:  1 2 3
      // button: 0 1 2 (standard)
      var button = event.button;
      if ('which' in event) {
        return button;
      }
      // IE<9
      // which:  undefined
      // button: 0 0 0
      // button: 1 4 2 (onmouseup)
      return button === 2 ? 2 : button === 4 ? 1 : 0;
    },
    buttons: null,
    relatedTarget: function (event) {
      return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
    },
    // "Proprietary" Interface.
    pageX: function (event) {
      return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
    },
    pageY: function (event) {
      return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
    }
  };

  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticUIEvent}
   */
  function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }

  SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

  module.exports = SyntheticMouseEvent;

/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule Transaction
   */

  'use strict';

  var invariant = __webpack_require__(91);

  /**
   * `Transaction` creates a black box that is able to wrap any method such that
   * certain invariants are maintained before and after the method is invoked
   * (Even if an exception is thrown while invoking the wrapped method). Whoever
   * instantiates a transaction can provide enforcers of the invariants at
   * creation time. The `Transaction` class itself will supply one additional
   * automatic invariant for you - the invariant that any transaction instance
   * should not be run while it is already being run. You would typically create a
   * single instance of a `Transaction` for reuse multiple times, that potentially
   * is used to wrap several different methods. Wrappers are extremely simple -
   * they only require implementing two methods.
   *
   * <pre>
   *                       wrappers (injected at creation time)
   *                                      +        +
   *                                      |        |
   *                    +-----------------|--------|--------------+
   *                    |                 v        |              |
   *                    |      +---------------+   |              |
   *                    |   +--|    wrapper1   |---|----+         |
   *                    |   |  +---------------+   v    |         |
   *                    |   |          +-------------+  |         |
   *                    |   |     +----|   wrapper2  |--------+   |
   *                    |   |     |    +-------------+  |     |   |
   *                    |   |     |                     |     |   |
   *                    |   v     v                     v     v   | wrapper
   *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
   * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
   * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
   *                    | |   | |   |   |         |   |   | |   | |
   *                    | |   | |   |   |         |   |   | |   | |
   *                    | |   | |   |   |         |   |   | |   | |
   *                    | +---+ +---+   +---------+   +---+ +---+ |
   *                    |  initialize                    close    |
   *                    +-----------------------------------------+
   * </pre>
   *
   * Use cases:
   * - Preserving the input selection ranges before/after reconciliation.
   *   Restoring selection even in the event of an unexpected error.
   * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
   *   while guaranteeing that afterwards, the event system is reactivated.
   * - Flushing a queue of collected DOM mutations to the main UI thread after a
   *   reconciliation takes place in a worker thread.
   * - Invoking any collected `componentDidUpdate` callbacks after rendering new
   *   content.
   * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
   *   to preserve the `scrollTop` (an automatic scroll aware DOM).
   * - (Future use case): Layout calculations before and after DOM updates.
   *
   * Transactional plugin API:
   * - A module that has an `initialize` method that returns any precomputation.
   * - and a `close` method that accepts the precomputation. `close` is invoked
   *   when the wrapped process is completed, or has failed.
   *
   * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
   * that implement `initialize` and `close`.
   * @return {Transaction} Single transaction for reuse in thread.
   *
   * @class Transaction
   */
  var Mixin = {
    /**
     * Sets up this instance so that it is prepared for collecting metrics. Does
     * so such that this setup method may be used on an instance that is already
     * initialized, in a way that does not consume additional memory upon reuse.
     * That can be useful if you decide to make your subclass of this mixin a
     * "PooledClass".
     */
    reinitializeTransaction: function () {
      this.transactionWrappers = this.getTransactionWrappers();
      if (this.wrapperInitData) {
        this.wrapperInitData.length = 0;
      } else {
        this.wrapperInitData = [];
      }
      this._isInTransaction = false;
    },

    _isInTransaction: false,

    /**
     * @abstract
     * @return {Array<TransactionWrapper>} Array of transaction wrappers.
     */
    getTransactionWrappers: null,

    isInTransaction: function () {
      return !!this._isInTransaction;
    },

    /**
     * Executes the function within a safety window. Use this for the top level
     * methods that result in large amounts of computation/mutations that would
     * need to be safety checked. The optional arguments helps prevent the need
     * to bind in many cases.
     *
     * @param {function} method Member of scope to call.
     * @param {Object} scope Scope to invoke from.
     * @param {Object?=} a Argument to pass to the method.
     * @param {Object?=} b Argument to pass to the method.
     * @param {Object?=} c Argument to pass to the method.
     * @param {Object?=} d Argument to pass to the method.
     * @param {Object?=} e Argument to pass to the method.
     * @param {Object?=} f Argument to pass to the method.
     *
     * @return {*} Return value from `method`.
     */
    perform: function (method, scope, a, b, c, d, e, f) {
      !!this.isInTransaction() ?  true ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : void 0;
      var errorThrown;
      var ret;
      try {
        this._isInTransaction = true;
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // one of these calls threw.
        errorThrown = true;
        this.initializeAll(0);
        ret = method.call(scope, a, b, c, d, e, f);
        errorThrown = false;
      } finally {
        try {
          if (errorThrown) {
            // If `method` throws, prefer to show that stack trace over any thrown
            // by invoking `closeAll`.
            try {
              this.closeAll(0);
            } catch (err) {}
          } else {
            // Since `method` didn't throw, we don't want to silence the exception
            // here.
            this.closeAll(0);
          }
        } finally {
          this._isInTransaction = false;
        }
      }
      return ret;
    },

    initializeAll: function (startIndex) {
      var transactionWrappers = this.transactionWrappers;
      for (var i = startIndex; i < transactionWrappers.length; i++) {
        var wrapper = transactionWrappers[i];
        try {
          // Catching errors makes debugging more difficult, so we start with the
          // OBSERVED_ERROR state before overwriting it with the real return value
          // of initialize -- if it's still set to OBSERVED_ERROR in the finally
          // block, it means wrapper.initialize threw.
          this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
          this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
        } finally {
          if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
            // The initializer for wrapper i threw an error; initialize the
            // remaining wrappers but silence any exceptions from them to ensure
            // that the first error is the one to bubble up.
            try {
              this.initializeAll(i + 1);
            } catch (err) {}
          }
        }
      }
    },

    /**
     * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
     * them the respective return values of `this.transactionWrappers.init[i]`
     * (`close`rs that correspond to initializers that failed will not be
     * invoked).
     */
    closeAll: function (startIndex) {
      !this.isInTransaction() ?  true ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : void 0;
      var transactionWrappers = this.transactionWrappers;
      for (var i = startIndex; i < transactionWrappers.length; i++) {
        var wrapper = transactionWrappers[i];
        var initData = this.wrapperInitData[i];
        var errorThrown;
        try {
          // Catching errors makes debugging more difficult, so we start with
          // errorThrown set to true before setting it to false after calling
          // close -- if it's still set to true in the finally block, it means
          // wrapper.close threw.
          errorThrown = true;
          if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
            wrapper.close.call(this, initData);
          }
          errorThrown = false;
        } finally {
          if (errorThrown) {
            // The closer for wrapper i threw an error; close the remaining
            // wrappers but silence any exceptions from them to ensure that the
            // first error is the one to bubble up.
            try {
              this.closeAll(i + 1);
            } catch (e) {}
          }
        }
      }
      this.wrapperInitData.length = 0;
    }
  };

  var Transaction = {

    Mixin: Mixin,

    /**
     * Token to look for to determine if an error occurred.
     */
    OBSERVED_ERROR: {}

  };

  module.exports = Transaction;

/***/ },
/* 277 */
/***/ function(module, exports) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule escapeTextContentForBrowser
   */

  'use strict';

  var ESCAPE_LOOKUP = {
    '&': '&amp;',
    '>': '&gt;',
    '<': '&lt;',
    '"': '&quot;',
    '\'': '&#x27;'
  };

  var ESCAPE_REGEX = /[&><"']/g;

  function escaper(match) {
    return ESCAPE_LOOKUP[match];
  }

  /**
   * Escapes text to prevent scripting attacks.
   *
   * @param {*} text Text value to escape.
   * @return {string} An escaped string.
   */
  function escapeTextContentForBrowser(text) {
    return ('' + text).replace(ESCAPE_REGEX, escaper);
  }

  module.exports = escapeTextContentForBrowser;

/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  module.exports = Stream;

  var EE = __webpack_require__(438).EventEmitter;
  var inherits = __webpack_require__(185);

  inherits(Stream, EE);
  Stream.Readable = __webpack_require__(1307);
  Stream.Writable = __webpack_require__(1308);
  Stream.Duplex = __webpack_require__(1304);
  Stream.Transform = __webpack_require__(526);
  Stream.PassThrough = __webpack_require__(1306);

  // Backwards-compat with node 0.4.x
  Stream.Stream = Stream;



  // old-style streams.  Note that the pipe method (the only relevant
  // part of this class) is overridden in the Readable class.

  function Stream() {
    EE.call(this);
  }

  Stream.prototype.pipe = function(dest, options) {
    var source = this;

    function ondata(chunk) {
      if (dest.writable) {
        if (false === dest.write(chunk) && source.pause) {
          source.pause();
        }
      }
    }

    source.on('data', ondata);

    function ondrain() {
      if (source.readable && source.resume) {
        source.resume();
      }
    }

    dest.on('drain', ondrain);

    // If the 'end' option is not supplied, dest.end() will be called when
    // source gets the 'end' or 'close' events.  Only dest.end() once.
    if (!dest._isStdio && (!options || options.end !== false)) {
      source.on('end', onend);
      source.on('close', onclose);
    }

    var didOnEnd = false;
    function onend() {
      if (didOnEnd) return;
      didOnEnd = true;

      dest.end();
    }


    function onclose() {
      if (didOnEnd) return;
      didOnEnd = true;

      if (typeof dest.destroy === 'function') dest.destroy();
    }

    // don't leave dangling pipes when there are errors.
    function onerror(er) {
      cleanup();
      if (EE.listenerCount(this, 'error') === 0) {
        throw er; // Unhandled stream error in pipe.
      }
    }

    source.on('error', onerror);
    dest.on('error', onerror);

    // remove all the event listeners that were added.
    function cleanup() {
      source.removeListener('data', ondata);
      dest.removeListener('drain', ondrain);

      source.removeListener('end', onend);
      source.removeListener('close', onclose);

      source.removeListener('error', onerror);
      dest.removeListener('error', onerror);

      source.removeListener('end', cleanup);
      source.removeListener('close', cleanup);

      dest.removeListener('close', cleanup);
    }

    source.on('end', cleanup);
    source.on('close', cleanup);

    dest.on('close', cleanup);

    dest.emit('pipe', source);

    // Allow for unix-like usage: A.pipe(B).pipe(C)
    return dest;
  };


/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  exports.__esModule = true;

  var _map = __webpack_require__(735);

  var _map2 = _interopRequireDefault(_map);

  var _classCallCheck2 = __webpack_require__(97);

  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

  var _possibleConstructorReturn2 = __webpack_require__(172);

  var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

  var _inherits2 = __webpack_require__(171);

  var _inherits3 = _interopRequireDefault(_inherits2);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var Store = function (_Map) {
    (0, _inherits3.default)(Store, _Map);

    function Store() {
      (0, _classCallCheck3.default)(this, Store);

      var _this = (0, _possibleConstructorReturn3.default)(this, _Map.call(this));

      _this.dynamicData = {};
      return _this;
    }

    Store.prototype.setDynamic = function setDynamic(key, fn) {
      this.dynamicData[key] = fn;
    };

    Store.prototype.get = function get(key) {
      if (this.has(key)) {
        return _Map.prototype.get.call(this, key);
      } else {
        if (Object.prototype.hasOwnProperty.call(this.dynamicData, key)) {
          var val = this.dynamicData[key]();
          this.set(key, val);
          return val;
        }
      }
    };

    return Store;
  }(_map2.default);

  exports.default = Store;
  module.exports = exports["default"];

/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(process) {"use strict";

  exports.__esModule = true;
  exports.File = undefined;

  var _typeof2 = __webpack_require__(127);

  var _typeof3 = _interopRequireDefault(_typeof2);

  var _getIterator2 = __webpack_require__(93);

  var _getIterator3 = _interopRequireDefault(_getIterator2);

  var _create = __webpack_require__(189);

  var _create2 = _interopRequireDefault(_create);

  var _assign = __webpack_require__(285);

  var _assign2 = _interopRequireDefault(_assign);

  var _classCallCheck2 = __webpack_require__(97);

  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

  var _possibleConstructorReturn2 = __webpack_require__(172);

  var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

  var _inherits2 = __webpack_require__(171);

  var _inherits3 = _interopRequireDefault(_inherits2);

  var _babelHelpers = __webpack_require__(385);

  var _babelHelpers2 = _interopRequireDefault(_babelHelpers);

  var _metadata = __webpack_require__(535);

  var metadataVisitor = _interopRequireWildcard(_metadata);

  var _convertSourceMap = __webpack_require__(795);

  var _convertSourceMap2 = _interopRequireDefault(_convertSourceMap);

  var _optionManager = __webpack_require__(203);

  var _optionManager2 = _interopRequireDefault(_optionManager);

  var _pluginPass = __webpack_require__(539);

  var _pluginPass2 = _interopRequireDefault(_pluginPass);

  var _shebangRegex = __webpack_require__(1285);

  var _shebangRegex2 = _interopRequireDefault(_shebangRegex);

  var _babelTraverse = __webpack_require__(128);

  var _babelTraverse2 = _interopRequireDefault(_babelTraverse);

  var _sourceMap = __webpack_require__(519);

  var _sourceMap2 = _interopRequireDefault(_sourceMap);

  var _babelGenerator = __webpack_require__(383);

  var _babelGenerator2 = _interopRequireDefault(_babelGenerator);

  var _babelCodeFrame = __webpack_require__(379);

  var _babelCodeFrame2 = _interopRequireDefault(_babelCodeFrame);

  var _defaults = __webpack_require__(476);

  var _defaults2 = _interopRequireDefault(_defaults);

  var _logger = __webpack_require__(534);

  var _logger2 = _interopRequireDefault(_logger);

  var _store = __webpack_require__(279);

  var _store2 = _interopRequireDefault(_store);

  var _babylon = __webpack_require__(290);

  var _util = __webpack_require__(284);

  var util = _interopRequireWildcard(_util);

  var _path = __webpack_require__(134);

  var _path2 = _interopRequireDefault(_path);

  var _babelTypes = __webpack_require__(90);

  var t = _interopRequireWildcard(_babelTypes);

  var _blockHoist = __webpack_require__(536);

  var _blockHoist2 = _interopRequireDefault(_blockHoist);

  var _shadowFunctions = __webpack_require__(537);

  var _shadowFunctions2 = _interopRequireDefault(_shadowFunctions);

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /* global BabelFileResult, BabelParserOptions, BabelFileMetadata */
  /* eslint max-len: 0 */

  var INTERNAL_PLUGINS = [[_blockHoist2.default], [_shadowFunctions2.default]];

  var errorVisitor = {
    enter: function enter(path, state) {
      var loc = path.node.loc;
      if (loc) {
        state.loc = loc;
        path.stop();
      }
    }
  };

  var File = function (_Store) {
    (0, _inherits3.default)(File, _Store);

    function File() {
      var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
      var pipeline = arguments[1];
      (0, _classCallCheck3.default)(this, File);

      var _this = (0, _possibleConstructorReturn3.default)(this, _Store.call(this));

      _this.pipeline = pipeline;

      _this.log = new _logger2.default(_this, opts.filename || "unknown");
      _this.opts = _this.initOptions(opts);

      _this.parserOpts = {
        highlightCode: _this.opts.highlightCode,
        nonStandard: _this.opts.nonStandard,
        sourceType: _this.opts.sourceType,
        filename: _this.opts.filename,
        plugins: []
      };

      _this.pluginVisitors = [];
      _this.pluginPasses = [];

      // Plugins for top-level options.
      _this.buildPluginsForOptions(_this.opts);

      // If we are in the "pass per preset" mode, build
      // also plugins for each preset.
      if (_this.opts.passPerPreset) {
        // All the "per preset" options are inherited from the main options.
        _this.perPresetOpts = [];
        _this.opts.presets.forEach(function (presetOpts) {
          var perPresetOpts = (0, _assign2.default)((0, _create2.default)(_this.opts), presetOpts);
          _this.perPresetOpts.push(perPresetOpts);
          _this.buildPluginsForOptions(perPresetOpts);
        });
      }

      _this.metadata = {
        usedHelpers: [],
        marked: [],
        modules: {
          imports: [],
          exports: {
            exported: [],
            specifiers: []
          }
        }
      };

      _this.dynamicImportTypes = {};
      _this.dynamicImportIds = {};
      _this.dynamicImports = [];
      _this.declarations = {};
      _this.usedHelpers = {};

      _this.path = null;
      _this.ast = {};

      _this.code = "";
      _this.shebang = "";

      _this.hub = new _babelTraverse.Hub(_this);
      return _this;
    }

    File.prototype.getMetadata = function getMetadata() {
      var has = false;
      for (var _iterator = this.ast.program.body, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var node = _ref;

        if (t.isModuleDeclaration(node)) {
          has = true;
          break;
        }
      }
      if (has) {
        this.path.traverse(metadataVisitor, this);
      }
    };

    File.prototype.initOptions = function initOptions(opts) {
      opts = new _optionManager2.default(this.log, this.pipeline).init(opts);

      if (opts.inputSourceMap) {
        opts.sourceMaps = true;
      }

      if (opts.moduleId) {
        opts.moduleIds = true;
      }

      opts.basename = _path2.default.basename(opts.filename, _path2.default.extname(opts.filename));

      opts.ignore = util.arrayify(opts.ignore, util.regexify);

      if (opts.only) opts.only = util.arrayify(opts.only, util.regexify);

      (0, _defaults2.default)(opts, {
        moduleRoot: opts.sourceRoot
      });

      (0, _defaults2.default)(opts, {
        sourceRoot: opts.moduleRoot
      });

      (0, _defaults2.default)(opts, {
        filenameRelative: opts.filename
      });

      var basenameRelative = _path2.default.basename(opts.filenameRelative);

      (0, _defaults2.default)(opts, {
        sourceFileName: basenameRelative,
        sourceMapTarget: basenameRelative
      });

      return opts;
    };

    File.prototype.buildPluginsForOptions = function buildPluginsForOptions(opts) {
      if (!Array.isArray(opts.plugins)) {
        return;
      }

      var plugins = opts.plugins.concat(INTERNAL_PLUGINS);
      var currentPluginVisitors = [];
      var currentPluginPasses = [];

      // init plugins!
      for (var _iterator2 = plugins, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var ref = _ref2;
        var plugin = ref[0];
        var pluginOpts = ref[1]; // todo: fix - can't embed in loop head because of flow bug

        currentPluginVisitors.push(plugin.visitor);
        currentPluginPasses.push(new _pluginPass2.default(this, plugin, pluginOpts));

        if (plugin.manipulateOptions) {
          plugin.manipulateOptions(opts, this.parserOpts, this);
        }
      }

      this.pluginVisitors.push(currentPluginVisitors);
      this.pluginPasses.push(currentPluginPasses);
    };

    File.prototype.getModuleName = function getModuleName() {
      var opts = this.opts;
      if (!opts.moduleIds) {
        return null;
      }

      // moduleId is n/a if a `getModuleId()` is provided
      if (opts.moduleId != null && !opts.getModuleId) {
        return opts.moduleId;
      }

      var filenameRelative = opts.filenameRelative;
      var moduleName = "";

      if (opts.moduleRoot != null) {
        moduleName = opts.moduleRoot + "/";
      }

      if (!opts.filenameRelative) {
        return moduleName + opts.filename.replace(/^\//, "");
      }

      if (opts.sourceRoot != null) {
        // remove sourceRoot from filename
        var sourceRootRegEx = new RegExp("^" + opts.sourceRoot + "\/?");
        filenameRelative = filenameRelative.replace(sourceRootRegEx, "");
      }

      // remove extension
      filenameRelative = filenameRelative.replace(/\.(\w*?)$/, "");

      moduleName += filenameRelative;

      // normalize path separators
      moduleName = moduleName.replace(/\\/g, "/");

      if (opts.getModuleId) {
        // If return is falsy, assume they want us to use our generated default name
        return opts.getModuleId(moduleName) || moduleName;
      } else {
        return moduleName;
      }
    };

    File.prototype.resolveModuleSource = function resolveModuleSource(source) {
      var resolveModuleSource = this.opts.resolveModuleSource;
      if (resolveModuleSource) source = resolveModuleSource(source, this.opts.filename);
      return source;
    };

    File.prototype.addImport = function addImport(source, imported) {
      var name = arguments.length <= 2 || arguments[2] === undefined ? imported : arguments[2];

      var alias = source + ":" + imported;
      var id = this.dynamicImportIds[alias];

      if (!id) {
        source = this.resolveModuleSource(source);
        id = this.dynamicImportIds[alias] = this.scope.generateUidIdentifier(name);

        var specifiers = [];

        if (imported === "*") {
          specifiers.push(t.importNamespaceSpecifier(id));
        } else if (imported === "default") {
          specifiers.push(t.importDefaultSpecifier(id));
        } else {
          specifiers.push(t.importSpecifier(id, t.identifier(imported)));
        }

        var declar = t.importDeclaration(specifiers, t.stringLiteral(source));
        declar._blockHoist = 3;

        this.path.unshiftContainer("body", declar);
      }

      return id;
    };

    File.prototype.addHelper = function addHelper(name) {
      var declar = this.declarations[name];
      if (declar) return declar;

      if (!this.usedHelpers[name]) {
        this.metadata.usedHelpers.push(name);
        this.usedHelpers[name] = true;
      }

      var generator = this.get("helperGenerator");
      var runtime = this.get("helpersNamespace");
      if (generator) {
        var res = generator(name);
        if (res) return res;
      } else if (runtime) {
        return t.memberExpression(runtime, t.identifier(name));
      }

      var ref = (0, _babelHelpers2.default)(name);
      var uid = this.declarations[name] = this.scope.generateUidIdentifier(name);

      if (t.isFunctionExpression(ref) && !ref.id) {
        ref.body._compact = true;
        ref._generated = true;
        ref.id = uid;
        ref.type = "FunctionDeclaration";
        this.path.unshiftContainer("body", ref);
      } else {
        ref._compact = true;
        this.scope.push({
          id: uid,
          init: ref,
          unique: true
        });
      }

      return uid;
    };

    File.prototype.addTemplateObject = function addTemplateObject(helperName, strings, raw) {
      // Generate a unique name based on the string literals so we dedupe
      // identical strings used in the program.
      var stringIds = raw.elements.map(function (string) {
        return string.value;
      });
      var name = helperName + "_" + raw.elements.length + "_" + stringIds.join(",");

      var declar = this.declarations[name];
      if (declar) return declar;

      var uid = this.declarations[name] = this.scope.generateUidIdentifier("templateObject");

      var helperId = this.addHelper(helperName);
      var init = t.callExpression(helperId, [strings, raw]);
      init._compact = true;
      this.scope.push({
        id: uid,
        init: init,
        _blockHoist: 1.9 // This ensures that we don't fail if not using function expression helpers
      });
      return uid;
    };

    File.prototype.buildCodeFrameError = function buildCodeFrameError(node, msg) {
      var Error = arguments.length <= 2 || arguments[2] === undefined ? SyntaxError : arguments[2];

      var loc = node && (node.loc || node._loc);

      var err = new Error(msg);

      if (loc) {
        err.loc = loc.start;
      } else {
        (0, _babelTraverse2.default)(node, errorVisitor, this.scope, err);

        err.message += " (This is an error on an internal node. Probably an internal error";

        if (err.loc) {
          err.message += ". Location has been estimated.";
        }

        err.message += ")";
      }

      return err;
    };

    File.prototype.mergeSourceMap = function mergeSourceMap(map) {
      var inputMap = this.opts.inputSourceMap;

      if (inputMap) {
        var _ret = function () {
          var inputMapConsumer = new _sourceMap2.default.SourceMapConsumer(inputMap);
          var outputMapConsumer = new _sourceMap2.default.SourceMapConsumer(map);

          var mergedGenerator = new _sourceMap2.default.SourceMapGenerator({
            file: inputMapConsumer.file,
            sourceRoot: inputMapConsumer.sourceRoot
          });

          // This assumes the output map always has a single source, since Babel always compiles a single source file to a
          // single output file.
          var source = outputMapConsumer.sources[0];

          inputMapConsumer.eachMapping(function (mapping) {
            var generatedPosition = outputMapConsumer.generatedPositionFor({
              line: mapping.generatedLine,
              column: mapping.generatedColumn,
              source: source
            });
            if (generatedPosition.column != null) {
              mergedGenerator.addMapping({
                source: mapping.source,

                original: mapping.source == null ? null : {
                  line: mapping.originalLine,
                  column: mapping.originalColumn
                },

                generated: generatedPosition
              });
            }
          });

          var mergedMap = mergedGenerator.toJSON();
          inputMap.mappings = mergedMap.mappings;
          return {
            v: inputMap
          };
        }();

        if ((typeof _ret === "undefined" ? "undefined" : (0, _typeof3.default)(_ret)) === "object") return _ret.v;
      } else {
        return map;
      }
    };

    File.prototype.parse = function parse(code) {
      this.log.debug("Parse start");
      var ast = (0, _babylon.parse)(code, this.parserOpts);
      this.log.debug("Parse stop");
      return ast;
    };

    File.prototype._addAst = function _addAst(ast) {
      this.path = _babelTraverse.NodePath.get({
        hub: this.hub,
        parentPath: null,
        parent: ast,
        container: ast,
        key: "program"
      }).setContext();
      this.scope = this.path.scope;
      this.ast = ast;
      this.getMetadata();
    };

    File.prototype.addAst = function addAst(ast) {
      this.log.debug("Start set AST");
      this._addAst(ast);
      this.log.debug("End set AST");
    };

    File.prototype.transform = function transform() {
      // In the "pass per preset" mode, we have grouped passes.
      // Otherwise, there is only one plain pluginPasses array.
      for (var i = 0; i < this.pluginPasses.length; i++) {
        var pluginPasses = this.pluginPasses[i];
        this.call("pre", pluginPasses);
        this.log.debug("Start transform traverse");
        (0, _babelTraverse2.default)(this.ast, _babelTraverse2.default.visitors.merge(this.pluginVisitors[i], pluginPasses), this.scope);
        this.log.debug("End transform traverse");
        this.call("post", pluginPasses);
      }

      return this.generate();
    };

    File.prototype.wrap = function wrap(code, callback) {
      code = code + "";

      try {
        if (this.shouldIgnore()) {
          return this.makeResult({ code: code, ignored: true });
        } else {
          return callback();
        }
      } catch (err) {
        if (err._babel) {
          throw err;
        } else {
          err._babel = true;
        }

        var message = err.message = this.opts.filename + ": " + err.message;

        var loc = err.loc;
        if (loc) {
          err.codeFrame = (0, _babelCodeFrame2.default)(code, loc.line, loc.column + 1, this.opts);
          message += "\n" + err.codeFrame;
        }

        if (process.browser) {
          // chrome has it's own pretty stringifier which doesn't use the stack property
          // https://github.com/babel/babel/issues/2175
          err.message = message;
        }

        if (err.stack) {
          var newStack = err.stack.replace(err.message, message);
          err.stack = newStack;
        }

        throw err;
      }
    };

    File.prototype.addCode = function addCode(code) {
      code = (code || "") + "";
      code = this.parseInputSourceMap(code);
      this.code = code;
    };

    File.prototype.parseCode = function parseCode() {
      this.parseShebang();
      var ast = this.parse(this.code);
      this.addAst(ast);
    };

    File.prototype.shouldIgnore = function shouldIgnore() {
      var opts = this.opts;
      return util.shouldIgnore(opts.filename, opts.ignore, opts.only);
    };

    File.prototype.call = function call(key, pluginPasses) {
      for (var _iterator3 = pluginPasses, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);;) {
        var _ref3;

        if (_isArray3) {
          if (_i3 >= _iterator3.length) break;
          _ref3 = _iterator3[_i3++];
        } else {
          _i3 = _iterator3.next();
          if (_i3.done) break;
          _ref3 = _i3.value;
        }

        var pass = _ref3;

        var plugin = pass.plugin;
        var fn = plugin[key];
        if (fn) fn.call(pass, this);
      }
    };

    File.prototype.parseInputSourceMap = function parseInputSourceMap(code) {
      var opts = this.opts;

      if (opts.inputSourceMap !== false) {
        var inputMap = _convertSourceMap2.default.fromSource(code);
        if (inputMap) {
          opts.inputSourceMap = inputMap.toObject();
          code = _convertSourceMap2.default.removeComments(code);
        }
      }

      return code;
    };

    File.prototype.parseShebang = function parseShebang() {
      var shebangMatch = _shebangRegex2.default.exec(this.code);
      if (shebangMatch) {
        this.shebang = shebangMatch[0];
        this.code = this.code.replace(_shebangRegex2.default, "");
      }
    };

    File.prototype.makeResult = function makeResult(_ref4) {
      var code = _ref4.code;
      var map = _ref4.map;
      var ast = _ref4.ast;
      var ignored = _ref4.ignored;

      var result = {
        metadata: null,
        options: this.opts,
        ignored: !!ignored,
        code: null,
        ast: null,
        map: map || null
      };

      if (this.opts.code) {
        result.code = code;
      }

      if (this.opts.ast) {
        result.ast = ast;
      }

      if (this.opts.metadata) {
        result.metadata = this.metadata;
      }

      return result;
    };

    File.prototype.generate = function generate() {
      var opts = this.opts;
      var ast = this.ast;

      var result = { ast: ast };
      if (!opts.code) return this.makeResult(result);

      this.log.debug("Generation start");

      var _result = (0, _babelGenerator2.default)(ast, opts, this.code);
      result.code = _result.code;
      result.map = _result.map;

      this.log.debug("Generation end");

      if (this.shebang) {
        // add back shebang
        result.code = this.shebang + "\n" + result.code;
      }

      if (result.map) {
        result.map = this.mergeSourceMap(result.map);
      }

      if (opts.sourceMaps === "inline" || opts.sourceMaps === "both") {
        result.code += "\n" + _convertSourceMap2.default.fromObject(result.map).toComment();
      }

      if (opts.sourceMaps === "inline") {
        result.map = null;
      }

      return this.makeResult(result);
    };

    return File;
  }(_store2.default);

  exports.default = File;
  exports.File = File;
  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(111)))

/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  exports.__esModule = true;
  exports.config = undefined;
  exports.normaliseOptions = normaliseOptions;

  var _parsers = __webpack_require__(282);

  var parsers = _interopRequireWildcard(_parsers);

  var _config = __webpack_require__(202);

  var _config2 = _interopRequireDefault(_config);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  exports.config = _config2.default;
  function normaliseOptions() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    for (var key in options) {
      var val = options[key];
      if (val == null) continue;

      var opt = _config2.default[key];
      if (opt && opt.alias) opt = _config2.default[opt.alias];
      if (!opt) continue;

      var parser = parsers[opt.type];
      if (parser) val = parser(val);

      options[key] = val;
    }

    return options;
  }

/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  exports.__esModule = true;
  exports.filename = undefined;
  exports.boolean = boolean;
  exports.booleanString = booleanString;
  exports.list = list;

  var _slash = __webpack_require__(515);

  var _slash2 = _interopRequireDefault(_slash);

  var _util = __webpack_require__(284);

  var util = _interopRequireWildcard(_util);

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var filename = exports.filename = _slash2.default;

  function boolean(val) {
    return !!val;
  }

  function booleanString(val) {
    return util.booleanify(val);
  }

  function list(val) {
    return util.list(val);
  }

/***/ },
/* 283 */
/***/ function(module, exports) {

  "use strict";

  /* eslint max-len: 0 */

  module.exports = {
    "auxiliaryComment": {
      "message": "Use `auxiliaryCommentBefore` or `auxiliaryCommentAfter`"
    },
    "blacklist": {
      "message": "Put the specific transforms you want in the `plugins` option"
    },
    "breakConfig": {
      "message": "This is not a necessary option in Babel 6"
    },
    "experimental": {
      "message": "Put the specific transforms you want in the `plugins` option"
    },
    "externalHelpers": {
      "message": "Use the `external-helpers` plugin instead. Check out http://babeljs.io/docs/plugins/external-helpers/"
    },
    "extra": {
      "message": ""
    },
    "jsxPragma": {
      "message": "use the `pragma` option in the `react-jsx` plugin . Check out http://babeljs.io/docs/plugins/transform-react-jsx/"
    },
    // "keepModuleIdExtensions": {
    //   "message": ""
    // },
    "loose": {
      "message": "Specify the `loose` option for the relevant plugin you are using or use a preset that sets the option."
    },
    "metadataUsedHelpers": {
      "message": "Not required anymore as this is enabled by default"
    },
    "modules": {
      "message": "Use the corresponding module transform plugin in the `plugins` option. Check out http://babeljs.io/docs/plugins/#modules"
    },
    "nonStandard": {
      "message": "Use the `react-jsx` and `flow-strip-types` plugins to support JSX and Flow. Also check out the react preset http://babeljs.io/docs/plugins/preset-react/"
    },
    "optional": {
      "message": "Put the specific transforms you want in the `plugins` option"
    },
    "sourceMapName": {
      "message": "Use the `sourceMapTarget` option"
    },
    "stage": {
      "message": "Check out the corresponding stage-x presets http://babeljs.io/docs/plugins/#presets"
    },
    "whitelist": {
      "message": "Put the specific transforms you want in the `plugins` option"
    }
  };

/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  exports.__esModule = true;
  exports.inspect = exports.inherits = undefined;

  var _getIterator2 = __webpack_require__(93);

  var _getIterator3 = _interopRequireDefault(_getIterator2);

  var _util = __webpack_require__(168);

  Object.defineProperty(exports, "inherits", {
    enumerable: true,
    get: function get() {
      return _util.inherits;
    }
  });
  Object.defineProperty(exports, "inspect", {
    enumerable: true,
    get: function get() {
      return _util.inspect;
    }
  });
  exports.canCompile = canCompile;
  exports.list = list;
  exports.regexify = regexify;
  exports.arrayify = arrayify;
  exports.booleanify = booleanify;
  exports.shouldIgnore = shouldIgnore;

  var _escapeRegExp = __webpack_require__(1177);

  var _escapeRegExp2 = _interopRequireDefault(_escapeRegExp);

  var _startsWith = __webpack_require__(1190);

  var _startsWith2 = _interopRequireDefault(_startsWith);

  var _isBoolean = __webpack_require__(479);

  var _isBoolean2 = _interopRequireDefault(_isBoolean);

  var _minimatch = __webpack_require__(1199);

  var _minimatch2 = _interopRequireDefault(_minimatch);

  var _includes = __webpack_require__(265);

  var _includes2 = _interopRequireDefault(_includes);

  var _isString = __webpack_require__(216);

  var _isString2 = _interopRequireDefault(_isString);

  var _isRegExp = __webpack_require__(482);

  var _isRegExp2 = _interopRequireDefault(_isRegExp);

  var _path = __webpack_require__(134);

  var _path2 = _interopRequireDefault(_path);

  var _slash = __webpack_require__(515);

  var _slash2 = _interopRequireDefault(_slash);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Test if a filename ends with a compilable extension.
   */

  function canCompile(filename, altExts) {
    var exts = altExts || canCompile.EXTENSIONS;
    var ext = _path2.default.extname(filename);
    return (0, _includes2.default)(exts, ext);
  }

  /**
   * Default set of compilable extensions.
   */

  canCompile.EXTENSIONS = [".js", ".jsx", ".es6", ".es"];

  /**
   * Create an array from any value, splitting strings by ",".
   */

  function list(val) {
    if (!val) {
      return [];
    } else if (Array.isArray(val)) {
      return val;
    } else if (typeof val === "string") {
      return val.split(",");
    } else {
      return [val];
    }
  }

  /**
   * Create a RegExp from a string, array, or regexp.
   */

  function regexify(val) {
    if (!val) {
      return new RegExp(/.^/);
    }

    if (Array.isArray(val)) {
      val = new RegExp(val.map(_escapeRegExp2.default).join("|"), "i");
    }

    if (typeof val === "string") {
      // normalise path separators
      val = (0, _slash2.default)(val);

      // remove starting wildcards or relative separator if present
      if ((0, _startsWith2.default)(val, "./") || (0, _startsWith2.default)(val, "*/")) val = val.slice(2);
      if ((0, _startsWith2.default)(val, "**/")) val = val.slice(3);

      var regex = _minimatch2.default.makeRe(val, { nocase: true });
      return new RegExp(regex.source.slice(1, -1), "i");
    }

    if ((0, _isRegExp2.default)(val)) {
      return val;
    }

    throw new TypeError("illegal type for regexify");
  }

  /**
   * Create an array from a boolean, string, or array, mapped by and optional function.
   */

  function arrayify(val, mapFn) {
    if (!val) return [];
    if ((0, _isBoolean2.default)(val)) return arrayify([val], mapFn);
    if ((0, _isString2.default)(val)) return arrayify(list(val), mapFn);

    if (Array.isArray(val)) {
      if (mapFn) val = val.map(mapFn);
      return val;
    }

    return [val];
  }

  /**
   * Makes boolean-like strings into booleans.
   */

  function booleanify(val) {
    if (val === "true" || val == 1) {
      return true;
    }

    if (val === "false" || val == 0 || !val) {
      return false;
    }

    return val;
  }

  /**
   * Tests if a filename should be ignored based on "ignore" and "only" options.
   */

  function shouldIgnore(filename) {
    var ignore = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
    var only = arguments[2];

    filename = (0, _slash2.default)(filename);

    if (only) {
      for (var _iterator = only, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var pattern = _ref;

        if (_shouldIgnore(pattern, filename)) return false;
      }
      return true;
    } else if (ignore.length) {
      for (var _iterator2 = ignore, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var _pattern = _ref2;

        if (_shouldIgnore(_pattern, filename)) return true;
      }
    }

    return false;
  }

  /**
   * Returns result of calling function with filename if pattern is a function.
   * Otherwise returns result of matching pattern Regex with filename.
   */

  function _shouldIgnore(pattern, filename) {
    if (typeof pattern === "function") {
      return pattern(filename);
    } else {
      return pattern.test(filename);
    }
  }

/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = { "default": __webpack_require__(801), __esModule: true };

/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = { "default": __webpack_require__(809), __esModule: true };

/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;

  var _symbol = __webpack_require__(286);

  var _symbol2 = _interopRequireDefault(_symbol);

  exports.default = function (code, opts) {
    // since we lazy parse the template, we get the current stack so we have the
    // original stack to append if it errors when parsing
    var stack = /*istanbul ignore next*/void 0;
    try {
      // error stack gets populated in IE only on throw (https://msdn.microsoft.com/en-us/library/hh699850(v=vs.94).aspx)
      throw new Error();
    } catch (error) {
      if (error.stack) {
        // error.stack does not exists in IE <= 9
        stack = error.stack.split("\n").slice(1).join("\n");
      }
    }

    var _getAst = function /*istanbul ignore next*/getAst() {
      var ast = /*istanbul ignore next*/void 0;

      try {
        ast = babylon.parse(code, /*istanbul ignore next*/(0, _assign2.default)({
          allowReturnOutsideFunction: true,
          allowSuperOutsideMethod: true
        }, opts));

        ast = /*istanbul ignore next*/_babelTraverse2.default.removeProperties(ast);

        /*istanbul ignore next*/_babelTraverse2.default.cheap(ast, function (node) {
          node[FROM_TEMPLATE] = true;
        });
      } catch (err) {
        err.stack = /*istanbul ignore next*/err.stack + "from\n" + stack;
        throw err;
      }

      _getAst = function /*istanbul ignore next*/getAst() {
        return ast;
      };

      return ast;
    };

    return function () {
      /*istanbul ignore next*/
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return useTemplate(_getAst(), args);
    };
  };

  var /*istanbul ignore next*/_cloneDeep = __webpack_require__(1174);

  /*istanbul ignore next*/
  var _cloneDeep2 = _interopRequireDefault(_cloneDeep);

  var /*istanbul ignore next*/_assign = __webpack_require__(352);

  /*istanbul ignore next*/
  var _assign2 = _interopRequireDefault(_assign);

  var /*istanbul ignore next*/_has = __webpack_require__(1180);

  /*istanbul ignore next*/
  var _has2 = _interopRequireDefault(_has);

  var /*istanbul ignore next*/_babelTraverse = __webpack_require__(128);

  /*istanbul ignore next*/
  var _babelTraverse2 = _interopRequireDefault(_babelTraverse);

  var /*istanbul ignore next*/_babylon = __webpack_require__(290);

  /*istanbul ignore next*/
  var babylon = _interopRequireWildcard(_babylon);

  var /*istanbul ignore next*/_babelTypes = __webpack_require__(90);

  /*istanbul ignore next*/
  var t = _interopRequireWildcard(_babelTypes);

  /*istanbul ignore next*/
  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /* eslint max-len: 0 */

  var FROM_TEMPLATE = "_fromTemplate"; //Symbol(); // todo: probably wont get copied over
  var TEMPLATE_SKIP = /*istanbul ignore next*/(0, _symbol2.default)();

  function useTemplate(ast, nodes) {
    ast = /*istanbul ignore next*/(0, _cloneDeep2.default)(ast);
    /*istanbul ignore next*/var _ast = ast;
    /*istanbul ignore next*/var program = _ast.program;


    if (nodes.length) {
      /*istanbul ignore next*/(0, _babelTraverse2.default)(ast, templateVisitor, null, nodes);
    }

    if (program.body.length > 1) {
      return program.body;
    } else {
      return program.body[0];
    }
  }

  var templateVisitor = {
    // 360
    noScope: true,

    /*istanbul ignore next*/enter: function enter(path, args) {
      /*istanbul ignore next*/var node = path.node;

      if (node[TEMPLATE_SKIP]) return path.skip();

      if (t.isExpressionStatement(node)) {
        node = node.expression;
      }

      var replacement = /*istanbul ignore next*/void 0;

      if (t.isIdentifier(node) && node[FROM_TEMPLATE]) {
        if ( /*istanbul ignore next*/(0, _has2.default)(args[0], node.name)) {
          replacement = args[0][node.name];
        } else if (node.name[0] === "$") {
          var i = +node.name.slice(1);
          if (args[i]) replacement = args[i];
        }
      }

      if (replacement === null) {
        path.remove();
      }

      if (replacement) {
        replacement[TEMPLATE_SKIP] = true;
        path.replaceInline(replacement);
      }
    },
    /*istanbul ignore next*/exit: function exit(_ref) {
      /*istanbul ignore next*/var node = _ref.node;

      if (!node.loc) /*istanbul ignore next*/_babelTraverse2.default.clearNode(node);
    }
  };
  /*istanbul ignore next*/module.exports = exports["default"];

/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;

  var _keys = __webpack_require__(190);

  var _keys2 = _interopRequireDefault(_keys);

  var _create = __webpack_require__(189);

  var _create2 = _interopRequireDefault(_create);

  var _classCallCheck2 = __webpack_require__(97);

  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

  var _getIterator2 = __webpack_require__(93);

  var _getIterator3 = _interopRequireDefault(_getIterator2);

  var /*istanbul ignore next*/_includes = __webpack_require__(265);

  /*istanbul ignore next*/
  var _includes2 = _interopRequireDefault(_includes);

  var /*istanbul ignore next*/_repeat = __webpack_require__(268);

  /*istanbul ignore next*/
  var _repeat2 = _interopRequireDefault(_repeat);

  var /*istanbul ignore next*/_renamer = __webpack_require__(760);

  /*istanbul ignore next*/
  var _renamer2 = _interopRequireDefault(_renamer);

  var /*istanbul ignore next*/_index = __webpack_require__(128);

  /*istanbul ignore next*/
  var _index2 = _interopRequireDefault(_index);

  var /*istanbul ignore next*/_defaults = __webpack_require__(476);

  /*istanbul ignore next*/
  var _defaults2 = _interopRequireDefault(_defaults);

  var /*istanbul ignore next*/_babelMessages = __webpack_require__(157);

  /*istanbul ignore next*/
  var messages = _interopRequireWildcard(_babelMessages);

  var /*istanbul ignore next*/_binding2 = __webpack_require__(391);

  /*istanbul ignore next*/
  var _binding3 = _interopRequireDefault(_binding2);

  var /*istanbul ignore next*/_globals = __webpack_require__(1062);

  /*istanbul ignore next*/
  var _globals2 = _interopRequireDefault(_globals);

  var /*istanbul ignore next*/_babelTypes = __webpack_require__(90);

  /*istanbul ignore next*/
  var t = _interopRequireWildcard(_babelTypes);

  var /*istanbul ignore next*/_cache = __webpack_require__(226);

  /*istanbul ignore next*/
  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  // Number of calls to the crawl method to figure out whether we're
  // somewhere inside a call that was trigerred by call. This is meant
  // to be used to figure out whether a warning should be trigerred.
  // See `warnOnFlowBinding`.
  /* eslint max-len: 0 */

  var _crawlCallsCount = 0;

  /**
   * To avoid creating a new Scope instance for each traversal, we maintain a cache on the
   * node itself containing all scopes it has been associated with.
   */

  function getCache(path, parentScope, self) {
    var scopes = /*istanbul ignore next*/_cache.scope.get(path.node) || [];

    for ( /*istanbul ignore next*/var _iterator = scopes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
      /*istanbul ignore next*/
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var scope = _ref;

      if (scope.parent === parentScope && scope.path === path) return scope;
    }

    scopes.push(self);

    if (! /*istanbul ignore next*/_cache.scope.has(path.node)) {
      /*istanbul ignore next*/_cache.scope.set(path.node, scopes);
    }
  }

  //

  var collectorVisitor = { /*istanbul ignore next*/
    For: function For(path) {
      for ( /*istanbul ignore next*/var _iterator2 = t.FOR_INIT_KEYS, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
        /*istanbul ignore next*/
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var key = _ref2;

        var declar = path.get(key);
        if (declar.isVar()) path.scope.getFunctionParent().registerBinding("var", declar);
      }
    },
    /*istanbul ignore next*/Declaration: function Declaration(path) {
      // delegate block scope handling to the `blockVariableVisitor`
      if (path.isBlockScoped()) return;

      // this will be hit again once we traverse into it after this iteration
      if (path.isExportDeclaration() && path.get("declaration").isDeclaration()) return;

      // TODO(amasad): remove support for flow as bindings (See warning below).
      //if (path.isFlow()) return;

      // we've ran into a declaration!
      path.scope.getFunctionParent().registerDeclaration(path);
    },
    /*istanbul ignore next*/ReferencedIdentifier: function ReferencedIdentifier(path, state) {
      state.references.push(path);
    },
    /*istanbul ignore next*/ForXStatement: function ForXStatement(path, state) {
      var left = path.get("left");
      if (left.isPattern() || left.isIdentifier()) {
        state.constantViolations.push(left);
      }
    },


    ExportDeclaration: { /*istanbul ignore next*/
      exit: function exit(_ref3) {
        /*istanbul ignore next*/var node = _ref3.node;
        /*istanbul ignore next*/var scope = _ref3.scope;

        var declar = node.declaration;
        if (t.isClassDeclaration(declar) || t.isFunctionDeclaration(declar)) {
          var _id = declar.id;
          if (!_id) return;

          var binding = scope.getBinding(_id.name);
          if (binding) binding.reference();
        } else if (t.isVariableDeclaration(declar)) {
          for ( /*istanbul ignore next*/var _iterator3 = declar.declarations, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);;) {
            /*istanbul ignore next*/
            var _ref4;

            if (_isArray3) {
              if (_i3 >= _iterator3.length) break;
              _ref4 = _iterator3[_i3++];
            } else {
              _i3 = _iterator3.next();
              if (_i3.done) break;
              _ref4 = _i3.value;
            }

            var decl = _ref4;

            var ids = t.getBindingIdentifiers(decl);
            for (var name in ids) {
              var _binding = scope.getBinding(name);
              if (_binding) _binding.reference();
            }
          }
        }
      }
    },

    /*istanbul ignore next*/LabeledStatement: function LabeledStatement(path) {
      path.scope.getProgramParent().addGlobal(path.node);
      path.scope.getBlockParent().registerDeclaration(path);
    },
    /*istanbul ignore next*/AssignmentExpression: function AssignmentExpression(path, state) {
      state.assignments.push(path);
    },
    /*istanbul ignore next*/UpdateExpression: function UpdateExpression(path, state) {
      state.constantViolations.push(path.get("argument"));
    },
    /*istanbul ignore next*/UnaryExpression: function UnaryExpression(path, state) {
      if (path.node.operator === "delete") {
        state.constantViolations.push(path.get("argument"));
      }
    },
    /*istanbul ignore next*/BlockScoped: function BlockScoped(path) {
      var scope = path.scope;
      if (scope.path === path) scope = scope.parent;
      scope.getBlockParent().registerDeclaration(path);
    },
    /*istanbul ignore next*/ClassDeclaration: function ClassDeclaration(path) {
      var id = path.node.id;
      if (!id) return;

      var name = id.name;
      path.scope.bindings[name] = path.scope.getBinding(name);
    },
    /*istanbul ignore next*/Block: function Block(path) {
      var paths = path.get("body");
      for ( /*istanbul ignore next*/var _iterator4 = paths, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4);;) {
        /*istanbul ignore next*/
        var _ref5;

        if (_isArray4) {
          if (_i4 >= _iterator4.length) break;
          _ref5 = _iterator4[_i4++];
        } else {
          _i4 = _iterator4.next();
          if (_i4.done) break;
          _ref5 = _i4.value;
        }

        var bodyPath = _ref5;

        if (bodyPath.isFunctionDeclaration()) {
          path.scope.getBlockParent().registerDeclaration(bodyPath);
        }
      }
    }
  };

  var uid = 0;

  /*istanbul ignore next*/
  var Scope = function () {

    /**
     * This searches the current "scope" and collects all references/bindings
     * within.
     */

    function /*istanbul ignore next*/Scope(path, parentScope) {
      /*istanbul ignore next*/(0, _classCallCheck3.default)(this, Scope);

      if (parentScope && parentScope.block === path.node) {
        return parentScope;
      }

      var cached = getCache(path, parentScope, this);
      if (cached) return cached;

      this.uid = uid++;
      this.parent = parentScope;
      this.hub = path.hub;

      this.parentBlock = path.parent;
      this.block = path.node;
      this.path = path;
    }

    /**
     * Globals.
     */

    /**
     * Variables available in current context.
     */

    /**
     * Traverse node with current scope and path.
     */

    Scope.prototype.traverse = function traverse(node, opts, state) {
      /*istanbul ignore next*/(0, _index2.default)(node, opts, this, state, this.path);
    };

    /**
     * Generate a unique identifier and add it to the current scope.
     */

    Scope.prototype.generateDeclaredUidIdentifier = function generateDeclaredUidIdentifier() {
      /*istanbul ignore next*/var name = arguments.length <= 0 || arguments[0] === undefined ? "temp" : arguments[0];

      var id = this.generateUidIdentifier(name);
      this.push({ id: id });
      return id;
    };

    /**
     * Generate a unique identifier.
     */

    Scope.prototype.generateUidIdentifier = function generateUidIdentifier() {
      /*istanbul ignore next*/var name = arguments.length <= 0 || arguments[0] === undefined ? "temp" : arguments[0];

      return t.identifier(this.generateUid(name));
    };

    /**
     * Generate a unique `_id1` binding.
     */

    Scope.prototype.generateUid = function generateUid() {
      /*istanbul ignore next*/var name = arguments.length <= 0 || arguments[0] === undefined ? "temp" : arguments[0];

      name = t.toIdentifier(name).replace(/^_+/, "").replace(/[0-9]+$/g, "");

      var uid = /*istanbul ignore next*/void 0;
      var i = 0;
      do {
        uid = this._generateUid(name, i);
        i++;
      } while (this.hasBinding(uid) || this.hasGlobal(uid) || this.hasReference(uid));

      var program = this.getProgramParent();
      program.references[uid] = true;
      program.uids[uid] = true;

      return uid;
    };

    /**
     * Generate an `_id1`.
     */

    Scope.prototype._generateUid = function _generateUid(name, i) {
      var id = name;
      if (i > 1) id += i;
      return (/*istanbul ignore next*/"_" + id
      );
    };

    /**
     * Generate a unique identifier based on a node.
     */

    Scope.prototype.generateUidIdentifierBasedOnNode = function generateUidIdentifierBasedOnNode(parent, defaultName) {
      var node = parent;

      if (t.isAssignmentExpression(parent)) {
        node = parent.left;
      } else if (t.isVariableDeclarator(parent)) {
        node = parent.id;
      } else if (t.isObjectProperty(node) || t.isObjectMethod(node)) {
        node = node.key;
      }

      var parts = [];

      var add = function add(node) {
        if (t.isModuleDeclaration(node)) {
          if (node.source) {
            add(node.source);
          } else if (node.specifiers && node.specifiers.length) {
            for ( /*istanbul ignore next*/var _iterator5 = node.specifiers, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : (0, _getIterator3.default)(_iterator5);;) {
              /*istanbul ignore next*/
              var _ref6;

              if (_isArray5) {
                if (_i5 >= _iterator5.length) break;
                _ref6 = _iterator5[_i5++];
              } else {
                _i5 = _iterator5.next();
                if (_i5.done) break;
                _ref6 = _i5.value;
              }

              var specifier = _ref6;

              add(specifier);
            }
          } else if (node.declaration) {
            add(node.declaration);
          }
        } else if (t.isModuleSpecifier(node)) {
          add(node.local);
        } else if (t.isMemberExpression(node)) {
          add(node.object);
          add(node.property);
        } else if (t.isIdentifier(node)) {
          parts.push(node.name);
        } else if (t.isLiteral(node)) {
          parts.push(node.value);
        } else if (t.isCallExpression(node)) {
          add(node.callee);
        } else if (t.isObjectExpression(node) || t.isObjectPattern(node)) {
          for ( /*istanbul ignore next*/var _iterator6 = node.properties, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : (0, _getIterator3.default)(_iterator6);;) {
            /*istanbul ignore next*/
            var _ref7;

            if (_isArray6) {
              if (_i6 >= _iterator6.length) break;
              _ref7 = _iterator6[_i6++];
            } else {
              _i6 = _iterator6.next();
              if (_i6.done) break;
              _ref7 = _i6.value;
            }

            var prop = _ref7;

            add(prop.key || prop.argument);
          }
        }
      };

      add(node);

      var id = parts.join("$");
      id = id.replace(/^_/, "") || defaultName || "ref";

      return this.generateUidIdentifier(id.slice(0, 20));
    };

    /**
     * Determine whether evaluating the specific input `node` is a consequenceless reference. ie.
     * evaluating it wont result in potentially arbitrary code from being ran. The following are
     * whitelisted and determined not to cause side effects:
     *
     *  - `this` expressions
     *  - `super` expressions
     *  - Bound identifiers
     */

    Scope.prototype.isStatic = function isStatic(node) {
      if (t.isThisExpression(node) || t.isSuper(node)) {
        return true;
      }

      if (t.isIdentifier(node)) {
        var binding = this.getBinding(node.name);
        if (binding) {
          return binding.constant;
        } else {
          return this.hasBinding(node.name);
        }
      }

      return false;
    };

    /**
     * Possibly generate a memoised identifier if it is not static and has consequences.
     */

    Scope.prototype.maybeGenerateMemoised = function maybeGenerateMemoised(node, dontPush) {
      if (this.isStatic(node)) {
        return null;
      } else {
        var _id2 = this.generateUidIdentifierBasedOnNode(node);
        if (!dontPush) this.push({ id: _id2 });
        return _id2;
      }
    };

    Scope.prototype.checkBlockScopedCollisions = function checkBlockScopedCollisions(local, kind, name, id) {
      // ignore parameters
      if (kind === "param") return;

      // ignore hoisted functions if there's also a local let
      if (kind === "hoisted" && local.kind === "let") return;

      var duplicate = false;

      // don't allow duplicate bindings to exist alongside
      if (!duplicate) duplicate = kind === "let" || local.kind === "let" || local.kind === "const" || local.kind === "module";

      // don't allow a local of param with a kind of let
      if (!duplicate) duplicate = local.kind === "param" && (kind === "let" || kind === "const");

      if (duplicate) {
        throw this.hub.file.buildCodeFrameError(id, messages.get("scopeDuplicateDeclaration", name), TypeError);
      }
    };

    Scope.prototype.rename = function rename(oldName, newName, block) {
      var binding = this.getBinding(oldName);
      if (binding) {
        newName = newName || this.generateUidIdentifier(oldName).name;
        return new /*istanbul ignore next*/_renamer2.default(binding, oldName, newName).rename(block);
      }
    };

    Scope.prototype._renameFromMap = function _renameFromMap(map, oldName, newName, value) {
      if (map[oldName]) {
        map[newName] = value;
        map[oldName] = null;
      }
    };

    Scope.prototype.dump = function dump() {
      var sep = /*istanbul ignore next*/(0, _repeat2.default)("-", 60);
      console.log(sep);
      var scope = this;
      do {
        console.log("#", scope.block.type);
        for (var name in scope.bindings) {
          var binding = scope.bindings[name];
          console.log(" -", name, {
            constant: binding.constant,
            references: binding.references,
            violations: binding.constantViolations.length,
            kind: binding.kind
          });
        }
      } while (scope = scope.parent);
      console.log(sep);
    };

    Scope.prototype.toArray = function toArray(node, i) {
      var file = this.hub.file;

      if (t.isIdentifier(node)) {
        var binding = this.getBinding(node.name);
        if (binding && binding.constant && binding.path.isGenericType("Array")) return node;
      }

      if (t.isArrayExpression(node)) {
        return node;
      }

      if (t.isIdentifier(node, { name: "arguments" })) {
        return t.callExpression(t.memberExpression(t.memberExpression(t.memberExpression(t.identifier("Array"), t.identifier("prototype")), t.identifier("slice")), t.identifier("call")), [node]);
      }

      var helperName = "toArray";
      var args = [node];
      if (i === true) {
        helperName = "toConsumableArray";
      } else if (i) {
        args.push(t.numericLiteral(i));
        helperName = "slicedToArray";
        // TODO if (this.hub.file.isLoose("es6.forOf")) helperName += "-loose";
      }
      return t.callExpression(file.addHelper(helperName), args);
    };

    Scope.prototype.registerDeclaration = function registerDeclaration(path) {
      if (path.isLabeledStatement()) {
        this.registerBinding("label", path);
      } else if (path.isFunctionDeclaration()) {
        this.registerBinding("hoisted", path.get("id"), path);
      } else if (path.isVariableDeclaration()) {
        var declarations = path.get("declarations");
        for ( /*istanbul ignore next*/var _iterator7 = declarations, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : (0, _getIterator3.default)(_iterator7);;) {
          /*istanbul ignore next*/
          var _ref8;

          if (_isArray7) {
            if (_i7 >= _iterator7.length) break;
            _ref8 = _iterator7[_i7++];
          } else {
            _i7 = _iterator7.next();
            if (_i7.done) break;
            _ref8 = _i7.value;
          }

          var declar = _ref8;

          this.registerBinding(path.node.kind, declar);
        }
      } else if (path.isClassDeclaration()) {
        this.registerBinding("let", path);
      } else if (path.isImportDeclaration()) {
        var specifiers = path.get("specifiers");
        for ( /*istanbul ignore next*/var _iterator8 = specifiers, _isArray8 = Array.isArray(_iterator8), _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : (0, _getIterator3.default)(_iterator8);;) {
          /*istanbul ignore next*/
          var _ref9;

          if (_isArray8) {
            if (_i8 >= _iterator8.length) break;
            _ref9 = _iterator8[_i8++];
          } else {
            _i8 = _iterator8.next();
            if (_i8.done) break;
            _ref9 = _i8.value;
          }

          var specifier = _ref9;

          this.registerBinding("module", specifier);
        }
      } else if (path.isExportDeclaration()) {
        var _declar = path.get("declaration");
        if (_declar.isClassDeclaration() || _declar.isFunctionDeclaration() || _declar.isVariableDeclaration()) {
          this.registerDeclaration(_declar);
        }
      } else {
        this.registerBinding("unknown", path);
      }
    };

    Scope.prototype.buildUndefinedNode = function buildUndefinedNode() {
      if (this.hasBinding("undefined")) {
        return t.unaryExpression("void", t.numericLiteral(0), true);
      } else {
        return t.identifier("undefined");
      }
    };

    Scope.prototype.registerConstantViolation = function registerConstantViolation(path) {
      var ids = path.getBindingIdentifiers();
      for (var name in ids) {
        var binding = this.getBinding(name);
        if (binding) binding.reassign(path);
      }
    };

    Scope.prototype.registerBinding = function registerBinding(kind, path) {
      /*istanbul ignore next*/var bindingPath = arguments.length <= 2 || arguments[2] === undefined ? path : arguments[2];

      if (!kind) throw new ReferenceError("no `kind`");

      if (path.isVariableDeclaration()) {
        var declarators = path.get("declarations");
        for ( /*istanbul ignore next*/var _iterator9 = declarators, _isArray9 = Array.isArray(_iterator9), _i9 = 0, _iterator9 = _isArray9 ? _iterator9 : (0, _getIterator3.default)(_iterator9);;) {
          /*istanbul ignore next*/
          var _ref10;

          if (_isArray9) {
            if (_i9 >= _iterator9.length) break;
            _ref10 = _iterator9[_i9++];
          } else {
            _i9 = _iterator9.next();
            if (_i9.done) break;
            _ref10 = _i9.value;
          }

          var declar = _ref10;

          this.registerBinding(kind, declar);
        }
        return;
      }

      var parent = this.getProgramParent();
      var ids = path.getBindingIdentifiers(true);

      for (var name in ids) {
        for ( /*istanbul ignore next*/var _iterator10 = ids[name], _isArray10 = Array.isArray(_iterator10), _i10 = 0, _iterator10 = _isArray10 ? _iterator10 : (0, _getIterator3.default)(_iterator10);;) {
          /*istanbul ignore next*/
          var _ref11;

          if (_isArray10) {
            if (_i10 >= _iterator10.length) break;
            _ref11 = _iterator10[_i10++];
          } else {
            _i10 = _iterator10.next();
            if (_i10.done) break;
            _ref11 = _i10.value;
          }

          var _id3 = _ref11;

          var local = this.getOwnBinding(name);
          if (local) {
            // same identifier so continue safely as we're likely trying to register it
            // multiple times
            if (local.identifier === _id3) continue;

            this.checkBlockScopedCollisions(local, kind, name, _id3);
          }

          // It's erroneous that we currently consider flow a binding, however, we can't
          // remove it because people might be depending on it. See warning section
          // in `warnOnFlowBinding`.
          if (local && local.path.isFlow()) local = null;

          parent.references[name] = true;

          this.bindings[name] = new /*istanbul ignore next*/_binding3.default({
            identifier: _id3,
            existing: local,
            scope: this,
            path: bindingPath,
            kind: kind
          });
        }
      }
    };

    Scope.prototype.addGlobal = function addGlobal(node) {
      this.globals[node.name] = node;
    };

    Scope.prototype.hasUid = function hasUid(name) {
      var scope = this;

      do {
        if (scope.uids[name]) return true;
      } while (scope = scope.parent);

      return false;
    };

    Scope.prototype.hasGlobal = function hasGlobal(name) {
      var scope = this;

      do {
        if (scope.globals[name]) return true;
      } while (scope = scope.parent);

      return false;
    };

    Scope.prototype.hasReference = function hasReference(name) {
      var scope = this;

      do {
        if (scope.references[name]) return true;
      } while (scope = scope.parent);

      return false;
    };

    Scope.prototype.isPure = function isPure(node, constantsOnly) {
      if (t.isIdentifier(node)) {
        var binding = this.getBinding(node.name);
        if (!binding) return false;
        if (constantsOnly) return binding.constant;
        return true;
      } else if (t.isClass(node)) {
        if (node.superClass && !this.isPure(node.superClass, constantsOnly)) return false;
        return this.isPure(node.body, constantsOnly);
      } else if (t.isClassBody(node)) {
        for ( /*istanbul ignore next*/var _iterator11 = node.body, _isArray11 = Array.isArray(_iterator11), _i11 = 0, _iterator11 = _isArray11 ? _iterator11 : (0, _getIterator3.default)(_iterator11);;) {
          /*istanbul ignore next*/
          var _ref12;

          if (_isArray11) {
            if (_i11 >= _iterator11.length) break;
            _ref12 = _iterator11[_i11++];
          } else {
            _i11 = _iterator11.next();
            if (_i11.done) break;
            _ref12 = _i11.value;
          }

          var method = _ref12;

          if (!this.isPure(method, constantsOnly)) return false;
        }
        return true;
      } else if (t.isBinary(node)) {
        return this.isPure(node.left, constantsOnly) && this.isPure(node.right, constantsOnly);
      } else if (t.isArrayExpression(node)) {
        for ( /*istanbul ignore next*/var _iterator12 = node.elements, _isArray12 = Array.isArray(_iterator12), _i12 = 0, _iterator12 = _isArray12 ? _iterator12 : (0, _getIterator3.default)(_iterator12);;) {
          /*istanbul ignore next*/
          var _ref13;

          if (_isArray12) {
            if (_i12 >= _iterator12.length) break;
            _ref13 = _iterator12[_i12++];
          } else {
            _i12 = _iterator12.next();
            if (_i12.done) break;
            _ref13 = _i12.value;
          }

          var elem = _ref13;

          if (!this.isPure(elem, constantsOnly)) return false;
        }
        return true;
      } else if (t.isObjectExpression(node)) {
        for ( /*istanbul ignore next*/var _iterator13 = node.properties, _isArray13 = Array.isArray(_iterator13), _i13 = 0, _iterator13 = _isArray13 ? _iterator13 : (0, _getIterator3.default)(_iterator13);;) {
          /*istanbul ignore next*/
          var _ref14;

          if (_isArray13) {
            if (_i13 >= _iterator13.length) break;
            _ref14 = _iterator13[_i13++];
          } else {
            _i13 = _iterator13.next();
            if (_i13.done) break;
            _ref14 = _i13.value;
          }

          var prop = _ref14;

          if (!this.isPure(prop, constantsOnly)) return false;
        }
        return true;
      } else if (t.isClassMethod(node)) {
        if (node.computed && !this.isPure(node.key, constantsOnly)) return false;
        if (node.kind === "get" || node.kind === "set") return false;
        return true;
      } else if (t.isClassProperty(node) || t.isObjectProperty(node)) {
        if (node.computed && !this.isPure(node.key, constantsOnly)) return false;
        return this.isPure(node.value, constantsOnly);
      } else if (t.isUnaryExpression(node)) {
        return this.isPure(node.argument, constantsOnly);
      } else {
        return t.isPureish(node);
      }
    };

    /**
     * Set some arbitrary data on the current scope.
     */

    Scope.prototype.setData = function setData(key, val) {
      return this.data[key] = val;
    };

    /**
     * Recursively walk up scope tree looking for the data `key`.
     */

    Scope.prototype.getData = function getData(key) {
      var scope = this;
      do {
        var data = scope.data[key];
        if (data != null) return data;
      } while (scope = scope.parent);
    };

    /**
     * Recursively walk up scope tree looking for the data `key` and if it exists,
     * remove it.
     */

    Scope.prototype.removeData = function removeData(key) {
      var scope = this;
      do {
        var data = scope.data[key];
        if (data != null) scope.data[key] = null;
      } while (scope = scope.parent);
    };

    Scope.prototype.init = function init() {
      if (!this.references) this.crawl();
    };

    Scope.prototype.crawl = function crawl() {
      _crawlCallsCount++;
      this._crawl();
      _crawlCallsCount--;
    };

    Scope.prototype._crawl = function _crawl() {
      var path = this.path;

      //

      this.references = /*istanbul ignore next*/(0, _create2.default)(null);
      this.bindings = /*istanbul ignore next*/(0, _create2.default)(null);
      this.globals = /*istanbul ignore next*/(0, _create2.default)(null);
      this.uids = /*istanbul ignore next*/(0, _create2.default)(null);
      this.data = /*istanbul ignore next*/(0, _create2.default)(null);

      // ForStatement - left, init

      if (path.isLoop()) {
        for ( /*istanbul ignore next*/var _iterator14 = t.FOR_INIT_KEYS, _isArray14 = Array.isArray(_iterator14), _i14 = 0, _iterator14 = _isArray14 ? _iterator14 : (0, _getIterator3.default)(_iterator14);;) {
          /*istanbul ignore next*/
          var _ref15;

          if (_isArray14) {
            if (_i14 >= _iterator14.length) break;
            _ref15 = _iterator14[_i14++];
          } else {
            _i14 = _iterator14.next();
            if (_i14.done) break;
            _ref15 = _i14.value;
          }

          var key = _ref15;

          var node = path.get(key);
          if (node.isBlockScoped()) this.registerBinding(node.node.kind, node);
        }
      }

      // FunctionExpression - id

      if (path.isFunctionExpression() && path.has("id")) {
        if (!path.get("id").node[t.NOT_LOCAL_BINDING]) {
          this.registerBinding("local", path.get("id"), path);
        }
      }

      // Class

      if (path.isClassExpression() && path.has("id")) {
        if (!path.get("id").node[t.NOT_LOCAL_BINDING]) {
          this.registerBinding("local", path);
        }
      }

      // Function - params, rest

      if (path.isFunction()) {
        var params = path.get("params");
        for ( /*istanbul ignore next*/var _iterator15 = params, _isArray15 = Array.isArray(_iterator15), _i15 = 0, _iterator15 = _isArray15 ? _iterator15 : (0, _getIterator3.default)(_iterator15);;) {
          /*istanbul ignore next*/
          var _ref16;

          if (_isArray15) {
            if (_i15 >= _iterator15.length) break;
            _ref16 = _iterator15[_i15++];
          } else {
            _i15 = _iterator15.next();
            if (_i15.done) break;
            _ref16 = _i15.value;
          }

          var param = _ref16;

          this.registerBinding("param", param);
        }
      }

      // CatchClause - param

      if (path.isCatchClause()) {
        this.registerBinding("let", path);
      }

      // Program

      var parent = this.getProgramParent();
      if (parent.crawling) return;

      var state = {
        references: [],
        constantViolations: [],
        assignments: []
      };

      this.crawling = true;
      path.traverse(collectorVisitor, state);
      this.crawling = false;

      // register assignments
      for ( /*istanbul ignore next*/var _iterator16 = state.assignments, _isArray16 = Array.isArray(_iterator16), _i16 = 0, _iterator16 = _isArray16 ? _iterator16 : (0, _getIterator3.default)(_iterator16);;) {
        /*istanbul ignore next*/
        var _ref17;

        if (_isArray16) {
          if (_i16 >= _iterator16.length) break;
          _ref17 = _iterator16[_i16++];
        } else {
          _i16 = _iterator16.next();
          if (_i16.done) break;
          _ref17 = _i16.value;
        }

        var _path = _ref17;

        // register undeclared bindings as globals
        var ids = _path.getBindingIdentifiers();
        var programParent = /*istanbul ignore next*/void 0;
        for (var name in ids) {
          if (_path.scope.getBinding(name)) continue;

          programParent = programParent || _path.scope.getProgramParent();
          programParent.addGlobal(ids[name]);
        }

        // register as constant violation
        _path.scope.registerConstantViolation(_path);
      }

      // register references
      for ( /*istanbul ignore next*/var _iterator17 = state.references, _isArray17 = Array.isArray(_iterator17), _i17 = 0, _iterator17 = _isArray17 ? _iterator17 : (0, _getIterator3.default)(_iterator17);;) {
        /*istanbul ignore next*/
        var _ref18;

        if (_isArray17) {
          if (_i17 >= _iterator17.length) break;
          _ref18 = _iterator17[_i17++];
        } else {
          _i17 = _iterator17.next();
          if (_i17.done) break;
          _ref18 = _i17.value;
        }

        var ref = _ref18;

        var binding = ref.scope.getBinding(ref.node.name);
        if (binding) {
          binding.reference(ref);
        } else {
          ref.scope.getProgramParent().addGlobal(ref.node);
        }
      }

      // register constant violations
      for ( /*istanbul ignore next*/var _iterator18 = state.constantViolations, _isArray18 = Array.isArray(_iterator18), _i18 = 0, _iterator18 = _isArray18 ? _iterator18 : (0, _getIterator3.default)(_iterator18);;) {
        /*istanbul ignore next*/
        var _ref19;

        if (_isArray18) {
          if (_i18 >= _iterator18.length) break;
          _ref19 = _iterator18[_i18++];
        } else {
          _i18 = _iterator18.next();
          if (_i18.done) break;
          _ref19 = _i18.value;
        }

        var _path2 = _ref19;

        _path2.scope.registerConstantViolation(_path2);
      }
    };

    Scope.prototype.push = function push(opts) {
      var path = this.path;

      if (!path.isBlockStatement() && !path.isProgram()) {
        path = this.getBlockParent().path;
      }

      if (path.isSwitchStatement()) {
        path = this.getFunctionParent().path;
      }

      if (path.isLoop() || path.isCatchClause() || path.isFunction()) {
        t.ensureBlock(path.node);
        path = path.get("body");
      }

      var unique = opts.unique;
      var kind = opts.kind || "var";
      var blockHoist = opts._blockHoist == null ? 2 : opts._blockHoist;

      var dataKey = /*istanbul ignore next*/"declaration:" + kind + ":" + blockHoist;
      var declarPath = !unique && path.getData(dataKey);

      if (!declarPath) {
        var declar = t.variableDeclaration(kind, []);
        declar._generated = true;
        declar._blockHoist = blockHoist;

        /*istanbul ignore next*/
        var _path$unshiftContaine = path.unshiftContainer("body", [declar]);

        /*istanbul ignore next*/declarPath = _path$unshiftContaine[0];

        if (!unique) path.setData(dataKey, declarPath);
      }

      var declarator = t.variableDeclarator(opts.id, opts.init);
      declarPath.node.declarations.push(declarator);
      this.registerBinding(kind, declarPath.get("declarations").pop());
    };

    /**
     * Walk up to the top of the scope tree and get the `Program`.
     */

    Scope.prototype.getProgramParent = function getProgramParent() {
      var scope = this;
      do {
        if (scope.path.isProgram()) {
          return scope;
        }
      } while (scope = scope.parent);
      throw new Error("We couldn't find a Function or Program...");
    };

    /**
     * Walk up the scope tree until we hit either a Function or reach the
     * very top and hit Program.
     */

    Scope.prototype.getFunctionParent = function getFunctionParent() {
      var scope = this;
      do {
        if (scope.path.isFunctionParent()) {
          return scope;
        }
      } while (scope = scope.parent);
      throw new Error("We couldn't find a Function or Program...");
    };

    /**
     * Walk up the scope tree until we hit either a BlockStatement/Loop/Program/Function/Switch or reach the
     * very top and hit Program.
     */

    Scope.prototype.getBlockParent = function getBlockParent() {
      var scope = this;
      do {
        if (scope.path.isBlockParent()) {
          return scope;
        }
      } while (scope = scope.parent);
      throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
    };

    /**
     * Walks the scope tree and gathers **all** bindings.
     */

    Scope.prototype.getAllBindings = function getAllBindings() {
      var ids = /*istanbul ignore next*/(0, _create2.default)(null);

      var scope = this;
      do {
        /*istanbul ignore next*/(0, _defaults2.default)(ids, scope.bindings);
        scope = scope.parent;
      } while (scope);

      return ids;
    };

    /**
     * Walks the scope tree and gathers all declarations of `kind`.
     */

    Scope.prototype.getAllBindingsOfKind = function getAllBindingsOfKind() {
      var ids = /*istanbul ignore next*/(0, _create2.default)(null);

      for ( /*istanbul ignore next*/var _iterator19 = arguments, _isArray19 = Array.isArray(_iterator19), _i19 = 0, _iterator19 = _isArray19 ? _iterator19 : (0, _getIterator3.default)(_iterator19);;) {
        /*istanbul ignore next*/
        var _ref20;

        if (_isArray19) {
          if (_i19 >= _iterator19.length) break;
          _ref20 = _iterator19[_i19++];
        } else {
          _i19 = _iterator19.next();
          if (_i19.done) break;
          _ref20 = _i19.value;
        }

        var kind = _ref20;

        var scope = this;
        do {
          for (var name in scope.bindings) {
            var binding = scope.bindings[name];
            if (binding.kind === kind) ids[name] = binding;
          }
          scope = scope.parent;
        } while (scope);
      }

      return ids;
    };

    Scope.prototype.bindingIdentifierEquals = function bindingIdentifierEquals(name, node) {
      return this.getBindingIdentifier(name) === node;
    };

    Scope.prototype.warnOnFlowBinding = function warnOnFlowBinding(binding) {
      if (_crawlCallsCount === 0 && binding && binding.path.isFlow()) {
        console.warn( /*istanbul ignore next*/"\n        You or one of the Babel plugins you are using are using Flow declarations as bindings.\n        Support for this will be removed in version 6.8. To find out the caller, grep for this\n        message and change it to a `console.trace()`.\n      ");
      }
      return binding;
    };

    Scope.prototype.getBinding = function getBinding(name) {
      var scope = this;

      do {
        var binding = scope.getOwnBinding(name);
        if (binding) return this.warnOnFlowBinding(binding);
      } while (scope = scope.parent);
    };

    Scope.prototype.getOwnBinding = function getOwnBinding(name) {
      return this.warnOnFlowBinding(this.bindings[name]);
    };

    Scope.prototype.getBindingIdentifier = function getBindingIdentifier(name) {
      var info = this.getBinding(name);
      return info && info.identifier;
    };

    Scope.prototype.getOwnBindingIdentifier = function getOwnBindingIdentifier(name) {
      var binding = this.bindings[name];
      return binding && binding.identifier;
    };

    Scope.prototype.hasOwnBinding = function hasOwnBinding(name) {
      return !!this.getOwnBinding(name);
    };

    Scope.prototype.hasBinding = function hasBinding(name, noGlobals) {
      if (!name) return false;
      if (this.hasOwnBinding(name)) return true;
      if (this.parentHasBinding(name, noGlobals)) return true;
      if (this.hasUid(name)) return true;
      if (!noGlobals && /*istanbul ignore next*/(0, _includes2.default)(Scope.globals, name)) return true;
      if (!noGlobals && /*istanbul ignore next*/(0, _includes2.default)(Scope.contextVariables, name)) return true;
      return false;
    };

    Scope.prototype.parentHasBinding = function parentHasBinding(name, noGlobals) {
      return this.parent && this.parent.hasBinding(name, noGlobals);
    };

    /**
     * Move a binding of `name` to another `scope`.
     */

    Scope.prototype.moveBindingTo = function moveBindingTo(name, scope) {
      var info = this.getBinding(name);
      if (info) {
        info.scope.removeOwnBinding(name);
        info.scope = scope;
        scope.bindings[name] = info;
      }
    };

    Scope.prototype.removeOwnBinding = function removeOwnBinding(name) {
      delete this.bindings[name];
    };

    Scope.prototype.removeBinding = function removeBinding(name) {
      // clear literal binding
      var info = this.getBinding(name);
      if (info) {
        info.scope.removeOwnBinding(name);
      }

      // clear uids with this name - https://github.com/babel/babel/issues/2101
      var scope = this;
      do {
        if (scope.uids[name]) {
          scope.uids[name] = false;
        }
      } while (scope = scope.parent);
    };

    return Scope;
  }();

  /*istanbul ignore next*/Scope.globals = /*istanbul ignore next*/(0, _keys2.default)( /*istanbul ignore next*/_globals2.default.builtin);
  /*istanbul ignore next*/Scope.contextVariables = ["arguments", "undefined", "Infinity", "NaN"];
  /*istanbul ignore next*/exports.default = Scope;
  /*istanbul ignore next*/module.exports = exports["default"];

/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  exports.__esModule = true;
  exports.NOT_LOCAL_BINDING = exports.BLOCK_SCOPED_SYMBOL = exports.INHERIT_KEYS = exports.UNARY_OPERATORS = exports.STRING_UNARY_OPERATORS = exports.NUMBER_UNARY_OPERATORS = exports.BOOLEAN_UNARY_OPERATORS = exports.BINARY_OPERATORS = exports.NUMBER_BINARY_OPERATORS = exports.BOOLEAN_BINARY_OPERATORS = exports.COMPARISON_BINARY_OPERATORS = exports.EQUALITY_BINARY_OPERATORS = exports.BOOLEAN_NUMBER_BINARY_OPERATORS = exports.UPDATE_OPERATORS = exports.LOGICAL_OPERATORS = exports.COMMENT_KEYS = exports.FOR_INIT_KEYS = exports.FLATTENABLE_KEYS = exports.STATEMENT_OR_BLOCK_KEYS = undefined;

  var _for = __webpack_require__(741);

  var _for2 = _interopRequireDefault(_for);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /* eslint max-len: 0 */

  var STATEMENT_OR_BLOCK_KEYS = exports.STATEMENT_OR_BLOCK_KEYS = ["consequent", "body", "alternate"];
  var FLATTENABLE_KEYS = exports.FLATTENABLE_KEYS = ["body", "expressions"];
  var FOR_INIT_KEYS = exports.FOR_INIT_KEYS = ["left", "init"];
  var COMMENT_KEYS = exports.COMMENT_KEYS = ["leadingComments", "trailingComments", "innerComments"];

  var LOGICAL_OPERATORS = exports.LOGICAL_OPERATORS = ["||", "&&"];
  var UPDATE_OPERATORS = exports.UPDATE_OPERATORS = ["++", "--"];

  var BOOLEAN_NUMBER_BINARY_OPERATORS = exports.BOOLEAN_NUMBER_BINARY_OPERATORS = [">", "<", ">=", "<="];
  var EQUALITY_BINARY_OPERATORS = exports.EQUALITY_BINARY_OPERATORS = ["==", "===", "!=", "!=="];
  var COMPARISON_BINARY_OPERATORS = exports.COMPARISON_BINARY_OPERATORS = [].concat(EQUALITY_BINARY_OPERATORS, ["in", "instanceof"]);
  var BOOLEAN_BINARY_OPERATORS = exports.BOOLEAN_BINARY_OPERATORS = [].concat(COMPARISON_BINARY_OPERATORS, BOOLEAN_NUMBER_BINARY_OPERATORS);
  var NUMBER_BINARY_OPERATORS = exports.NUMBER_BINARY_OPERATORS = ["-", "/", "%", "*", "**", "&", "|", ">>", ">>>", "<<", "^"];
  var BINARY_OPERATORS = exports.BINARY_OPERATORS = ["+"].concat(NUMBER_BINARY_OPERATORS, BOOLEAN_BINARY_OPERATORS);

  var BOOLEAN_UNARY_OPERATORS = exports.BOOLEAN_UNARY_OPERATORS = ["delete", "!"];
  var NUMBER_UNARY_OPERATORS = exports.NUMBER_UNARY_OPERATORS = ["+", "-", "++", "--", "~"];
  var STRING_UNARY_OPERATORS = exports.STRING_UNARY_OPERATORS = ["typeof"];
  var UNARY_OPERATORS = exports.UNARY_OPERATORS = ["void"].concat(BOOLEAN_UNARY_OPERATORS, NUMBER_UNARY_OPERATORS, STRING_UNARY_OPERATORS);

  var INHERIT_KEYS = exports.INHERIT_KEYS = {
    optional: ["typeAnnotation", "typeParameters", "returnType"],
    force: ["start", "loc", "end"]
  };

  var BLOCK_SCOPED_SYMBOL = exports.BLOCK_SCOPED_SYMBOL = (0, _for2.default)("var used to be block scoped");
  var NOT_LOCAL_BINDING = exports.NOT_LOCAL_BINDING = (0, _for2.default)("should not be considered a local binding");

/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.tokTypes = undefined;
  exports.parse = parse;

  var _parser = __webpack_require__(136);

  var _parser2 = _interopRequireDefault(_parser);

  __webpack_require__(780);

  __webpack_require__(779);

  __webpack_require__(777);

  __webpack_require__(775);

  __webpack_require__(778);

  __webpack_require__(776);

  __webpack_require__(774);

  var _types = __webpack_require__(137);

  __webpack_require__(393);

  __webpack_require__(227);

  var _flow = __webpack_require__(781);

  var _flow2 = _interopRequireDefault(_flow);

  var _jsx = __webpack_require__(782);

  var _jsx2 = _interopRequireDefault(_jsx);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  _parser.plugins.flow = _flow2.default;
  _parser.plugins.jsx = _jsx2.default;

  function parse(input, options) {
    return new _parser2.default(options, input).parse();
  }

  exports.tokTypes = _types.types;

/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer, global) {/*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
   * @license  MIT
   */
  /* eslint-disable no-proto */

  'use strict'

  var base64 = __webpack_require__(786)
  var ieee754 = __webpack_require__(450)
  var isArray = __webpack_require__(451)

  exports.Buffer = Buffer
  exports.SlowBuffer = SlowBuffer
  exports.INSPECT_MAX_BYTES = 50

  /**
   * If `Buffer.TYPED_ARRAY_SUPPORT`:
   *   === true    Use Uint8Array implementation (fastest)
   *   === false   Use Object implementation (most compatible, even IE6)
   *
   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
   * Opera 11.6+, iOS 4.2+.
   *
   * Due to various browser bugs, sometimes the Object implementation will be used even
   * when the browser supports typed arrays.
   *
   * Note:
   *
   *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
   *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
   *
   *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
   *
   *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
   *     incorrect length in some situations.

   * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
   * get the Object implementation, which is slower but behaves correctly.
   */
  Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
    ? global.TYPED_ARRAY_SUPPORT
    : typedArraySupport()

  /*
   * Export kMaxLength after typed array support is determined.
   */
  exports.kMaxLength = kMaxLength()

  function typedArraySupport () {
    try {
      var arr = new Uint8Array(1)
      arr.foo = function () { return 42 }
      return arr.foo() === 42 && // typed array instances can be augmented
          typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
          arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
    } catch (e) {
      return false
    }
  }

  function kMaxLength () {
    return Buffer.TYPED_ARRAY_SUPPORT
      ? 0x7fffffff
      : 0x3fffffff
  }

  function createBuffer (that, length) {
    if (kMaxLength() < length) {
      throw new RangeError('Invalid typed array length')
    }
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = new Uint8Array(length)
      that.__proto__ = Buffer.prototype
    } else {
      // Fallback: Return an object instance of the Buffer class
      if (that === null) {
        that = new Buffer(length)
      }
      that.length = length
    }

    return that
  }

  /**
   * The Buffer constructor returns instances of `Uint8Array` that have their
   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
   * and the `Uint8Array` methods. Square bracket notation works as expected -- it
   * returns a single octet.
   *
   * The `Uint8Array` prototype remains unmodified.
   */

  function Buffer (arg, encodingOrOffset, length) {
    if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
      return new Buffer(arg, encodingOrOffset, length)
    }

    // Common case.
    if (typeof arg === 'number') {
      if (typeof encodingOrOffset === 'string') {
        throw new Error(
          'If encoding is specified then the first argument must be a string'
        )
      }
      return allocUnsafe(this, arg)
    }
    return from(this, arg, encodingOrOffset, length)
  }

  Buffer.poolSize = 8192 // not used by this implementation

  // TODO: Legacy, not needed anymore. Remove in next major version.
  Buffer._augment = function (arr) {
    arr.__proto__ = Buffer.prototype
    return arr
  }

  function from (that, value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('"value" argument must not be a number')
    }

    if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
      return fromArrayBuffer(that, value, encodingOrOffset, length)
    }

    if (typeof value === 'string') {
      return fromString(that, value, encodingOrOffset)
    }

    return fromObject(that, value)
  }

  /**
   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
   * if value is a number.
   * Buffer.from(str[, encoding])
   * Buffer.from(array)
   * Buffer.from(buffer)
   * Buffer.from(arrayBuffer[, byteOffset[, length]])
   **/
  Buffer.from = function (value, encodingOrOffset, length) {
    return from(null, value, encodingOrOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    Buffer.prototype.__proto__ = Uint8Array.prototype
    Buffer.__proto__ = Uint8Array
    if (typeof Symbol !== 'undefined' && Symbol.species &&
        Buffer[Symbol.species] === Buffer) {
      // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
      Object.defineProperty(Buffer, Symbol.species, {
        value: null,
        configurable: true
      })
    }
  }

  function assertSize (size) {
    if (typeof size !== 'number') {
      throw new TypeError('"size" argument must be a number')
    }
  }

  function alloc (that, size, fill, encoding) {
    assertSize(size)
    if (size <= 0) {
      return createBuffer(that, size)
    }
    if (fill !== undefined) {
      // Only pay attention to encoding if it's a string. This
      // prevents accidentally sending in a number that would
      // be interpretted as a start offset.
      return typeof encoding === 'string'
        ? createBuffer(that, size).fill(fill, encoding)
        : createBuffer(that, size).fill(fill)
    }
    return createBuffer(that, size)
  }

  /**
   * Creates a new filled Buffer instance.
   * alloc(size[, fill[, encoding]])
   **/
  Buffer.alloc = function (size, fill, encoding) {
    return alloc(null, size, fill, encoding)
  }

  function allocUnsafe (that, size) {
    assertSize(size)
    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
    if (!Buffer.TYPED_ARRAY_SUPPORT) {
      for (var i = 0; i < size; i++) {
        that[i] = 0
      }
    }
    return that
  }

  /**
   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
   * */
  Buffer.allocUnsafe = function (size) {
    return allocUnsafe(null, size)
  }
  /**
   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
   */
  Buffer.allocUnsafeSlow = function (size) {
    return allocUnsafe(null, size)
  }

  function fromString (that, string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') {
      encoding = 'utf8'
    }

    if (!Buffer.isEncoding(encoding)) {
      throw new TypeError('"encoding" must be a valid string encoding')
    }

    var length = byteLength(string, encoding) | 0
    that = createBuffer(that, length)

    that.write(string, encoding)
    return that
  }

  function fromArrayLike (that, array) {
    var length = checked(array.length) | 0
    that = createBuffer(that, length)
    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255
    }
    return that
  }

  function fromArrayBuffer (that, array, byteOffset, length) {
    array.byteLength // this throws if `array` is not a valid ArrayBuffer

    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('\'offset\' is out of bounds')
    }

    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('\'length\' is out of bounds')
    }

    if (length === undefined) {
      array = new Uint8Array(array, byteOffset)
    } else {
      array = new Uint8Array(array, byteOffset, length)
    }

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = array
      that.__proto__ = Buffer.prototype
    } else {
      // Fallback: Return an object instance of the Buffer class
      that = fromArrayLike(that, array)
    }
    return that
  }

  function fromObject (that, obj) {
    if (Buffer.isBuffer(obj)) {
      var len = checked(obj.length) | 0
      that = createBuffer(that, len)

      if (that.length === 0) {
        return that
      }

      obj.copy(that, 0, 0, len)
      return that
    }

    if (obj) {
      if ((typeof ArrayBuffer !== 'undefined' &&
          obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
        if (typeof obj.length !== 'number' || isnan(obj.length)) {
          return createBuffer(that, 0)
        }
        return fromArrayLike(that, obj)
      }

      if (obj.type === 'Buffer' && isArray(obj.data)) {
        return fromArrayLike(that, obj.data)
      }
    }

    throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
  }

  function checked (length) {
    // Note: cannot use `length < kMaxLength` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= kMaxLength()) {
      throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                           'size: 0x' + kMaxLength().toString(16) + ' bytes')
    }
    return length | 0
  }

  function SlowBuffer (length) {
    if (+length != length) { // eslint-disable-line eqeqeq
      length = 0
    }
    return Buffer.alloc(+length)
  }

  Buffer.isBuffer = function isBuffer (b) {
    return !!(b != null && b._isBuffer)
  }

  Buffer.compare = function compare (a, b) {
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
      throw new TypeError('Arguments must be Buffers')
    }

    if (a === b) return 0

    var x = a.length
    var y = b.length

    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i]
        y = b[i]
        break
      }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  }

  Buffer.isEncoding = function isEncoding (encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'binary':
      case 'base64':
      case 'raw':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true
      default:
        return false
    }
  }

  Buffer.concat = function concat (list, length) {
    if (!isArray(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }

    if (list.length === 0) {
      return Buffer.alloc(0)
    }

    var i
    if (length === undefined) {
      length = 0
      for (i = 0; i < list.length; i++) {
        length += list[i].length
      }
    }

    var buffer = Buffer.allocUnsafe(length)
    var pos = 0
    for (i = 0; i < list.length; i++) {
      var buf = list[i]
      if (!Buffer.isBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }
      buf.copy(buffer, pos)
      pos += buf.length
    }
    return buffer
  }

  function byteLength (string, encoding) {
    if (Buffer.isBuffer(string)) {
      return string.length
    }
    if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
        (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
      return string.byteLength
    }
    if (typeof string !== 'string') {
      string = '' + string
    }

    var len = string.length
    if (len === 0) return 0

    // Use a for loop to avoid recursion
    var loweredCase = false
    for (;;) {
      switch (encoding) {
        case 'ascii':
        case 'binary':
        // Deprecated
        case 'raw':
        case 'raws':
          return len
        case 'utf8':
        case 'utf-8':
        case undefined:
          return utf8ToBytes(string).length
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2
        case 'hex':
          return len >>> 1
        case 'base64':
          return base64ToBytes(string).length
        default:
          if (loweredCase) return utf8ToBytes(string).length // assume utf8
          encoding = ('' + encoding).toLowerCase()
          loweredCase = true
      }
    }
  }
  Buffer.byteLength = byteLength

  function slowToString (encoding, start, end) {
    var loweredCase = false

    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.

    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) {
      start = 0
    }
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) {
      return ''
    }

    if (end === undefined || end > this.length) {
      end = this.length
    }

    if (end <= 0) {
      return ''
    }

    // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0
    start >>>= 0

    if (end <= start) {
      return ''
    }

    if (!encoding) encoding = 'utf8'

    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this, start, end)

        case 'utf8':
        case 'utf-8':
          return utf8Slice(this, start, end)

        case 'ascii':
          return asciiSlice(this, start, end)

        case 'binary':
          return binarySlice(this, start, end)

        case 'base64':
          return base64Slice(this, start, end)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this, start, end)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = (encoding + '').toLowerCase()
          loweredCase = true
      }
    }
  }

  // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
  // Buffer instances.
  Buffer.prototype._isBuffer = true

  function swap (b, n, m) {
    var i = b[n]
    b[n] = b[m]
    b[m] = i
  }

  Buffer.prototype.swap16 = function swap16 () {
    var len = this.length
    if (len % 2 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 16-bits')
    }
    for (var i = 0; i < len; i += 2) {
      swap(this, i, i + 1)
    }
    return this
  }

  Buffer.prototype.swap32 = function swap32 () {
    var len = this.length
    if (len % 4 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 32-bits')
    }
    for (var i = 0; i < len; i += 4) {
      swap(this, i, i + 3)
      swap(this, i + 1, i + 2)
    }
    return this
  }

  Buffer.prototype.toString = function toString () {
    var length = this.length | 0
    if (length === 0) return ''
    if (arguments.length === 0) return utf8Slice(this, 0, length)
    return slowToString.apply(this, arguments)
  }

  Buffer.prototype.equals = function equals (b) {
    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
    if (this === b) return true
    return Buffer.compare(this, b) === 0
  }

  Buffer.prototype.inspect = function inspect () {
    var str = ''
    var max = exports.INSPECT_MAX_BYTES
    if (this.length > 0) {
      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
      if (this.length > max) str += ' ... '
    }
    return '<Buffer ' + str + '>'
  }

  Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
    if (!Buffer.isBuffer(target)) {
      throw new TypeError('Argument must be a Buffer')
    }

    if (start === undefined) {
      start = 0
    }
    if (end === undefined) {
      end = target ? target.length : 0
    }
    if (thisStart === undefined) {
      thisStart = 0
    }
    if (thisEnd === undefined) {
      thisEnd = this.length
    }

    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError('out of range index')
    }

    if (thisStart >= thisEnd && start >= end) {
      return 0
    }
    if (thisStart >= thisEnd) {
      return -1
    }
    if (start >= end) {
      return 1
    }

    start >>>= 0
    end >>>= 0
    thisStart >>>= 0
    thisEnd >>>= 0

    if (this === target) return 0

    var x = thisEnd - thisStart
    var y = end - start
    var len = Math.min(x, y)

    var thisCopy = this.slice(thisStart, thisEnd)
    var targetCopy = target.slice(start, end)

    for (var i = 0; i < len; ++i) {
      if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i]
        y = targetCopy[i]
        break
      }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  }

  function arrayIndexOf (arr, val, byteOffset, encoding) {
    var indexSize = 1
    var arrLength = arr.length
    var valLength = val.length

    if (encoding !== undefined) {
      encoding = String(encoding).toLowerCase()
      if (encoding === 'ucs2' || encoding === 'ucs-2' ||
          encoding === 'utf16le' || encoding === 'utf-16le') {
        if (arr.length < 2 || val.length < 2) {
          return -1
        }
        indexSize = 2
        arrLength /= 2
        valLength /= 2
        byteOffset /= 2
      }
    }

    function read (buf, i) {
      if (indexSize === 1) {
        return buf[i]
      } else {
        return buf.readUInt16BE(i * indexSize)
      }
    }

    var foundIndex = -1
    for (var i = 0; byteOffset + i < arrLength; i++) {
      if (read(arr, byteOffset + i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return (byteOffset + foundIndex) * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
    return -1
  }

  Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
    if (typeof byteOffset === 'string') {
      encoding = byteOffset
      byteOffset = 0
    } else if (byteOffset > 0x7fffffff) {
      byteOffset = 0x7fffffff
    } else if (byteOffset < -0x80000000) {
      byteOffset = -0x80000000
    }
    byteOffset >>= 0

    if (this.length === 0) return -1
    if (byteOffset >= this.length) return -1

    // Negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

    if (typeof val === 'string') {
      val = Buffer.from(val, encoding)
    }

    if (Buffer.isBuffer(val)) {
      // special case: looking for empty string/buffer always fails
      if (val.length === 0) {
        return -1
      }
      return arrayIndexOf(this, val, byteOffset, encoding)
    }
    if (typeof val === 'number') {
      if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
        return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
      }
      return arrayIndexOf(this, [ val ], byteOffset, encoding)
    }

    throw new TypeError('val must be string, number or Buffer')
  }

  Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1
  }

  function hexWrite (buf, string, offset, length) {
    offset = Number(offset) || 0
    var remaining = buf.length - offset
    if (!length) {
      length = remaining
    } else {
      length = Number(length)
      if (length > remaining) {
        length = remaining
      }
    }

    // must be an even number of digits
    var strLen = string.length
    if (strLen % 2 !== 0) throw new Error('Invalid hex string')

    if (length > strLen / 2) {
      length = strLen / 2
    }
    for (var i = 0; i < length; i++) {
      var parsed = parseInt(string.substr(i * 2, 2), 16)
      if (isNaN(parsed)) return i
      buf[offset + i] = parsed
    }
    return i
  }

  function utf8Write (buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
  }

  function asciiWrite (buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length)
  }

  function binaryWrite (buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length)
  }

  function base64Write (buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length)
  }

  function ucs2Write (buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
  }

  Buffer.prototype.write = function write (string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
      encoding = 'utf8'
      length = this.length
      offset = 0
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset
      length = this.length
      offset = 0
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
      offset = offset | 0
      if (isFinite(length)) {
        length = length | 0
        if (encoding === undefined) encoding = 'utf8'
      } else {
        encoding = length
        length = undefined
      }
    // legacy write(string, encoding, offset, length) - remove in v0.13
    } else {
      throw new Error(
        'Buffer.write(string, encoding, offset[, length]) is no longer supported'
      )
    }

    var remaining = this.length - offset
    if (length === undefined || length > remaining) length = remaining

    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
      throw new RangeError('Attempt to write outside buffer bounds')
    }

    if (!encoding) encoding = 'utf8'

    var loweredCase = false
    for (;;) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this, string, offset, length)

        case 'utf8':
        case 'utf-8':
          return utf8Write(this, string, offset, length)

        case 'ascii':
          return asciiWrite(this, string, offset, length)

        case 'binary':
          return binaryWrite(this, string, offset, length)

        case 'base64':
          // Warning: maxLength not taken into account in base64Write
          return base64Write(this, string, offset, length)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this, string, offset, length)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = ('' + encoding).toLowerCase()
          loweredCase = true
      }
    }
  }

  Buffer.prototype.toJSON = function toJSON () {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    }
  }

  function base64Slice (buf, start, end) {
    if (start === 0 && end === buf.length) {
      return base64.fromByteArray(buf)
    } else {
      return base64.fromByteArray(buf.slice(start, end))
    }
  }

  function utf8Slice (buf, start, end) {
    end = Math.min(buf.length, end)
    var res = []

    var i = start
    while (i < end) {
      var firstByte = buf[i]
      var codePoint = null
      var bytesPerSequence = (firstByte > 0xEF) ? 4
        : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
        : 1

      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint

        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte
            }
            break
          case 2:
            secondByte = buf[i + 1]
            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint
              }
            }
            break
          case 3:
            secondByte = buf[i + 1]
            thirdByte = buf[i + 2]
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint
              }
            }
            break
          case 4:
            secondByte = buf[i + 1]
            thirdByte = buf[i + 2]
            fourthByte = buf[i + 3]
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint
              }
            }
        }
      }

      if (codePoint === null) {
        // we did not generate a valid codePoint so insert a
        // replacement char (U+FFFD) and advance only 1 byte
        codePoint = 0xFFFD
        bytesPerSequence = 1
      } else if (codePoint > 0xFFFF) {
        // encode to utf16 (surrogate pair dance)
        codePoint -= 0x10000
        res.push(codePoint >>> 10 & 0x3FF | 0xD800)
        codePoint = 0xDC00 | codePoint & 0x3FF
      }

      res.push(codePoint)
      i += bytesPerSequence
    }

    return decodeCodePointsArray(res)
  }

  // Based on http://stackoverflow.com/a/22747272/680742, the browser with
  // the lowest limit is Chrome, with 0x10000 args.
  // We go 1 magnitude less, for safety
  var MAX_ARGUMENTS_LENGTH = 0x1000

  function decodeCodePointsArray (codePoints) {
    var len = codePoints.length
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    }

    // Decode in chunks to avoid "call stack size exceeded".
    var res = ''
    var i = 0
    while (i < len) {
      res += String.fromCharCode.apply(
        String,
        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
      )
    }
    return res
  }

  function asciiSlice (buf, start, end) {
    var ret = ''
    end = Math.min(buf.length, end)

    for (var i = start; i < end; i++) {
      ret += String.fromCharCode(buf[i] & 0x7F)
    }
    return ret
  }

  function binarySlice (buf, start, end) {
    var ret = ''
    end = Math.min(buf.length, end)

    for (var i = start; i < end; i++) {
      ret += String.fromCharCode(buf[i])
    }
    return ret
  }

  function hexSlice (buf, start, end) {
    var len = buf.length

    if (!start || start < 0) start = 0
    if (!end || end < 0 || end > len) end = len

    var out = ''
    for (var i = start; i < end; i++) {
      out += toHex(buf[i])
    }
    return out
  }

  function utf16leSlice (buf, start, end) {
    var bytes = buf.slice(start, end)
    var res = ''
    for (var i = 0; i < bytes.length; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
    }
    return res
  }

  Buffer.prototype.slice = function slice (start, end) {
    var len = this.length
    start = ~~start
    end = end === undefined ? len : ~~end

    if (start < 0) {
      start += len
      if (start < 0) start = 0
    } else if (start > len) {
      start = len
    }

    if (end < 0) {
      end += len
      if (end < 0) end = 0
    } else if (end > len) {
      end = len
    }

    if (end < start) end = start

    var newBuf
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      newBuf = this.subarray(start, end)
      newBuf.__proto__ = Buffer.prototype
    } else {
      var sliceLen = end - start
      newBuf = new Buffer(sliceLen, undefined)
      for (var i = 0; i < sliceLen; i++) {
        newBuf[i] = this[i + start]
      }
    }

    return newBuf
  }

  /*
   * Need to make sure that buffer isn't trying to write out of bounds.
   */
  function checkOffset (offset, ext, length) {
    if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
  }

  Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
    offset = offset | 0
    byteLength = byteLength | 0
    if (!noAssert) checkOffset(offset, byteLength, this.length)

    var val = this[offset]
    var mul = 1
    var i = 0
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul
    }

    return val
  }

  Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
    offset = offset | 0
    byteLength = byteLength | 0
    if (!noAssert) {
      checkOffset(offset, byteLength, this.length)
    }

    var val = this[offset + --byteLength]
    var mul = 1
    while (byteLength > 0 && (mul *= 0x100)) {
      val += this[offset + --byteLength] * mul
    }

    return val
  }

  Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length)
    return this[offset]
  }

  Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length)
    return this[offset] | (this[offset + 1] << 8)
  }

  Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length)
    return (this[offset] << 8) | this[offset + 1]
  }

  Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length)

    return ((this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16)) +
        (this[offset + 3] * 0x1000000)
  }

  Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length)

    return (this[offset] * 0x1000000) +
      ((this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      this[offset + 3])
  }

  Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
    offset = offset | 0
    byteLength = byteLength | 0
    if (!noAssert) checkOffset(offset, byteLength, this.length)

    var val = this[offset]
    var mul = 1
    var i = 0
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul
    }
    mul *= 0x80

    if (val >= mul) val -= Math.pow(2, 8 * byteLength)

    return val
  }

  Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
    offset = offset | 0
    byteLength = byteLength | 0
    if (!noAssert) checkOffset(offset, byteLength, this.length)

    var i = byteLength
    var mul = 1
    var val = this[offset + --i]
    while (i > 0 && (mul *= 0x100)) {
      val += this[offset + --i] * mul
    }
    mul *= 0x80

    if (val >= mul) val -= Math.pow(2, 8 * byteLength)

    return val
  }

  Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length)
    if (!(this[offset] & 0x80)) return (this[offset])
    return ((0xff - this[offset] + 1) * -1)
  }

  Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length)
    var val = this[offset] | (this[offset + 1] << 8)
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  }

  Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length)
    var val = this[offset + 1] | (this[offset] << 8)
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  }

  Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length)

    return (this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16) |
      (this[offset + 3] << 24)
  }

  Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length)

    return (this[offset] << 24) |
      (this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      (this[offset + 3])
  }

  Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length)
    return ieee754.read(this, offset, true, 23, 4)
  }

  Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length)
    return ieee754.read(this, offset, false, 23, 4)
  }

  Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length)
    return ieee754.read(this, offset, true, 52, 8)
  }

  Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length)
    return ieee754.read(this, offset, false, 52, 8)
  }

  function checkInt (buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
  }

  Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset | 0
    byteLength = byteLength | 0
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1
      checkInt(this, value, offset, byteLength, maxBytes, 0)
    }

    var mul = 1
    var i = 0
    this[offset] = value & 0xFF
    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF
    }

    return offset + byteLength
  }

  Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset | 0
    byteLength = byteLength | 0
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1
      checkInt(this, value, offset, byteLength, maxBytes, 0)
    }

    var i = byteLength - 1
    var mul = 1
    this[offset + i] = value & 0xFF
    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF
    }

    return offset + byteLength
  }

  Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
    this[offset] = (value & 0xff)
    return offset + 1
  }

  function objectWriteUInt16 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffff + value + 1
    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
      buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
        (littleEndian ? i : 1 - i) * 8
    }
  }

  Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff)
      this[offset + 1] = (value >>> 8)
    } else {
      objectWriteUInt16(this, value, offset, true)
    }
    return offset + 2
  }

  Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8)
      this[offset + 1] = (value & 0xff)
    } else {
      objectWriteUInt16(this, value, offset, false)
    }
    return offset + 2
  }

  function objectWriteUInt32 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffffffff + value + 1
    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
      buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
    }
  }

  Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset + 3] = (value >>> 24)
      this[offset + 2] = (value >>> 16)
      this[offset + 1] = (value >>> 8)
      this[offset] = (value & 0xff)
    } else {
      objectWriteUInt32(this, value, offset, true)
    }
    return offset + 4
  }

  Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24)
      this[offset + 1] = (value >>> 16)
      this[offset + 2] = (value >>> 8)
      this[offset + 3] = (value & 0xff)
    } else {
      objectWriteUInt32(this, value, offset, false)
    }
    return offset + 4
  }

  Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1)

      checkInt(this, value, offset, byteLength, limit - 1, -limit)
    }

    var i = 0
    var mul = 1
    var sub = 0
    this[offset] = value & 0xFF
    while (++i < byteLength && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
        sub = 1
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
    }

    return offset + byteLength
  }

  Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1)

      checkInt(this, value, offset, byteLength, limit - 1, -limit)
    }

    var i = byteLength - 1
    var mul = 1
    var sub = 0
    this[offset + i] = value & 0xFF
    while (--i >= 0 && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
        sub = 1
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
    }

    return offset + byteLength
  }

  Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
    if (value < 0) value = 0xff + value + 1
    this[offset] = (value & 0xff)
    return offset + 1
  }

  Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff)
      this[offset + 1] = (value >>> 8)
    } else {
      objectWriteUInt16(this, value, offset, true)
    }
    return offset + 2
  }

  Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8)
      this[offset + 1] = (value & 0xff)
    } else {
      objectWriteUInt16(this, value, offset, false)
    }
    return offset + 2
  }

  Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff)
      this[offset + 1] = (value >>> 8)
      this[offset + 2] = (value >>> 16)
      this[offset + 3] = (value >>> 24)
    } else {
      objectWriteUInt32(this, value, offset, true)
    }
    return offset + 4
  }

  Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
    if (value < 0) value = 0xffffffff + value + 1
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24)
      this[offset + 1] = (value >>> 16)
      this[offset + 2] = (value >>> 8)
      this[offset + 3] = (value & 0xff)
    } else {
      objectWriteUInt32(this, value, offset, false)
    }
    return offset + 4
  }

  function checkIEEE754 (buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
    if (offset < 0) throw new RangeError('Index out of range')
  }

  function writeFloat (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
    }
    ieee754.write(buf, value, offset, littleEndian, 23, 4)
    return offset + 4
  }

  Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert)
  }

  Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert)
  }

  function writeDouble (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
    }
    ieee754.write(buf, value, offset, littleEndian, 52, 8)
    return offset + 8
  }

  Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert)
  }

  Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert)
  }

  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
  Buffer.prototype.copy = function copy (target, targetStart, start, end) {
    if (!start) start = 0
    if (!end && end !== 0) end = this.length
    if (targetStart >= target.length) targetStart = target.length
    if (!targetStart) targetStart = 0
    if (end > 0 && end < start) end = start

    // Copy 0 bytes; we're done
    if (end === start) return 0
    if (target.length === 0 || this.length === 0) return 0

    // Fatal error conditions
    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds')
    }
    if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
    if (end < 0) throw new RangeError('sourceEnd out of bounds')

    // Are we oob?
    if (end > this.length) end = this.length
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start
    }

    var len = end - start
    var i

    if (this === target && start < targetStart && targetStart < end) {
      // descending copy from end
      for (i = len - 1; i >= 0; i--) {
        target[i + targetStart] = this[i + start]
      }
    } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
      // ascending copy from start
      for (i = 0; i < len; i++) {
        target[i + targetStart] = this[i + start]
      }
    } else {
      Uint8Array.prototype.set.call(
        target,
        this.subarray(start, start + len),
        targetStart
      )
    }

    return len
  }

  // Usage:
  //    buffer.fill(number[, offset[, end]])
  //    buffer.fill(buffer[, offset[, end]])
  //    buffer.fill(string[, offset[, end]][, encoding])
  Buffer.prototype.fill = function fill (val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
      if (typeof start === 'string') {
        encoding = start
        start = 0
        end = this.length
      } else if (typeof end === 'string') {
        encoding = end
        end = this.length
      }
      if (val.length === 1) {
        var code = val.charCodeAt(0)
        if (code < 256) {
          val = code
        }
      }
      if (encoding !== undefined && typeof encoding !== 'string') {
        throw new TypeError('encoding must be a string')
      }
      if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding)
      }
    } else if (typeof val === 'number') {
      val = val & 255
    }

    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError('Out of range index')
    }

    if (end <= start) {
      return this
    }

    start = start >>> 0
    end = end === undefined ? this.length : end >>> 0

    if (!val) val = 0

    var i
    if (typeof val === 'number') {
      for (i = start; i < end; i++) {
        this[i] = val
      }
    } else {
      var bytes = Buffer.isBuffer(val)
        ? val
        : utf8ToBytes(new Buffer(val, encoding).toString())
      var len = bytes.length
      for (i = 0; i < end - start; i++) {
        this[i + start] = bytes[i % len]
      }
    }

    return this
  }

  // HELPER FUNCTIONS
  // ================

  var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

  function base64clean (str) {
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = stringtrim(str).replace(INVALID_BASE64_RE, '')
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return ''
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while (str.length % 4 !== 0) {
      str = str + '='
    }
    return str
  }

  function stringtrim (str) {
    if (str.trim) return str.trim()
    return str.replace(/^\s+|\s+$/g, '')
  }

  function toHex (n) {
    if (n < 16) return '0' + n.toString(16)
    return n.toString(16)
  }

  function utf8ToBytes (string, units) {
    units = units || Infinity
    var codePoint
    var length = string.length
    var leadSurrogate = null
    var bytes = []

    for (var i = 0; i < length; i++) {
      codePoint = string.charCodeAt(i)

      // is surrogate component
      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        // last char was a lead
        if (!leadSurrogate) {
          // no lead yet
          if (codePoint > 0xDBFF) {
            // unexpected trail
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
            continue
          } else if (i + 1 === length) {
            // unpaired lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
            continue
          }

          // valid lead
          leadSurrogate = codePoint

          continue
        }

        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          leadSurrogate = codePoint
          continue
        }

        // valid surrogate pair
        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
      } else if (leadSurrogate) {
        // valid bmp char, but last char was a lead
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
      }

      leadSurrogate = null

      // encode utf8
      if (codePoint < 0x80) {
        if ((units -= 1) < 0) break
        bytes.push(codePoint)
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) break
        bytes.push(
          codePoint >> 0x6 | 0xC0,
          codePoint & 0x3F | 0x80
        )
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) break
        bytes.push(
          codePoint >> 0xC | 0xE0,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        )
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) break
        bytes.push(
          codePoint >> 0x12 | 0xF0,
          codePoint >> 0xC & 0x3F | 0x80,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        )
      } else {
        throw new Error('Invalid code point')
      }
    }

    return bytes
  }

  function asciiToBytes (str) {
    var byteArray = []
    for (var i = 0; i < str.length; i++) {
      // Node's code seems to be doing this and not & 0x7F..
      byteArray.push(str.charCodeAt(i) & 0xFF)
    }
    return byteArray
  }

  function utf16leToBytes (str, units) {
    var c, hi, lo
    var byteArray = []
    for (var i = 0; i < str.length; i++) {
      if ((units -= 2) < 0) break

      c = str.charCodeAt(i)
      hi = c >> 8
      lo = c % 256
      byteArray.push(lo)
      byteArray.push(hi)
    }

    return byteArray
  }

  function base64ToBytes (str) {
    return base64.toByteArray(base64clean(str))
  }

  function blitBuffer (src, dst, offset, length) {
    for (var i = 0; i < length; i++) {
      if ((i + offset >= dst.length) || (i >= src.length)) break
      dst[i + offset] = src[i]
    }
    return i
  }

  function isnan (val) {
    return val !== val // eslint-disable-line no-self-compare
  }

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(115).Buffer, (function() { return this; }())))

/***/ },
/* 292 */
/***/ function(module, exports) {

  module.exports = function(it, Constructor, name, forbiddenField){
    if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
      throw TypeError(name + ': incorrect invocation!');
    } return it;
  };

/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

  // 0 -> Array#forEach
  // 1 -> Array#map
  // 2 -> Array#filter
  // 3 -> Array#some
  // 4 -> Array#every
  // 5 -> Array#find
  // 6 -> Array#findIndex
  var ctx      = __webpack_require__(205)
    , IObject  = __webpack_require__(296)
    , toObject = __webpack_require__(208)
    , toLength = __webpack_require__(305)
    , asc      = __webpack_require__(817);
  module.exports = function(TYPE, $create){
    var IS_MAP        = TYPE == 1
      , IS_FILTER     = TYPE == 2
      , IS_SOME       = TYPE == 3
      , IS_EVERY      = TYPE == 4
      , IS_FIND_INDEX = TYPE == 6
      , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX
      , create        = $create || asc;
    return function($this, callbackfn, that){
      var O      = toObject($this)
        , self   = IObject(O)
        , f      = ctx(callbackfn, that, 3)
        , length = toLength(self.length)
        , index  = 0
        , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined
        , val, res;
      for(;length > index; index++)if(NO_HOLES || index in self){
        val = self[index];
        res = f(val, index, O);
        if(TYPE){
          if(IS_MAP)result[index] = res;            // map
          else if(res)switch(TYPE){
            case 3: return true;                    // some
            case 5: return val;                     // find
            case 6: return index;                   // findIndex
            case 2: result.push(val);               // filter
          } else if(IS_EVERY)return false;          // every
        }
      }
      return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
    };
  };

/***/ },
/* 294 */
/***/ function(module, exports) {

  var toString = {}.toString;

  module.exports = function(it){
    return toString.call(it).slice(8, -1);
  };

/***/ },
/* 295 */
/***/ function(module, exports) {

  // IE 8- don't enum bug keys
  module.exports = (
    'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
  ).split(',');

/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

  // fallback for non-array-like ES3 and non-enumerable old V8 strings
  var cof = __webpack_require__(294);
  module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
    return cof(it) == 'String' ? it.split('') : Object(it);
  };

/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var LIBRARY        = __webpack_require__(298)
    , $export        = __webpack_require__(139)
    , redefine       = __webpack_require__(301)
    , hide           = __webpack_require__(150)
    , has            = __webpack_require__(149)
    , Iterators      = __webpack_require__(206)
    , $iterCreate    = __webpack_require__(825)
    , setToStringTag = __webpack_require__(234)
    , getPrototypeOf = __webpack_require__(403)
    , ITERATOR       = __webpack_require__(129)('iterator')
    , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
    , FF_ITERATOR    = '@@iterator'
    , KEYS           = 'keys'
    , VALUES         = 'values';

  var returnThis = function(){ return this; };

  module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
    $iterCreate(Constructor, NAME, next);
    var getMethod = function(kind){
      if(!BUGGY && kind in proto)return proto[kind];
      switch(kind){
        case KEYS: return function keys(){ return new Constructor(this, kind); };
        case VALUES: return function values(){ return new Constructor(this, kind); };
      } return function entries(){ return new Constructor(this, kind); };
    };
    var TAG        = NAME + ' Iterator'
      , DEF_VALUES = DEFAULT == VALUES
      , VALUES_BUG = false
      , proto      = Base.prototype
      , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
      , $default   = $native || getMethod(DEFAULT)
      , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
      , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
      , methods, key, IteratorPrototype;
    // Fix native
    if($anyNative){
      IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
      if(IteratorPrototype !== Object.prototype){
        // Set @@toStringTag to native iterators
        setToStringTag(IteratorPrototype, TAG, true);
        // fix for some old engines
        if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
      }
    }
    // fix Array#{values, @@iterator}.name in V8 / FF
    if(DEF_VALUES && $native && $native.name !== VALUES){
      VALUES_BUG = true;
      $default = function values(){ return $native.call(this); };
    }
    // Define iterator
    if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
      hide(proto, ITERATOR, $default);
    }
    // Plug for library
    Iterators[NAME] = $default;
    Iterators[TAG]  = returnThis;
    if(DEFAULT){
      methods = {
        values:  DEF_VALUES ? $default : getMethod(VALUES),
        keys:    IS_SET     ? $default : getMethod(KEYS),
        entries: $entries
      };
      if(FORCED)for(key in methods){
        if(!(key in proto))redefine(proto, key, methods[key]);
      } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
    }
    return methods;
  };

/***/ },
/* 298 */
/***/ function(module, exports) {

  module.exports = true;

/***/ },
/* 299 */
/***/ function(module, exports) {

  exports.f = Object.getOwnPropertySymbols;

/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

  var hide = __webpack_require__(150);
  module.exports = function(target, src, safe){
    for(var key in src){
      if(safe && target[key])target[key] = src[key];
      else hide(target, key, src[key]);
    } return target;
  };

/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = __webpack_require__(150);

/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

  var shared = __webpack_require__(303)('keys')
    , uid    = __webpack_require__(235);
  module.exports = function(key){
    return shared[key] || (shared[key] = uid(key));
  };

/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

  var global = __webpack_require__(140)
    , SHARED = '__core-js_shared__'
    , store  = global[SHARED] || (global[SHARED] = {});
  module.exports = function(key){
    return store[key] || (store[key] = {});
  };

/***/ },
/* 304 */
/***/ function(module, exports) {

  // 7.1.4 ToInteger
  var ceil  = Math.ceil
    , floor = Math.floor;
  module.exports = function(it){
    return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
  };

/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

  // 7.1.15 ToLength
  var toInteger = __webpack_require__(304)
    , min       = Math.min;
  module.exports = function(it){
    return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
  };

/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

  // 7.1.1 ToPrimitive(input [, PreferredType])
  var isObject = __webpack_require__(151);
  // instead of the ES6 spec version, we didn't implement @@toPrimitive case
  // and the second argument - flag - preferred type is a string
  module.exports = function(it, S){
    if(!isObject(it))return it;
    var fn, val;
    if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
    if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
    if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
    throw TypeError("Can't convert object to primitive value");
  };

/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

  var global         = __webpack_require__(140)
    , core           = __webpack_require__(110)
    , LIBRARY        = __webpack_require__(298)
    , wksExt         = __webpack_require__(308)
    , defineProperty = __webpack_require__(141).f;
  module.exports = function(name){
    var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
    if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
  };

/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

  exports.f = __webpack_require__(129);

/***/ },
/* 309 */
/***/ function(module, exports) {

  

/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $at  = __webpack_require__(831)(true);

  // 21.1.3.27 String.prototype[@@iterator]()
  __webpack_require__(297)(String, 'String', function(iterated){
    this._t = String(iterated); // target
    this._i = 0;                // next index
  // 21.1.5.2.1 %StringIteratorPrototype%.next()
  }, function(){
    var O     = this._t
      , index = this._i
      , point;
    if(index >= O.length)return {value: undefined, done: true};
    point = $at(O, index);
    this._i += point.length;
    return {value: point, done: false};
  });

/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // ECMAScript 6 symbols shim
  var global         = __webpack_require__(140)
    , has            = __webpack_require__(149)
    , DESCRIPTORS    = __webpack_require__(138)
    , $export        = __webpack_require__(139)
    , redefine       = __webpack_require__(301)
    , META           = __webpack_require__(207).KEY
    , $fails         = __webpack_require__(174)
    , shared         = __webpack_require__(303)
    , setToStringTag = __webpack_require__(234)
    , uid            = __webpack_require__(235)
    , wks            = __webpack_require__(129)
    , wksExt         = __webpack_require__(308)
    , wksDefine      = __webpack_require__(307)
    , keyOf          = __webpack_require__(826)
    , enumKeys       = __webpack_require__(821)
    , isArray        = __webpack_require__(398)
    , anObject       = __webpack_require__(148)
    , toIObject      = __webpack_require__(175)
    , toPrimitive    = __webpack_require__(306)
    , createDesc     = __webpack_require__(233)
    , _create        = __webpack_require__(231)
    , gOPNExt        = __webpack_require__(828)
    , $GOPD          = __webpack_require__(401)
    , $DP            = __webpack_require__(141)
    , $keys          = __webpack_require__(192)
    , gOPD           = $GOPD.f
    , dP             = $DP.f
    , gOPN           = gOPNExt.f
    , $Symbol        = global.Symbol
    , $JSON          = global.JSON
    , _stringify     = $JSON && $JSON.stringify
    , PROTOTYPE      = 'prototype'
    , HIDDEN         = wks('_hidden')
    , TO_PRIMITIVE   = wks('toPrimitive')
    , isEnum         = {}.propertyIsEnumerable
    , SymbolRegistry = shared('symbol-registry')
    , AllSymbols     = shared('symbols')
    , OPSymbols      = shared('op-symbols')
    , ObjectProto    = Object[PROTOTYPE]
    , USE_NATIVE     = typeof $Symbol == 'function'
    , QObject        = global.QObject;
  // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
  var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

  // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
  var setSymbolDesc = DESCRIPTORS && $fails(function(){
    return _create(dP({}, 'a', {
      get: function(){ return dP(this, 'a', {value: 7}).a; }
    })).a != 7;
  }) ? function(it, key, D){
    var protoDesc = gOPD(ObjectProto, key);
    if(protoDesc)delete ObjectProto[key];
    dP(it, key, D);
    if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
  } : dP;

  var wrap = function(tag){
    var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
    sym._k = tag;
    return sym;
  };

  var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
    return typeof it == 'symbol';
  } : function(it){
    return it instanceof $Symbol;
  };

  var $defineProperty = function defineProperty(it, key, D){
    if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
    anObject(it);
    key = toPrimitive(key, true);
    anObject(D);
    if(has(AllSymbols, key)){
      if(!D.enumerable){
        if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
        it[HIDDEN][key] = true;
      } else {
        if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
        D = _create(D, {enumerable: createDesc(0, false)});
      } return setSymbolDesc(it, key, D);
    } return dP(it, key, D);
  };
  var $defineProperties = function defineProperties(it, P){
    anObject(it);
    var keys = enumKeys(P = toIObject(P))
      , i    = 0
      , l = keys.length
      , key;
    while(l > i)$defineProperty(it, key = keys[i++], P[key]);
    return it;
  };
  var $create = function create(it, P){
    return P === undefined ? _create(it) : $defineProperties(_create(it), P);
  };
  var $propertyIsEnumerable = function propertyIsEnumerable(key){
    var E = isEnum.call(this, key = toPrimitive(key, true));
    if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
    return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
  };
  var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
    it  = toIObject(it);
    key = toPrimitive(key, true);
    if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
    var D = gOPD(it, key);
    if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
    return D;
  };
  var $getOwnPropertyNames = function getOwnPropertyNames(it){
    var names  = gOPN(toIObject(it))
      , result = []
      , i      = 0
      , key;
    while(names.length > i){
      if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
    } return result;
  };
  var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
    var IS_OP  = it === ObjectProto
      , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
      , result = []
      , i      = 0
      , key;
    while(names.length > i){
      if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
    } return result;
  };

  // 19.4.1.1 Symbol([description])
  if(!USE_NATIVE){
    $Symbol = function Symbol(){
      if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
      var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
      var $set = function(value){
        if(this === ObjectProto)$set.call(OPSymbols, value);
        if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
        setSymbolDesc(this, tag, createDesc(1, value));
      };
      if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
      return wrap(tag);
    };
    redefine($Symbol[PROTOTYPE], 'toString', function toString(){
      return this._k;
    });

    $GOPD.f = $getOwnPropertyDescriptor;
    $DP.f   = $defineProperty;
    __webpack_require__(402).f = gOPNExt.f = $getOwnPropertyNames;
    __webpack_require__(232).f  = $propertyIsEnumerable;
    __webpack_require__(299).f = $getOwnPropertySymbols;

    if(DESCRIPTORS && !__webpack_require__(298)){
      redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
    }

    wksExt.f = function(name){
      return wrap(wks(name));
    }
  }

  $export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});

  for(var symbols = (
    // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
    'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
  ).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);

  for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);

  $export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
    // 19.4.2.1 Symbol.for(key)
    'for': function(key){
      return has(SymbolRegistry, key += '')
        ? SymbolRegistry[key]
        : SymbolRegistry[key] = $Symbol(key);
    },
    // 19.4.2.5 Symbol.keyFor(sym)
    keyFor: function keyFor(key){
      if(isSymbol(key))return keyOf(SymbolRegistry, key);
      throw TypeError(key + ' is not a symbol!');
    },
    useSetter: function(){ setter = true; },
    useSimple: function(){ setter = false; }
  });

  $export($export.S + $export.F * !USE_NATIVE, 'Object', {
    // 19.1.2.2 Object.create(O [, Properties])
    create: $create,
    // 19.1.2.4 Object.defineProperty(O, P, Attributes)
    defineProperty: $defineProperty,
    // 19.1.2.3 Object.defineProperties(O, Properties)
    defineProperties: $defineProperties,
    // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
    getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
    // 19.1.2.7 Object.getOwnPropertyNames(O)
    getOwnPropertyNames: $getOwnPropertyNames,
    // 19.1.2.8 Object.getOwnPropertySymbols(O)
    getOwnPropertySymbols: $getOwnPropertySymbols
  });

  // 24.3.2 JSON.stringify(value [, replacer [, space]])
  $JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
    var S = $Symbol();
    // MS Edge converts symbol values to JSON as {}
    // WebKit converts symbol values to JSON as null
    // V8 throws on boxed symbols
    return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
  })), 'JSON', {
    stringify: function stringify(it){
      if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
      var args = [it]
        , i    = 1
        , replacer, $replacer;
      while(arguments.length > i)args.push(arguments[i++]);
      replacer = args[1];
      if(typeof replacer == 'function')$replacer = replacer;
      if($replacer || !isArray(replacer))replacer = function(key, value){
        if($replacer)value = $replacer.call(this, key, value);
        if(!isSymbol(value))return value;
      };
      args[1] = replacer;
      return _stringify.apply($JSON, args);
    }
  });

  // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
  $Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(150)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
  // 19.4.3.5 Symbol.prototype[@@toStringTag]
  setToStringTag($Symbol, 'Symbol');
  // 20.2.1.9 Math[@@toStringTag]
  setToStringTag(Math, 'Math', true);
  // 24.3.3 JSON[@@toStringTag]
  setToStringTag(global.JSON, 'JSON', true);

/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

  // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
  'use strict';
  var toObject = __webpack_require__(113)
    , toIndex  = __webpack_require__(183)
    , toLength = __webpack_require__(112);
  module.exports = function fill(value /*, start = 0, end = @length */){
    var O      = toObject(this)
      , length = toLength(O.length)
      , aLen   = arguments.length
      , index  = toIndex(aLen > 1 ? arguments[1] : undefined, length)
      , end    = aLen > 2 ? arguments[2] : undefined
      , endPos = end === undefined ? length : toIndex(end, length);
    while(endPos > index)O[index++] = value;
    return O;
  };

/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $defineProperty = __webpack_require__(107)
    , createDesc      = __webpack_require__(161);

  module.exports = function(object, index, value){
    if(index in object)$defineProperty.f(object, index, createDesc(0, value));
    else object[index] = value;
  };

/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

  var isObject = __webpack_require__(98)
    , document = __webpack_require__(95).document
    // in old IE typeof document.createElement is 'object'
    , is = isObject(document) && isObject(document.createElement);
  module.exports = function(it){
    return is ? document.createElement(it) : {};
  };

/***/ },
/* 315 */
/***/ function(module, exports) {

  // IE 8- don't enum bug keys
  module.exports = (
    'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
  ).split(',');

/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

  var MATCH = __webpack_require__(99)('match');
  module.exports = function(KEY){
    var re = /./;
    try {
      '/./'[KEY](re);
    } catch(e){
      try {
        re[MATCH] = false;
        return !'/./'[KEY](re);
      } catch(f){ /* empty */ }
    } return true;
  };

/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = __webpack_require__(95).document && document.documentElement;

/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

  var isObject       = __webpack_require__(98)
    , setPrototypeOf = __webpack_require__(246).set;
  module.exports = function(that, target, C){
    var P, S = target.constructor;
    if(S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf){
      setPrototypeOf(that, P);
    } return that;
  };

/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

  // check on default Array iterator
  var Iterators  = __webpack_require__(176)
    , ITERATOR   = __webpack_require__(99)('iterator')
    , ArrayProto = Array.prototype;

  module.exports = function(it){
    return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
  };

/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

  // 7.2.2 IsArray(argument)
  var cof = __webpack_require__(130);
  module.exports = Array.isArray || function isArray(arg){
    return cof(arg) == 'Array';
  };

/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

  // 20.1.2.3 Number.isInteger(number)
  var isObject = __webpack_require__(98)
    , floor    = Math.floor;
  module.exports = function isInteger(it){
    return !isObject(it) && isFinite(it) && floor(it) === it;
  };

/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var create         = __webpack_require__(178)
    , descriptor     = __webpack_require__(161)
    , setToStringTag = __webpack_require__(196)
    , IteratorPrototype = {};

  // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
  __webpack_require__(117)(IteratorPrototype, __webpack_require__(99)('iterator'), function(){ return this; });

  module.exports = function(Constructor, NAME, next){
    Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
    setToStringTag(Constructor, NAME + ' Iterator');
  };

/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var LIBRARY        = __webpack_require__(177)
    , $export        = __webpack_require__(89)
    , redefine       = __webpack_require__(119)
    , hide           = __webpack_require__(117)
    , has            = __webpack_require__(116)
    , Iterators      = __webpack_require__(176)
    , $iterCreate    = __webpack_require__(322)
    , setToStringTag = __webpack_require__(196)
    , getPrototypeOf = __webpack_require__(123)
    , ITERATOR       = __webpack_require__(99)('iterator')
    , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
    , FF_ITERATOR    = '@@iterator'
    , KEYS           = 'keys'
    , VALUES         = 'values';

  var returnThis = function(){ return this; };

  module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
    $iterCreate(Constructor, NAME, next);
    var getMethod = function(kind){
      if(!BUGGY && kind in proto)return proto[kind];
      switch(kind){
        case KEYS: return function keys(){ return new Constructor(this, kind); };
        case VALUES: return function values(){ return new Constructor(this, kind); };
      } return function entries(){ return new Constructor(this, kind); };
    };
    var TAG        = NAME + ' Iterator'
      , DEF_VALUES = DEFAULT == VALUES
      , VALUES_BUG = false
      , proto      = Base.prototype
      , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
      , $default   = $native || getMethod(DEFAULT)
      , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
      , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
      , methods, key, IteratorPrototype;
    // Fix native
    if($anyNative){
      IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
      if(IteratorPrototype !== Object.prototype){
        // Set @@toStringTag to native iterators
        setToStringTag(IteratorPrototype, TAG, true);
        // fix for some old engines
        if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
      }
    }
    // fix Array#{values, @@iterator}.name in V8 / FF
    if(DEF_VALUES && $native && $native.name !== VALUES){
      VALUES_BUG = true;
      $default = function values(){ return $native.call(this); };
    }
    // Define iterator
    if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
      hide(proto, ITERATOR, $default);
    }
    // Plug for library
    Iterators[NAME] = $default;
    Iterators[TAG]  = returnThis;
    if(DEFAULT){
      methods = {
        values:  DEF_VALUES ? $default : getMethod(VALUES),
        keys:    IS_SET     ? $default : getMethod(KEYS),
        entries: $entries
      };
      if(FORCED)for(key in methods){
        if(!(key in proto))redefine(proto, key, methods[key]);
      } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
    }
    return methods;
  };

/***/ },
/* 324 */
/***/ function(module, exports) {

  // 20.2.2.14 Math.expm1(x)
  var $expm1 = Math.expm1;
  module.exports = (!$expm1
    // Old FF bug
    || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
    // Tor Browser bug
    || $expm1(-2e-17) != -2e-17
  ) ? function expm1(x){
    return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
  } : $expm1;

/***/ },
/* 325 */
/***/ function(module, exports) {

  // 20.2.2.28 Math.sign(x)
  module.exports = Math.sign || function sign(x){
    return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
  };

/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

  var global    = __webpack_require__(95)
    , macrotask = __webpack_require__(333).set
    , Observer  = global.MutationObserver || global.WebKitMutationObserver
    , process   = global.process
    , Promise   = global.Promise
    , isNode    = __webpack_require__(130)(process) == 'process';

  module.exports = function(){
    var head, last, notify;

    var flush = function(){
      var parent, fn;
      if(isNode && (parent = process.domain))parent.exit();
      while(head){
        fn   = head.fn;
        head = head.next;
        try {
          fn();
        } catch(e){
          if(head)notify();
          else last = undefined;
          throw e;
        }
      } last = undefined;
      if(parent)parent.enter();
    };

    // Node.js
    if(isNode){
      notify = function(){
        process.nextTick(flush);
      };
    // browsers with MutationObserver
    } else if(Observer){
      var toggle = true
        , node   = document.createTextNode('');
      new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
      notify = function(){
        node.data = toggle = !toggle;
      };
    // environments with maybe non-completely correct, but existent Promise
    } else if(Promise && Promise.resolve){
      var promise = Promise.resolve();
      notify = function(){
        promise.then(flush);
      };
    // for other environments - macrotask based on:
    // - setImmediate
    // - MessageChannel
    // - window.postMessag
    // - onreadystatechange
    // - setTimeout
    } else {
      notify = function(){
        // strange IE + webpack dev server bug - use .call(global)
        macrotask.call(global, flush);
      };
    }

    return function(fn){
      var task = {fn: fn, next: undefined};
      if(last)last.next = task;
      if(!head){
        head = task;
        notify();
      } last = task;
    };
  };

/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

  var shared = __webpack_require__(247)('keys')
    , uid    = __webpack_require__(184);
  module.exports = function(key){
    return shared[key] || (shared[key] = uid(key));
  };

/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

  // 7.3.20 SpeciesConstructor(O, defaultConstructor)
  var anObject  = __webpack_require__(92)
    , aFunction = __webpack_require__(118)
    , SPECIES   = __webpack_require__(99)('species');
  module.exports = function(O, D){
    var C = anObject(O).constructor, S;
    return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
  };

/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

  var toInteger = __webpack_require__(162)
    , defined   = __webpack_require__(131);
  // true  -> String#at
  // false -> String#codePointAt
  module.exports = function(TO_STRING){
    return function(that, pos){
      var s = String(defined(that))
        , i = toInteger(pos)
        , l = s.length
        , a, b;
      if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
      a = s.charCodeAt(i);
      return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
        ? TO_STRING ? s.charAt(i) : a
        : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
    };
  };

/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

  // helper for String#{startsWith, endsWith, includes}
  var isRegExp = __webpack_require__(242)
    , defined  = __webpack_require__(131);

  module.exports = function(that, searchString, NAME){
    if(isRegExp(searchString))throw TypeError('String#' + NAME + " doesn't accept regex!");
    return String(defined(that));
  };

/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var toInteger = __webpack_require__(162)
    , defined   = __webpack_require__(131);

  module.exports = function repeat(count){
    var str = String(defined(this))
      , res = ''
      , n   = toInteger(count);
    if(n < 0 || n == Infinity)throw RangeError("Count can't be negative");
    for(;n > 0; (n >>>= 1) && (str += str))if(n & 1)res += str;
    return res;
  };

/***/ },
/* 332 */
/***/ function(module, exports) {

  module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
    '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

  var ctx                = __webpack_require__(152)
    , invoke             = __webpack_require__(241)
    , html               = __webpack_require__(317)
    , cel                = __webpack_require__(314)
    , global             = __webpack_require__(95)
    , process            = global.process
    , setTask            = global.setImmediate
    , clearTask          = global.clearImmediate
    , MessageChannel     = global.MessageChannel
    , counter            = 0
    , queue              = {}
    , ONREADYSTATECHANGE = 'onreadystatechange'
    , defer, channel, port;
  var run = function(){
    var id = +this;
    if(queue.hasOwnProperty(id)){
      var fn = queue[id];
      delete queue[id];
      fn();
    }
  };
  var listener = function(event){
    run.call(event.data);
  };
  // Node.js 0.9+ & IE10+ has setImmediate, otherwise:
  if(!setTask || !clearTask){
    setTask = function setImmediate(fn){
      var args = [], i = 1;
      while(arguments.length > i)args.push(arguments[i++]);
      queue[++counter] = function(){
        invoke(typeof fn == 'function' ? fn : Function(fn), args);
      };
      defer(counter);
      return counter;
    };
    clearTask = function clearImmediate(id){
      delete queue[id];
    };
    // Node.js 0.8-
    if(__webpack_require__(130)(process) == 'process'){
      defer = function(id){
        process.nextTick(ctx(run, id, 1));
      };
    // Browsers with MessageChannel, includes WebWorkers
    } else if(MessageChannel){
      channel = new MessageChannel;
      port    = channel.port2;
      channel.port1.onmessage = listener;
      defer = ctx(port.postMessage, port, 1);
    // Browsers with postMessage, skip WebWorkers
    // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
    } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
      defer = function(id){
        global.postMessage(id + '', '*');
      };
      global.addEventListener('message', listener, false);
    // IE8-
    } else if(ONREADYSTATECHANGE in cel('script')){
      defer = function(id){
        html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
          html.removeChild(this);
          run.call(id);
        };
      };
    // Rest old browsers
    } else {
      defer = function(id){
        setTimeout(ctx(run, id, 1), 0);
      };
    }
  }
  module.exports = {
    set:   setTask,
    clear: clearTask
  };

/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var global         = __webpack_require__(95)
    , DESCRIPTORS    = __webpack_require__(106)
    , LIBRARY        = __webpack_require__(177)
    , $typed         = __webpack_require__(248)
    , hide           = __webpack_require__(117)
    , redefineAll    = __webpack_require__(181)
    , fails          = __webpack_require__(96)
    , anInstance     = __webpack_require__(159)
    , toInteger      = __webpack_require__(162)
    , toLength       = __webpack_require__(112)
    , gOPN           = __webpack_require__(179).f
    , dP             = __webpack_require__(107).f
    , arrayFill      = __webpack_require__(312)
    , setToStringTag = __webpack_require__(196)
    , ARRAY_BUFFER   = 'ArrayBuffer'
    , DATA_VIEW      = 'DataView'
    , PROTOTYPE      = 'prototype'
    , WRONG_LENGTH   = 'Wrong length!'
    , WRONG_INDEX    = 'Wrong index!'
    , $ArrayBuffer   = global[ARRAY_BUFFER]
    , $DataView      = global[DATA_VIEW]
    , Math           = global.Math
    , parseInt       = global.parseInt
    , RangeError     = global.RangeError
    , Infinity       = global.Infinity
    , BaseBuffer     = $ArrayBuffer
    , abs            = Math.abs
    , pow            = Math.pow
    , min            = Math.min
    , floor          = Math.floor
    , log            = Math.log
    , LN2            = Math.LN2
    , BUFFER         = 'buffer'
    , BYTE_LENGTH    = 'byteLength'
    , BYTE_OFFSET    = 'byteOffset'
    , $BUFFER        = DESCRIPTORS ? '_b' : BUFFER
    , $LENGTH        = DESCRIPTORS ? '_l' : BYTE_LENGTH
    , $OFFSET        = DESCRIPTORS ? '_o' : BYTE_OFFSET;

  // IEEE754 conversions based on https://github.com/feross/ieee754
  var packIEEE754 = function(value, mLen, nBytes){
    var buffer = Array(nBytes)
      , eLen   = nBytes * 8 - mLen - 1
      , eMax   = (1 << eLen) - 1
      , eBias  = eMax >> 1
      , rt     = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0
      , i      = 0
      , s      = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0
      , e, m, c;
    value = abs(value)
    if(value != value || value === Infinity){
      m = value != value ? 1 : 0;
      e = eMax;
    } else {
      e = floor(log(value) / LN2);
      if(value * (c = pow(2, -e)) < 1){
        e--;
        c *= 2;
      }
      if(e + eBias >= 1){
        value += rt / c;
      } else {
        value += rt * pow(2, 1 - eBias);
      }
      if(value * c >= 2){
        e++;
        c /= 2;
      }
      if(e + eBias >= eMax){
        m = 0;
        e = eMax;
      } else if(e + eBias >= 1){
        m = (value * c - 1) * pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * pow(2, eBias - 1) * pow(2, mLen);
        e = 0;
      }
    }
    for(; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
    buffer[--i] |= s * 128;
    return buffer;
  };
  var unpackIEEE754 = function(buffer, mLen, nBytes){
    var eLen  = nBytes * 8 - mLen - 1
      , eMax  = (1 << eLen) - 1
      , eBias = eMax >> 1
      , nBits = eLen - 7
      , i     = nBytes - 1
      , s     = buffer[i--]
      , e     = s & 127
      , m;
    s >>= 7;
    for(; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
    if(e === 0){
      e = 1 - eBias;
    } else if(e === eMax){
      return m ? NaN : s ? -Infinity : Infinity;
    } else {
      m = m + pow(2, mLen);
      e = e - eBias;
    } return (s ? -1 : 1) * m * pow(2, e - mLen);
  };

  var unpackI32 = function(bytes){
    return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
  };
  var packI8 = function(it){
    return [it & 0xff];
  };
  var packI16 = function(it){
    return [it & 0xff, it >> 8 & 0xff];
  };
  var packI32 = function(it){
    return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
  };
  var packF64 = function(it){
    return packIEEE754(it, 52, 8);
  };
  var packF32 = function(it){
    return packIEEE754(it, 23, 4);
  };

  var addGetter = function(C, key, internal){
    dP(C[PROTOTYPE], key, {get: function(){ return this[internal]; }});
  };

  var get = function(view, bytes, index, isLittleEndian){
    var numIndex = +index
      , intIndex = toInteger(numIndex);
    if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
    var store = view[$BUFFER]._b
      , start = intIndex + view[$OFFSET]
      , pack  = store.slice(start, start + bytes);
    return isLittleEndian ? pack : pack.reverse();
  };
  var set = function(view, bytes, index, conversion, value, isLittleEndian){
    var numIndex = +index
      , intIndex = toInteger(numIndex);
    if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
    var store = view[$BUFFER]._b
      , start = intIndex + view[$OFFSET]
      , pack  = conversion(+value);
    for(var i = 0; i < bytes; i++)store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
  };

  var validateArrayBufferArguments = function(that, length){
    anInstance(that, $ArrayBuffer, ARRAY_BUFFER);
    var numberLength = +length
      , byteLength   = toLength(numberLength);
    if(numberLength != byteLength)throw RangeError(WRONG_LENGTH);
    return byteLength;
  };

  if(!$typed.ABV){
    $ArrayBuffer = function ArrayBuffer(length){
      var byteLength = validateArrayBufferArguments(this, length);
      this._b       = arrayFill.call(Array(byteLength), 0);
      this[$LENGTH] = byteLength;
    };

    $DataView = function DataView(buffer, byteOffset, byteLength){
      anInstance(this, $DataView, DATA_VIEW);
      anInstance(buffer, $ArrayBuffer, DATA_VIEW);
      var bufferLength = buffer[$LENGTH]
        , offset       = toInteger(byteOffset);
      if(offset < 0 || offset > bufferLength)throw RangeError('Wrong offset!');
      byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
      if(offset + byteLength > bufferLength)throw RangeError(WRONG_LENGTH);
      this[$BUFFER] = buffer;
      this[$OFFSET] = offset;
      this[$LENGTH] = byteLength;
    };

    if(DESCRIPTORS){
      addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
      addGetter($DataView, BUFFER, '_b');
      addGetter($DataView, BYTE_LENGTH, '_l');
      addGetter($DataView, BYTE_OFFSET, '_o');
    }

    redefineAll($DataView[PROTOTYPE], {
      getInt8: function getInt8(byteOffset){
        return get(this, 1, byteOffset)[0] << 24 >> 24;
      },
      getUint8: function getUint8(byteOffset){
        return get(this, 1, byteOffset)[0];
      },
      getInt16: function getInt16(byteOffset /*, littleEndian */){
        var bytes = get(this, 2, byteOffset, arguments[1]);
        return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
      },
      getUint16: function getUint16(byteOffset /*, littleEndian */){
        var bytes = get(this, 2, byteOffset, arguments[1]);
        return bytes[1] << 8 | bytes[0];
      },
      getInt32: function getInt32(byteOffset /*, littleEndian */){
        return unpackI32(get(this, 4, byteOffset, arguments[1]));
      },
      getUint32: function getUint32(byteOffset /*, littleEndian */){
        return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
      },
      getFloat32: function getFloat32(byteOffset /*, littleEndian */){
        return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
      },
      getFloat64: function getFloat64(byteOffset /*, littleEndian */){
        return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
      },
      setInt8: function setInt8(byteOffset, value){
        set(this, 1, byteOffset, packI8, value);
      },
      setUint8: function setUint8(byteOffset, value){
        set(this, 1, byteOffset, packI8, value);
      },
      setInt16: function setInt16(byteOffset, value /*, littleEndian */){
        set(this, 2, byteOffset, packI16, value, arguments[2]);
      },
      setUint16: function setUint16(byteOffset, value /*, littleEndian */){
        set(this, 2, byteOffset, packI16, value, arguments[2]);
      },
      setInt32: function setInt32(byteOffset, value /*, littleEndian */){
        set(this, 4, byteOffset, packI32, value, arguments[2]);
      },
      setUint32: function setUint32(byteOffset, value /*, littleEndian */){
        set(this, 4, byteOffset, packI32, value, arguments[2]);
      },
      setFloat32: function setFloat32(byteOffset, value /*, littleEndian */){
        set(this, 4, byteOffset, packF32, value, arguments[2]);
      },
      setFloat64: function setFloat64(byteOffset, value /*, littleEndian */){
        set(this, 8, byteOffset, packF64, value, arguments[2]);
      }
    });
  } else {
    if(!fails(function(){
      new $ArrayBuffer;     // eslint-disable-line no-new
    }) || !fails(function(){
      new $ArrayBuffer(.5); // eslint-disable-line no-new
    })){
      $ArrayBuffer = function ArrayBuffer(length){
        return new BaseBuffer(validateArrayBufferArguments(this, length));
      };
      var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
      for(var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j; ){
        if(!((key = keys[j++]) in $ArrayBuffer))hide($ArrayBuffer, key, BaseBuffer[key]);
      };
      if(!LIBRARY)ArrayBufferProto.constructor = $ArrayBuffer;
    }
    // iOS Safari 7.x bug
    var view = new $DataView(new $ArrayBuffer(2))
      , $setInt8 = $DataView[PROTOTYPE].setInt8;
    view.setInt8(0, 2147483648);
    view.setInt8(1, 2147483649);
    if(view.getInt8(0) || !view.getInt8(1))redefineAll($DataView[PROTOTYPE], {
      setInt8: function setInt8(byteOffset, value){
        $setInt8.call(this, byteOffset, value << 24 >> 24);
      },
      setUint8: function setUint8(byteOffset, value){
        $setInt8.call(this, byteOffset, value << 24 >> 24);
      }
    }, true);
  }
  setToStringTag($ArrayBuffer, ARRAY_BUFFER);
  setToStringTag($DataView, DATA_VIEW);
  hide($DataView[PROTOTYPE], $typed.VIEW, true);
  exports[ARRAY_BUFFER] = $ArrayBuffer;
  exports[DATA_VIEW] = $DataView;

/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

  var global         = __webpack_require__(95)
    , core           = __webpack_require__(143)
    , LIBRARY        = __webpack_require__(177)
    , wksExt         = __webpack_require__(429)
    , defineProperty = __webpack_require__(107).f;
  module.exports = function(name){
    var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
    if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
  };

/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

  var classof   = __webpack_require__(194)
    , ITERATOR  = __webpack_require__(99)('iterator')
    , Iterators = __webpack_require__(176);
  module.exports = __webpack_require__(143).getIteratorMethod = function(it){
    if(it != undefined)return it[ITERATOR]
      || it['@@iterator']
      || Iterators[classof(it)];
  };

/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var addToUnscopables = __webpack_require__(193)
    , step             = __webpack_require__(417)
    , Iterators        = __webpack_require__(176)
    , toIObject        = __webpack_require__(121);

  // 22.1.3.4 Array.prototype.entries()
  // 22.1.3.13 Array.prototype.keys()
  // 22.1.3.29 Array.prototype.values()
  // 22.1.3.30 Array.prototype[@@iterator]()
  module.exports = __webpack_require__(323)(Array, 'Array', function(iterated, kind){
    this._t = toIObject(iterated); // target
    this._i = 0;                   // next index
    this._k = kind;                // kind
  // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
  }, function(){
    var O     = this._t
      , kind  = this._k
      , index = this._i++;
    if(!O || index >= O.length){
      this._t = undefined;
      return step(1);
    }
    if(kind == 'keys'  )return step(0, index);
    if(kind == 'values')return step(0, O[index]);
    return step(0, [index, O[index]]);
  }, 'values');

  // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
  Iterators.Arguments = Iterators.Array;

  addToUnscopables('keys');
  addToUnscopables('values');
  addToUnscopables('entries');

/***/ },
/* 338 */
/***/ function(module, exports) {

  'use strict';
  module.exports = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

  var mapCacheClear = __webpack_require__(1159),
      mapCacheDelete = __webpack_require__(1160),
      mapCacheGet = __webpack_require__(1161),
      mapCacheHas = __webpack_require__(1162),
      mapCacheSet = __webpack_require__(1163);

  /**
   * Creates a map cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function MapCache(entries) {
    var index = -1,
        length = entries ? entries.length : 0;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `MapCache`.
  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype['delete'] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;

  module.exports = MapCache;


/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

  var root = __webpack_require__(146);

  /** Built-in value references. */
  var Symbol = root.Symbol;

  module.exports = Symbol;


/***/ },
/* 341 */
/***/ function(module, exports) {

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  module.exports = arrayEach;


/***/ },
/* 342 */
/***/ function(module, exports) {

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array ? array.length : 0,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  module.exports = arrayMap;


/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

  var eq = __webpack_require__(215);

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * Assigns `value` to `key` of `object` if the existing value is not equivalent
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
        (value === undefined && !(key in object))) {
      object[key] = value;
    }
  }

  module.exports = assignValue;


/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

  var getPrototype = __webpack_require__(350);

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * The base implementation of `_.has` without support for deep paths.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {Array|string} key The key to check.
   * @returns {boolean} Returns `true` if `key` exists, else `false`.
   */
  function baseHas(object, key) {
    // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,
    // that are composed entirely of index properties, return `false` for
    // `hasOwnProperty` checks of them.
    return object != null &&
      (hasOwnProperty.call(object, key) ||
        (typeof object == 'object' && key in object && getPrototype(object) === null));
  }

  module.exports = baseHas;


/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

  var indexOfNaN = __webpack_require__(1145);

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return indexOfNaN(array, fromIndex);
    }
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  module.exports = baseIndexOf;


/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

  var baseMatches = __webpack_require__(1103),
      baseMatchesProperty = __webpack_require__(1104),
      identity = __webpack_require__(477),
      isArray = __webpack_require__(114),
      property = __webpack_require__(1188);

  /**
   * The base implementation of `_.iteratee`.
   *
   * @private
   * @param {*} [value=_.identity] The value to convert to an iteratee.
   * @returns {Function} Returns the iteratee.
   */
  function baseIteratee(value) {
    // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
    // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
    if (typeof value == 'function') {
      return value;
    }
    if (value == null) {
      return identity;
    }
    if (typeof value == 'object') {
      return isArray(value)
        ? baseMatchesProperty(value[0], value[1])
        : baseMatches(value);
    }
    return property(value);
  }

  module.exports = baseIteratee;


/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

  var Symbol = __webpack_require__(340),
      isSymbol = __webpack_require__(217);

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0;

  /** Used to convert symbols to primitives and strings. */
  var symbolProto = Symbol ? Symbol.prototype : undefined,
      symbolToString = symbolProto ? symbolProto.toString : undefined;

  /**
   * The base implementation of `_.toString` which doesn't convert nullish
   * values to empty strings.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') {
      return value;
    }
    if (isSymbol(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }
    var result = (value + '');
    return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
  }

  module.exports = baseToString;


/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

  var Uint8Array = __webpack_require__(455);

  /**
   * Creates a clone of `arrayBuffer`.
   *
   * @private
   * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
   * @returns {ArrayBuffer} Returns the cloned array buffer.
   */
  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array(result).set(new Uint8Array(arrayBuffer));
    return result;
  }

  module.exports = cloneArrayBuffer;


/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

  var isIterateeCall = __webpack_require__(351),
      rest = __webpack_require__(356);

  /**
   * Creates a function like `_.assign`.
   *
   * @private
   * @param {Function} assigner The function to assign values.
   * @returns {Function} Returns the new assigner function.
   */
  function createAssigner(assigner) {
    return rest(function(object, sources) {
      var index = -1,
          length = sources.length,
          customizer = length > 1 ? sources[length - 1] : undefined,
          guard = length > 2 ? sources[2] : undefined;

      customizer = (assigner.length > 3 && typeof customizer == 'function')
        ? (length--, customizer)
        : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        customizer = length < 3 ? undefined : customizer;
        length = 1;
      }
      object = Object(object);
      while (++index < length) {
        var source = sources[index];
        if (source) {
          assigner(object, source, index, customizer);
        }
      }
      return object;
    });
  }

  module.exports = createAssigner;


/***/ },
/* 350 */
/***/ function(module, exports) {

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeGetPrototype = Object.getPrototypeOf;

  /**
   * Gets the `[[Prototype]]` of `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {null|Object} Returns the `[[Prototype]]`.
   */
  function getPrototype(value) {
    return nativeGetPrototype(Object(value));
  }

  module.exports = getPrototype;


/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

  var eq = __webpack_require__(215),
      isArrayLike = __webpack_require__(186),
      isIndex = __webpack_require__(258),
      isObject = __webpack_require__(133);

  /**
   * Checks if the given arguments are from an iteratee call.
   *
   * @private
   * @param {*} value The potential iteratee value argument.
   * @param {*} index The potential iteratee index or key argument.
   * @param {*} object The potential iteratee object argument.
   * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
   *  else `false`.
   */
  function isIterateeCall(value, index, object) {
    if (!isObject(object)) {
      return false;
    }
    var type = typeof index;
    if (type == 'number'
          ? (isArrayLike(object) && isIndex(index, object.length))
          : (type == 'string' && index in object)
        ) {
      return eq(object[index], value);
    }
    return false;
  }

  module.exports = isIterateeCall;


/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

  var assignValue = __webpack_require__(343),
      copyObject = __webpack_require__(214),
      createAssigner = __webpack_require__(349),
      isArrayLike = __webpack_require__(186),
      isPrototype = __webpack_require__(260),
      keys = __webpack_require__(165);

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /** Built-in value references. */
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;

  /** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */
  var nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');

  /**
   * Assigns own enumerable string keyed properties of source objects to the
   * destination object. Source objects are applied from left to right.
   * Subsequent sources overwrite property assignments of previous sources.
   *
   * **Note:** This method mutates `object` and is loosely based on
   * [`Object.assign`](https://mdn.io/Object/assign).
   *
   * @static
   * @memberOf _
   * @since 0.10.0
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @see _.assignIn
   * @example
   *
   * function Foo() {
   *   this.c = 3;
   * }
   *
   * function Bar() {
   *   this.e = 5;
   * }
   *
   * Foo.prototype.d = 4;
   * Bar.prototype.f = 6;
   *
   * _.assign({ 'a': 1 }, new Foo, new Bar);
   * // => { 'a': 1, 'c': 3, 'e': 5 }
   */
  var assign = createAssigner(function(object, source) {
    if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
      copyObject(source, keys(source), object);
      return;
    }
    for (var key in source) {
      if (hasOwnProperty.call(source, key)) {
        assignValue(object, key, source[key]);
      }
    }
  });

  module.exports = assign;


/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = __webpack_require__(1178);


/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

  var isLength = __webpack_require__(267),
      isObjectLike = __webpack_require__(164);

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objectToString = objectProto.toString;

  /**
   * Checks if `value` is classified as a typed array.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified,
   *  else `false`.
   * @example
   *
   * _.isTypedArray(new Uint8Array);
   * // => true
   *
   * _.isTypedArray([]);
   * // => false
   */
  function isTypedArray(value) {
    return isObjectLike(value) &&
      isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
  }

  module.exports = isTypedArray;


/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

  var baseKeysIn = __webpack_require__(1102),
      indexKeys = __webpack_require__(471),
      isIndex = __webpack_require__(258),
      isPrototype = __webpack_require__(260);

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * Creates an array of the own and inherited enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keysIn(new Foo);
   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
   */
  function keysIn(object) {
    var index = -1,
        isProto = isPrototype(object),
        props = baseKeysIn(object),
        propsLength = props.length,
        indexes = indexKeys(object),
        skipIndexes = !!indexes,
        result = indexes || [],
        length = result.length;

    while (++index < propsLength) {
      var key = props[index];
      if (!(skipIndexes && (key == 'length' || isIndex(key, length))) &&
          !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
        result.push(key);
      }
    }
    return result;
  }

  module.exports = keysIn;


/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

  var apply = __webpack_require__(456),
      toInteger = __webpack_require__(218);

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax = Math.max;

  /**
   * Creates a function that invokes `func` with the `this` binding of the
   * created function and arguments from `start` and beyond provided as
   * an array.
   *
   * **Note:** This method is based on the
   * [rest parameter](https://mdn.io/rest_parameters).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Function
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @returns {Function} Returns the new function.
   * @example
   *
   * var say = _.rest(function(what, names) {
   *   return what + ' ' + _.initial(names).join(', ') +
   *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
   * });
   *
   * say('hello', 'fred', 'barney', 'pebbles');
   * // => 'hello fred, barney, & pebbles'
   */
  function rest(func, start) {
    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    start = nativeMax(start === undefined ? (func.length - 1) : toInteger(start), 0);
    return function() {
      var args = arguments,
          index = -1,
          length = nativeMax(args.length - start, 0),
          array = Array(length);

      while (++index < length) {
        array[index] = args[start + index];
      }
      switch (start) {
        case 0: return func.call(this, array);
        case 1: return func.call(this, args[0], array);
        case 2: return func.call(this, args[0], args[1], array);
      }
      var otherArgs = Array(start + 1);
      index = -1;
      while (++index < start) {
        otherArgs[index] = args[index];
      }
      otherArgs[start] = array;
      return apply(func, this, otherArgs);
    };
  }

  module.exports = rest;


/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule DOMChildrenOperations
   */

  'use strict';

  var DOMLazyTree = __webpack_require__(200);
  var Danger = __webpack_require__(1218);
  var ReactMultiChildUpdateTypes = __webpack_require__(500);
  var ReactDOMComponentTree = __webpack_require__(108);
  var ReactInstrumentation = __webpack_require__(125);

  var createMicrosoftUnsafeLocalFunction = __webpack_require__(366);
  var setInnerHTML = __webpack_require__(372);
  var setTextContent = __webpack_require__(514);

  function getNodeAfter(parentNode, node) {
    // Special case for text components, which return [open, close] comments
    // from getNativeNode.
    if (Array.isArray(node)) {
      node = node[1];
    }
    return node ? node.nextSibling : parentNode.firstChild;
  }

  /**
   * Inserts `childNode` as a child of `parentNode` at the `index`.
   *
   * @param {DOMElement} parentNode Parent node in which to insert.
   * @param {DOMElement} childNode Child node to insert.
   * @param {number} index Index at which to insert the child.
   * @internal
   */
  var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
    // We rely exclusively on `insertBefore(node, null)` instead of also using
    // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
    // we are careful to use `null`.)
    parentNode.insertBefore(childNode, referenceNode);
  });

  function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
    DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
  }

  function moveChild(parentNode, childNode, referenceNode) {
    if (Array.isArray(childNode)) {
      moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
    } else {
      insertChildAt(parentNode, childNode, referenceNode);
    }
  }

  function removeChild(parentNode, childNode) {
    if (Array.isArray(childNode)) {
      var closingComment = childNode[1];
      childNode = childNode[0];
      removeDelimitedText(parentNode, childNode, closingComment);
      parentNode.removeChild(closingComment);
    }
    parentNode.removeChild(childNode);
  }

  function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
    var node = openingComment;
    while (true) {
      var nextNode = node.nextSibling;
      insertChildAt(parentNode, node, referenceNode);
      if (node === closingComment) {
        break;
      }
      node = nextNode;
    }
  }

  function removeDelimitedText(parentNode, startNode, closingComment) {
    while (true) {
      var node = startNode.nextSibling;
      if (node === closingComment) {
        // The closing comment is removed by ReactMultiChild.
        break;
      } else {
        parentNode.removeChild(node);
      }
    }
  }

  function replaceDelimitedText(openingComment, closingComment, stringText) {
    var parentNode = openingComment.parentNode;
    var nodeAfterComment = openingComment.nextSibling;
    if (nodeAfterComment === closingComment) {
      // There are no text nodes between the opening and closing comments; insert
      // a new one if stringText isn't empty.
      if (stringText) {
        insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
      }
    } else {
      if (stringText) {
        // Set the text content of the first node after the opening comment, and
        // remove all following nodes up until the closing comment.
        setTextContent(nodeAfterComment, stringText);
        removeDelimitedText(parentNode, nodeAfterComment, closingComment);
      } else {
        removeDelimitedText(parentNode, openingComment, closingComment);
      }
    }

    if (true) {
      ReactInstrumentation.debugTool.onNativeOperation(ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID, 'replace text', stringText);
    }
  }

  var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
  if (true) {
    dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {
      Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
      if (prevInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onNativeOperation(prevInstance._debugID, 'replace with', markup.toString());
      } else {
        var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
        if (nextInstance._debugID !== 0) {
          ReactInstrumentation.debugTool.onNativeOperation(nextInstance._debugID, 'mount', markup.toString());
        }
      }
    };
  }

  /**
   * Operations for updating with DOM children.
   */
  var DOMChildrenOperations = {

    dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,

    replaceDelimitedText: replaceDelimitedText,

    /**
     * Updates a component's children by processing a series of updates. The
     * update configurations are each expected to have a `parentNode` property.
     *
     * @param {array<object>} updates List of update configurations.
     * @internal
     */
    processUpdates: function (parentNode, updates) {
      if (true) {
        var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
      }

      for (var k = 0; k < updates.length; k++) {
        var update = updates[k];
        switch (update.type) {
          case ReactMultiChildUpdateTypes.INSERT_MARKUP:
            insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
            if (true) {
              ReactInstrumentation.debugTool.onNativeOperation(parentNodeDebugID, 'insert child', { toIndex: update.toIndex, content: update.content.toString() });
            }
            break;
          case ReactMultiChildUpdateTypes.MOVE_EXISTING:
            moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
            if (true) {
              ReactInstrumentation.debugTool.onNativeOperation(parentNodeDebugID, 'move child', { fromIndex: update.fromIndex, toIndex: update.toIndex });
            }
            break;
          case ReactMultiChildUpdateTypes.SET_MARKUP:
            setInnerHTML(parentNode, update.content);
            if (true) {
              ReactInstrumentation.debugTool.onNativeOperation(parentNodeDebugID, 'replace children', update.content.toString());
            }
            break;
          case ReactMultiChildUpdateTypes.TEXT_CONTENT:
            setTextContent(parentNode, update.content);
            if (true) {
              ReactInstrumentation.debugTool.onNativeOperation(parentNodeDebugID, 'replace text', update.content.toString());
            }
            break;
          case ReactMultiChildUpdateTypes.REMOVE_NODE:
            removeChild(parentNode, update.fromNode);
            if (true) {
              ReactInstrumentation.debugTool.onNativeOperation(parentNodeDebugID, 'remove child', { fromIndex: update.fromIndex });
            }
            break;
        }
      }
    }

  };

  module.exports = DOMChildrenOperations;

/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule DOMPropertyOperations
   */

  'use strict';

  var DOMProperty = __webpack_require__(187);
  var ReactDOMComponentTree = __webpack_require__(108);
  var ReactDOMInstrumentation = __webpack_require__(1237);
  var ReactInstrumentation = __webpack_require__(125);

  var quoteAttributeValueForBrowser = __webpack_require__(1279);
  var warning = __webpack_require__(94);

  var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
  var illegalAttributeNameCache = {};
  var validatedAttributeNameCache = {};

  function isAttributeNameSafe(attributeName) {
    if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
      return true;
    }
    if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
      return false;
    }
    if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
      validatedAttributeNameCache[attributeName] = true;
      return true;
    }
    illegalAttributeNameCache[attributeName] = true;
     true ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
    return false;
  }

  function shouldIgnoreValue(propertyInfo, value) {
    return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
  }

  /**
   * Operations for dealing with DOM properties.
   */
  var DOMPropertyOperations = {

    /**
     * Creates markup for the ID property.
     *
     * @param {string} id Unescaped ID.
     * @return {string} Markup string.
     */
    createMarkupForID: function (id) {
      return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
    },

    setAttributeForID: function (node, id) {
      node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
    },

    createMarkupForRoot: function () {
      return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
    },

    setAttributeForRoot: function (node) {
      node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
    },

    /**
     * Creates markup for a property.
     *
     * @param {string} name
     * @param {*} value
     * @return {?string} Markup string, or null if the property was invalid.
     */
    createMarkupForProperty: function (name, value) {
      if (true) {
        ReactDOMInstrumentation.debugTool.onCreateMarkupForProperty(name, value);
      }
      var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
      if (propertyInfo) {
        if (shouldIgnoreValue(propertyInfo, value)) {
          return '';
        }
        var attributeName = propertyInfo.attributeName;
        if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
          return attributeName + '=""';
        }
        return attributeName + '=' + quoteAttributeValueForBrowser(value);
      } else if (DOMProperty.isCustomAttribute(name)) {
        if (value == null) {
          return '';
        }
        return name + '=' + quoteAttributeValueForBrowser(value);
      }
      return null;
    },

    /**
     * Creates markup for a custom property.
     *
     * @param {string} name
     * @param {*} value
     * @return {string} Markup string, or empty string if the property was invalid.
     */
    createMarkupForCustomAttribute: function (name, value) {
      if (!isAttributeNameSafe(name) || value == null) {
        return '';
      }
      return name + '=' + quoteAttributeValueForBrowser(value);
    },

    /**
     * Sets the value for a property on a node.
     *
     * @param {DOMElement} node
     * @param {string} name
     * @param {*} value
     */
    setValueForProperty: function (node, name, value) {
      var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
      if (propertyInfo) {
        var mutationMethod = propertyInfo.mutationMethod;
        if (mutationMethod) {
          mutationMethod(node, value);
        } else if (shouldIgnoreValue(propertyInfo, value)) {
          this.deleteValueForProperty(node, name);
          return;
        } else if (propertyInfo.mustUseProperty) {
          var propName = propertyInfo.propertyName;
          // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
          // property type before comparing; only `value` does and is string.
          if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {
            // Contrary to `setAttribute`, object properties are properly
            // `toString`ed by IE8/9.
            node[propName] = value;
          }
        } else {
          var attributeName = propertyInfo.attributeName;
          var namespace = propertyInfo.attributeNamespace;
          // `setAttribute` with objects becomes only `[object]` in IE8/9,
          // ('' + value) makes it output the correct toString()-value.
          if (namespace) {
            node.setAttributeNS(namespace, attributeName, '' + value);
          } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
            node.setAttribute(attributeName, '');
          } else {
            node.setAttribute(attributeName, '' + value);
          }
        }
      } else if (DOMProperty.isCustomAttribute(name)) {
        DOMPropertyOperations.setValueForAttribute(node, name, value);
        return;
      }

      if (true) {
        ReactDOMInstrumentation.debugTool.onSetValueForProperty(node, name, value);
        var payload = {};
        payload[name] = value;
        ReactInstrumentation.debugTool.onNativeOperation(ReactDOMComponentTree.getInstanceFromNode(node)._debugID, 'update attribute', payload);
      }
    },

    setValueForAttribute: function (node, name, value) {
      if (!isAttributeNameSafe(name)) {
        return;
      }
      if (value == null) {
        node.removeAttribute(name);
      } else {
        node.setAttribute(name, '' + value);
      }

      if (true) {
        var payload = {};
        payload[name] = value;
        ReactInstrumentation.debugTool.onNativeOperation(ReactDOMComponentTree.getInstanceFromNode(node)._debugID, 'update attribute', payload);
      }
    },

    /**
     * Deletes the value for a property on a node.
     *
     * @param {DOMElement} node
     * @param {string} name
     */
    deleteValueForProperty: function (node, name) {
      var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
      if (propertyInfo) {
        var mutationMethod = propertyInfo.mutationMethod;
        if (mutationMethod) {
          mutationMethod(node, undefined);
        } else if (propertyInfo.mustUseProperty) {
          var propName = propertyInfo.propertyName;
          if (propertyInfo.hasBooleanValue) {
            // No HAS_SIDE_EFFECTS logic here, only `value` has it and is string.
            node[propName] = false;
          } else {
            if (!propertyInfo.hasSideEffects || '' + node[propName] !== '') {
              node[propName] = '';
            }
          }
        } else {
          node.removeAttribute(propertyInfo.attributeName);
        }
      } else if (DOMProperty.isCustomAttribute(name)) {
        node.removeAttribute(name);
      }

      if (true) {
        ReactDOMInstrumentation.debugTool.onDeleteValueForProperty(node, name);
        ReactInstrumentation.debugTool.onNativeOperation(ReactDOMComponentTree.getInstanceFromNode(node)._debugID, 'remove attribute', name);
      }
    }

  };

  module.exports = DOMPropertyOperations;

/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule EventPluginUtils
   */

  'use strict';

  var EventConstants = __webpack_require__(155);
  var ReactErrorUtils = __webpack_require__(363);

  var invariant = __webpack_require__(91);
  var warning = __webpack_require__(94);

  /**
   * Injected dependencies:
   */

  /**
   * - `ComponentTree`: [required] Module that can convert between React instances
   *   and actual node references.
   */
  var ComponentTree;
  var TreeTraversal;
  var injection = {
    injectComponentTree: function (Injected) {
      ComponentTree = Injected;
      if (true) {
         true ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
      }
    },
    injectTreeTraversal: function (Injected) {
      TreeTraversal = Injected;
      if (true) {
         true ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
      }
    }
  };

  var topLevelTypes = EventConstants.topLevelTypes;

  function isEndish(topLevelType) {
    return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
  }

  function isMoveish(topLevelType) {
    return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
  }
  function isStartish(topLevelType) {
    return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
  }

  var validateEventDispatches;
  if (true) {
    validateEventDispatches = function (event) {
      var dispatchListeners = event._dispatchListeners;
      var dispatchInstances = event._dispatchInstances;

      var listenersIsArr = Array.isArray(dispatchListeners);
      var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

      var instancesIsArr = Array.isArray(dispatchInstances);
      var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

       true ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
    };
  }

  /**
   * Dispatch the event to the listener.
   * @param {SyntheticEvent} event SyntheticEvent to handle
   * @param {boolean} simulated If the event is simulated (changes exn behavior)
   * @param {function} listener Application-level callback
   * @param {*} inst Internal component instance
   */
  function executeDispatch(event, simulated, listener, inst) {
    var type = event.type || 'unknown-event';
    event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
    if (simulated) {
      ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
    } else {
      ReactErrorUtils.invokeGuardedCallback(type, listener, event);
    }
    event.currentTarget = null;
  }

  /**
   * Standard/simple iteration through an event's collected dispatches.
   */
  function executeDispatchesInOrder(event, simulated) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;
    if (true) {
      validateEventDispatches(event);
    }
    if (Array.isArray(dispatchListeners)) {
      for (var i = 0; i < dispatchListeners.length; i++) {
        if (event.isPropagationStopped()) {
          break;
        }
        // Listeners and Instances are two parallel arrays that are always in sync.
        executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
      }
    } else if (dispatchListeners) {
      executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
    }
    event._dispatchListeners = null;
    event._dispatchInstances = null;
  }

  /**
   * Standard/simple iteration through an event's collected dispatches, but stops
   * at the first dispatch execution returning true, and returns that id.
   *
   * @return {?string} id of the first dispatch execution who's listener returns
   * true, or null if no listener returned true.
   */
  function executeDispatchesInOrderStopAtTrueImpl(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;
    if (true) {
      validateEventDispatches(event);
    }
    if (Array.isArray(dispatchListeners)) {
      for (var i = 0; i < dispatchListeners.length; i++) {
        if (event.isPropagationStopped()) {
          break;
        }
        // Listeners and Instances are two parallel arrays that are always in sync.
        if (dispatchListeners[i](event, dispatchInstances[i])) {
          return dispatchInstances[i];
        }
      }
    } else if (dispatchListeners) {
      if (dispatchListeners(event, dispatchInstances)) {
        return dispatchInstances;
      }
    }
    return null;
  }

  /**
   * @see executeDispatchesInOrderStopAtTrueImpl
   */
  function executeDispatchesInOrderStopAtTrue(event) {
    var ret = executeDispatchesInOrderStopAtTrueImpl(event);
    event._dispatchInstances = null;
    event._dispatchListeners = null;
    return ret;
  }

  /**
   * Execution of a "direct" dispatch - there must be at most one dispatch
   * accumulated on the event or it is considered an error. It doesn't really make
   * sense for an event with multiple dispatches (bubbled) to keep track of the
   * return values at each dispatch execution, but it does tend to make sense when
   * dealing with "direct" dispatches.
   *
   * @return {*} The return value of executing the single dispatch.
   */
  function executeDirectDispatch(event) {
    if (true) {
      validateEventDispatches(event);
    }
    var dispatchListener = event._dispatchListeners;
    var dispatchInstance = event._dispatchInstances;
    !!Array.isArray(dispatchListener) ?  true ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : void 0;
    event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
    var res = dispatchListener ? dispatchListener(event) : null;
    event.currentTarget = null;
    event._dispatchListeners = null;
    event._dispatchInstances = null;
    return res;
  }

  /**
   * @param {SyntheticEvent} event
   * @return {boolean} True iff number of dispatches accumulated is greater than 0.
   */
  function hasDispatches(event) {
    return !!event._dispatchListeners;
  }

  /**
   * General utilities that are useful in creating custom Event Plugins.
   */
  var EventPluginUtils = {
    isEndish: isEndish,
    isMoveish: isMoveish,
    isStartish: isStartish,

    executeDirectDispatch: executeDirectDispatch,
    executeDispatchesInOrder: executeDispatchesInOrder,
    executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
    hasDispatches: hasDispatches,

    getInstanceFromNode: function (node) {
      return ComponentTree.getInstanceFromNode(node);
    },
    getNodeFromInstance: function (node) {
      return ComponentTree.getNodeFromInstance(node);
    },
    isAncestor: function (a, b) {
      return TreeTraversal.isAncestor(a, b);
    },
    getLowestCommonAncestor: function (a, b) {
      return TreeTraversal.getLowestCommonAncestor(a, b);
    },
    getParentInstance: function (inst) {
      return TreeTraversal.getParentInstance(inst);
    },
    traverseTwoPhase: function (target, fn, arg) {
      return TreeTraversal.traverseTwoPhase(target, fn, arg);
    },
    traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
      return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
    },

    injection: injection
  };

  module.exports = EventPluginUtils;

/***/ },
/* 360 */
/***/ function(module, exports) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule KeyEscapeUtils
   */

  'use strict';

  /**
   * Escape and wrap key so it is safe to use as a reactid
   *
   * @param {*} key to be escaped.
   * @return {string} the escaped key.
   */

  function escape(key) {
    var escapeRegex = /[=:]/g;
    var escaperLookup = {
      '=': '=0',
      ':': '=2'
    };
    var escapedString = ('' + key).replace(escapeRegex, function (match) {
      return escaperLookup[match];
    });

    return '$' + escapedString;
  }

  /**
   * Unescape and unwrap key for human-readable display
   *
   * @param {string} key to unescape.
   * @return {string} the unescaped key.
   */
  function unescape(key) {
    var unescapeRegex = /(=0|=2)/g;
    var unescaperLookup = {
      '=0': '=',
      '=2': ':'
    };
    var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

    return ('' + keySubstring).replace(unescapeRegex, function (match) {
      return unescaperLookup[match];
    });
  }

  var KeyEscapeUtils = {
    escape: escape,
    unescape: unescape
  };

  module.exports = KeyEscapeUtils;

/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule LinkedValueUtils
   */

  'use strict';

  var ReactPropTypes = __webpack_require__(504);
  var ReactPropTypeLocations = __webpack_require__(274);

  var invariant = __webpack_require__(91);
  var warning = __webpack_require__(94);

  var hasReadOnlyValue = {
    'button': true,
    'checkbox': true,
    'image': true,
    'hidden': true,
    'radio': true,
    'reset': true,
    'submit': true
  };

  function _assertSingleLink(inputProps) {
    !(inputProps.checkedLink == null || inputProps.valueLink == null) ?  true ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\'t want to use valueLink and vice versa.') : invariant(false) : void 0;
  }
  function _assertValueLink(inputProps) {
    _assertSingleLink(inputProps);
    !(inputProps.value == null && inputProps.onChange == null) ?  true ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\'t want to use valueLink.') : invariant(false) : void 0;
  }

  function _assertCheckedLink(inputProps) {
    _assertSingleLink(inputProps);
    !(inputProps.checked == null && inputProps.onChange == null) ?  true ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\'t want to ' + 'use checkedLink') : invariant(false) : void 0;
  }

  var propTypes = {
    value: function (props, propName, componentName) {
      if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
        return null;
      }
      return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    },
    checked: function (props, propName, componentName) {
      if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
        return null;
      }
      return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    },
    onChange: ReactPropTypes.func
  };

  var loggedTypeFailures = {};
  function getDeclarationErrorAddendum(owner) {
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  }

  /**
   * Provide a linked `value` attribute for controlled forms. You should not use
   * this outside of the ReactDOM controlled form components.
   */
  var LinkedValueUtils = {
    checkPropTypes: function (tagName, props, owner) {
      for (var propName in propTypes) {
        if (propTypes.hasOwnProperty(propName)) {
          var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop);
        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var addendum = getDeclarationErrorAddendum(owner);
           true ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
        }
      }
    },

    /**
     * @param {object} inputProps Props for form component
     * @return {*} current value of the input either from value prop or link.
     */
    getValue: function (inputProps) {
      if (inputProps.valueLink) {
        _assertValueLink(inputProps);
        return inputProps.valueLink.value;
      }
      return inputProps.value;
    },

    /**
     * @param {object} inputProps Props for form component
     * @return {*} current checked status of the input either from checked prop
     *             or link.
     */
    getChecked: function (inputProps) {
      if (inputProps.checkedLink) {
        _assertCheckedLink(inputProps);
        return inputProps.checkedLink.value;
      }
      return inputProps.checked;
    },

    /**
     * @param {object} inputProps Props for form component
     * @param {SyntheticEvent} event change event to handle
     */
    executeOnChange: function (inputProps, event) {
      if (inputProps.valueLink) {
        _assertValueLink(inputProps);
        return inputProps.valueLink.requestChange(event.target.value);
      } else if (inputProps.checkedLink) {
        _assertCheckedLink(inputProps);
        return inputProps.checkedLink.requestChange(event.target.checked);
      } else if (inputProps.onChange) {
        return inputProps.onChange.call(undefined, event);
      }
    }
  };

  module.exports = LinkedValueUtils;

/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2014-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactComponentEnvironment
   */

  'use strict';

  var invariant = __webpack_require__(91);

  var injected = false;

  var ReactComponentEnvironment = {

    /**
     * Optionally injectable environment dependent cleanup hook. (server vs.
     * browser etc). Example: A browser system caches DOM nodes based on component
     * ID and must remove that cache entry when this instance is unmounted.
     */
    unmountIDFromEnvironment: null,

    /**
     * Optionally injectable hook for swapping out mount images in the middle of
     * the tree.
     */
    replaceNodeWithMarkup: null,

    /**
     * Optionally injectable hook for processing a queue of child updates. Will
     * later move into MultiChildComponents.
     */
    processChildrenUpdates: null,

    injection: {
      injectEnvironment: function (environment) {
        !!injected ?  true ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : void 0;
        ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
        ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
        ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
        injected = true;
      }
    }

  };

  module.exports = ReactComponentEnvironment;

/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactErrorUtils
   */

  'use strict';

  var caughtError = null;

  /**
   * Call a function while guarding against errors that happens within it.
   *
   * @param {?String} name of the guard to use for logging or debugging
   * @param {Function} func The function to invoke
   * @param {*} a First argument
   * @param {*} b Second argument
   */
  function invokeGuardedCallback(name, func, a, b) {
    try {
      return func(a, b);
    } catch (x) {
      if (caughtError === null) {
        caughtError = x;
      }
      return undefined;
    }
  }

  var ReactErrorUtils = {
    invokeGuardedCallback: invokeGuardedCallback,

    /**
     * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
     * handler are sure to be rethrown by rethrowCaughtError.
     */
    invokeGuardedCallbackWithCatch: invokeGuardedCallback,

    /**
     * During execution of guarded functions we will capture the first error which
     * we will rethrow to be handled by the top level error handler.
     */
    rethrowCaughtError: function () {
      if (caughtError) {
        var error = caughtError;
        caughtError = null;
        throw error;
      }
    }
  };

  if (true) {
    /**
     * To help development we can get better devtools integration by simulating a
     * real browser event.
     */
    if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
      var fakeNode = document.createElement('react');
      ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
        var boundFunc = func.bind(null, a, b);
        var evtType = 'react-' + name;
        fakeNode.addEventListener(evtType, boundFunc, false);
        var evt = document.createEvent('Event');
        evt.initEvent(evtType, false, false);
        fakeNode.dispatchEvent(evt);
        fakeNode.removeEventListener(evtType, boundFunc, false);
      };
    }
  }

  module.exports = ReactErrorUtils;

/***/ },
/* 364 */
/***/ function(module, exports) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactInstanceMap
   */

  'use strict';

  /**
   * `ReactInstanceMap` maintains a mapping from a public facing stateful
   * instance (key) and the internal representation (value). This allows public
   * methods to accept the user facing instance as an argument and map them back
   * to internal methods.
   */

  // TODO: Replace this with ES6: var ReactInstanceMap = new Map();

  var ReactInstanceMap = {

    /**
     * This API should be called `delete` but we'd have to make sure to always
     * transform these to strings for IE support. When this transform is fully
     * supported we can rename it.
     */
    remove: function (key) {
      key._reactInternalInstance = undefined;
    },

    get: function (key) {
      return key._reactInternalInstance;
    },

    has: function (key) {
      return key._reactInternalInstance !== undefined;
    },

    set: function (key, value) {
      key._reactInternalInstance = value;
    }

  };

  module.exports = ReactInstanceMap;

/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule canDefineProperty
   */

  'use strict';

  var canDefineProperty = false;
  if (true) {
    try {
      Object.defineProperty({}, 'x', { get: function () {} });
      canDefineProperty = true;
    } catch (x) {
      // IE will fail on defineProperty
    }
  }

  module.exports = canDefineProperty;

/***/ },
/* 366 */
/***/ function(module, exports) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule createMicrosoftUnsafeLocalFunction
   */

  /* globals MSApp */

  'use strict';

  /**
   * Create a function which has 'unsafe' privileges (required by windows8 apps)
   */

  var createMicrosoftUnsafeLocalFunction = function (func) {
    if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
      return function (arg0, arg1, arg2, arg3) {
        MSApp.execUnsafeLocalFunction(function () {
          return func(arg0, arg1, arg2, arg3);
        });
      };
    } else {
      return func;
    }
  };

  module.exports = createMicrosoftUnsafeLocalFunction;

/***/ },
/* 367 */
/***/ function(module, exports) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule getEventCharCode
   */

  'use strict';

  /**
   * `charCode` represents the actual "character code" and is safe to use with
   * `String.fromCharCode`. As such, only keys that correspond to printable
   * characters produce a valid `charCode`, the only exception to this is Enter.
   * The Tab-key is considered non-printable and does not have a `charCode`,
   * presumably because it does not produce a tab-character in browsers.
   *
   * @param {object} nativeEvent Native browser event.
   * @return {number} Normalized `charCode` property.
   */

  function getEventCharCode(nativeEvent) {
    var charCode;
    var keyCode = nativeEvent.keyCode;

    if ('charCode' in nativeEvent) {
      charCode = nativeEvent.charCode;

      // FF does not set `charCode` for the Enter-key, check against `keyCode`.
      if (charCode === 0 && keyCode === 13) {
        charCode = 13;
      }
    } else {
      // IE8 does not implement `charCode`, but `keyCode` has the correct value.
      charCode = keyCode;
    }

    // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
    // Must not discard the (non-)printable Enter-key.
    if (charCode >= 32 || charCode === 13) {
      return charCode;
    }

    return 0;
  }

  module.exports = getEventCharCode;

/***/ },
/* 368 */
/***/ function(module, exports) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule getEventModifierState
   */

  'use strict';

  /**
   * Translation from modifier key to the associated property in the event.
   * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
   */

  var modifierKeyToProp = {
    'Alt': 'altKey',
    'Control': 'ctrlKey',
    'Meta': 'metaKey',
    'Shift': 'shiftKey'
  };

  // IE8 does not implement getModifierState so we simply map it to the only
  // modifier keys exposed by the event itself, does not support Lock-keys.
  // Currently, all major browsers except Chrome seems to support Lock-keys.
  function modifierStateGetter(keyArg) {
    var syntheticEvent = this;
    var nativeEvent = syntheticEvent.nativeEvent;
    if (nativeEvent.getModifierState) {
      return nativeEvent.getModifierState(keyArg);
    }
    var keyProp = modifierKeyToProp[keyArg];
    return keyProp ? !!nativeEvent[keyProp] : false;
  }

  function getEventModifierState(nativeEvent) {
    return modifierStateGetter;
  }

  module.exports = getEventModifierState;

/***/ },
/* 369 */
/***/ function(module, exports) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule getEventTarget
   */

  'use strict';

  /**
   * Gets the target node from a native browser event by accounting for
   * inconsistencies in browser DOM APIs.
   *
   * @param {object} nativeEvent Native browser event.
   * @return {DOMEventTarget} Target node.
   */

  function getEventTarget(nativeEvent) {
    var target = nativeEvent.target || nativeEvent.srcElement || window;

    // Normalize SVG <use> element events #4963
    if (target.correspondingUseElement) {
      target = target.correspondingUseElement;
    }

    // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
    // @see http://www.quirksmode.org/js/events_properties.html
    return target.nodeType === 3 ? target.parentNode : target;
  }

  module.exports = getEventTarget;

/***/ },
/* 370 */
/***/ function(module, exports) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule getIteratorFn
   */

  'use strict';

  /* global Symbol */

  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  module.exports = getIteratorFn;

/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule isEventSupported
   */

  'use strict';

  var ExecutionEnvironment = __webpack_require__(109);

  var useHasFeature;
  if (ExecutionEnvironment.canUseDOM) {
    useHasFeature = document.implementation && document.implementation.hasFeature &&
    // always returns true in newer browsers as per the standard.
    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
    document.implementation.hasFeature('', '') !== true;
  }

  /**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @param {?boolean} capture Check if the capture phase is supported.
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   */
  function isEventSupported(eventNameSuffix, capture) {
    if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
      return false;
    }

    var eventName = 'on' + eventNameSuffix;
    var isSupported = eventName in document;

    if (!isSupported) {
      var element = document.createElement('div');
      element.setAttribute(eventName, 'return;');
      isSupported = typeof element[eventName] === 'function';
    }

    if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
      // This is the only way to test support for the `wheel` event in IE9+.
      isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
    }

    return isSupported;
  }

  module.exports = isEventSupported;

/***/ },
/* 372 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule setInnerHTML
   */

  'use strict';

  var ExecutionEnvironment = __webpack_require__(109);

  var WHITESPACE_TEST = /^[ \r\n\t\f]/;
  var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

  var createMicrosoftUnsafeLocalFunction = __webpack_require__(366);

  /**
   * Set the innerHTML property of a node, ensuring that whitespace is preserved
   * even in IE8.
   *
   * @param {DOMElement} node
   * @param {string} html
   * @internal
   */
  var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
    node.innerHTML = html;
  });

  if (ExecutionEnvironment.canUseDOM) {
    // IE8: When updating a just created node with innerHTML only leading
    // whitespace is removed. When updating an existing node with innerHTML
    // whitespace in root TextNodes is also collapsed.
    // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

    // Feature detection; only IE8 is known to behave improperly like this.
    var testElement = document.createElement('div');
    testElement.innerHTML = ' ';
    if (testElement.innerHTML === '') {
      setInnerHTML = function (node, html) {
        // Magic theory: IE8 supposedly differentiates between added and updated
        // nodes when processing innerHTML, innerHTML on updated nodes suffers
        // from worse whitespace behavior. Re-adding a node like this triggers
        // the initial and more favorable whitespace behavior.
        // TODO: What to do on a detached node?
        if (node.parentNode) {
          node.parentNode.replaceChild(node, node);
        }

        // We also implement a workaround for non-visible tags disappearing into
        // thin air on IE8, this only happens if there is no visible text
        // in-front of the non-visible tags. Piggyback on the whitespace fix
        // and simply check if any non-visible tags appear in the source.
        if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
          // Recover leading whitespace by temporarily prepending any character.
          // \uFEFF has the potential advantage of being zero-width/invisible.
          // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
          // in hopes that this is preserved even if "\uFEFF" is transformed to
          // the actual Unicode character (by Babel, for example).
          // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
          node.innerHTML = String.fromCharCode(0xFEFF) + html;

          // deleteData leaves an empty `TextNode` which offsets the index of all
          // children. Definitely want to avoid this.
          var textNode = node.firstChild;
          if (textNode.data.length === 1) {
            node.removeChild(textNode);
          } else {
            textNode.deleteData(0, 1);
          }
        } else {
          node.innerHTML = html;
        }
      };
    }
    testElement = null;
  }

  module.exports = setInnerHTML;

/***/ },
/* 373 */
/***/ function(module, exports) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule shouldUpdateReactComponent
   */

  'use strict';

  /**
   * Given a `prevElement` and `nextElement`, determines if the existing
   * instance should be updated as opposed to being destroyed or replaced by a new
   * instance. Both arguments are elements. This ensures that this logic can
   * operate on stateless trees without any backing instance.
   *
   * @param {?object} prevElement
   * @param {?object} nextElement
   * @return {boolean} True if the existing instance should be updated.
   * @protected
   */

  function shouldUpdateReactComponent(prevElement, nextElement) {
    var prevEmpty = prevElement === null || prevElement === false;
    var nextEmpty = nextElement === null || nextElement === false;
    if (prevEmpty || nextEmpty) {
      return prevEmpty === nextEmpty;
    }

    var prevType = typeof prevElement;
    var nextType = typeof nextElement;
    if (prevType === 'string' || prevType === 'number') {
      return nextType === 'string' || nextType === 'number';
    } else {
      return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
    }
  }

  module.exports = shouldUpdateReactComponent;

/***/ },
/* 374 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule traverseAllChildren
   */

  'use strict';

  var ReactCurrentOwner = __webpack_require__(167);
  var ReactElement = __webpack_require__(135);

  var getIteratorFn = __webpack_require__(370);
  var invariant = __webpack_require__(91);
  var KeyEscapeUtils = __webpack_require__(360);
  var warning = __webpack_require__(94);

  var SEPARATOR = '.';
  var SUBSEPARATOR = ':';

  /**
   * TODO: Test that a single child and an array with one item have the same key
   * pattern.
   */

  var didWarnAboutMaps = false;

  /**
   * Generate a key string that identifies a component within a set.
   *
   * @param {*} component A component that could contain a manual key.
   * @param {number} index Index that is used if a manual key is not provided.
   * @return {string}
   */
  function getComponentKey(component, index) {
    // Do some typechecking here since we call this blindly. We want to ensure
    // that we don't block potential future ES APIs.
    if (component && typeof component === 'object' && component.key != null) {
      // Explicit key
      return KeyEscapeUtils.escape(component.key);
    }
    // Implicit key determined by the index in the set
    return index.toString(36);
  }

  /**
   * @param {?*} children Children tree container.
   * @param {!string} nameSoFar Name of the key path so far.
   * @param {!function} callback Callback to invoke with each child found.
   * @param {?*} traverseContext Used to pass information throughout the traversal
   * process.
   * @return {!number} The number of children in this subtree.
   */
  function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
    var type = typeof children;

    if (type === 'undefined' || type === 'boolean') {
      // All of the above are perceived as null.
      children = null;
    }

    if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
      callback(traverseContext, children,
      // If it's the only child, treat the name as if it was wrapped in an array
      // so that it's consistent if the number of children grows.
      nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
      return 1;
    }

    var child;
    var nextName;
    var subtreeCount = 0; // Count of children found in the current subtree.
    var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; i++) {
        child = children[i];
        nextName = nextNamePrefix + getComponentKey(child, i);
        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
      }
    } else {
      var iteratorFn = getIteratorFn(children);
      if (iteratorFn) {
        var iterator = iteratorFn.call(children);
        var step;
        if (iteratorFn !== children.entries) {
          var ii = 0;
          while (!(step = iterator.next()).done) {
            child = step.value;
            nextName = nextNamePrefix + getComponentKey(child, ii++);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        } else {
          if (true) {
             true ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : void 0;
            didWarnAboutMaps = true;
          }
          // Iterator will provide entry [k,v] tuples rather than values.
          while (!(step = iterator.next()).done) {
            var entry = step.value;
            if (entry) {
              child = entry[1];
              nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
              subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
            }
          }
        }
      } else if (type === 'object') {
        var addendum = '';
        if (true) {
          addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
          if (children._isReactElement) {
            addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
          }
          if (ReactCurrentOwner.current) {
            var name = ReactCurrentOwner.current.getName();
            if (name) {
              addendum += ' Check the render method of `' + name + '`.';
            }
          }
        }
        var childrenString = String(children);
         true ?  true ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : void 0;
      }
    }

    return subtreeCount;
  }

  /**
   * Traverses children that are typically specified as `props.children`, but
   * might also be specified through attributes:
   *
   * - `traverseAllChildren(this.props.children, ...)`
   * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
   *
   * The `traverseContext` is an optional argument that is passed through the
   * entire traversal. It can be used to store accumulations or anything else that
   * the callback might find relevant.
   *
   * @param {?*} children Children tree object.
   * @param {!function} callback To invoke upon traversing each child.
   * @param {?*} traverseContext Context for traversal.
   * @return {!number} The number of children in this subtree.
   */
  function traverseAllChildren(children, callback, traverseContext) {
    if (children == null) {
      return 0;
    }

    return traverseAllChildrenImpl(children, '', callback, traverseContext);
  }

  module.exports = traverseAllChildren;

/***/ },
/* 375 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2015-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule validateDOMNesting
   */

  'use strict';

  var _assign = __webpack_require__(100);

  var emptyFunction = __webpack_require__(124);
  var warning = __webpack_require__(94);

  var validateDOMNesting = emptyFunction;

  if (true) {
    // This validation code was written based on the HTML5 parsing spec:
    // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    //
    // Note: this does not catch all invalid nesting, nor does it try to (as it's
    // not clear what practical benefit doing so provides); instead, we warn only
    // for cases where the parser will give a parse tree differing from what React
    // intended. For example, <b><div></div></b> is invalid but we don't warn
    // because it still parses correctly; we do warn for other cases like nested
    // <p> tags where the beginning of the second element implicitly closes the
    // first, causing a confusing mess.

    // https://html.spec.whatwg.org/multipage/syntax.html#special
    var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

    // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

    // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
    // TODO: Distinguish by namespace here -- for <title>, including it here
    // errs on the side of fewer warnings
    'foreignObject', 'desc', 'title'];

    // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
    var buttonScopeTags = inScopeTags.concat(['button']);

    // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
    var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

    var emptyAncestorInfo = {
      current: null,

      formTag: null,
      aTagInScope: null,
      buttonTagInScope: null,
      nobrTagInScope: null,
      pTagInButtonScope: null,

      listItemTagAutoclosing: null,
      dlItemTagAutoclosing: null
    };

    var updatedAncestorInfo = function (oldInfo, tag, instance) {
      var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
      var info = { tag: tag, instance: instance };

      if (inScopeTags.indexOf(tag) !== -1) {
        ancestorInfo.aTagInScope = null;
        ancestorInfo.buttonTagInScope = null;
        ancestorInfo.nobrTagInScope = null;
      }
      if (buttonScopeTags.indexOf(tag) !== -1) {
        ancestorInfo.pTagInButtonScope = null;
      }

      // See rules for 'li', 'dd', 'dt' start tags in
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
      if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
        ancestorInfo.listItemTagAutoclosing = null;
        ancestorInfo.dlItemTagAutoclosing = null;
      }

      ancestorInfo.current = info;

      if (tag === 'form') {
        ancestorInfo.formTag = info;
      }
      if (tag === 'a') {
        ancestorInfo.aTagInScope = info;
      }
      if (tag === 'button') {
        ancestorInfo.buttonTagInScope = info;
      }
      if (tag === 'nobr') {
        ancestorInfo.nobrTagInScope = info;
      }
      if (tag === 'p') {
        ancestorInfo.pTagInButtonScope = info;
      }
      if (tag === 'li') {
        ancestorInfo.listItemTagAutoclosing = info;
      }
      if (tag === 'dd' || tag === 'dt') {
        ancestorInfo.dlItemTagAutoclosing = info;
      }

      return ancestorInfo;
    };

    /**
     * Returns whether
     */
    var isTagValidWithParent = function (tag, parentTag) {
      // First, let's check if we're in an unusual parsing mode...
      switch (parentTag) {
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
        case 'select':
          return tag === 'option' || tag === 'optgroup' || tag === '#text';
        case 'optgroup':
          return tag === 'option' || tag === '#text';
        // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
        // but
        case 'option':
          return tag === '#text';

        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
        // No special behavior since these rules fall back to "in body" mode for
        // all except special table nodes which cause bad parsing behavior anyway.

        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
        case 'tr':
          return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
        case 'tbody':
        case 'thead':
        case 'tfoot':
          return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
        case 'colgroup':
          return tag === 'col' || tag === 'template';

        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
        case 'table':
          return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
        case 'head':
          return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

        // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
        case 'html':
          return tag === 'head' || tag === 'body';
        case '#document':
          return tag === 'html';
      }

      // Probably in the "in body" parsing mode, so we outlaw only tag combos
      // where the parsing rules cause implicit opens or closes to be added.
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
      switch (tag) {
        case 'h1':
        case 'h2':
        case 'h3':
        case 'h4':
        case 'h5':
        case 'h6':
          return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

        case 'rp':
        case 'rt':
          return impliedEndTags.indexOf(parentTag) === -1;

        case 'body':
        case 'caption':
        case 'col':
        case 'colgroup':
        case 'frame':
        case 'head':
        case 'html':
        case 'tbody':
        case 'td':
        case 'tfoot':
        case 'th':
        case 'thead':
        case 'tr':
          // These tags are only valid with a few parents that have special child
          // parsing rules -- if we're down here, then none of those matched and
          // so we allow it only if we don't know what the parent is, as all other
          // cases are invalid.
          return parentTag == null;
      }

      return true;
    };

    /**
     * Returns whether
     */
    var findInvalidAncestorForTag = function (tag, ancestorInfo) {
      switch (tag) {
        case 'address':
        case 'article':
        case 'aside':
        case 'blockquote':
        case 'center':
        case 'details':
        case 'dialog':
        case 'dir':
        case 'div':
        case 'dl':
        case 'fieldset':
        case 'figcaption':
        case 'figure':
        case 'footer':
        case 'header':
        case 'hgroup':
        case 'main':
        case 'menu':
        case 'nav':
        case 'ol':
        case 'p':
        case 'section':
        case 'summary':
        case 'ul':

        case 'pre':
        case 'listing':

        case 'table':

        case 'hr':

        case 'xmp':

        case 'h1':
        case 'h2':
        case 'h3':
        case 'h4':
        case 'h5':
        case 'h6':
          return ancestorInfo.pTagInButtonScope;

        case 'form':
          return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

        case 'li':
          return ancestorInfo.listItemTagAutoclosing;

        case 'dd':
        case 'dt':
          return ancestorInfo.dlItemTagAutoclosing;

        case 'button':
          return ancestorInfo.buttonTagInScope;

        case 'a':
          // Spec says something about storing a list of markers, but it sounds
          // equivalent to this check.
          return ancestorInfo.aTagInScope;

        case 'nobr':
          return ancestorInfo.nobrTagInScope;
      }

      return null;
    };

    /**
     * Given a ReactCompositeComponent instance, return a list of its recursive
     * owners, starting at the root and ending with the instance itself.
     */
    var findOwnerStack = function (instance) {
      if (!instance) {
        return [];
      }

      var stack = [];
      do {
        stack.push(instance);
      } while (instance = instance._currentElement._owner);
      stack.reverse();
      return stack;
    };

    var didWarn = {};

    validateDOMNesting = function (childTag, childInstance, ancestorInfo) {
      ancestorInfo = ancestorInfo || emptyAncestorInfo;
      var parentInfo = ancestorInfo.current;
      var parentTag = parentInfo && parentInfo.tag;

      var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
      var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
      var problematic = invalidParent || invalidAncestor;

      if (problematic) {
        var ancestorTag = problematic.tag;
        var ancestorInstance = problematic.instance;

        var childOwner = childInstance && childInstance._currentElement._owner;
        var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

        var childOwners = findOwnerStack(childOwner);
        var ancestorOwners = findOwnerStack(ancestorOwner);

        var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
        var i;

        var deepestCommon = -1;
        for (i = 0; i < minStackLen; i++) {
          if (childOwners[i] === ancestorOwners[i]) {
            deepestCommon = i;
          } else {
            break;
          }
        }

        var UNKNOWN = '(unknown)';
        var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
          return inst.getName() || UNKNOWN;
        });
        var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
          return inst.getName() || UNKNOWN;
        });
        var ownerInfo = [].concat(
        // If the parent and child instances have a common owner ancestor, start
        // with that -- otherwise we just start with the parent's owners.
        deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
        // If we're warning about an invalid (non-parent) ancestry, add '...'
        invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

        var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
        if (didWarn[warnKey]) {
          return;
        }
        didWarn[warnKey] = true;

        var tagDisplayName = childTag;
        if (childTag !== '#text') {
          tagDisplayName = '<' + childTag + '>';
        }

        if (invalidParent) {
          var info = '';
          if (ancestorTag === 'table' && childTag === 'tr') {
            info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
          }
           true ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>. ' + 'See %s.%s', tagDisplayName, ancestorTag, ownerInfo, info) : void 0;
        } else {
           true ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
        }
      }
    };

    validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

    // For testing
    validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
      ancestorInfo = ancestorInfo || emptyAncestorInfo;
      var parentInfo = ancestorInfo.current;
      var parentTag = parentInfo && parentInfo.tag;
      return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
    };
  }

  module.exports = validateDOMNesting;

/***/ },
/* 376 */
/***/ function(module, exports, __webpack_require__) {

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.


  // a transform stream is a readable/writable stream where you do
  // something with the data.  Sometimes it's called a "filter",
  // but that's not a great name for it, since that implies a thing where
  // some bits pass through, and others are simply ignored.  (That would
  // be a valid example of a transform, of course.)
  //
  // While the output is causally related to the input, it's not a
  // necessarily symmetric or synchronous transformation.  For example,
  // a zlib stream might take multiple plain-text writes(), and then
  // emit a single compressed chunk some time in the future.
  //
  // Here's how this works:
  //
  // The Transform stream has all the aspects of the readable and writable
  // stream classes.  When you write(chunk), that calls _write(chunk,cb)
  // internally, and returns false if there's a lot of pending writes
  // buffered up.  When you call read(), that calls _read(n) until
  // there's enough pending readable data buffered up.
  //
  // In a transform stream, the written data is placed in a buffer.  When
  // _read(n) is called, it transforms the queued up data, calling the
  // buffered _write cb's as it consumes chunks.  If consuming a single
  // written chunk would result in multiple output chunks, then the first
  // outputted bit calls the readcb, and subsequent chunks just go into
  // the read buffer, and will cause it to emit 'readable' if necessary.
  //
  // This way, back-pressure is actually determined by the reading side,
  // since _read has to be called to start processing a new chunk.  However,
  // a pathological inflate type of transform can cause excessive buffering
  // here.  For example, imagine a stream where every byte of input is
  // interpreted as an integer from 0-255, and then results in that many
  // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
  // 1kb of data being output.  In this case, you could write a very small
  // amount of input, and end up with a very large amount of output.  In
  // such a pathological inflating mechanism, there'd be no way to tell
  // the system to stop doing the transform.  A single 4MB write could
  // cause the system to run out of memory.
  //
  // However, even in such a pathological case, only a single written chunk
  // would be consumed, and then the rest would wait (un-transformed) until
  // the results of the previous transformed chunk were consumed.

  module.exports = Transform;

  var Duplex = __webpack_require__(188);

  /*<replacement>*/
  var util = __webpack_require__(211);
  util.inherits = __webpack_require__(185);
  /*</replacement>*/

  util.inherits(Transform, Duplex);


  function TransformState(options, stream) {
    this.afterTransform = function(er, data) {
      return afterTransform(stream, er, data);
    };

    this.needTransform = false;
    this.transforming = false;
    this.writecb = null;
    this.writechunk = null;
  }

  function afterTransform(stream, er, data) {
    var ts = stream._transformState;
    ts.transforming = false;

    var cb = ts.writecb;

    if (!cb)
      return stream.emit('error', new Error('no writecb in Transform class'));

    ts.writechunk = null;
    ts.writecb = null;

    if (!util.isNullOrUndefined(data))
      stream.push(data);

    if (cb)
      cb(er);

    var rs = stream._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) {
      stream._read(rs.highWaterMark);
    }
  }


  function Transform(options) {
    if (!(this instanceof Transform))
      return new Transform(options);

    Duplex.call(this, options);

    this._transformState = new TransformState(options, this);

    // when the writable side finishes, then flush out anything remaining.
    var stream = this;

    // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true;

    // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;

    this.once('prefinish', function() {
      if (util.isFunction(this._flush))
        this._flush(function(er) {
          done(stream, er);
        });
      else
        done(stream);
    });
  }

  Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
  };

  // This is the part where you do stuff!
  // override this function in implementation classes.
  // 'chunk' is an input chunk.
  //
  // Call `push(newChunk)` to pass along transformed output
  // to the readable side.  You may call 'push' zero or more times.
  //
  // Call `cb(err)` when you are done with this chunk.  If you pass
  // an error, then that'll put the hurt on the whole operation.  If you
  // never call cb(), then you'll never get another chunk.
  Transform.prototype._transform = function(chunk, encoding, cb) {
    throw new Error('not implemented');
  };

  Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
      var rs = this._readableState;
      if (ts.needTransform ||
          rs.needReadable ||
          rs.length < rs.highWaterMark)
        this._read(rs.highWaterMark);
    }
  };

  // Doesn't matter what the args are here.
  // _transform does all the work.
  // That we got here means that the readable side wants more data.
  Transform.prototype._read = function(n) {
    var ts = this._transformState;

    if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
      ts.transforming = true;
      this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else {
      // mark that we need a transform, so that any data that comes in
      // will get processed, now that we've asked for it.
      ts.needTransform = true;
    }
  };


  function done(stream, er) {
    if (er)
      return stream.emit('error', er);

    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    var ws = stream._writableState;
    var ts = stream._transformState;

    if (ws.length)
      throw new Error('calling transform done when ws.length != 0');

    if (ts.transforming)
      throw new Error('calling transform done when still transforming');

    return stream.push(null);
  }


/***/ },
/* 377 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  // A bit simpler than readable streams.
  // Implement an async ._write(chunk, cb), and it'll handle all
  // the drain event emission and buffering.

  module.exports = Writable;

  /*<replacement>*/
  var Buffer = __webpack_require__(115).Buffer;
  /*</replacement>*/

  Writable.WritableState = WritableState;


  /*<replacement>*/
  var util = __webpack_require__(211);
  util.inherits = __webpack_require__(185);
  /*</replacement>*/

  var Stream = __webpack_require__(278);

  util.inherits(Writable, Stream);

  function WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
  }

  function WritableState(options, stream) {
    var Duplex = __webpack_require__(188);

    options = options || {};

    // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    var hwm = options.highWaterMark;
    var defaultHwm = options.objectMode ? 16 : 16 * 1024;
    this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

    // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;

    if (stream instanceof Duplex)
      this.objectMode = this.objectMode || !!options.writableObjectMode;

    // cast to ints.
    this.highWaterMark = ~~this.highWaterMark;

    this.needDrain = false;
    // at the start of calling end()
    this.ending = false;
    // when end() has been called, and returned
    this.ended = false;
    // when 'finish' is emitted
    this.finished = false;

    // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;

    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8';

    // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0;

    // a flag to see when we're in the middle of a write.
    this.writing = false;

    // when true all writes will be buffered until .uncork() call
    this.corked = 0;

    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;

    // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false;

    // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
      onwrite(stream, er);
    };

    // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null;

    // the amount that is being written when _write is called.
    this.writelen = 0;

    this.buffer = [];

    // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0;

    // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false;

    // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false;
  }

  function Writable(options) {
    var Duplex = __webpack_require__(188);

    // Writable ctor is applied to Duplexes, though they're not
    // instanceof Writable, they're instanceof Readable.
    if (!(this instanceof Writable) && !(this instanceof Duplex))
      return new Writable(options);

    this._writableState = new WritableState(options, this);

    // legacy.
    this.writable = true;

    Stream.call(this);
  }

  // Otherwise people can pipe Writable streams, which is just wrong.
  Writable.prototype.pipe = function() {
    this.emit('error', new Error('Cannot pipe. Not readable.'));
  };


  function writeAfterEnd(stream, state, cb) {
    var er = new Error('write after end');
    // TODO: defer error events consistently everywhere, not just the cb
    stream.emit('error', er);
    process.nextTick(function() {
      cb(er);
    });
  }

  // If we get something that is not a buffer, string, null, or undefined,
  // and we're not in objectMode, then that's an error.
  // Otherwise stream chunks are all considered to be of length=1, and the
  // watermarks determine how many objects to keep in the buffer, rather than
  // how many bytes or characters.
  function validChunk(stream, state, chunk, cb) {
    var valid = true;
    if (!util.isBuffer(chunk) &&
        !util.isString(chunk) &&
        !util.isNullOrUndefined(chunk) &&
        !state.objectMode) {
      var er = new TypeError('Invalid non-string/buffer chunk');
      stream.emit('error', er);
      process.nextTick(function() {
        cb(er);
      });
      valid = false;
    }
    return valid;
  }

  Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;

    if (util.isFunction(encoding)) {
      cb = encoding;
      encoding = null;
    }

    if (util.isBuffer(chunk))
      encoding = 'buffer';
    else if (!encoding)
      encoding = state.defaultEncoding;

    if (!util.isFunction(cb))
      cb = function() {};

    if (state.ended)
      writeAfterEnd(this, state, cb);
    else if (validChunk(this, state, chunk, cb)) {
      state.pendingcb++;
      ret = writeOrBuffer(this, state, chunk, encoding, cb);
    }

    return ret;
  };

  Writable.prototype.cork = function() {
    var state = this._writableState;

    state.corked++;
  };

  Writable.prototype.uncork = function() {
    var state = this._writableState;

    if (state.corked) {
      state.corked--;

      if (!state.writing &&
          !state.corked &&
          !state.finished &&
          !state.bufferProcessing &&
          state.buffer.length)
        clearBuffer(this, state);
    }
  };

  function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode &&
        state.decodeStrings !== false &&
        util.isString(chunk)) {
      chunk = new Buffer(chunk, encoding);
    }
    return chunk;
  }

  // if we're already writing something, then just put this
  // in the queue, and wait our turn.  Otherwise, call _write
  // If we return false, then we need a drain event, so set that flag.
  function writeOrBuffer(stream, state, chunk, encoding, cb) {
    chunk = decodeChunk(state, chunk, encoding);
    if (util.isBuffer(chunk))
      encoding = 'buffer';
    var len = state.objectMode ? 1 : chunk.length;

    state.length += len;

    var ret = state.length < state.highWaterMark;
    // we must ensure that previous needDrain will not be reset to false.
    if (!ret)
      state.needDrain = true;

    if (state.writing || state.corked)
      state.buffer.push(new WriteReq(chunk, encoding, cb));
    else
      doWrite(stream, state, false, len, chunk, encoding, cb);

    return ret;
  }

  function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (writev)
      stream._writev(chunk, state.onwrite);
    else
      stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
  }

  function onwriteError(stream, state, sync, er, cb) {
    if (sync)
      process.nextTick(function() {
        state.pendingcb--;
        cb(er);
      });
    else {
      state.pendingcb--;
      cb(er);
    }

    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  }

  function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
  }

  function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;

    onwriteStateUpdate(state);

    if (er)
      onwriteError(stream, state, sync, er, cb);
    else {
      // Check if we're actually ready to finish, but don't emit yet
      var finished = needFinish(stream, state);

      if (!finished &&
          !state.corked &&
          !state.bufferProcessing &&
          state.buffer.length) {
        clearBuffer(stream, state);
      }

      if (sync) {
        process.nextTick(function() {
          afterWrite(stream, state, finished, cb);
        });
      } else {
        afterWrite(stream, state, finished, cb);
      }
    }
  }

  function afterWrite(stream, state, finished, cb) {
    if (!finished)
      onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
  }

  // Must force callback to be called on nextTick, so that we don't
  // emit 'drain' before the write() consumer gets the 'false' return
  // value, and has a chance to attach a 'drain' listener.
  function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
      state.needDrain = false;
      stream.emit('drain');
    }
  }


  // if there's something in the buffer waiting, then process it
  function clearBuffer(stream, state) {
    state.bufferProcessing = true;

    if (stream._writev && state.buffer.length > 1) {
      // Fast case, write everything using _writev()
      var cbs = [];
      for (var c = 0; c < state.buffer.length; c++)
        cbs.push(state.buffer[c].callback);

      // count the one we are adding, as well.
      // TODO(isaacs) clean this up
      state.pendingcb++;
      doWrite(stream, state, true, state.length, state.buffer, '', function(err) {
        for (var i = 0; i < cbs.length; i++) {
          state.pendingcb--;
          cbs[i](err);
        }
      });

      // Clear buffer
      state.buffer = [];
    } else {
      // Slow case, write chunks one-by-one
      for (var c = 0; c < state.buffer.length; c++) {
        var entry = state.buffer[c];
        var chunk = entry.chunk;
        var encoding = entry.encoding;
        var cb = entry.callback;
        var len = state.objectMode ? 1 : chunk.length;

        doWrite(stream, state, false, len, chunk, encoding, cb);

        // if we didn't call the onwrite immediately, then
        // it means that we need to wait until it does.
        // also, that means that the chunk and cb are currently
        // being processed, so move the buffer counter past them.
        if (state.writing) {
          c++;
          break;
        }
      }

      if (c < state.buffer.length)
        state.buffer = state.buffer.slice(c);
      else
        state.buffer.length = 0;
    }

    state.bufferProcessing = false;
  }

  Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new Error('not implemented'));

  };

  Writable.prototype._writev = null;

  Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;

    if (util.isFunction(chunk)) {
      cb = chunk;
      chunk = null;
      encoding = null;
    } else if (util.isFunction(encoding)) {
      cb = encoding;
      encoding = null;
    }

    if (!util.isNullOrUndefined(chunk))
      this.write(chunk, encoding);

    // .end() fully uncorks
    if (state.corked) {
      state.corked = 1;
      this.uncork();
    }

    // ignore unnecessary end() calls.
    if (!state.ending && !state.finished)
      endWritable(this, state, cb);
  };


  function needFinish(stream, state) {
    return (state.ending &&
            state.length === 0 &&
            !state.finished &&
            !state.writing);
  }

  function prefinish(stream, state) {
    if (!state.prefinished) {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }

  function finishMaybe(stream, state) {
    var need = needFinish(stream, state);
    if (need) {
      if (state.pendingcb === 0) {
        prefinish(stream, state);
        state.finished = true;
        stream.emit('finish');
      } else
        prefinish(stream, state);
    }
    return need;
  }

  function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
    if (cb) {
      if (state.finished)
        process.nextTick(cb);
      else
        stream.once('finish', cb);
    }
    state.ended = true;
  }

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(111)))

/***/ },
/* 378 */
/***/ function(module, exports) {

  'use strict';
  module.exports = function () {
  	return /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g;
  };


/***/ },
/* 379 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;

  exports.default = function (rawLines, lineNumber, colNumber) {
    /*istanbul ignore next*/var opts = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];

    colNumber = Math.max(colNumber, 0);

    var highlighted = opts.highlightCode && /*istanbul ignore next*/_chalk2.default.supportsColor;
    if (highlighted) rawLines = highlight(rawLines);

    var lines = rawLines.split(NEWLINE);
    var start = Math.max(lineNumber - 3, 0);
    var end = Math.min(lines.length, lineNumber + 3);

    if (!lineNumber && !colNumber) {
      start = 0;
      end = lines.length;
    }

    var numberMaxWidth = String(end).length;

    var frame = lines.slice(start, end).map(function (line, index) {
      var number = start + 1 + index;
      var paddedNumber = /*istanbul ignore next*/(" " + number).slice(-numberMaxWidth);
      var gutter = /*istanbul ignore next*/" " + paddedNumber + " | ";
      if (number === lineNumber) {
        var markerLine = "";
        if (colNumber) {
          var markerSpacing = line.slice(0, colNumber - 1).replace(/[^\t]/g, " ");
          markerLine = /*istanbul ignore next*/"\n " + gutter.replace(/\d/g, " ") + markerSpacing + "^";
        }
        return (/*istanbul ignore next*/">" + gutter + line + markerLine
        );
      } else {
        return (/*istanbul ignore next*/" " + gutter + line
        );
      }
    }).join("\n");

    if (highlighted) {
      return (/*istanbul ignore next*/_chalk2.default.reset(frame)
      );
    } else {
      return frame;
    }
  };

  var /*istanbul ignore next*/_jsTokens = __webpack_require__(1072);

  /*istanbul ignore next*/
  var _jsTokens2 = _interopRequireDefault(_jsTokens);

  var /*istanbul ignore next*/_esutils = __webpack_require__(437);

  /*istanbul ignore next*/
  var _esutils2 = _interopRequireDefault(_esutils);

  var /*istanbul ignore next*/_chalk = __webpack_require__(792);

  /*istanbul ignore next*/
  var _chalk2 = _interopRequireDefault(_chalk);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Chalk styles for token types.
   */

  var defs = {
    string: /*istanbul ignore next*/_chalk2.default.red,
    punctuator: /*istanbul ignore next*/_chalk2.default.bold,
    curly: /*istanbul ignore next*/_chalk2.default.green,
    parens: /*istanbul ignore next*/_chalk2.default.blue.bold,
    square: /*istanbul ignore next*/_chalk2.default.yellow,
    keyword: /*istanbul ignore next*/_chalk2.default.cyan,
    number: /*istanbul ignore next*/_chalk2.default.magenta,
    regex: /*istanbul ignore next*/_chalk2.default.magenta,
    comment: /*istanbul ignore next*/_chalk2.default.grey,
    invalid: /*istanbul ignore next*/_chalk2.default.inverse
  };

  /**
   * RegExp to test for newlines in terminal.
   */

  var NEWLINE = /\r\n|[\n\r\u2028\u2029]/;

  /**
   * Get the type of token, specifying punctuator type.
   */

  function getTokenType(match) {
    var token = /*istanbul ignore next*/_jsTokens2.default.matchToToken(match);
    if (token.type === "name" && /*istanbul ignore next*/_esutils2.default.keyword.isReservedWordES6(token.value)) {
      return "keyword";
    }

    if (token.type === "punctuator") {
      switch (token.value) {
        case "{":
        case "}":
          return "curly";
        case "(":
        case ")":
          return "parens";
        case "[":
        case "]":
          return "square";
      }
    }

    return token.type;
  }

  /**
   * Highlight `text`.
   */

  function highlight(text) {
    return text.replace( /*istanbul ignore next*/_jsTokens2.default, function () {
      /*istanbul ignore next*/
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var type = getTokenType(args);
      var colorize = defs[type];
      if (colorize) {
        return args[0].split(NEWLINE).map(function (str) /*istanbul ignore next*/{
          return colorize(str);
        }).join("\n");
      } else {
        return args[0];
      }
    });
  }

  /**
   * Create a code frame, adding line numbers, code highlighting, and pointing to a given position.
   */

  /*istanbul ignore next*/module.exports = exports["default"];

/***/ },
/* 380 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  exports.__esModule = true;
  exports.transformFromAst = exports.transform = exports.analyse = exports.Pipeline = exports.OptionManager = exports.traverse = exports.types = exports.messages = exports.util = exports.version = exports.template = exports.buildExternalHelpers = exports.options = exports.File = undefined;

  var _file = __webpack_require__(280);

  Object.defineProperty(exports, "File", {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(_file).default;
    }
  });

  var _config = __webpack_require__(202);

  Object.defineProperty(exports, "options", {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(_config).default;
    }
  });

  var _buildExternalHelpers = __webpack_require__(533);

  Object.defineProperty(exports, "buildExternalHelpers", {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(_buildExternalHelpers).default;
    }
  });

  var _babelTemplate = __webpack_require__(287);

  Object.defineProperty(exports, "template", {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(_babelTemplate).default;
    }
  });

  var _package = __webpack_require__(1073);

  Object.defineProperty(exports, "version", {
    enumerable: true,
    get: function get() {
      return _package.version;
    }
  });
  exports.Plugin = Plugin;
  exports.transformFile = transformFile;
  exports.transformFileSync = transformFileSync;

  var _isFunction = __webpack_require__(199);

  var _isFunction2 = _interopRequireDefault(_isFunction);

  var _fs = __webpack_require__(126);

  var _fs2 = _interopRequireDefault(_fs);

  var _util = __webpack_require__(284);

  var util = _interopRequireWildcard(_util);

  var _babelMessages = __webpack_require__(157);

  var messages = _interopRequireWildcard(_babelMessages);

  var _babelTypes = __webpack_require__(90);

  var t = _interopRequireWildcard(_babelTypes);

  var _babelTraverse = __webpack_require__(128);

  var _babelTraverse2 = _interopRequireDefault(_babelTraverse);

  var _optionManager = __webpack_require__(203);

  var _optionManager2 = _interopRequireDefault(_optionManager);

  var _pipeline = __webpack_require__(538);

  var _pipeline2 = _interopRequireDefault(_pipeline);

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  //

  exports.util = util;
  exports.messages = messages;
  exports.types = t;
  exports.traverse = _babelTraverse2.default;
  exports.OptionManager = _optionManager2.default;
  function Plugin(alias) {
    throw new Error("The (" + alias + ") Babel 5 plugin is being run with Babel 6.");
  }

  //

  exports.Pipeline = _pipeline2.default;


  var pipeline = new _pipeline2.default();
  var analyse = exports.analyse = pipeline.analyse.bind(pipeline);
  var transform = exports.transform = pipeline.transform.bind(pipeline);
  var transformFromAst = exports.transformFromAst = pipeline.transformFromAst.bind(pipeline);

  //

  function transformFile(filename, opts, callback) {
    if ((0, _isFunction2.default)(opts)) {
      callback = opts;
      opts = {};
    }

    opts.filename = filename;

    _fs2.default.readFile(filename, function (err, code) {
      var result = void 0;

      if (!err) {
        try {
          result = transform(code, opts);
        } catch (_err) {
          err = _err;
        }
      }

      if (err) {
        callback(err);
      } else {
        callback(null, result);
      }
    });
  }

  function transformFileSync(filename) {
    var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    opts.filename = filename;
    return transform(_fs2.default.readFileSync(filename, "utf8"), opts);
  }

/***/ },
/* 381 */
/***/ function(module, exports, __webpack_require__) {

  var map = {
  	"./config": 202,
  	"./config.js": 202,
  	"./index": 281,
  	"./index.js": 281,
  	"./option-manager": 203,
  	"./option-manager.js": 203,
  	"./parsers": 282,
  	"./parsers.js": 282,
  	"./removed": 283,
  	"./removed.js": 283
  };
  function webpackContext(req) {
  	return __webpack_require__(webpackContextResolve(req));
  };
  function webpackContextResolve(req) {
  	return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
  };
  webpackContext.keys = function webpackContextKeys() {
  	return Object.keys(map);
  };
  webpackContext.resolve = webpackContextResolve;
  module.exports = webpackContext;
  webpackContext.id = 381;


/***/ },
/* 382 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;
  exports.ArrayPattern = exports.ObjectPattern = exports.RestProperty = exports.SpreadProperty = exports.SpreadElement = undefined;

  var _stringify = __webpack_require__(170);

  var _stringify2 = _interopRequireDefault(_stringify);

  exports.Identifier = Identifier;
  /*istanbul ignore next*/exports.RestElement = RestElement;
  /*istanbul ignore next*/exports.ObjectExpression = ObjectExpression;
  /*istanbul ignore next*/exports.ObjectMethod = ObjectMethod;
  /*istanbul ignore next*/exports.ObjectProperty = ObjectProperty;
  /*istanbul ignore next*/exports.ArrayExpression = ArrayExpression;
  /*istanbul ignore next*/exports.RegExpLiteral = RegExpLiteral;
  /*istanbul ignore next*/exports.BooleanLiteral = BooleanLiteral;
  /*istanbul ignore next*/exports.NullLiteral = NullLiteral;
  /*istanbul ignore next*/exports.NumericLiteral = NumericLiteral;
  /*istanbul ignore next*/exports.StringLiteral = StringLiteral;
  /*istanbul ignore next*/exports._stringLiteral = _stringLiteral;

  var /*istanbul ignore next*/_babelTypes = __webpack_require__(90);

  /*istanbul ignore next*/
  var t = _interopRequireWildcard(_babelTypes);

  /*istanbul ignore next*/
  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function Identifier(node) {
    // FIXME: We hang variance off Identifer to support Flow's def-site variance.
    // This is a terrible hack, but changing type annotations to use a new,
    // dedicated node would be a breaking change. This should be cleaned up in
    // the next major.
    if (node.variance === "plus") {
      this.push("+");
    } else if (node.variance === "minus") {
      this.push("-");
    }

    this.push(node.name);
  } /* eslint max-len: 0 */
  /* eslint quotes: 0 */

  function RestElement(node) {
    this.push("...");
    this.print(node.argument, node);
  }

  /*istanbul ignore next*/exports.SpreadElement = RestElement;
  /*istanbul ignore next*/exports.SpreadProperty = RestElement;
  /*istanbul ignore next*/exports.RestProperty = RestElement;
  function ObjectExpression(node) {
    var props = node.properties;

    this.push("{");
    this.printInnerComments(node);

    if (props.length) {
      this.space();
      this.printList(props, node, { indent: true });
      this.space();
    }

    this.push("}");
  }

  /*istanbul ignore next*/exports.ObjectPattern = ObjectExpression;
  function ObjectMethod(node) {
    this.printJoin(node.decorators, node, { separator: "" });
    this._method(node);
  }

  function ObjectProperty(node) {
    this.printJoin(node.decorators, node, { separator: "" });

    if (node.computed) {
      this.push("[");
      this.print(node.key, node);
      this.push("]");
    } else {
      // print `({ foo: foo = 5 } = {})` as `({ foo = 5 } = {});`
      if (t.isAssignmentPattern(node.value) && t.isIdentifier(node.key) && node.key.name === node.value.left.name) {
        this.print(node.value, node);
        return;
      }

      this.print(node.key, node);

      // shorthand!
      if (node.shorthand && t.isIdentifier(node.key) && t.isIdentifier(node.value) && node.key.name === node.value.name) {
        return;
      }
    }

    this.push(":");
    this.space();
    this.print(node.value, node);
  }

  function ArrayExpression(node) {
    var elems = node.elements;
    var len = elems.length;

    this.push("[");
    this.printInnerComments(node);

    for (var i = 0; i < elems.length; i++) {
      var elem = elems[i];
      if (elem) {
        if (i > 0) this.space();
        this.print(elem, node);
        if (i < len - 1) this.push(",");
      } else {
        // If the array expression ends with a hole, that hole
        // will be ignored by the interpreter, but if it ends with
        // two (or more) holes, we need to write out two (or more)
        // commas so that the resulting code is interpreted with
        // both (all) of the holes.
        this.push(",");
      }
    }

    this.push("]");
  }

  /*istanbul ignore next*/exports.ArrayPattern = ArrayExpression;
  function RegExpLiteral(node) {
    this.push( /*istanbul ignore next*/"/" + node.pattern + "/" + node.flags);
  }

  function BooleanLiteral(node) {
    this.push(node.value ? "true" : "false");
  }

  function NullLiteral() {
    this.push("null");
  }

  function NumericLiteral(node) {
    this.push(node.value + "");
  }

  function StringLiteral(node, parent) {
    this.push(this._stringLiteral(node.value, parent));
  }

  function _stringLiteral(val, parent) {
    val = /*istanbul ignore next*/(0, _stringify2.default)(val);

    // escape illegal js but valid json unicode characters
    val = val.replace(/[\u000A\u000D\u2028\u2029]/g, function (c) {
      return "\\u" + ("0000" + c.charCodeAt(0).toString(16)).slice(-4);
    });

    if (this.format.quotes === "single" && !t.isJSX(parent)) {
      // remove double quotes
      val = val.slice(1, -1);

      // unescape double quotes
      val = val.replace(/\\"/g, '"');

      // escape single quotes
      val = val.replace(/'/g, "\\'");

      // add single quotes
      val = /*istanbul ignore next*/"'" + val + "'";
    }

    return val;
  }

/***/ },
/* 383 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;
  exports.CodeGenerator = undefined;

  var _classCallCheck2 = __webpack_require__(97);

  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

  var _possibleConstructorReturn2 = __webpack_require__(172);

  var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

  var _inherits2 = __webpack_require__(171);

  var _inherits3 = _interopRequireDefault(_inherits2);

  exports.default = function (ast, opts, code) {
    var gen = new CodeGenerator(ast, opts, code);
    return gen.generate();
  };

  var /*istanbul ignore next*/_detectIndent = __webpack_require__(1033);

  /*istanbul ignore next*/
  var _detectIndent2 = _interopRequireDefault(_detectIndent);

  var /*istanbul ignore next*/_whitespace = __webpack_require__(555);

  /*istanbul ignore next*/
  var _whitespace2 = _interopRequireDefault(_whitespace);

  var /*istanbul ignore next*/_sourceMap = __webpack_require__(554);

  /*istanbul ignore next*/
  var _sourceMap2 = _interopRequireDefault(_sourceMap);

  var /*istanbul ignore next*/_position = __webpack_require__(552);

  /*istanbul ignore next*/
  var _position2 = _interopRequireDefault(_position);

  var /*istanbul ignore next*/_babelMessages = __webpack_require__(157);

  /*istanbul ignore next*/
  var messages = _interopRequireWildcard(_babelMessages);

  var /*istanbul ignore next*/_printer = __webpack_require__(553);

  /*istanbul ignore next*/
  var _printer2 = _interopRequireDefault(_printer);

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Babel's code generator, turns an ast into code, maintaining sourcemaps,
   * user preferences, and valid output.
   */

  var CodeGenerator = exports.CodeGenerator = function (_Printer) {
    (0, _inherits3.default)(CodeGenerator, _Printer);

    function /*istanbul ignore next*/CodeGenerator(ast, opts, code) {
      /*istanbul ignore next*/(0, _classCallCheck3.default)(this, CodeGenerator);

      opts = opts || {};

      var comments = ast.comments || [];
      var tokens = ast.tokens || [];
      var format = CodeGenerator.normalizeOptions(code, opts, tokens);

      var position = new /*istanbul ignore next*/_position2.default();

      /*istanbul ignore next*/
      var _this = (0, _possibleConstructorReturn3.default)(this, /*istanbul ignore next*/_Printer.call( /*istanbul ignore next*/this, position, format));

      /*istanbul ignore next*/_this.comments = comments;
      /*istanbul ignore next*/_this.position = position;
      /*istanbul ignore next*/_this.tokens = tokens;
      /*istanbul ignore next*/_this.format = format;
      /*istanbul ignore next*/_this.opts = opts;
      /*istanbul ignore next*/_this.ast = ast;
      /*istanbul ignore next*/_this._inForStatementInitCounter = 0;

      /*istanbul ignore next*/_this.whitespace = new /*istanbul ignore next*/_whitespace2.default(tokens);
      /*istanbul ignore next*/_this.map = new /*istanbul ignore next*/_sourceMap2.default(position, opts, code);
      /*istanbul ignore next*/return _this;
    }

    /**
     * Normalize generator options, setting defaults.
     *
     * - Detects code indentation.
     * - If `opts.compact = "auto"` and the code is over 100KB, `compact` will be set to `true`.
      */

    CodeGenerator.normalizeOptions = function normalizeOptions(code, opts, tokens) {
      var style = "  ";
      if (code && typeof code === "string") {
        var _indent = /*istanbul ignore next*/(0, _detectIndent2.default)(code).indent;
        if (_indent && _indent !== " ") style = _indent;
      }

      var format = {
        auxiliaryCommentBefore: opts.auxiliaryCommentBefore,
        auxiliaryCommentAfter: opts.auxiliaryCommentAfter,
        shouldPrintComment: opts.shouldPrintComment,
        retainLines: opts.retainLines,
        comments: opts.comments == null || opts.comments,
        compact: opts.compact,
        minified: opts.minified,
        concise: opts.concise,
        quotes: opts.quotes || CodeGenerator.findCommonStringDelimiter(code, tokens),
        indent: {
          adjustMultilineComment: true,
          style: style,
          base: 0
        }
      };

      if (format.minified) {
        format.compact = true;
      }

      if (format.compact === "auto") {
        format.compact = code.length > 100000; // 100KB

        if (format.compact) {
          console.error("[BABEL] " + messages.get("codeGeneratorDeopt", opts.filename, "100KB"));
        }
      }

      if (format.compact) {
        format.indent.adjustMultilineComment = false;
      }

      return format;
    };

    /**
     * Determine if input code uses more single or double quotes.
     */


    CodeGenerator.findCommonStringDelimiter = function findCommonStringDelimiter(code, tokens) {
      var occurences = {
        single: 0,
        double: 0
      };

      var checked = 0;

      for (var i = 0; i < tokens.length; i++) {
        var token = tokens[i];
        if (token.type.label !== "string") continue;

        var raw = code.slice(token.start, token.end);
        if (raw[0] === "'") {
          occurences.single++;
        } else {
          occurences.double++;
        }

        checked++;
        if (checked >= 3) break;
      }
      if (occurences.single > occurences.double) {
        return "single";
      } else {
        return "double";
      }
    };

    /**
     * Generate code and sourcemap from ast.
     *
     * Appends comments that weren't attached to any node to the end of the generated output.
     */

    CodeGenerator.prototype.generate = function generate() {
      this.print(this.ast);
      this.printAuxAfterComment();

      return {
        map: this.map.get(),
        code: this.get()
      };
    };

    return CodeGenerator;
  }(_printer2.default);

/***/ },
/* 384 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;

  var _getIterator2 = __webpack_require__(93);

  var _getIterator3 = _interopRequireDefault(_getIterator2);

  var _keys = __webpack_require__(190);

  var _keys2 = _interopRequireDefault(_keys);

  exports.isUserWhitespacable = isUserWhitespacable;
  /*istanbul ignore next*/exports.needsWhitespace = needsWhitespace;
  /*istanbul ignore next*/exports.needsWhitespaceBefore = needsWhitespaceBefore;
  /*istanbul ignore next*/exports.needsWhitespaceAfter = needsWhitespaceAfter;
  /*istanbul ignore next*/exports.needsParens = needsParens;

  var /*istanbul ignore next*/_whitespace = __webpack_require__(551);

  /*istanbul ignore next*/
  var _whitespace2 = _interopRequireDefault(_whitespace);

  var /*istanbul ignore next*/_parentheses = __webpack_require__(550);

  /*istanbul ignore next*/
  var parens = _interopRequireWildcard(_parentheses);

  var /*istanbul ignore next*/_babelTypes = __webpack_require__(90);

  /*istanbul ignore next*/
  var t = _interopRequireWildcard(_babelTypes);

  /*istanbul ignore next*/
  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function expandAliases(obj) {
    var newObj = {};

    function add(type, func) {
      var fn = newObj[type];
      newObj[type] = fn ? function (node, parent, stack) {
        var result = fn(node, parent, stack);

        return result == null ? func(node, parent, stack) : result;
      } : func;
    }

    for ( /*istanbul ignore next*/var _iterator = /*istanbul ignore next*/(0, _keys2.default)(obj), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
      /*istanbul ignore next*/
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var type = _ref;


      var aliases = t.FLIPPED_ALIAS_KEYS[type];
      if (aliases) {
        for ( /*istanbul ignore next*/var _iterator2 = aliases, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
          /*istanbul ignore next*/
          var _ref2;

          if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref2 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref2 = _i2.value;
          }

          var alias = _ref2;

          add(alias, obj[type]);
        }
      } else {
        add(type, obj[type]);
      }
    }

    return newObj;
  }

  // Rather than using `t.is` on each object property, we pre-expand any type aliases
  // into concrete types so that the 'find' call below can be as fast as possible.
  var expandedParens = expandAliases(parens);
  var expandedWhitespaceNodes = expandAliases( /*istanbul ignore next*/_whitespace2.default.nodes);
  var expandedWhitespaceList = expandAliases( /*istanbul ignore next*/_whitespace2.default.list);

  function find(obj, node, parent, printStack) {
    var fn = obj[node.type];
    return fn ? fn(node, parent, printStack) : null;
  }

  function isOrHasCallExpression(node) {
    if (t.isCallExpression(node)) {
      return true;
    }

    if (t.isMemberExpression(node)) {
      return isOrHasCallExpression(node.object) || !node.computed && isOrHasCallExpression(node.property);
    } else {
      return false;
    }
  }

  function isUserWhitespacable(node) {
    return t.isUserWhitespacable(node);
  }

  function needsWhitespace(node, parent, type) {
    if (!node) return 0;

    if (t.isExpressionStatement(node)) {
      node = node.expression;
    }

    var linesInfo = find(expandedWhitespaceNodes, node, parent);

    if (!linesInfo) {
      var items = find(expandedWhitespaceList, node, parent);
      if (items) {
        for (var i = 0; i < items.length; i++) {
          linesInfo = needsWhitespace(items[i], node, type);
          if (linesInfo) break;
        }
      }
    }

    return linesInfo && linesInfo[type] || 0;
  }

  function needsWhitespaceBefore(node, parent) {
    return needsWhitespace(node, parent, "before");
  }

  function needsWhitespaceAfter(node, parent) {
    return needsWhitespace(node, parent, "after");
  }

  function needsParens(node, parent, printStack) {
    if (!parent) return false;

    if (t.isNewExpression(parent) && parent.callee === node) {
      if (isOrHasCallExpression(node)) return true;
    }

    return find(expandedParens, node, parent, printStack);
  }

/***/ },
/* 385 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;
  exports.list = undefined;

  var _keys = __webpack_require__(190);

  var _keys2 = _interopRequireDefault(_keys);

  exports.get = get;

  var /*istanbul ignore next*/_helpers = __webpack_require__(556);

  /*istanbul ignore next*/
  var _helpers2 = _interopRequireDefault(_helpers);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function get(name) {
    var fn = /*istanbul ignore next*/_helpers2.default[name];
    if (!fn) throw new ReferenceError( /*istanbul ignore next*/"Unknown helper " + name);

    return fn().expression;
  } /* eslint no-confusing-arrow: 0 */

  var list = /*istanbul ignore next*/exports.list = /*istanbul ignore next*/(0, _keys2.default)( /*istanbul ignore next*/_helpers2.default).map(function (name) /*istanbul ignore next*/{
    return name[0] === "_" ? name.slice(1) : name;
  }).filter(function (name) /*istanbul ignore next*/{
    return name !== "__esModule";
  });

  /*istanbul ignore next*/exports.default = get;

/***/ },
/* 386 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _ExecutionEnvironment = __webpack_require__(109);

  var _createBrowserHistory = __webpack_require__(1065);

  var _createBrowserHistory2 = _interopRequireDefault(_createBrowserHistory);

  var _createMemoryHistory = __webpack_require__(1068);

  var _createMemoryHistory2 = _interopRequireDefault(_createMemoryHistory);

  var _useQueries = __webpack_require__(1069);

  var _useQueries2 = _interopRequireDefault(_useQueries);

  var _scrollBehavior = __webpack_require__(1284);

  var _scrollBehavior2 = _interopRequireDefault(_scrollBehavior);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var location = (0, _scrollBehavior2.default)((0, _useQueries2.default)(_ExecutionEnvironment.canUseDOM ? _createBrowserHistory2.default : _createMemoryHistory2.default)());

  exports.default = location;

/***/ },
/* 387 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var fs = __webpack_require__(126);
  /**
   * Check if file exists and cache the result
   * return the result in cache
   *
   * @example
   * var exists = require('./helpers/fsExists')({});
   * exists('.babelrc'); // false
   */
  module.exports = function(cache) {
    cache = cache || {};

    return function(filename) {

      if (!filename) { return false; }

      cache[filename] = cache[filename] || fs.existsSync(filename);

      return cache[filename];
    };
  };


/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var fs = __webpack_require__(126);
  /**
   * Read the file and cache the result
   * return the result in cache
   *
   * @example
   * var read = require('./helpers/fsExists')({});
   * read('.babelrc'); // file contents...
   */
  module.exports = function(cache) {
    cache = cache || {};

    return function(filename) {

      if (!filename) {
        throw new Error('filename must be a string');
      }

      cache[filename] = cache[filename] || fs.readFileSync(filename, 'utf8');

      return cache[filename];
    };
  };


/***/ },
/* 389 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;

  var _classCallCheck2 = __webpack_require__(97);

  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var Hub = function /*istanbul ignore next*/Hub(file, options) {
    /*istanbul ignore next*/(0, _classCallCheck3.default)(this, Hub);

    this.file = file;
    this.options = options;
  };

  /*istanbul ignore next*/exports.default = Hub;
  /*istanbul ignore next*/module.exports = exports["default"];

/***/ },
/* 390 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;
  exports.Flow = exports.Pure = exports.Generated = exports.User = exports.Var = exports.BlockScoped = exports.Referenced = exports.Scope = exports.Expression = exports.Statement = exports.BindingIdentifier = exports.ReferencedMemberExpression = exports.ReferencedIdentifier = undefined;

  var /*istanbul ignore next*/_babelTypes = __webpack_require__(90);

  /*istanbul ignore next*/
  var t = _interopRequireWildcard(_babelTypes);

  /*istanbul ignore next*/
  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  var ReferencedIdentifier = /*istanbul ignore next*/exports.ReferencedIdentifier = {
    types: ["Identifier", "JSXIdentifier"],
    /*istanbul ignore next*/checkPath: function checkPath(_ref, opts) {
      /*istanbul ignore next*/var node = _ref.node;
      /*istanbul ignore next*/var parent = _ref.parent;

      if (!t.isIdentifier(node, opts)) {
        if (t.isJSXIdentifier(node, opts)) {
          if ( /*istanbul ignore next*/_babelTypes.react.isCompatTag(node.name)) return false;
        } else {
          // not a JSXIdentifier or an Identifier
          return false;
        }
      }

      // check if node is referenced
      return t.isReferenced(node, parent);
    }
  };

  var ReferencedMemberExpression = /*istanbul ignore next*/exports.ReferencedMemberExpression = {
    types: ["MemberExpression"],
    /*istanbul ignore next*/checkPath: function checkPath(_ref2) {
      /*istanbul ignore next*/var node = _ref2.node;
      /*istanbul ignore next*/var parent = _ref2.parent;

      return t.isMemberExpression(node) && t.isReferenced(node, parent);
    }
  };

  var BindingIdentifier = /*istanbul ignore next*/exports.BindingIdentifier = {
    types: ["Identifier"],
    /*istanbul ignore next*/checkPath: function checkPath(_ref3) {
      /*istanbul ignore next*/var node = _ref3.node;
      /*istanbul ignore next*/var parent = _ref3.parent;

      return t.isIdentifier(node) && t.isBinding(node, parent);
    }
  };

  var Statement = /*istanbul ignore next*/exports.Statement = {
    types: ["Statement"],
    /*istanbul ignore next*/checkPath: function checkPath(_ref4) {
      /*istanbul ignore next*/var node = _ref4.node;
      /*istanbul ignore next*/var parent = _ref4.parent;

      if (t.isStatement(node)) {
        if (t.isVariableDeclaration(node)) {
          if (t.isForXStatement(parent, { left: node })) return false;
          if (t.isForStatement(parent, { init: node })) return false;
        }

        return true;
      } else {
        return false;
      }
    }
  };

  var Expression = /*istanbul ignore next*/exports.Expression = {
    types: ["Expression"],
    /*istanbul ignore next*/checkPath: function checkPath(path) {
      if (path.isIdentifier()) {
        return path.isReferencedIdentifier();
      } else {
        return t.isExpression(path.node);
      }
    }
  };

  var Scope = /*istanbul ignore next*/exports.Scope = {
    types: ["Scopable"],
    /*istanbul ignore next*/checkPath: function checkPath(path) {
      return t.isScope(path.node, path.parent);
    }
  };

  var Referenced = /*istanbul ignore next*/exports.Referenced = { /*istanbul ignore next*/
    checkPath: function checkPath(path) {
      return t.isReferenced(path.node, path.parent);
    }
  };

  var BlockScoped = /*istanbul ignore next*/exports.BlockScoped = { /*istanbul ignore next*/
    checkPath: function checkPath(path) {
      return t.isBlockScoped(path.node);
    }
  };

  var Var = /*istanbul ignore next*/exports.Var = {
    types: ["VariableDeclaration"],
    /*istanbul ignore next*/checkPath: function checkPath(path) {
      return t.isVar(path.node);
    }
  };

  var User = /*istanbul ignore next*/exports.User = { /*istanbul ignore next*/
    checkPath: function checkPath(path) {
      return path.node && !!path.node.loc;
    }
  };

  var Generated = /*istanbul ignore next*/exports.Generated = { /*istanbul ignore next*/
    checkPath: function checkPath(path) {
      return !path.isUser();
    }
  };

  var Pure = /*istanbul ignore next*/exports.Pure = { /*istanbul ignore next*/
    checkPath: function checkPath(path, opts) {
      return path.scope.isPure(path.node, opts);
    }
  };

  var Flow = /*istanbul ignore next*/exports.Flow = {
    types: ["Flow", "ImportDeclaration", "ExportDeclaration"],
    /*istanbul ignore next*/checkPath: function checkPath(_ref5) {
      /*istanbul ignore next*/var node = _ref5.node;

      if (t.isFlow(node)) {
        return true;
      } else if (t.isImportDeclaration(node)) {
        return node.importKind === "type" || node.importKind === "typeof";
      } else if (t.isExportDeclaration(node)) {
        return node.exportKind === "type";
      } else {
        return false;
      }
    }
  };

/***/ },
/* 391 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;

  var _classCallCheck2 = __webpack_require__(97);

  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * This class is responsible for a binding inside of a scope.
   *
   * It tracks the following:
   *
   *  * Node path.
   *  * Amount of times referenced by other nodes.
   *  * Paths to nodes that reassign or modify this binding.
   *  * The kind of binding. (Is it a parameter, declaration etc)
   */

  var Binding = function () {
    function /*istanbul ignore next*/Binding(_ref) {
      /*istanbul ignore next*/var existing = _ref.existing;
      /*istanbul ignore next*/var identifier = _ref.identifier;
      /*istanbul ignore next*/var scope = _ref.scope;
      /*istanbul ignore next*/var path = _ref.path;
      /*istanbul ignore next*/var kind = _ref.kind;
      /*istanbul ignore next*/(0, _classCallCheck3.default)(this, Binding);

      this.identifier = identifier;
      this.scope = scope;
      this.path = path;
      this.kind = kind;

      this.constantViolations = [];
      this.constant = true;

      this.referencePaths = [];
      this.referenced = false;
      this.references = 0;

      this.clearValue();

      if (existing) {
        this.constantViolations = [].concat(existing.path, existing.constantViolations, this.constantViolations);
      }
    }

    Binding.prototype.deoptValue = function deoptValue() {
      this.clearValue();
      this.hasDeoptedValue = true;
    };

    Binding.prototype.setValue = function setValue(value) {
      if (this.hasDeoptedValue) return;
      this.hasValue = true;
      this.value = value;
    };

    Binding.prototype.clearValue = function clearValue() {
      this.hasDeoptedValue = false;
      this.hasValue = false;
      this.value = null;
    };

    /**
     * Register a constant violation with the provided `path`.
     */

    Binding.prototype.reassign = function reassign(path) {
      this.constant = false;
      if (this.constantViolations.indexOf(path) !== -1) {
        return;
      }
      this.constantViolations.push(path);
    };

    /**
     * Increment the amount of references to this binding.
     */

    Binding.prototype.reference = function reference(path) {
      if (this.referencePaths.indexOf(path) !== -1) {
        return;
      }
      this.referenced = true;
      this.references++;
      this.referencePaths.push(path);
    };

    /**
     * Decrement the amount of references to this binding.
     */

    Binding.prototype.dereference = function dereference() {
      this.references--;
      this.referenced = !!this.references;
    };

    return Binding;
  }();

  /*istanbul ignore next*/exports.default = Binding;
  /*istanbul ignore next*/module.exports = exports["default"];

/***/ },
/* 392 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  exports.__esModule = true;

  var _create = __webpack_require__(189);

  var _create2 = _interopRequireDefault(_create);

  exports.getBindingIdentifiers = getBindingIdentifiers;
  exports.getOuterBindingIdentifiers = getOuterBindingIdentifiers;

  var _index = __webpack_require__(90);

  var t = _interopRequireWildcard(_index);

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Return a list of binding identifiers associated with the input `node`.
   */

  function getBindingIdentifiers(node, duplicates, outerOnly) {
    var search = [].concat(node);
    var ids = (0, _create2.default)(null);

    while (search.length) {
      var id = search.shift();
      if (!id) continue;

      var keys = t.getBindingIdentifiers.keys[id.type];

      if (t.isIdentifier(id)) {
        if (duplicates) {
          var _ids = ids[id.name] = ids[id.name] || [];
          _ids.push(id);
        } else {
          ids[id.name] = id;
        }
        continue;
      }

      if (t.isExportDeclaration(id)) {
        if (t.isDeclaration(node.declaration)) {
          search.push(node.declaration);
        }
        continue;
      }

      if (outerOnly) {
        if (t.isFunctionDeclaration(id)) {
          search.push(id.id);
          continue;
        }

        if (t.isFunctionExpression(id)) {
          continue;
        }
      }

      if (keys) {
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          if (id[key]) {
            search = search.concat(id[key]);
          }
        }
      }
    }

    return ids;
  }

  /**
   * Mapping of types to their identifier keys.
   */

  getBindingIdentifiers.keys = {
    DeclareClass: ["id"],
    DeclareFunction: ["id"],
    DeclareModule: ["id"],
    DeclareVariable: ["id"],
    InterfaceDeclaration: ["id"],
    TypeAlias: ["id"],

    CatchClause: ["param"],
    LabeledStatement: ["label"],
    UnaryExpression: ["argument"],
    AssignmentExpression: ["left"],

    ImportSpecifier: ["local"],
    ImportNamespaceSpecifier: ["local"],
    ImportDefaultSpecifier: ["local"],
    ImportDeclaration: ["specifiers"],

    ExportSpecifier: ["exported"],
    ExportNamespaceSpecifier: ["exported"],
    ExportDefaultSpecifier: ["exported"],

    FunctionDeclaration: ["id", "params"],
    FunctionExpression: ["id", "params"],

    ClassDeclaration: ["id"],
    ClassExpression: ["id"],

    RestElement: ["argument"],
    UpdateExpression: ["argument"],

    RestProperty: ["argument"],
    ObjectProperty: ["value"],

    AssignmentPattern: ["left"],
    ArrayPattern: ["elements"],
    ObjectPattern: ["properties"],

    VariableDeclaration: ["declarations"],
    VariableDeclarator: ["id"]
  };

  function getOuterBindingIdentifiers(node, duplicates) {
    return getBindingIdentifiers(node, duplicates, true);
  }

/***/ },
/* 393 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Token = undefined;

  var _createClass2 = __webpack_require__(225);

  var _createClass3 = _interopRequireDefault(_createClass2);

  var _classCallCheck2 = __webpack_require__(97);

  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

  var _identifier = __webpack_require__(204);

  var _types = __webpack_require__(137);

  var _context = __webpack_require__(227);

  var _location = __webpack_require__(228);

  var _whitespace = __webpack_require__(191);

  var _state = __webpack_require__(784);

  var _state2 = _interopRequireDefault(_state);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  // Object type used to represent tokens. Note that normally, tokens
  // simply exist as properties on the parser object. This is only
  // used for the onToken callback and the external tokenizer.

  var Token = exports.Token = function Token(state) {
    (0, _classCallCheck3.default)(this, Token);

    this.type = state.type;
    this.value = state.value;
    this.start = state.start;
    this.end = state.end;
    this.loc = new _location.SourceLocation(state.startLoc, state.endLoc);
  };

  // ## Tokenizer

  /* eslint max-len: 0 */
  /* eslint indent: 0 */

  function codePointToString(code) {
    // UTF-16 Decoding
    if (code <= 0xFFFF) {
      return String.fromCharCode(code);
    } else {
      return String.fromCharCode((code - 0x10000 >> 10) + 0xD800, (code - 0x10000 & 1023) + 0xDC00);
    }
  }

  var Tokenizer = function () {
    function Tokenizer(options, input) {
      (0, _classCallCheck3.default)(this, Tokenizer);

      this.state = new _state2.default();
      this.state.init(options, input);
    }

    // Move to the next token

    (0, _createClass3.default)(Tokenizer, [{
      key: "next",
      value: function next() {
        if (!this.isLookahead) {
          this.state.tokens.push(new Token(this.state));
        }

        this.state.lastTokEnd = this.state.end;
        this.state.lastTokStart = this.state.start;
        this.state.lastTokEndLoc = this.state.endLoc;
        this.state.lastTokStartLoc = this.state.startLoc;
        this.nextToken();
      }

      // TODO

    }, {
      key: "eat",
      value: function eat(type) {
        if (this.match(type)) {
          this.next();
          return true;
        } else {
          return false;
        }
      }

      // TODO

    }, {
      key: "match",
      value: function match(type) {
        return this.state.type === type;
      }

      // TODO

    }, {
      key: "isKeyword",
      value: function isKeyword(word) {
        return (0, _identifier.isKeyword)(word);
      }

      // TODO

    }, {
      key: "lookahead",
      value: function lookahead() {
        var old = this.state;
        this.state = old.clone(true);

        this.isLookahead = true;
        this.next();
        this.isLookahead = false;

        var curr = this.state.clone(true);
        this.state = old;
        return curr;
      }

      // Toggle strict mode. Re-reads the next number or string to please
      // pedantic tests (`"use strict"; 010;` should fail).

    }, {
      key: "setStrict",
      value: function setStrict(strict) {
        this.state.strict = strict;
        if (!this.match(_types.types.num) && !this.match(_types.types.string)) return;
        this.state.pos = this.state.start;
        while (this.state.pos < this.state.lineStart) {
          this.state.lineStart = this.input.lastIndexOf("\n", this.state.lineStart - 2) + 1;
          --this.state.curLine;
        }
        this.nextToken();
      }
    }, {
      key: "curContext",
      value: function curContext() {
        return this.state.context[this.state.context.length - 1];
      }

      // Read a single token, updating the parser object's token-related
      // properties.

    }, {
      key: "nextToken",
      value: function nextToken() {
        var curContext = this.curContext();
        if (!curContext || !curContext.preserveSpace) this.skipSpace();

        this.state.containsOctal = false;
        this.state.octalPosition = null;
        this.state.start = this.state.pos;
        this.state.startLoc = this.state.curPosition();
        if (this.state.pos >= this.input.length) return this.finishToken(_types.types.eof);

        if (curContext.override) {
          return curContext.override(this);
        } else {
          return this.readToken(this.fullCharCodeAtPos());
        }
      }
    }, {
      key: "readToken",
      value: function readToken(code) {
        // Identifier or keyword. '\uXXXX' sequences are allowed in
        // identifiers, so '\' also dispatches to that.
        if ((0, _identifier.isIdentifierStart)(code) || code === 92 /* '\' */) {
            return this.readWord();
          } else {
          return this.getTokenFromCode(code);
        }
      }
    }, {
      key: "fullCharCodeAtPos",
      value: function fullCharCodeAtPos() {
        var code = this.input.charCodeAt(this.state.pos);
        if (code <= 0xd7ff || code >= 0xe000) return code;

        var next = this.input.charCodeAt(this.state.pos + 1);
        return (code << 10) + next - 0x35fdc00;
      }
    }, {
      key: "pushComment",
      value: function pushComment(block, text, start, end, startLoc, endLoc) {
        var comment = {
          type: block ? "CommentBlock" : "CommentLine",
          value: text,
          start: start,
          end: end,
          loc: new _location.SourceLocation(startLoc, endLoc)
        };

        if (!this.isLookahead) {
          this.state.tokens.push(comment);
          this.state.comments.push(comment);
        }

        this.addComment(comment);
      }
    }, {
      key: "skipBlockComment",
      value: function skipBlockComment() {
        var startLoc = this.state.curPosition();
        var start = this.state.pos,
            end = this.input.indexOf("*/", this.state.pos += 2);
        if (end === -1) this.raise(this.state.pos - 2, "Unterminated comment");

        this.state.pos = end + 2;
        _whitespace.lineBreakG.lastIndex = start;
        var match = void 0;
        while ((match = _whitespace.lineBreakG.exec(this.input)) && match.index < this.state.pos) {
          ++this.state.curLine;
          this.state.lineStart = match.index + match[0].length;
        }

        this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());
      }
    }, {
      key: "skipLineComment",
      value: function skipLineComment(startSkip) {
        var start = this.state.pos;
        var startLoc = this.state.curPosition();
        var ch = this.input.charCodeAt(this.state.pos += startSkip);
        while (this.state.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {
          ++this.state.pos;
          ch = this.input.charCodeAt(this.state.pos);
        }

        this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());
      }

      // Called at the start of the parse and after every token. Skips
      // whitespace and comments, and.

    }, {
      key: "skipSpace",
      value: function skipSpace() {
        loop: while (this.state.pos < this.input.length) {
          var ch = this.input.charCodeAt(this.state.pos);
          switch (ch) {
            case 32:case 160:
              // ' '
              ++this.state.pos;
              break;

            case 13:
              if (this.input.charCodeAt(this.state.pos + 1) === 10) {
                ++this.state.pos;
              }

            case 10:case 8232:case 8233:
              ++this.state.pos;
              ++this.state.curLine;
              this.state.lineStart = this.state.pos;
              break;

            case 47:
              // '/'
              switch (this.input.charCodeAt(this.state.pos + 1)) {
                case 42:
                  // '*'
                  this.skipBlockComment();
                  break;

                case 47:
                  this.skipLineComment(2);
                  break;

                default:
                  break loop;
              }
              break;

            default:
              if (ch > 8 && ch < 14 || ch >= 5760 && _whitespace.nonASCIIwhitespace.test(String.fromCharCode(ch))) {
                ++this.state.pos;
              } else {
                break loop;
              }
          }
        }
      }

      // Called at the end of every token. Sets `end`, `val`, and
      // maintains `context` and `exprAllowed`, and skips the space after
      // the token, so that the next one's `start` will point at the
      // right position.

    }, {
      key: "finishToken",
      value: function finishToken(type, val) {
        this.state.end = this.state.pos;
        this.state.endLoc = this.state.curPosition();
        var prevType = this.state.type;
        this.state.type = type;
        this.state.value = val;

        this.updateContext(prevType);
      }

      // ### Token reading

      // This is the function that is called to fetch the next token. It
      // is somewhat obscure, because it works in character codes rather
      // than characters, and because operator parsing has been inlined
      // into it.
      //
      // All in the name of speed.
      //

    }, {
      key: "readToken_dot",
      value: function readToken_dot() {
        var next = this.input.charCodeAt(this.state.pos + 1);
        if (next >= 48 && next <= 57) {
          return this.readNumber(true);
        }

        var next2 = this.input.charCodeAt(this.state.pos + 2);
        if (next === 46 && next2 === 46) {
          // 46 = dot '.'
          this.state.pos += 3;
          return this.finishToken(_types.types.ellipsis);
        } else {
          ++this.state.pos;
          return this.finishToken(_types.types.dot);
        }
      }
    }, {
      key: "readToken_slash",
      value: function readToken_slash() {
        // '/'
        if (this.state.exprAllowed) {
          ++this.state.pos;
          return this.readRegexp();
        }

        var next = this.input.charCodeAt(this.state.pos + 1);
        if (next === 61) {
          return this.finishOp(_types.types.assign, 2);
        } else {
          return this.finishOp(_types.types.slash, 1);
        }
      }
    }, {
      key: "readToken_mult_modulo",
      value: function readToken_mult_modulo(code) {
        // '%*'
        var type = code === 42 ? _types.types.star : _types.types.modulo;
        var width = 1;
        var next = this.input.charCodeAt(this.state.pos + 1);

        if (next === 42 && this.hasPlugin("exponentiationOperator")) {
          // '*'
          width++;
          next = this.input.charCodeAt(this.state.pos + 2);
          type = _types.types.exponent;
        }

        if (next === 61) {
          width++;
          type = _types.types.assign;
        }

        return this.finishOp(type, width);
      }
    }, {
      key: "readToken_pipe_amp",
      value: function readToken_pipe_amp(code) {
        // '|&'
        var next = this.input.charCodeAt(this.state.pos + 1);
        if (next === code) return this.finishOp(code === 124 ? _types.types.logicalOR : _types.types.logicalAND, 2);
        if (next === 61) return this.finishOp(_types.types.assign, 2);
        return this.finishOp(code === 124 ? _types.types.bitwiseOR : _types.types.bitwiseAND, 1);
      }
    }, {
      key: "readToken_caret",
      value: function readToken_caret() {
        // '^'
        var next = this.input.charCodeAt(this.state.pos + 1);
        if (next === 61) {
          return this.finishOp(_types.types.assign, 2);
        } else {
          return this.finishOp(_types.types.bitwiseXOR, 1);
        }
      }
    }, {
      key: "readToken_plus_min",
      value: function readToken_plus_min(code) {
        // '+-'
        var next = this.input.charCodeAt(this.state.pos + 1);

        if (next === code) {
          if (next === 45 && this.input.charCodeAt(this.state.pos + 2) === 62 && _whitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.pos))) {
            // A `-->` line comment
            this.skipLineComment(3);
            this.skipSpace();
            return this.nextToken();
          }
          return this.finishOp(_types.types.incDec, 2);
        }

        if (next === 61) {
          return this.finishOp(_types.types.assign, 2);
        } else {
          return this.finishOp(_types.types.plusMin, 1);
        }
      }
    }, {
      key: "readToken_lt_gt",
      value: function readToken_lt_gt(code) {
        // '<>'
        var next = this.input.charCodeAt(this.state.pos + 1);
        var size = 1;

        if (next === code) {
          size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;
          if (this.input.charCodeAt(this.state.pos + size) === 61) return this.finishOp(_types.types.assign, size + 1);
          return this.finishOp(_types.types.bitShift, size);
        }

        if (next === 33 && code === 60 && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {
          if (this.inModule) this.unexpected();
          // `<!--`, an XML-style comment that should be interpreted as a line comment
          this.skipLineComment(4);
          this.skipSpace();
          return this.nextToken();
        }

        if (next === 61) {
          // <= | >=
          size = 2;
        }

        return this.finishOp(_types.types.relational, size);
      }
    }, {
      key: "readToken_eq_excl",
      value: function readToken_eq_excl(code) {
        // '=!'
        var next = this.input.charCodeAt(this.state.pos + 1);
        if (next === 61) return this.finishOp(_types.types.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
        if (code === 61 && next === 62) {
          // '=>'
          this.state.pos += 2;
          return this.finishToken(_types.types.arrow);
        }
        return this.finishOp(code === 61 ? _types.types.eq : _types.types.prefix, 1);
      }
    }, {
      key: "getTokenFromCode",
      value: function getTokenFromCode(code) {
        switch (code) {
          // The interpretation of a dot depends on whether it is followed
          // by a digit or another two dots.
          case 46:
            // '.'
            return this.readToken_dot();

          // Punctuation tokens.
          case 40:
            ++this.state.pos;return this.finishToken(_types.types.parenL);
          case 41:
            ++this.state.pos;return this.finishToken(_types.types.parenR);
          case 59:
            ++this.state.pos;return this.finishToken(_types.types.semi);
          case 44:
            ++this.state.pos;return this.finishToken(_types.types.comma);
          case 91:
            ++this.state.pos;return this.finishToken(_types.types.bracketL);
          case 93:
            ++this.state.pos;return this.finishToken(_types.types.bracketR);
          case 123:
            ++this.state.pos;return this.finishToken(_types.types.braceL);
          case 125:
            ++this.state.pos;return this.finishToken(_types.types.braceR);

          case 58:
            if (this.hasPlugin("functionBind") && this.input.charCodeAt(this.state.pos + 1) === 58) {
              return this.finishOp(_types.types.doubleColon, 2);
            } else {
              ++this.state.pos;
              return this.finishToken(_types.types.colon);
            }

          case 63:
            ++this.state.pos;return this.finishToken(_types.types.question);
          case 64:
            ++this.state.pos;return this.finishToken(_types.types.at);

          case 96:
            // '`'
            ++this.state.pos;
            return this.finishToken(_types.types.backQuote);

          case 48:
            // '0'
            var next = this.input.charCodeAt(this.state.pos + 1);
            if (next === 120 || next === 88) return this.readRadixNumber(16); // '0x', '0X' - hex number
            if (next === 111 || next === 79) return this.readRadixNumber(8); // '0o', '0O' - octal number
            if (next === 98 || next === 66) return this.readRadixNumber(2); // '0b', '0B' - binary number
          // Anything else beginning with a digit is an integer, octal
          // number, or float.
          case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
            // 1-9
            return this.readNumber(false);

          // Quotes produce strings.
          case 34:case 39:
            // '"', "'"
            return this.readString(code);

          // Operators are parsed inline in tiny state machines. '=' (61) is
          // often referred to. `finishOp` simply skips the amount of
          // characters it is given as second argument, and returns a token
          // of the type given by its first argument.

          case 47:
            // '/'
            return this.readToken_slash();

          case 37:case 42:
            // '%*'
            return this.readToken_mult_modulo(code);

          case 124:case 38:
            // '|&'
            return this.readToken_pipe_amp(code);

          case 94:
            // '^'
            return this.readToken_caret();

          case 43:case 45:
            // '+-'
            return this.readToken_plus_min(code);

          case 60:case 62:
            // '<>'
            return this.readToken_lt_gt(code);

          case 61:case 33:
            // '=!'
            return this.readToken_eq_excl(code);

          case 126:
            // '~'
            return this.finishOp(_types.types.prefix, 1);
        }

        this.raise(this.state.pos, "Unexpected character '" + codePointToString(code) + "'");
      }
    }, {
      key: "finishOp",
      value: function finishOp(type, size) {
        var str = this.input.slice(this.state.pos, this.state.pos + size);
        this.state.pos += size;
        return this.finishToken(type, str);
      }
    }, {
      key: "readRegexp",
      value: function readRegexp() {
        var escaped = void 0,
            inClass = void 0,
            start = this.state.pos;
        for (;;) {
          if (this.state.pos >= this.input.length) this.raise(start, "Unterminated regular expression");
          var ch = this.input.charAt(this.state.pos);
          if (_whitespace.lineBreak.test(ch)) {
            this.raise(start, "Unterminated regular expression");
          }
          if (escaped) {
            escaped = false;
          } else {
            if (ch === "[") {
              inClass = true;
            } else if (ch === "]" && inClass) {
              inClass = false;
            } else if (ch === "/" && !inClass) {
              break;
            }
            escaped = ch === "\\";
          }
          ++this.state.pos;
        }
        var content = this.input.slice(start, this.state.pos);
        ++this.state.pos;
        // Need to use `readWord1` because '\uXXXX' sequences are allowed
        // here (don't ask).
        var mods = this.readWord1();
        if (mods) {
          var validFlags = /^[gmsiyu]*$/;
          if (!validFlags.test(mods)) this.raise(start, "Invalid regular expression flag");
        }
        return this.finishToken(_types.types.regexp, {
          pattern: content,
          flags: mods
        });
      }

      // Read an integer in the given radix. Return null if zero digits
      // were read, the integer value otherwise. When `len` is given, this
      // will return `null` unless the integer has exactly `len` digits.

    }, {
      key: "readInt",
      value: function readInt(radix, len) {
        var start = this.state.pos,
            total = 0;
        for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {
          var code = this.input.charCodeAt(this.state.pos),
              val = void 0;
          if (code >= 97) {
            val = code - 97 + 10; // a
          } else if (code >= 65) {
              val = code - 65 + 10; // A
            } else if (code >= 48 && code <= 57) {
                val = code - 48; // 0-9
              } else {
                  val = Infinity;
                }
          if (val >= radix) break;
          ++this.state.pos;
          total = total * radix + val;
        }
        if (this.state.pos === start || len != null && this.state.pos - start !== len) return null;

        return total;
      }
    }, {
      key: "readRadixNumber",
      value: function readRadixNumber(radix) {
        this.state.pos += 2; // 0x
        var val = this.readInt(radix);
        if (val == null) this.raise(this.state.start + 2, "Expected number in radix " + radix);
        if ((0, _identifier.isIdentifierStart)(this.fullCharCodeAtPos())) this.raise(this.state.pos, "Identifier directly after number");
        return this.finishToken(_types.types.num, val);
      }

      // Read an integer, octal integer, or floating-point number.

    }, {
      key: "readNumber",
      value: function readNumber(startsWithDot) {
        var start = this.state.pos,
            isFloat = false,
            octal = this.input.charCodeAt(this.state.pos) === 48;
        if (!startsWithDot && this.readInt(10) === null) this.raise(start, "Invalid number");
        var next = this.input.charCodeAt(this.state.pos);
        if (next === 46) {
          // '.'
          ++this.state.pos;
          this.readInt(10);
          isFloat = true;
          next = this.input.charCodeAt(this.state.pos);
        }
        if (next === 69 || next === 101) {
          // 'eE'
          next = this.input.charCodeAt(++this.state.pos);
          if (next === 43 || next === 45) ++this.state.pos; // '+-'
          if (this.readInt(10) === null) this.raise(start, "Invalid number");
          isFloat = true;
        }
        if ((0, _identifier.isIdentifierStart)(this.fullCharCodeAtPos())) this.raise(this.state.pos, "Identifier directly after number");

        var str = this.input.slice(start, this.state.pos),
            val = void 0;
        if (isFloat) {
          val = parseFloat(str);
        } else if (!octal || str.length === 1) {
          val = parseInt(str, 10);
        } else if (/[89]/.test(str) || this.state.strict) {
          this.raise(start, "Invalid number");
        } else {
          val = parseInt(str, 8);
        }
        return this.finishToken(_types.types.num, val);
      }

      // Read a string value, interpreting backslash-escapes.

    }, {
      key: "readCodePoint",
      value: function readCodePoint() {
        var ch = this.input.charCodeAt(this.state.pos),
            code = void 0;

        if (ch === 123) {
          var codePos = ++this.state.pos;
          code = this.readHexChar(this.input.indexOf("}", this.state.pos) - this.state.pos);
          ++this.state.pos;
          if (code > 0x10FFFF) this.raise(codePos, "Code point out of bounds");
        } else {
          code = this.readHexChar(4);
        }
        return code;
      }
    }, {
      key: "readString",
      value: function readString(quote) {
        var out = "",
            chunkStart = ++this.state.pos;
        for (;;) {
          if (this.state.pos >= this.input.length) this.raise(this.state.start, "Unterminated string constant");
          var ch = this.input.charCodeAt(this.state.pos);
          if (ch === quote) break;
          if (ch === 92) {
            // '\'
            out += this.input.slice(chunkStart, this.state.pos);
            out += this.readEscapedChar(false);
            chunkStart = this.state.pos;
          } else {
            if ((0, _whitespace.isNewLine)(ch)) this.raise(this.state.start, "Unterminated string constant");
            ++this.state.pos;
          }
        }
        out += this.input.slice(chunkStart, this.state.pos++);
        return this.finishToken(_types.types.string, out);
      }

      // Reads template string tokens.

    }, {
      key: "readTmplToken",
      value: function readTmplToken() {
        var out = "",
            chunkStart = this.state.pos;
        for (;;) {
          if (this.state.pos >= this.input.length) this.raise(this.state.start, "Unterminated template");
          var ch = this.input.charCodeAt(this.state.pos);
          if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {
            // '`', '${'
            if (this.state.pos === this.state.start && this.match(_types.types.template)) {
              if (ch === 36) {
                this.state.pos += 2;
                return this.finishToken(_types.types.dollarBraceL);
              } else {
                ++this.state.pos;
                return this.finishToken(_types.types.backQuote);
              }
            }
            out += this.input.slice(chunkStart, this.state.pos);
            return this.finishToken(_types.types.template, out);
          }
          if (ch === 92) {
            // '\'
            out += this.input.slice(chunkStart, this.state.pos);
            out += this.readEscapedChar(true);
            chunkStart = this.state.pos;
          } else if ((0, _whitespace.isNewLine)(ch)) {
            out += this.input.slice(chunkStart, this.state.pos);
            ++this.state.pos;
            switch (ch) {
              case 13:
                if (this.input.charCodeAt(this.state.pos) === 10) ++this.state.pos;
              case 10:
                out += "\n";
                break;
              default:
                out += String.fromCharCode(ch);
                break;
            }
            ++this.state.curLine;
            this.state.lineStart = this.state.pos;
            chunkStart = this.state.pos;
          } else {
            ++this.state.pos;
          }
        }
      }

      // Used to read escaped characters

    }, {
      key: "readEscapedChar",
      value: function readEscapedChar(inTemplate) {
        var ch = this.input.charCodeAt(++this.state.pos);
        ++this.state.pos;
        switch (ch) {
          case 110:
            return "\n"; // 'n' -> '\n'
          case 114:
            return "\r"; // 'r' -> '\r'
          case 120:
            return String.fromCharCode(this.readHexChar(2)); // 'x'
          case 117:
            return codePointToString(this.readCodePoint()); // 'u'
          case 116:
            return "\t"; // 't' -> '\t'
          case 98:
            return "\b"; // 'b' -> '\b'
          case 118:
            return "\u000b"; // 'v' -> '\u000b'
          case 102:
            return "\f"; // 'f' -> '\f'
          case 13:
            if (this.input.charCodeAt(this.state.pos) === 10) ++this.state.pos; // '\r\n'
          case 10:
            // ' \n'
            this.state.lineStart = this.state.pos;
            ++this.state.curLine;
            return "";
          default:
            if (ch >= 48 && ch <= 55) {
              var octalStr = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/)[0];
              var octal = parseInt(octalStr, 8);
              if (octal > 255) {
                octalStr = octalStr.slice(0, -1);
                octal = parseInt(octalStr, 8);
              }
              if (octal > 0) {
                if (!this.state.containsOctal) {
                  this.state.containsOctal = true;
                  this.state.octalPosition = this.state.pos - 2;
                }
                if (this.state.strict || inTemplate) {
                  this.raise(this.state.pos - 2, "Octal literal in strict mode");
                }
              }
              this.state.pos += octalStr.length - 1;
              return String.fromCharCode(octal);
            }
            return String.fromCharCode(ch);
        }
      }

      // Used to read character escape sequences ('\x', '\u', '\U').

    }, {
      key: "readHexChar",
      value: function readHexChar(len) {
        var codePos = this.state.pos;
        var n = this.readInt(16, len);
        if (n === null) this.raise(codePos, "Bad character escape sequence");
        return n;
      }

      // Read an identifier, and return it as a string. Sets `this.state.containsEsc`
      // to whether the word contained a '\u' escape.
      //
      // Incrementally adds only escaped chars, adding other chunks as-is
      // as a micro-optimization.

    }, {
      key: "readWord1",
      value: function readWord1() {
        this.state.containsEsc = false;
        var word = "",
            first = true,
            chunkStart = this.state.pos;
        while (this.state.pos < this.input.length) {
          var ch = this.fullCharCodeAtPos();
          if ((0, _identifier.isIdentifierChar)(ch)) {
            this.state.pos += ch <= 0xffff ? 1 : 2;
          } else if (ch === 92) {
            // "\"
            this.state.containsEsc = true;

            word += this.input.slice(chunkStart, this.state.pos);
            var escStart = this.state.pos;

            if (this.input.charCodeAt(++this.state.pos) !== 117) {
              // "u"
              this.raise(this.state.pos, "Expecting Unicode escape sequence \\uXXXX");
            }

            ++this.state.pos;
            var esc = this.readCodePoint();
            if (!(first ? _identifier.isIdentifierStart : _identifier.isIdentifierChar)(esc, true)) {
              this.raise(escStart, "Invalid Unicode escape");
            }

            word += codePointToString(esc);
            chunkStart = this.state.pos;
          } else {
            break;
          }
          first = false;
        }
        return word + this.input.slice(chunkStart, this.state.pos);
      }

      // Read an identifier or keyword token. Will check for reserved
      // words when necessary.

    }, {
      key: "readWord",
      value: function readWord() {
        var word = this.readWord1();
        var type = _types.types.name;
        if (!this.state.containsEsc && this.isKeyword(word)) {
          type = _types.keywords[word];
        }
        return this.finishToken(type, word);
      }
    }, {
      key: "braceIsBlock",
      value: function braceIsBlock(prevType) {
        if (prevType === _types.types.colon) {
          var parent = this.curContext();
          if (parent === _context.types.b_stat || parent === _context.types.b_expr) {
            return !parent.isExpr;
          }
        }

        if (prevType === _types.types._return) {
          return _whitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));
        }

        if (prevType === _types.types._else || prevType === _types.types.semi || prevType === _types.types.eof || prevType === _types.types.parenR) {
          return true;
        }

        if (prevType === _types.types.braceL) {
          return this.curContext() === _context.types.b_stat;
        }

        return !this.state.exprAllowed;
      }
    }, {
      key: "updateContext",
      value: function updateContext(prevType) {
        var update = void 0,
            type = this.state.type;
        if (type.keyword && prevType === _types.types.dot) {
          this.state.exprAllowed = false;
        } else if (update = type.updateContext) {
          update.call(this, prevType);
        } else {
          this.state.exprAllowed = type.beforeExpr;
        }
      }
    }]);
    return Tokenizer;
  }();

  exports.default = Tokenizer;

/***/ },
/* 394 */
/***/ function(module, exports, __webpack_require__) {

  // getting tag from 19.1.3.6 Object.prototype.toString()
  var cof = __webpack_require__(294)
    , TAG = __webpack_require__(129)('toStringTag')
    // ES3 wrong here
    , ARG = cof(function(){ return arguments; }()) == 'Arguments';

  // fallback for IE11 Script Access Denied error
  var tryGet = function(it, key){
    try {
      return it[key];
    } catch(e){ /* empty */ }
  };

  module.exports = function(it){
    var O, T, B;
    return it === undefined ? 'Undefined' : it === null ? 'Null'
      // @@toStringTag case
      : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
      // builtinTag case
      : ARG ? cof(O)
      // ES3 arguments fallback
      : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
  };

/***/ },
/* 395 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var global         = __webpack_require__(140)
    , $export        = __webpack_require__(139)
    , meta           = __webpack_require__(207)
    , fails          = __webpack_require__(174)
    , hide           = __webpack_require__(150)
    , redefineAll    = __webpack_require__(300)
    , forOf          = __webpack_require__(230)
    , anInstance     = __webpack_require__(292)
    , isObject       = __webpack_require__(151)
    , setToStringTag = __webpack_require__(234)
    , dP             = __webpack_require__(141).f
    , each           = __webpack_require__(293)(0)
    , DESCRIPTORS    = __webpack_require__(138);

  module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
    var Base  = global[NAME]
      , C     = Base
      , ADDER = IS_MAP ? 'set' : 'add'
      , proto = C && C.prototype
      , O     = {};
    if(!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
      new C().entries().next();
    }))){
      // create collection constructor
      C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
      redefineAll(C.prototype, methods);
      meta.NEED = true;
    } else {
      C = wrapper(function(target, iterable){
        anInstance(target, C, NAME, '_c');
        target._c = new Base;
        if(iterable != undefined)forOf(iterable, IS_MAP, target[ADDER], target);
      });
      each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','),function(KEY){
        var IS_ADDER = KEY == 'add' || KEY == 'set';
        if(KEY in proto && !(IS_WEAK && KEY == 'clear'))hide(C.prototype, KEY, function(a, b){
          anInstance(this, C, KEY);
          if(!IS_ADDER && IS_WEAK && !isObject(a))return KEY == 'get' ? undefined : false;
          var result = this._c[KEY](a === 0 ? 0 : a, b);
          return IS_ADDER ? this : result;
        });
      });
      if('size' in proto)dP(C.prototype, 'size', {
        get: function(){
          return this._c.size;
        }
      });
    }

    setToStringTag(C, NAME);

    O[NAME] = C;
    $export($export.G + $export.W + $export.F, O);

    if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);

    return C;
  };

/***/ },
/* 396 */
/***/ function(module, exports, __webpack_require__) {

  var isObject = __webpack_require__(151)
    , document = __webpack_require__(140).document
    // in old IE typeof document.createElement is 'object'
    , is = isObject(document) && isObject(document.createElement);
  module.exports = function(it){
    return is ? document.createElement(it) : {};
  };

/***/ },
/* 397 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = !__webpack_require__(138) && !__webpack_require__(174)(function(){
    return Object.defineProperty(__webpack_require__(396)('div'), 'a', {get: function(){ return 7; }}).a != 7;
  });

/***/ },
/* 398 */
/***/ function(module, exports, __webpack_require__) {

  // 7.2.2 IsArray(argument)
  var cof = __webpack_require__(294);
  module.exports = Array.isArray || function isArray(arg){
    return cof(arg) == 'Array';
  };

/***/ },
/* 399 */
/***/ function(module, exports) {

  module.exports = function(done, value){
    return {value: value, done: !!done};
  };

/***/ },
/* 400 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // 19.1.2.1 Object.assign(target, source, ...)
  var getKeys  = __webpack_require__(192)
    , gOPS     = __webpack_require__(299)
    , pIE      = __webpack_require__(232)
    , toObject = __webpack_require__(208)
    , IObject  = __webpack_require__(296)
    , $assign  = Object.assign;

  // should work with symbols and should have deterministic property order (V8 bug)
  module.exports = !$assign || __webpack_require__(174)(function(){
    var A = {}
      , B = {}
      , S = Symbol()
      , K = 'abcdefghijklmnopqrst';
    A[S] = 7;
    K.split('').forEach(function(k){ B[k] = k; });
    return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
  }) ? function assign(target, source){ // eslint-disable-line no-unused-vars
    var T     = toObject(target)
      , aLen  = arguments.length
      , index = 1
      , getSymbols = gOPS.f
      , isEnum     = pIE.f;
    while(aLen > index){
      var S      = IObject(arguments[index++])
        , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
        , length = keys.length
        , j      = 0
        , key;
      while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
    } return T;
  } : $assign;

/***/ },
/* 401 */
/***/ function(module, exports, __webpack_require__) {

  var pIE            = __webpack_require__(232)
    , createDesc     = __webpack_require__(233)
    , toIObject      = __webpack_require__(175)
    , toPrimitive    = __webpack_require__(306)
    , has            = __webpack_require__(149)
    , IE8_DOM_DEFINE = __webpack_require__(397)
    , gOPD           = Object.getOwnPropertyDescriptor;

  exports.f = __webpack_require__(138) ? gOPD : function getOwnPropertyDescriptor(O, P){
    O = toIObject(O);
    P = toPrimitive(P, true);
    if(IE8_DOM_DEFINE)try {
      return gOPD(O, P);
    } catch(e){ /* empty */ }
    if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
  };

/***/ },
/* 402 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
  var $keys      = __webpack_require__(404)
    , hiddenKeys = __webpack_require__(295).concat('length', 'prototype');

  exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
    return $keys(O, hiddenKeys);
  };

/***/ },
/* 403 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
  var has         = __webpack_require__(149)
    , toObject    = __webpack_require__(208)
    , IE_PROTO    = __webpack_require__(302)('IE_PROTO')
    , ObjectProto = Object.prototype;

  module.exports = Object.getPrototypeOf || function(O){
    O = toObject(O);
    if(has(O, IE_PROTO))return O[IE_PROTO];
    if(typeof O.constructor == 'function' && O instanceof O.constructor){
      return O.constructor.prototype;
    } return O instanceof Object ? ObjectProto : null;
  };

/***/ },
/* 404 */
/***/ function(module, exports, __webpack_require__) {

  var has          = __webpack_require__(149)
    , toIObject    = __webpack_require__(175)
    , arrayIndexOf = __webpack_require__(815)(false)
    , IE_PROTO     = __webpack_require__(302)('IE_PROTO');

  module.exports = function(object, names){
    var O      = toIObject(object)
      , i      = 0
      , result = []
      , key;
    for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
    // Don't enum bug & hidden keys
    while(names.length > i)if(has(O, key = names[i++])){
      ~arrayIndexOf(result, key) || result.push(key);
    }
    return result;
  };

/***/ },
/* 405 */
/***/ function(module, exports, __webpack_require__) {

  // most Object methods by ES6 should accept primitives
  var $export = __webpack_require__(139)
    , core    = __webpack_require__(110)
    , fails   = __webpack_require__(174);
  module.exports = function(KEY, exec){
    var fn  = (core.Object || {})[KEY] || Object[KEY]
      , exp = {};
    exp[KEY] = exec(fn);
    $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
  };

/***/ },
/* 406 */
/***/ function(module, exports, __webpack_require__) {

  var classof   = __webpack_require__(394)
    , ITERATOR  = __webpack_require__(129)('iterator')
    , Iterators = __webpack_require__(206);
  module.exports = __webpack_require__(110).getIteratorMethod = function(it){
    if(it != undefined)return it[ITERATOR]
      || it['@@iterator']
      || Iterators[classof(it)];
  };

/***/ },
/* 407 */
/***/ function(module, exports, __webpack_require__) {

  var cof = __webpack_require__(130);
  module.exports = function(it, msg){
    if(typeof it != 'number' && cof(it) != 'Number')throw TypeError(msg);
    return +it;
  };

/***/ },
/* 408 */
/***/ function(module, exports, __webpack_require__) {

  // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
  'use strict';
  var toObject = __webpack_require__(113)
    , toIndex  = __webpack_require__(183)
    , toLength = __webpack_require__(112);

  module.exports = [].copyWithin || function copyWithin(target/*= 0*/, start/*= 0, end = @length*/){
    var O     = toObject(this)
      , len   = toLength(O.length)
      , to    = toIndex(target, len)
      , from  = toIndex(start, len)
      , end   = arguments.length > 2 ? arguments[2] : undefined
      , count = Math.min((end === undefined ? len : toIndex(end, len)) - from, len - to)
      , inc   = 1;
    if(from < to && to < from + count){
      inc  = -1;
      from += count - 1;
      to   += count - 1;
    }
    while(count-- > 0){
      if(from in O)O[to] = O[from];
      else delete O[to];
      to   += inc;
      from += inc;
    } return O;
  };

/***/ },
/* 409 */
/***/ function(module, exports, __webpack_require__) {

  var forOf = __webpack_require__(195);

  module.exports = function(iter, ITERATOR){
    var result = [];
    forOf(iter, false, result.push, result, ITERATOR);
    return result;
  };


/***/ },
/* 410 */
/***/ function(module, exports, __webpack_require__) {

  var aFunction = __webpack_require__(118)
    , toObject  = __webpack_require__(113)
    , IObject   = __webpack_require__(209)
    , toLength  = __webpack_require__(112);

  module.exports = function(that, callbackfn, aLen, memo, isRight){
    aFunction(callbackfn);
    var O      = toObject(that)
      , self   = IObject(O)
      , length = toLength(O.length)
      , index  = isRight ? length - 1 : 0
      , i      = isRight ? -1 : 1;
    if(aLen < 2)for(;;){
      if(index in self){
        memo = self[index];
        index += i;
        break;
      }
      index += i;
      if(isRight ? index < 0 : length <= index){
        throw TypeError('Reduce of empty array with no initial value');
      }
    }
    for(;isRight ? index >= 0 : length > index; index += i)if(index in self){
      memo = callbackfn(memo, self[index], index, O);
    }
    return memo;
  };

/***/ },
/* 411 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var aFunction  = __webpack_require__(118)
    , isObject   = __webpack_require__(98)
    , invoke     = __webpack_require__(241)
    , arraySlice = [].slice
    , factories  = {};

  var construct = function(F, len, args){
    if(!(len in factories)){
      for(var n = [], i = 0; i < len; i++)n[i] = 'a[' + i + ']';
      factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
    } return factories[len](F, args);
  };

  module.exports = Function.bind || function bind(that /*, args... */){
    var fn       = aFunction(this)
      , partArgs = arraySlice.call(arguments, 1);
    var bound = function(/* args... */){
      var args = partArgs.concat(arraySlice.call(arguments));
      return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
    };
    if(isObject(fn.prototype))bound.prototype = fn.prototype;
    return bound;
  };

/***/ },
/* 412 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var dP          = __webpack_require__(107).f
    , create      = __webpack_require__(178)
    , hide        = __webpack_require__(117)
    , redefineAll = __webpack_require__(181)
    , ctx         = __webpack_require__(152)
    , anInstance  = __webpack_require__(159)
    , defined     = __webpack_require__(131)
    , forOf       = __webpack_require__(195)
    , $iterDefine = __webpack_require__(323)
    , step        = __webpack_require__(417)
    , setSpecies  = __webpack_require__(182)
    , DESCRIPTORS = __webpack_require__(106)
    , fastKey     = __webpack_require__(160).fastKey
    , SIZE        = DESCRIPTORS ? '_s' : 'size';

  var getEntry = function(that, key){
    // fast case
    var index = fastKey(key), entry;
    if(index !== 'F')return that._i[index];
    // frozen object case
    for(entry = that._f; entry; entry = entry.n){
      if(entry.k == key)return entry;
    }
  };

  module.exports = {
    getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
      var C = wrapper(function(that, iterable){
        anInstance(that, C, NAME, '_i');
        that._i = create(null); // index
        that._f = undefined;    // first entry
        that._l = undefined;    // last entry
        that[SIZE] = 0;         // size
        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
      });
      redefineAll(C.prototype, {
        // 23.1.3.1 Map.prototype.clear()
        // 23.2.3.2 Set.prototype.clear()
        clear: function clear(){
          for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
            entry.r = true;
            if(entry.p)entry.p = entry.p.n = undefined;
            delete data[entry.i];
          }
          that._f = that._l = undefined;
          that[SIZE] = 0;
        },
        // 23.1.3.3 Map.prototype.delete(key)
        // 23.2.3.4 Set.prototype.delete(value)
        'delete': function(key){
          var that  = this
            , entry = getEntry(that, key);
          if(entry){
            var next = entry.n
              , prev = entry.p;
            delete that._i[entry.i];
            entry.r = true;
            if(prev)prev.n = next;
            if(next)next.p = prev;
            if(that._f == entry)that._f = next;
            if(that._l == entry)that._l = prev;
            that[SIZE]--;
          } return !!entry;
        },
        // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
        // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
        forEach: function forEach(callbackfn /*, that = undefined */){
          anInstance(this, C, 'forEach');
          var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
            , entry;
          while(entry = entry ? entry.n : this._f){
            f(entry.v, entry.k, this);
            // revert to the last existing entry
            while(entry && entry.r)entry = entry.p;
          }
        },
        // 23.1.3.7 Map.prototype.has(key)
        // 23.2.3.7 Set.prototype.has(value)
        has: function has(key){
          return !!getEntry(this, key);
        }
      });
      if(DESCRIPTORS)dP(C.prototype, 'size', {
        get: function(){
          return defined(this[SIZE]);
        }
      });
      return C;
    },
    def: function(that, key, value){
      var entry = getEntry(that, key)
        , prev, index;
      // change existing entry
      if(entry){
        entry.v = value;
      // create new entry
      } else {
        that._l = entry = {
          i: index = fastKey(key, true), // <- index
          k: key,                        // <- key
          v: value,                      // <- value
          p: prev = that._l,             // <- previous entry
          n: undefined,                  // <- next entry
          r: false                       // <- removed
        };
        if(!that._f)that._f = entry;
        if(prev)prev.n = entry;
        that[SIZE]++;
        // add to index
        if(index !== 'F')that._i[index] = entry;
      } return that;
    },
    getEntry: getEntry,
    setStrong: function(C, NAME, IS_MAP){
      // add .keys, .values, .entries, [@@iterator]
      // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
      $iterDefine(C, NAME, function(iterated, kind){
        this._t = iterated;  // target
        this._k = kind;      // kind
        this._l = undefined; // previous
      }, function(){
        var that  = this
          , kind  = that._k
          , entry = that._l;
        // revert to the last existing entry
        while(entry && entry.r)entry = entry.p;
        // get next entry
        if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
          // or finish the iteration
          that._t = undefined;
          return step(1);
        }
        // return step by kind
        if(kind == 'keys'  )return step(0, entry.k);
        if(kind == 'values')return step(0, entry.v);
        return step(0, [entry.k, entry.v]);
      }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);

      // add [@@species], 23.1.2.2, 23.2.2.2
      setSpecies(NAME);
    }
  };

/***/ },
/* 413 */
/***/ function(module, exports, __webpack_require__) {

  // https://github.com/DavidBruant/Map-Set.prototype.toJSON
  var classof = __webpack_require__(194)
    , from    = __webpack_require__(409);
  module.exports = function(NAME){
    return function toJSON(){
      if(classof(this) != NAME)throw TypeError(NAME + "#toJSON isn't generic");
      return from(this);
    };
  };

/***/ },
/* 414 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var redefineAll       = __webpack_require__(181)
    , getWeak           = __webpack_require__(160).getWeak
    , anObject          = __webpack_require__(92)
    , isObject          = __webpack_require__(98)
    , anInstance        = __webpack_require__(159)
    , forOf             = __webpack_require__(195)
    , createArrayMethod = __webpack_require__(142)
    , $has              = __webpack_require__(116)
    , arrayFind         = createArrayMethod(5)
    , arrayFindIndex    = createArrayMethod(6)
    , id                = 0;

  // fallback for uncaught frozen keys
  var uncaughtFrozenStore = function(that){
    return that._l || (that._l = new UncaughtFrozenStore);
  };
  var UncaughtFrozenStore = function(){
    this.a = [];
  };
  var findUncaughtFrozen = function(store, key){
    return arrayFind(store.a, function(it){
      return it[0] === key;
    });
  };
  UncaughtFrozenStore.prototype = {
    get: function(key){
      var entry = findUncaughtFrozen(this, key);
      if(entry)return entry[1];
    },
    has: function(key){
      return !!findUncaughtFrozen(this, key);
    },
    set: function(key, value){
      var entry = findUncaughtFrozen(this, key);
      if(entry)entry[1] = value;
      else this.a.push([key, value]);
    },
    'delete': function(key){
      var index = arrayFindIndex(this.a, function(it){
        return it[0] === key;
      });
      if(~index)this.a.splice(index, 1);
      return !!~index;
    }
  };

  module.exports = {
    getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
      var C = wrapper(function(that, iterable){
        anInstance(that, C, NAME, '_i');
        that._i = id++;      // collection id
        that._l = undefined; // leak store for uncaught frozen objects
        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
      });
      redefineAll(C.prototype, {
        // 23.3.3.2 WeakMap.prototype.delete(key)
        // 23.4.3.3 WeakSet.prototype.delete(value)
        'delete': function(key){
          if(!isObject(key))return false;
          var data = getWeak(key);
          if(data === true)return uncaughtFrozenStore(this)['delete'](key);
          return data && $has(data, this._i) && delete data[this._i];
        },
        // 23.3.3.4 WeakMap.prototype.has(key)
        // 23.4.3.4 WeakSet.prototype.has(value)
        has: function has(key){
          if(!isObject(key))return false;
          var data = getWeak(key);
          if(data === true)return uncaughtFrozenStore(this).has(key);
          return data && $has(data, this._i);
        }
      });
      return C;
    },
    def: function(that, key, value){
      var data = getWeak(anObject(key), true);
      if(data === true)uncaughtFrozenStore(that).set(key, value);
      else data[that._i] = value;
      return that;
    },
    ufstore: uncaughtFrozenStore
  };

/***/ },
/* 415 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = !__webpack_require__(106) && !__webpack_require__(96)(function(){
    return Object.defineProperty(__webpack_require__(314)('div'), 'a', {get: function(){ return 7; }}).a != 7;
  });

/***/ },
/* 416 */
/***/ function(module, exports, __webpack_require__) {

  // call something on iterator step with safe closing on error
  var anObject = __webpack_require__(92);
  module.exports = function(iterator, fn, value, entries){
    try {
      return entries ? fn(anObject(value)[0], value[1]) : fn(value);
    // 7.4.6 IteratorClose(iterator, completion)
    } catch(e){
      var ret = iterator['return'];
      if(ret !== undefined)anObject(ret.call(iterator));
      throw e;
    }
  };

/***/ },
/* 417 */
/***/ function(module, exports) {

  module.exports = function(done, value){
    return {value: value, done: !!done};
  };

/***/ },
/* 418 */
/***/ function(module, exports) {

  // 20.2.2.20 Math.log1p(x)
  module.exports = Math.log1p || function log1p(x){
    return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
  };

/***/ },
/* 419 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // 19.1.2.1 Object.assign(target, source, ...)
  var getKeys  = __webpack_require__(180)
    , gOPS     = __webpack_require__(245)
    , pIE      = __webpack_require__(210)
    , toObject = __webpack_require__(113)
    , IObject  = __webpack_require__(209)
    , $assign  = Object.assign;

  // should work with symbols and should have deterministic property order (V8 bug)
  module.exports = !$assign || __webpack_require__(96)(function(){
    var A = {}
      , B = {}
      , S = Symbol()
      , K = 'abcdefghijklmnopqrst';
    A[S] = 7;
    K.split('').forEach(function(k){ B[k] = k; });
    return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
  }) ? function assign(target, source){ // eslint-disable-line no-unused-vars
    var T     = toObject(target)
      , aLen  = arguments.length
      , index = 1
      , getSymbols = gOPS.f
      , isEnum     = pIE.f;
    while(aLen > index){
      var S      = IObject(arguments[index++])
        , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
        , length = keys.length
        , j      = 0
        , key;
      while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
    } return T;
  } : $assign;

/***/ },
/* 420 */
/***/ function(module, exports, __webpack_require__) {

  var dP       = __webpack_require__(107)
    , anObject = __webpack_require__(92)
    , getKeys  = __webpack_require__(180);

  module.exports = __webpack_require__(106) ? Object.defineProperties : function defineProperties(O, Properties){
    anObject(O);
    var keys   = getKeys(Properties)
      , length = keys.length
      , i = 0
      , P;
    while(length > i)dP.f(O, P = keys[i++], Properties[P]);
    return O;
  };

/***/ },
/* 421 */
/***/ function(module, exports, __webpack_require__) {

  // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
  var toIObject = __webpack_require__(121)
    , gOPN      = __webpack_require__(179).f
    , toString  = {}.toString;

  var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
    ? Object.getOwnPropertyNames(window) : [];

  var getWindowNames = function(it){
    try {
      return gOPN(it);
    } catch(e){
      return windowNames.slice();
    }
  };

  module.exports.f = function getOwnPropertyNames(it){
    return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
  };


/***/ },
/* 422 */
/***/ function(module, exports, __webpack_require__) {

  var has          = __webpack_require__(116)
    , toIObject    = __webpack_require__(121)
    , arrayIndexOf = __webpack_require__(237)(false)
    , IE_PROTO     = __webpack_require__(327)('IE_PROTO');

  module.exports = function(object, names){
    var O      = toIObject(object)
      , i      = 0
      , result = []
      , key;
    for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
    // Don't enum bug & hidden keys
    while(names.length > i)if(has(O, key = names[i++])){
      ~arrayIndexOf(result, key) || result.push(key);
    }
    return result;
  };

/***/ },
/* 423 */
/***/ function(module, exports, __webpack_require__) {

  var getKeys   = __webpack_require__(180)
    , toIObject = __webpack_require__(121)
    , isEnum    = __webpack_require__(210).f;
  module.exports = function(isEntries){
    return function(it){
      var O      = toIObject(it)
        , keys   = getKeys(O)
        , length = keys.length
        , i      = 0
        , result = []
        , key;
      while(length > i)if(isEnum.call(O, key = keys[i++])){
        result.push(isEntries ? [key, O[key]] : O[key]);
      } return result;
    };
  };

/***/ },
/* 424 */
/***/ function(module, exports, __webpack_require__) {

  // all object keys, includes non-enumerable and symbols
  var gOPN     = __webpack_require__(179)
    , gOPS     = __webpack_require__(245)
    , anObject = __webpack_require__(92)
    , Reflect  = __webpack_require__(95).Reflect;
  module.exports = Reflect && Reflect.ownKeys || function ownKeys(it){
    var keys       = gOPN.f(anObject(it))
      , getSymbols = gOPS.f;
    return getSymbols ? keys.concat(getSymbols(it)) : keys;
  };

/***/ },
/* 425 */
/***/ function(module, exports, __webpack_require__) {

  var $parseFloat = __webpack_require__(95).parseFloat
    , $trim       = __webpack_require__(197).trim;

  module.exports = 1 / $parseFloat(__webpack_require__(332) + '-0') !== -Infinity ? function parseFloat(str){
    var string = $trim(String(str), 3)
      , result = $parseFloat(string);
    return result === 0 && string.charAt(0) == '-' ? -0 : result;
  } : $parseFloat;

/***/ },
/* 426 */
/***/ function(module, exports, __webpack_require__) {

  var $parseInt = __webpack_require__(95).parseInt
    , $trim     = __webpack_require__(197).trim
    , ws        = __webpack_require__(332)
    , hex       = /^[\-+]?0[xX]/;

  module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix){
    var string = $trim(String(str), 3);
    return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
  } : $parseInt;

/***/ },
/* 427 */
/***/ function(module, exports) {

  // 7.2.9 SameValue(x, y)
  module.exports = Object.is || function is(x, y){
    return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
  };

/***/ },
/* 428 */
/***/ function(module, exports, __webpack_require__) {

  // https://github.com/tc39/proposal-string-pad-start-end
  var toLength = __webpack_require__(112)
    , repeat   = __webpack_require__(331)
    , defined  = __webpack_require__(131);

  module.exports = function(that, maxLength, fillString, left){
    var S            = String(defined(that))
      , stringLength = S.length
      , fillStr      = fillString === undefined ? ' ' : String(fillString)
      , intMaxLength = toLength(maxLength);
    if(intMaxLength <= stringLength || fillStr == '')return S;
    var fillLen = intMaxLength - stringLength
      , stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
    if(stringFiller.length > fillLen)stringFiller = stringFiller.slice(0, fillLen);
    return left ? stringFiller + S : S + stringFiller;
  };


/***/ },
/* 429 */
/***/ function(module, exports, __webpack_require__) {

  exports.f = __webpack_require__(99);

/***/ },
/* 430 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var strong = __webpack_require__(412);

  // 23.1 Map Objects
  module.exports = __webpack_require__(238)('Map', function(get){
    return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
  }, {
    // 23.1.3.6 Map.prototype.get(key)
    get: function get(key){
      var entry = strong.getEntry(this, key);
      return entry && entry.v;
    },
    // 23.1.3.9 Map.prototype.set(key, value)
    set: function set(key, value){
      return strong.def(this, key === 0 ? 0 : key, value);
    }
  }, strong, true);

/***/ },
/* 431 */
/***/ function(module, exports, __webpack_require__) {

  // 21.2.5.3 get RegExp.prototype.flags()
  if(__webpack_require__(106) && /./g.flags != 'g')__webpack_require__(107).f(RegExp.prototype, 'flags', {
    configurable: true,
    get: __webpack_require__(240)
  });

/***/ },
/* 432 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var strong = __webpack_require__(412);

  // 23.2 Set Objects
  module.exports = __webpack_require__(238)('Set', function(get){
    return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
  }, {
    // 23.2.3.1 Set.prototype.add(value)
    add: function add(value){
      return strong.def(this, value = value === 0 ? 0 : value, value);
    }
  }, strong);

/***/ },
/* 433 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var each         = __webpack_require__(142)(0)
    , redefine     = __webpack_require__(119)
    , meta         = __webpack_require__(160)
    , assign       = __webpack_require__(419)
    , weak         = __webpack_require__(414)
    , isObject     = __webpack_require__(98)
    , has          = __webpack_require__(116)
    , getWeak      = meta.getWeak
    , isExtensible = Object.isExtensible
    , uncaughtFrozenStore = weak.ufstore
    , tmp          = {}
    , InternalMap;

  var wrapper = function(get){
    return function WeakMap(){
      return get(this, arguments.length > 0 ? arguments[0] : undefined);
    };
  };

  var methods = {
    // 23.3.3.3 WeakMap.prototype.get(key)
    get: function get(key){
      if(isObject(key)){
        var data = getWeak(key);
        if(data === true)return uncaughtFrozenStore(this).get(key);
        return data ? data[this._i] : undefined;
      }
    },
    // 23.3.3.5 WeakMap.prototype.set(key, value)
    set: function set(key, value){
      return weak.def(this, key, value);
    }
  };

  // 23.3 WeakMap Objects
  var $WeakMap = module.exports = __webpack_require__(238)('WeakMap', wrapper, methods, weak, true, true);

  // IE11 WeakMap frozen keys fix
  if(new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){
    InternalMap = weak.getConstructor(wrapper);
    assign(InternalMap.prototype, methods);
    meta.NEED = true;
    each(['delete', 'has', 'get', 'set'], function(key){
      var proto  = $WeakMap.prototype
        , method = proto[key];
      redefine(proto, key, function(a, b){
        // store frozen objects on internal weakmap shim
        if(isObject(a) && !isExtensible(a)){
          if(!this._f)this._f = new InternalMap;
          var result = this._f[key](a, b);
          return key == 'set' ? this : result;
        // store all the rest on native weakmap
        } return method.call(this, a, b);
      });
    });
  }

/***/ },
/* 434 */
/***/ function(module, exports, __webpack_require__) {

  
  /**
   * This is the common logic for both the Node.js and web browser
   * implementations of `debug()`.
   *
   * Expose `debug()` as the module.
   */

  exports = module.exports = debug;
  exports.coerce = coerce;
  exports.disable = disable;
  exports.enable = enable;
  exports.enabled = enabled;
  exports.humanize = __webpack_require__(1201);

  /**
   * The currently active debug mode names, and names to skip.
   */

  exports.names = [];
  exports.skips = [];

  /**
   * Map of special "%n" handling functions, for the debug "format" argument.
   *
   * Valid key names are a single, lowercased letter, i.e. "n".
   */

  exports.formatters = {};

  /**
   * Previously assigned color.
   */

  var prevColor = 0;

  /**
   * Previous log timestamp.
   */

  var prevTime;

  /**
   * Select a color.
   *
   * @return {Number}
   * @api private
   */

  function selectColor() {
    return exports.colors[prevColor++ % exports.colors.length];
  }

  /**
   * Create a debugger with the given `namespace`.
   *
   * @param {String} namespace
   * @return {Function}
   * @api public
   */

  function debug(namespace) {

    // define the `disabled` version
    function disabled() {
    }
    disabled.enabled = false;

    // define the `enabled` version
    function enabled() {

      var self = enabled;

      // set `diff` timestamp
      var curr = +new Date();
      var ms = curr - (prevTime || curr);
      self.diff = ms;
      self.prev = prevTime;
      self.curr = curr;
      prevTime = curr;

      // add the `color` if not set
      if (null == self.useColors) self.useColors = exports.useColors();
      if (null == self.color && self.useColors) self.color = selectColor();

      var args = Array.prototype.slice.call(arguments);

      args[0] = exports.coerce(args[0]);

      if ('string' !== typeof args[0]) {
        // anything else let's inspect with %o
        args = ['%o'].concat(args);
      }

      // apply any `formatters` transformations
      var index = 0;
      args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
        // if we encounter an escaped % then don't increase the array index
        if (match === '%%') return match;
        index++;
        var formatter = exports.formatters[format];
        if ('function' === typeof formatter) {
          var val = args[index];
          match = formatter.call(self, val);

          // now we need to remove `args[index]` since it's inlined in the `format`
          args.splice(index, 1);
          index--;
        }
        return match;
      });

      if ('function' === typeof exports.formatArgs) {
        args = exports.formatArgs.apply(self, args);
      }
      var logFn = enabled.log || exports.log || console.log.bind(console);
      logFn.apply(self, args);
    }
    enabled.enabled = true;

    var fn = exports.enabled(namespace) ? enabled : disabled;

    fn.namespace = namespace;

    return fn;
  }

  /**
   * Enables a debug mode by namespaces. This can include modes
   * separated by a colon and wildcards.
   *
   * @param {String} namespaces
   * @api public
   */

  function enable(namespaces) {
    exports.save(namespaces);

    var split = (namespaces || '').split(/[\s,]+/);
    var len = split.length;

    for (var i = 0; i < len; i++) {
      if (!split[i]) continue; // ignore empty strings
      namespaces = split[i].replace(/\*/g, '.*?');
      if (namespaces[0] === '-') {
        exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
      } else {
        exports.names.push(new RegExp('^' + namespaces + '$'));
      }
    }
  }

  /**
   * Disable debug output.
   *
   * @api public
   */

  function disable() {
    exports.enable('');
  }

  /**
   * Returns true if the given mode name is enabled, false otherwise.
   *
   * @param {String} name
   * @return {Boolean}
   * @api public
   */

  function enabled(name) {
    var i, len;
    for (i = 0, len = exports.skips.length; i < len; i++) {
      if (exports.skips[i].test(name)) {
        return false;
      }
    }
    for (i = 0, len = exports.names.length; i < len; i++) {
      if (exports.names[i].test(name)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Coerce `val`.
   *
   * @param {Mixed} val
   * @return {Mixed}
   * @api private
   */

  function coerce(val) {
    if (val instanceof Error) return val.stack || val.message;
    return val;
  }


/***/ },
/* 435 */
/***/ function(module, exports) {

  'use strict';

  module.exports = function getWindow(node) {
    return node === node.window ? node : node.nodeType === 9 ? node.defaultView || node.parentWindow : false;
  };

/***/ },
/* 436 */
/***/ function(module, exports) {

  /*
    Copyright (C) 2013-2014 Yusuke Suzuki <utatane.tea@gmail.com>
    Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:

      * Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
      * Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
    ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
    THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */

  (function () {
      'use strict';

      var ES6Regex, ES5Regex, NON_ASCII_WHITESPACES, IDENTIFIER_START, IDENTIFIER_PART, ch;

      // See `tools/generate-identifier-regex.js`.
      ES5Regex = {
          // ECMAScript 5.1/Unicode v7.0.0 NonAsciiIdentifierStart:
          NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,
          // ECMAScript 5.1/Unicode v7.0.0 NonAsciiIdentifierPart:
          NonAsciiIdentifierPart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/
      };

      ES6Regex = {
          // ECMAScript 6/Unicode v7.0.0 NonAsciiIdentifierStart:
          NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDE00-\uDE11\uDE13-\uDE2B\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDE00-\uDE2F\uDE44\uDE80-\uDEAA]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]/,
          // ECMAScript 6/Unicode v7.0.0 NonAsciiIdentifierPart:
          NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDD0-\uDDDA\uDE00-\uDE11\uDE13-\uDE37\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF01-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
      };

      function isDecimalDigit(ch) {
          return 0x30 <= ch && ch <= 0x39;  // 0..9
      }

      function isHexDigit(ch) {
          return 0x30 <= ch && ch <= 0x39 ||  // 0..9
              0x61 <= ch && ch <= 0x66 ||     // a..f
              0x41 <= ch && ch <= 0x46;       // A..F
      }

      function isOctalDigit(ch) {
          return ch >= 0x30 && ch <= 0x37;  // 0..7
      }

      // 7.2 White Space

      NON_ASCII_WHITESPACES = [
          0x1680, 0x180E,
          0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A,
          0x202F, 0x205F,
          0x3000,
          0xFEFF
      ];

      function isWhiteSpace(ch) {
          return ch === 0x20 || ch === 0x09 || ch === 0x0B || ch === 0x0C || ch === 0xA0 ||
              ch >= 0x1680 && NON_ASCII_WHITESPACES.indexOf(ch) >= 0;
      }

      // 7.3 Line Terminators

      function isLineTerminator(ch) {
          return ch === 0x0A || ch === 0x0D || ch === 0x2028 || ch === 0x2029;
      }

      // 7.6 Identifier Names and Identifiers

      function fromCodePoint(cp) {
          if (cp <= 0xFFFF) { return String.fromCharCode(cp); }
          var cu1 = String.fromCharCode(Math.floor((cp - 0x10000) / 0x400) + 0xD800);
          var cu2 = String.fromCharCode(((cp - 0x10000) % 0x400) + 0xDC00);
          return cu1 + cu2;
      }

      IDENTIFIER_START = new Array(0x80);
      for(ch = 0; ch < 0x80; ++ch) {
          IDENTIFIER_START[ch] =
              ch >= 0x61 && ch <= 0x7A ||  // a..z
              ch >= 0x41 && ch <= 0x5A ||  // A..Z
              ch === 0x24 || ch === 0x5F;  // $ (dollar) and _ (underscore)
      }

      IDENTIFIER_PART = new Array(0x80);
      for(ch = 0; ch < 0x80; ++ch) {
          IDENTIFIER_PART[ch] =
              ch >= 0x61 && ch <= 0x7A ||  // a..z
              ch >= 0x41 && ch <= 0x5A ||  // A..Z
              ch >= 0x30 && ch <= 0x39 ||  // 0..9
              ch === 0x24 || ch === 0x5F;  // $ (dollar) and _ (underscore)
      }

      function isIdentifierStartES5(ch) {
          return ch < 0x80 ? IDENTIFIER_START[ch] : ES5Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
      }

      function isIdentifierPartES5(ch) {
          return ch < 0x80 ? IDENTIFIER_PART[ch] : ES5Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
      }

      function isIdentifierStartES6(ch) {
          return ch < 0x80 ? IDENTIFIER_START[ch] : ES6Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
      }

      function isIdentifierPartES6(ch) {
          return ch < 0x80 ? IDENTIFIER_PART[ch] : ES6Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
      }

      module.exports = {
          isDecimalDigit: isDecimalDigit,
          isHexDigit: isHexDigit,
          isOctalDigit: isOctalDigit,
          isWhiteSpace: isWhiteSpace,
          isLineTerminator: isLineTerminator,
          isIdentifierStartES5: isIdentifierStartES5,
          isIdentifierPartES5: isIdentifierPartES5,
          isIdentifierStartES6: isIdentifierStartES6,
          isIdentifierPartES6: isIdentifierPartES6
      };
  }());
  /* vim: set sw=4 ts=4 et tw=80 : */


/***/ },
/* 437 */
/***/ function(module, exports, __webpack_require__) {

  /*
    Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:

      * Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
      * Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
    ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
    THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */


  (function () {
      'use strict';

      exports.ast = __webpack_require__(1041);
      exports.code = __webpack_require__(436);
      exports.keyword = __webpack_require__(1042);
  }());
  /* vim: set sw=4 ts=4 et tw=80 : */


/***/ },
/* 438 */
/***/ function(module, exports) {

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  function EventEmitter() {
    this._events = this._events || {};
    this._maxListeners = this._maxListeners || undefined;
  }
  module.exports = EventEmitter;

  // Backwards-compat with node 0.10.x
  EventEmitter.EventEmitter = EventEmitter;

  EventEmitter.prototype._events = undefined;
  EventEmitter.prototype._maxListeners = undefined;

  // By default EventEmitters will print a warning if more than 10 listeners are
  // added to it. This is a useful default which helps finding memory leaks.
  EventEmitter.defaultMaxListeners = 10;

  // Obviously not all Emitters should be limited to 10. This function allows
  // that to be increased. Set to zero for unlimited.
  EventEmitter.prototype.setMaxListeners = function(n) {
    if (!isNumber(n) || n < 0 || isNaN(n))
      throw TypeError('n must be a positive number');
    this._maxListeners = n;
    return this;
  };

  EventEmitter.prototype.emit = function(type) {
    var er, handler, len, args, i, listeners;

    if (!this._events)
      this._events = {};

    // If there is no 'error' event listener then throw.
    if (type === 'error') {
      if (!this._events.error ||
          (isObject(this._events.error) && !this._events.error.length)) {
        er = arguments[1];
        if (er instanceof Error) {
          throw er; // Unhandled 'error' event
        }
        throw TypeError('Uncaught, unspecified "error" event.');
      }
    }

    handler = this._events[type];

    if (isUndefined(handler))
      return false;

    if (isFunction(handler)) {
      switch (arguments.length) {
        // fast cases
        case 1:
          handler.call(this);
          break;
        case 2:
          handler.call(this, arguments[1]);
          break;
        case 3:
          handler.call(this, arguments[1], arguments[2]);
          break;
        // slower
        default:
          args = Array.prototype.slice.call(arguments, 1);
          handler.apply(this, args);
      }
    } else if (isObject(handler)) {
      args = Array.prototype.slice.call(arguments, 1);
      listeners = handler.slice();
      len = listeners.length;
      for (i = 0; i < len; i++)
        listeners[i].apply(this, args);
    }

    return true;
  };

  EventEmitter.prototype.addListener = function(type, listener) {
    var m;

    if (!isFunction(listener))
      throw TypeError('listener must be a function');

    if (!this._events)
      this._events = {};

    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (this._events.newListener)
      this.emit('newListener', type,
                isFunction(listener.listener) ?
                listener.listener : listener);

    if (!this._events[type])
      // Optimize the case of one listener. Don't need the extra array object.
      this._events[type] = listener;
    else if (isObject(this._events[type]))
      // If we've already got an array, just append.
      this._events[type].push(listener);
    else
      // Adding the second element, need to change to array.
      this._events[type] = [this._events[type], listener];

    // Check for listener leak
    if (isObject(this._events[type]) && !this._events[type].warned) {
      if (!isUndefined(this._maxListeners)) {
        m = this._maxListeners;
      } else {
        m = EventEmitter.defaultMaxListeners;
      }

      if (m && m > 0 && this._events[type].length > m) {
        this._events[type].warned = true;
        console.error('(node) warning: possible EventEmitter memory ' +
                      'leak detected. %d listeners added. ' +
                      'Use emitter.setMaxListeners() to increase limit.',
                      this._events[type].length);
        if (typeof console.trace === 'function') {
          // not supported in IE 10
          console.trace();
        }
      }
    }

    return this;
  };

  EventEmitter.prototype.on = EventEmitter.prototype.addListener;

  EventEmitter.prototype.once = function(type, listener) {
    if (!isFunction(listener))
      throw TypeError('listener must be a function');

    var fired = false;

    function g() {
      this.removeListener(type, g);

      if (!fired) {
        fired = true;
        listener.apply(this, arguments);
      }
    }

    g.listener = listener;
    this.on(type, g);

    return this;
  };

  // emits a 'removeListener' event iff the listener was removed
  EventEmitter.prototype.removeListener = function(type, listener) {
    var list, position, length, i;

    if (!isFunction(listener))
      throw TypeError('listener must be a function');

    if (!this._events || !this._events[type])
      return this;

    list = this._events[type];
    length = list.length;
    position = -1;

    if (list === listener ||
        (isFunction(list.listener) && list.listener === listener)) {
      delete this._events[type];
      if (this._events.removeListener)
        this.emit('removeListener', type, listener);

    } else if (isObject(list)) {
      for (i = length; i-- > 0;) {
        if (list[i] === listener ||
            (list[i].listener && list[i].listener === listener)) {
          position = i;
          break;
        }
      }

      if (position < 0)
        return this;

      if (list.length === 1) {
        list.length = 0;
        delete this._events[type];
      } else {
        list.splice(position, 1);
      }

      if (this._events.removeListener)
        this.emit('removeListener', type, listener);
    }

    return this;
  };

  EventEmitter.prototype.removeAllListeners = function(type) {
    var key, listeners;

    if (!this._events)
      return this;

    // not listening for removeListener, no need to emit
    if (!this._events.removeListener) {
      if (arguments.length === 0)
        this._events = {};
      else if (this._events[type])
        delete this._events[type];
      return this;
    }

    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
      for (key in this._events) {
        if (key === 'removeListener') continue;
        this.removeAllListeners(key);
      }
      this.removeAllListeners('removeListener');
      this._events = {};
      return this;
    }

    listeners = this._events[type];

    if (isFunction(listeners)) {
      this.removeListener(type, listeners);
    } else if (listeners) {
      // LIFO order
      while (listeners.length)
        this.removeListener(type, listeners[listeners.length - 1]);
    }
    delete this._events[type];

    return this;
  };

  EventEmitter.prototype.listeners = function(type) {
    var ret;
    if (!this._events || !this._events[type])
      ret = [];
    else if (isFunction(this._events[type]))
      ret = [this._events[type]];
    else
      ret = this._events[type].slice();
    return ret;
  };

  EventEmitter.prototype.listenerCount = function(type) {
    if (this._events) {
      var evlistener = this._events[type];

      if (isFunction(evlistener))
        return 1;
      else if (evlistener)
        return evlistener.length;
    }
    return 0;
  };

  EventEmitter.listenerCount = function(emitter, type) {
    return emitter.listenerCount(type);
  };

  function isFunction(arg) {
    return typeof arg === 'function';
  }

  function isNumber(arg) {
    return typeof arg === 'number';
  }

  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }

  function isUndefined(arg) {
    return arg === void 0;
  }


/***/ },
/* 439 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *
   * @typechecks
   */

  var emptyFunction = __webpack_require__(124);

  /**
   * Upstream version of event listener. Does not take into account specific
   * nature of platform.
   */
  var EventListener = {
    /**
     * Listen to DOM events during the bubble phase.
     *
     * @param {DOMEventTarget} target DOM element to register listener on.
     * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
     * @param {function} callback Callback function.
     * @return {object} Object with a `remove` method.
     */
    listen: function listen(target, eventType, callback) {
      if (target.addEventListener) {
        target.addEventListener(eventType, callback, false);
        return {
          remove: function remove() {
            target.removeEventListener(eventType, callback, false);
          }
        };
      } else if (target.attachEvent) {
        target.attachEvent('on' + eventType, callback);
        return {
          remove: function remove() {
            target.detachEvent('on' + eventType, callback);
          }
        };
      }
    },

    /**
     * Listen to DOM events during the capture phase.
     *
     * @param {DOMEventTarget} target DOM element to register listener on.
     * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
     * @param {function} callback Callback function.
     * @return {object} Object with a `remove` method.
     */
    capture: function capture(target, eventType, callback) {
      if (target.addEventListener) {
        target.addEventListener(eventType, callback, true);
        return {
          remove: function remove() {
            target.removeEventListener(eventType, callback, true);
          }
        };
      } else {
        if (true) {
          console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
        }
        return {
          remove: emptyFunction
        };
      }
    },

    registerDefault: function registerDefault() {}
  };

  module.exports = EventListener;

/***/ },
/* 440 */
/***/ function(module, exports) {

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   */

  'use strict';

  /**
   * @param {DOMElement} node input/textarea to focus
   */

  function focusNode(node) {
    // IE8 can throw "Can't move focus to the control because it is invisible,
    // not enabled, or of a type that does not accept the focus." for all kinds of
    // reasons that are too expensive and fragile to test.
    try {
      node.focus();
    } catch (e) {}
  }

  module.exports = focusNode;

/***/ },
/* 441 */
/***/ function(module, exports) {

  'use strict';

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @typechecks
   */

  /* eslint-disable fb-www/typeof-undefined */

  /**
   * Same as document.activeElement but wraps in a try-catch block. In IE it is
   * not safe to call document.activeElement if there is nothing focused.
   *
   * The activeElement will be null only if the document or document body is not
   * yet defined.
   */
  function getActiveElement() /*?DOMElement*/{
    if (typeof document === 'undefined') {
      return null;
    }
    try {
      return document.activeElement || document.body;
    } catch (e) {
      return document.body;
    }
  }

  module.exports = getActiveElement;

/***/ },
/* 442 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   */

  /*eslint-disable fb-www/unsafe-html */

  var ExecutionEnvironment = __webpack_require__(109);

  var invariant = __webpack_require__(91);

  /**
   * Dummy container used to detect which wraps are necessary.
   */
  var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

  /**
   * Some browsers cannot use `innerHTML` to render certain elements standalone,
   * so we wrap them, render the wrapped nodes, then extract the desired node.
   *
   * In IE8, certain elements cannot render alone, so wrap all elements ('*').
   */

  var shouldWrap = {};

  var selectWrap = [1, '<select multiple="true">', '</select>'];
  var tableWrap = [1, '<table>', '</table>'];
  var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

  var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

  var markupWrap = {
    '*': [1, '?<div>', '</div>'],

    'area': [1, '<map>', '</map>'],
    'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
    'legend': [1, '<fieldset>', '</fieldset>'],
    'param': [1, '<object>', '</object>'],
    'tr': [2, '<table><tbody>', '</tbody></table>'],

    'optgroup': selectWrap,
    'option': selectWrap,

    'caption': tableWrap,
    'colgroup': tableWrap,
    'tbody': tableWrap,
    'tfoot': tableWrap,
    'thead': tableWrap,

    'td': trWrap,
    'th': trWrap
  };

  // Initialize the SVG elements since we know they'll always need to be wrapped
  // consistently. If they are created inside a <div> they will be initialized in
  // the wrong namespace (and will not display).
  var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
  svgElements.forEach(function (nodeName) {
    markupWrap[nodeName] = svgWrap;
    shouldWrap[nodeName] = true;
  });

  /**
   * Gets the markup wrap configuration for the supplied `nodeName`.
   *
   * NOTE: This lazily detects which wraps are necessary for the current browser.
   *
   * @param {string} nodeName Lowercase `nodeName`.
   * @return {?array} Markup wrap configuration, if applicable.
   */
  function getMarkupWrap(nodeName) {
    !!!dummyNode ?  true ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
    if (!markupWrap.hasOwnProperty(nodeName)) {
      nodeName = '*';
    }
    if (!shouldWrap.hasOwnProperty(nodeName)) {
      if (nodeName === '*') {
        dummyNode.innerHTML = '<link />';
      } else {
        dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
      }
      shouldWrap[nodeName] = !dummyNode.firstChild;
    }
    return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
  }

  module.exports = getMarkupWrap;

/***/ },
/* 443 */
/***/ function(module, exports) {

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @typechecks
   * 
   */

  /*eslint-disable no-self-compare */

  'use strict';

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }

  /**
   * Performs equality by iterating through keys on an object and returning false
   * when any key has values which are not strictly equal between the arguments.
   * Returns true when the values of all keys are strictly equal.
   */
  function shallowEqual(objA, objB) {
    if (is(objA, objB)) {
      return true;
    }

    if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
      return false;
    }

    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);

    if (keysA.length !== keysB.length) {
      return false;
    }

    // Test for A's keys different from B.
    for (var i = 0; i < keysA.length; i++) {
      if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
        return false;
      }
    }

    return true;
  }

  module.exports = shallowEqual;

/***/ },
/* 444 */
/***/ function(module, exports, __webpack_require__) {

  /*eslint-disable no-empty */
  'use strict';

  exports.__esModule = true;
  exports.saveState = saveState;
  exports.readState = readState;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _warning = __webpack_require__(169);

  var _warning2 = _interopRequireDefault(_warning);

  var KeyPrefix = '@@History/';
  var QuotaExceededErrors = ['QuotaExceededError', 'QUOTA_EXCEEDED_ERR'];

  var SecurityError = 'SecurityError';

  function createKey(key) {
    return KeyPrefix + key;
  }

  function saveState(key, state) {
    try {
      if (state == null) {
        window.sessionStorage.removeItem(createKey(key));
      } else {
        window.sessionStorage.setItem(createKey(key), JSON.stringify(state));
      }
    } catch (error) {
      if (error.name === SecurityError) {
        // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
        // attempt to access window.sessionStorage.
         true ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available due to security settings') : undefined;

        return;
      }

      if (QuotaExceededErrors.indexOf(error.name) >= 0 && window.sessionStorage.length === 0) {
        // Safari "private mode" throws QuotaExceededError.
         true ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available in Safari private mode') : undefined;

        return;
      }

      throw error;
    }
  }

  function readState(key) {
    var json = undefined;
    try {
      json = window.sessionStorage.getItem(createKey(key));
    } catch (error) {
      if (error.name === SecurityError) {
        // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
        // attempt to access window.sessionStorage.
         true ? _warning2['default'](false, '[history] Unable to read state; sessionStorage is not available due to security settings') : undefined;

        return null;
      }
    }

    if (json) {
      try {
        return JSON.parse(json);
      } catch (error) {
        // Ignore invalid JSON.
      }
    }

    return null;
  }

/***/ },
/* 445 */
/***/ function(module, exports) {

  'use strict';

  exports.__esModule = true;
  exports.addEventListener = addEventListener;
  exports.removeEventListener = removeEventListener;
  exports.getHashPath = getHashPath;
  exports.replaceHashPath = replaceHashPath;
  exports.getWindowPath = getWindowPath;
  exports.go = go;
  exports.getUserConfirmation = getUserConfirmation;
  exports.supportsHistory = supportsHistory;
  exports.supportsGoWithoutReloadUsingHash = supportsGoWithoutReloadUsingHash;

  function addEventListener(node, event, listener) {
    if (node.addEventListener) {
      node.addEventListener(event, listener, false);
    } else {
      node.attachEvent('on' + event, listener);
    }
  }

  function removeEventListener(node, event, listener) {
    if (node.removeEventListener) {
      node.removeEventListener(event, listener, false);
    } else {
      node.detachEvent('on' + event, listener);
    }
  }

  function getHashPath() {
    // We can't use window.location.hash here because it's not
    // consistent across browsers - Firefox will pre-decode it!
    return window.location.href.split('#')[1] || '';
  }

  function replaceHashPath(path) {
    window.location.replace(window.location.pathname + window.location.search + '#' + path);
  }

  function getWindowPath() {
    return window.location.pathname + window.location.search + window.location.hash;
  }

  function go(n) {
    if (n) window.history.go(n);
  }

  function getUserConfirmation(message, callback) {
    callback(window.confirm(message));
  }

  /**
   * Returns true if the HTML5 history API is supported. Taken from Modernizr.
   *
   * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
   * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
   * changed to avoid false negatives for Windows Phones: https://github.com/rackt/react-router/issues/586
   */

  function supportsHistory() {
    var ua = navigator.userAgent;
    if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {
      return false;
    }
    return window.history && 'pushState' in window.history;
  }

  /**
   * Returns false if using go(n) with hash history causes a full page reload.
   */

  function supportsGoWithoutReloadUsingHash() {
    var ua = navigator.userAgent;
    return ua.indexOf('Firefox') === -1;
  }

/***/ },
/* 446 */
/***/ function(module, exports) {

  'use strict';

  exports.__esModule = true;
  var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
  exports.canUseDOM = canUseDOM;

/***/ },
/* 447 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  exports.__esModule = true;

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _warning = __webpack_require__(169);

  var _warning2 = _interopRequireDefault(_warning);

  var _deepEqual = __webpack_require__(1030);

  var _deepEqual2 = _interopRequireDefault(_deepEqual);

  var _PathUtils = __webpack_require__(213);

  var _AsyncUtils = __webpack_require__(1064);

  var _Actions = __webpack_require__(212);

  var _createLocation2 = __webpack_require__(1067);

  var _createLocation3 = _interopRequireDefault(_createLocation2);

  var _runTransitionHook = __webpack_require__(449);

  var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

  var _deprecate = __webpack_require__(448);

  var _deprecate2 = _interopRequireDefault(_deprecate);

  function createRandomKey(length) {
    return Math.random().toString(36).substr(2, length);
  }

  function locationsAreEqual(a, b) {
    return a.pathname === b.pathname && a.search === b.search &&
    //a.action === b.action && // Different action !== location change.
    a.key === b.key && _deepEqual2['default'](a.state, b.state);
  }

  var DefaultKeyLength = 6;

  function createHistory() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var getCurrentLocation = options.getCurrentLocation;
    var finishTransition = options.finishTransition;
    var saveState = options.saveState;
    var go = options.go;
    var getUserConfirmation = options.getUserConfirmation;
    var keyLength = options.keyLength;

    if (typeof keyLength !== 'number') keyLength = DefaultKeyLength;

    var transitionHooks = [];

    function listenBefore(hook) {
      transitionHooks.push(hook);

      return function () {
        transitionHooks = transitionHooks.filter(function (item) {
          return item !== hook;
        });
      };
    }

    var allKeys = [];
    var changeListeners = [];
    var location = undefined;

    function getCurrent() {
      if (pendingLocation && pendingLocation.action === _Actions.POP) {
        return allKeys.indexOf(pendingLocation.key);
      } else if (location) {
        return allKeys.indexOf(location.key);
      } else {
        return -1;
      }
    }

    function updateLocation(newLocation) {
      var current = getCurrent();

      location = newLocation;

      if (location.action === _Actions.PUSH) {
        allKeys = [].concat(allKeys.slice(0, current + 1), [location.key]);
      } else if (location.action === _Actions.REPLACE) {
        allKeys[current] = location.key;
      }

      changeListeners.forEach(function (listener) {
        listener(location);
      });
    }

    function listen(listener) {
      changeListeners.push(listener);

      if (location) {
        listener(location);
      } else {
        var _location = getCurrentLocation();
        allKeys = [_location.key];
        updateLocation(_location);
      }

      return function () {
        changeListeners = changeListeners.filter(function (item) {
          return item !== listener;
        });
      };
    }

    function confirmTransitionTo(location, callback) {
      _AsyncUtils.loopAsync(transitionHooks.length, function (index, next, done) {
        _runTransitionHook2['default'](transitionHooks[index], location, function (result) {
          if (result != null) {
            done(result);
          } else {
            next();
          }
        });
      }, function (message) {
        if (getUserConfirmation && typeof message === 'string') {
          getUserConfirmation(message, function (ok) {
            callback(ok !== false);
          });
        } else {
          callback(message !== false);
        }
      });
    }

    var pendingLocation = undefined;

    function transitionTo(nextLocation) {
      if (location && locationsAreEqual(location, nextLocation)) return; // Nothing to do.

      pendingLocation = nextLocation;

      confirmTransitionTo(nextLocation, function (ok) {
        if (pendingLocation !== nextLocation) return; // Transition was interrupted.

        if (ok) {
          // treat PUSH to current path like REPLACE to be consistent with browsers
          if (nextLocation.action === _Actions.PUSH) {
            var prevPath = createPath(location);
            var nextPath = createPath(nextLocation);

            if (nextPath === prevPath && _deepEqual2['default'](location.state, nextLocation.state)) nextLocation.action = _Actions.REPLACE;
          }

          if (finishTransition(nextLocation) !== false) updateLocation(nextLocation);
        } else if (location && nextLocation.action === _Actions.POP) {
          var prevIndex = allKeys.indexOf(location.key);
          var nextIndex = allKeys.indexOf(nextLocation.key);

          if (prevIndex !== -1 && nextIndex !== -1) go(prevIndex - nextIndex); // Restore the URL.
        }
      });
    }

    function push(location) {
      transitionTo(createLocation(location, _Actions.PUSH, createKey()));
    }

    function replace(location) {
      transitionTo(createLocation(location, _Actions.REPLACE, createKey()));
    }

    function goBack() {
      go(-1);
    }

    function goForward() {
      go(1);
    }

    function createKey() {
      return createRandomKey(keyLength);
    }

    function createPath(location) {
      if (location == null || typeof location === 'string') return location;

      var pathname = location.pathname;
      var search = location.search;
      var hash = location.hash;

      var result = pathname;

      if (search) result += search;

      if (hash) result += hash;

      return result;
    }

    function createHref(location) {
      return createPath(location);
    }

    function createLocation(location, action) {
      var key = arguments.length <= 2 || arguments[2] === undefined ? createKey() : arguments[2];

      if (typeof action === 'object') {
         true ? _warning2['default'](false, 'The state (2nd) argument to history.createLocation is deprecated; use a ' + 'location descriptor instead') : undefined;

        if (typeof location === 'string') location = _PathUtils.parsePath(location);

        location = _extends({}, location, { state: action });

        action = key;
        key = arguments[3] || createKey();
      }

      return _createLocation3['default'](location, action, key);
    }

    // deprecated
    function setState(state) {
      if (location) {
        updateLocationState(location, state);
        updateLocation(location);
      } else {
        updateLocationState(getCurrentLocation(), state);
      }
    }

    function updateLocationState(location, state) {
      location.state = _extends({}, location.state, state);
      saveState(location.key, location.state);
    }

    // deprecated
    function registerTransitionHook(hook) {
      if (transitionHooks.indexOf(hook) === -1) transitionHooks.push(hook);
    }

    // deprecated
    function unregisterTransitionHook(hook) {
      transitionHooks = transitionHooks.filter(function (item) {
        return item !== hook;
      });
    }

    // deprecated
    function pushState(state, path) {
      if (typeof path === 'string') path = _PathUtils.parsePath(path);

      push(_extends({ state: state }, path));
    }

    // deprecated
    function replaceState(state, path) {
      if (typeof path === 'string') path = _PathUtils.parsePath(path);

      replace(_extends({ state: state }, path));
    }

    return {
      listenBefore: listenBefore,
      listen: listen,
      transitionTo: transitionTo,
      push: push,
      replace: replace,
      go: go,
      goBack: goBack,
      goForward: goForward,
      createKey: createKey,
      createPath: createPath,
      createHref: createHref,
      createLocation: createLocation,

      setState: _deprecate2['default'](setState, 'setState is deprecated; use location.key to save state instead'),
      registerTransitionHook: _deprecate2['default'](registerTransitionHook, 'registerTransitionHook is deprecated; use listenBefore instead'),
      unregisterTransitionHook: _deprecate2['default'](unregisterTransitionHook, 'unregisterTransitionHook is deprecated; use the callback returned from listenBefore instead'),
      pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),
      replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')
    };
  }

  exports['default'] = createHistory;
  module.exports = exports['default'];

/***/ },
/* 448 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _warning = __webpack_require__(169);

  var _warning2 = _interopRequireDefault(_warning);

  function deprecate(fn, message) {
    return function () {
       true ? _warning2['default'](false, '[history] ' + message) : undefined;
      return fn.apply(this, arguments);
    };
  }

  exports['default'] = deprecate;
  module.exports = exports['default'];

/***/ },
/* 449 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _warning = __webpack_require__(169);

  var _warning2 = _interopRequireDefault(_warning);

  function runTransitionHook(hook, location, callback) {
    var result = hook(location, callback);

    if (hook.length < 2) {
      // Assume the hook runs synchronously and automatically
      // call the callback with the return value.
      callback(result);
    } else {
       true ? _warning2['default'](result === undefined, 'You should not "return" in a transition hook with a callback argument; call the callback instead') : undefined;
    }
  }

  exports['default'] = runTransitionHook;
  module.exports = exports['default'];

/***/ },
/* 450 */
/***/ function(module, exports) {

  exports.read = function (buffer, offset, isLE, mLen, nBytes) {
    var e, m
    var eLen = nBytes * 8 - mLen - 1
    var eMax = (1 << eLen) - 1
    var eBias = eMax >> 1
    var nBits = -7
    var i = isLE ? (nBytes - 1) : 0
    var d = isLE ? -1 : 1
    var s = buffer[offset + i]

    i += d

    e = s & ((1 << (-nBits)) - 1)
    s >>= (-nBits)
    nBits += eLen
    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    m = e & ((1 << (-nBits)) - 1)
    e >>= (-nBits)
    nBits += mLen
    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    if (e === 0) {
      e = 1 - eBias
    } else if (e === eMax) {
      return m ? NaN : ((s ? -1 : 1) * Infinity)
    } else {
      m = m + Math.pow(2, mLen)
      e = e - eBias
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
  }

  exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c
    var eLen = nBytes * 8 - mLen - 1
    var eMax = (1 << eLen) - 1
    var eBias = eMax >> 1
    var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
    var i = isLE ? 0 : (nBytes - 1)
    var d = isLE ? 1 : -1
    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

    value = Math.abs(value)

    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0
      e = eMax
    } else {
      e = Math.floor(Math.log(value) / Math.LN2)
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--
        c *= 2
      }
      if (e + eBias >= 1) {
        value += rt / c
      } else {
        value += rt * Math.pow(2, 1 - eBias)
      }
      if (value * c >= 2) {
        e++
        c /= 2
      }

      if (e + eBias >= eMax) {
        m = 0
        e = eMax
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen)
        e = e + eBias
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
        e = 0
      }
    }

    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

    e = (e << mLen) | m
    eLen += mLen
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

    buffer[offset + i - d] |= s * 128
  }


/***/ },
/* 451 */
/***/ function(module, exports) {

  var toString = {}.toString;

  module.exports = Array.isArray || function (arr) {
    return toString.call(arr) == '[object Array]';
  };


/***/ },
/* 452 */
/***/ function(module, exports, __webpack_require__) {

  var getNative = __webpack_require__(198),
      root = __webpack_require__(146);

  /* Built-in method references that are verified to be native. */
  var Map = getNative(root, 'Map');

  module.exports = Map;


/***/ },
/* 453 */
/***/ function(module, exports, __webpack_require__) {

  var getNative = __webpack_require__(198),
      root = __webpack_require__(146);

  /* Built-in method references that are verified to be native. */
  var Set = getNative(root, 'Set');

  module.exports = Set;


/***/ },
/* 454 */
/***/ function(module, exports, __webpack_require__) {

  var MapCache = __webpack_require__(339),
      setCacheAdd = __webpack_require__(1164),
      setCacheHas = __webpack_require__(1165);

  /**
   *
   * Creates an array cache object to store unique values.
   *
   * @private
   * @constructor
   * @param {Array} [values] The values to cache.
   */
  function SetCache(values) {
    var index = -1,
        length = values ? values.length : 0;

    this.__data__ = new MapCache;
    while (++index < length) {
      this.add(values[index]);
    }
  }

  // Add methods to `SetCache`.
  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
  SetCache.prototype.has = setCacheHas;

  module.exports = SetCache;


/***/ },
/* 455 */
/***/ function(module, exports, __webpack_require__) {

  var root = __webpack_require__(146);

  /** Built-in value references. */
  var Uint8Array = root.Uint8Array;

  module.exports = Uint8Array;


/***/ },
/* 456 */
/***/ function(module, exports) {

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    var length = args.length;
    switch (length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  module.exports = apply;


/***/ },
/* 457 */
/***/ function(module, exports) {

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  module.exports = arrayPush;


/***/ },
/* 458 */
/***/ function(module, exports) {

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array ? array.length : 0;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  module.exports = arrayReduce;


/***/ },
/* 459 */
/***/ function(module, exports, __webpack_require__) {

  var eq = __webpack_require__(215);

  /**
   * This function is like `assignValue` except that it doesn't assign
   * `undefined` values.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function assignMergeValue(object, key, value) {
    if ((value !== undefined && !eq(object[key], value)) ||
        (typeof key == 'number' && value === undefined && !(key in object))) {
      object[key] = value;
    }
  }

  module.exports = assignMergeValue;


/***/ },
/* 460 */
/***/ function(module, exports, __webpack_require__) {

  var baseForOwn = __webpack_require__(1095),
      createBaseEach = __webpack_require__(1131);

  /**
   * The base implementation of `_.forEach` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array|Object} Returns `collection`.
   */
  var baseEach = createBaseEach(baseForOwn);

  module.exports = baseEach;


/***/ },
/* 461 */
/***/ function(module, exports, __webpack_require__) {

  var castPath = __webpack_require__(465),
      isKey = __webpack_require__(259),
      toKey = __webpack_require__(263);

  /**
   * The base implementation of `_.get` without support for default values.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @returns {*} Returns the resolved value.
   */
  function baseGet(object, path) {
    path = isKey(path, object) ? [path] : castPath(path);

    var index = 0,
        length = path.length;

    while (object != null && index < length) {
      object = object[toKey(path[index++])];
    }
    return (index && index == length) ? object : undefined;
  }

  module.exports = baseGet;


/***/ },
/* 462 */
/***/ function(module, exports, __webpack_require__) {

  var baseIsEqualDeep = __webpack_require__(1098),
      isObject = __webpack_require__(133),
      isObjectLike = __webpack_require__(164);

  /**
   * The base implementation of `_.isEqual` which supports partial comparisons
   * and tracks traversed objects.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @param {Function} [customizer] The function to customize comparisons.
   * @param {boolean} [bitmask] The bitmask of comparison flags.
   *  The bitmask may be composed of the following flags:
   *     1 - Unordered comparison
   *     2 - Partial comparison
   * @param {Object} [stack] Tracks traversed `value` and `other` objects.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   */
  function baseIsEqual(value, other, customizer, bitmask, stack) {
    if (value === other) {
      return true;
    }
    if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
      return value !== value && other !== other;
    }
    return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
  }

  module.exports = baseIsEqual;


/***/ },
/* 463 */
/***/ function(module, exports, __webpack_require__) {

  var baseEach = __webpack_require__(460),
      isArrayLike = __webpack_require__(186);

  /**
   * The base implementation of `_.map` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function baseMap(collection, iteratee) {
    var index = -1,
        result = isArrayLike(collection) ? Array(collection.length) : [];

    baseEach(collection, function(value, key, collection) {
      result[++index] = iteratee(value, key, collection);
    });
    return result;
  }

  module.exports = baseMap;


/***/ },
/* 464 */
/***/ function(module, exports) {

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  module.exports = baseProperty;


/***/ },
/* 465 */
/***/ function(module, exports, __webpack_require__) {

  var isArray = __webpack_require__(114),
      stringToPath = __webpack_require__(1172);

  /**
   * Casts `value` to a path array if it's not one.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {Array} Returns the cast property path array.
   */
  function castPath(value) {
    return isArray(value) ? value : stringToPath(value);
  }

  module.exports = castPath;


/***/ },
/* 466 */
/***/ function(module, exports) {

  /**
   * Copies the values of `source` to `array`.
   *
   * @private
   * @param {Array} source The array to copy values from.
   * @param {Array} [array=[]] The array to copy values to.
   * @returns {Array} Returns `array`.
   */
  function copyArray(source, array) {
    var index = -1,
        length = source.length;

    array || (array = Array(length));
    while (++index < length) {
      array[index] = source[index];
    }
    return array;
  }

  module.exports = copyArray;


/***/ },
/* 467 */
/***/ function(module, exports, __webpack_require__) {

  var SetCache = __webpack_require__(454),
      arraySome = __webpack_require__(1088);

  /** Used to compose bitmasks for comparison styles. */
  var UNORDERED_COMPARE_FLAG = 1,
      PARTIAL_COMPARE_FLAG = 2;

  /**
   * A specialized version of `baseIsEqualDeep` for arrays with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Array} array The array to compare.
   * @param {Array} other The other array to compare.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Function} customizer The function to customize comparisons.
   * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
   *  for more details.
   * @param {Object} stack Tracks traversed `array` and `other` objects.
   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
   */
  function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
    var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }
    // Assume cyclic values are equal.
    var stacked = stack.get(array);
    if (stacked) {
      return stacked == other;
    }
    var index = -1,
        result = true,
        seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;

    stack.set(array, other);

    // Ignore non-index properties.
    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index];

      if (customizer) {
        var compared = isPartial
          ? customizer(othValue, arrValue, index, other, array, stack)
          : customizer(arrValue, othValue, index, array, other, stack);
      }
      if (compared !== undefined) {
        if (compared) {
          continue;
        }
        result = false;
        break;
      }
      // Recursively compare arrays (susceptible to call stack limits).
      if (seen) {
        if (!arraySome(other, function(othValue, othIndex) {
              if (!seen.has(othIndex) &&
                  (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
                return seen.add(othIndex);
              }
            })) {
          result = false;
          break;
        }
      } else if (!(
            arrValue === othValue ||
              equalFunc(arrValue, othValue, customizer, bitmask, stack)
          )) {
        result = false;
        break;
      }
    }
    stack['delete'](array);
    return result;
  }

  module.exports = equalArrays;


/***/ },
/* 468 */
/***/ function(module, exports, __webpack_require__) {

  var stubArray = __webpack_require__(1191);

  /** Built-in value references. */
  var getOwnPropertySymbols = Object.getOwnPropertySymbols;

  /**
   * Creates an array of the own enumerable symbol properties of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */
  function getSymbols(object) {
    // Coerce `object` to an object to avoid non-object errors in V8.
    // See https://bugs.chromium.org/p/v8/issues/detail?id=3443 for more details.
    return getOwnPropertySymbols(Object(object));
  }

  // Fallback for IE < 11.
  if (!getOwnPropertySymbols) {
    getSymbols = stubArray;
  }

  module.exports = getSymbols;


/***/ },
/* 469 */
/***/ function(module, exports, __webpack_require__) {

  var DataView = __webpack_require__(1079),
      Map = __webpack_require__(452),
      Promise = __webpack_require__(1081),
      Set = __webpack_require__(453),
      WeakMap = __webpack_require__(1083),
      toSource = __webpack_require__(475);

  /** `Object#toString` result references. */
  var mapTag = '[object Map]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      setTag = '[object Set]',
      weakMapTag = '[object WeakMap]';

  var dataViewTag = '[object DataView]';

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objectToString = objectProto.toString;

  /** Used to detect maps, sets, and weakmaps. */
  var dataViewCtorString = toSource(DataView),
      mapCtorString = toSource(Map),
      promiseCtorString = toSource(Promise),
      setCtorString = toSource(Set),
      weakMapCtorString = toSource(WeakMap);

  /**
   * Gets the `toStringTag` of `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  function getTag(value) {
    return objectToString.call(value);
  }

  // Fallback for data views, maps, sets, and weak maps in IE 11,
  // for data views in Edge, and promises in Node.js.
  if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
      (Map && getTag(new Map) != mapTag) ||
      (Promise && getTag(Promise.resolve()) != promiseTag) ||
      (Set && getTag(new Set) != setTag) ||
      (WeakMap && getTag(new WeakMap) != weakMapTag)) {
    getTag = function(value) {
      var result = objectToString.call(value),
          Ctor = result == objectTag ? value.constructor : undefined,
          ctorString = Ctor ? toSource(Ctor) : undefined;

      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString: return dataViewTag;
          case mapCtorString: return mapTag;
          case promiseCtorString: return promiseTag;
          case setCtorString: return setTag;
          case weakMapCtorString: return weakMapTag;
        }
      }
      return result;
    };
  }

  module.exports = getTag;


/***/ },
/* 470 */
/***/ function(module, exports, __webpack_require__) {

  var castPath = __webpack_require__(465),
      isArguments = __webpack_require__(266),
      isArray = __webpack_require__(114),
      isIndex = __webpack_require__(258),
      isKey = __webpack_require__(259),
      isLength = __webpack_require__(267),
      isString = __webpack_require__(216),
      toKey = __webpack_require__(263);

  /**
   * Checks if `path` exists on `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @param {Function} hasFunc The function to check properties.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   */
  function hasPath(object, path, hasFunc) {
    path = isKey(path, object) ? [path] : castPath(path);

    var result,
        index = -1,
        length = path.length;

    while (++index < length) {
      var key = toKey(path[index]);
      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }
      object = object[key];
    }
    if (result) {
      return result;
    }
    var length = object ? object.length : 0;
    return !!length && isLength(length) && isIndex(key, length) &&
      (isArray(object) || isString(object) || isArguments(object));
  }

  module.exports = hasPath;


/***/ },
/* 471 */
/***/ function(module, exports, __webpack_require__) {

  var baseTimes = __webpack_require__(1112),
      isArguments = __webpack_require__(266),
      isArray = __webpack_require__(114),
      isLength = __webpack_require__(267),
      isString = __webpack_require__(216);

  /**
   * Creates an array of index keys for `object` values of arrays,
   * `arguments` objects, and strings, otherwise `null` is returned.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array|null} Returns index keys, else `null`.
   */
  function indexKeys(object) {
    var length = object ? object.length : undefined;
    if (isLength(length) &&
        (isArray(object) || isString(object) || isArguments(object))) {
      return baseTimes(length, String);
    }
    return null;
  }

  module.exports = indexKeys;


/***/ },
/* 472 */
/***/ function(module, exports, __webpack_require__) {

  var isObject = __webpack_require__(133);

  /**
   * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` if suitable for strict
   *  equality comparisons, else `false`.
   */
  function isStrictComparable(value) {
    return value === value && !isObject(value);
  }

  module.exports = isStrictComparable;


/***/ },
/* 473 */
/***/ function(module, exports) {

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  module.exports = mapToArray;


/***/ },
/* 474 */
/***/ function(module, exports) {

  /**
   * A specialized version of `matchesProperty` for source values suitable
   * for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new spec function.
   */
  function matchesStrictComparable(key, srcValue) {
    return function(object) {
      if (object == null) {
        return false;
      }
      return object[key] === srcValue &&
        (srcValue !== undefined || (key in Object(object)));
    };
  }

  module.exports = matchesStrictComparable;


/***/ },
/* 475 */
/***/ function(module, exports) {

  /** Used to resolve the decompiled source of functions. */
  var funcToString = Function.prototype.toString;

  /**
   * Converts `func` to its source code.
   *
   * @private
   * @param {Function} func The function to process.
   * @returns {string} Returns the source code.
   */
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {}
      try {
        return (func + '');
      } catch (e) {}
    }
    return '';
  }

  module.exports = toSource;


/***/ },
/* 476 */
/***/ function(module, exports, __webpack_require__) {

  var apply = __webpack_require__(456),
      assignInDefaults = __webpack_require__(1089),
      assignInWith = __webpack_require__(1173),
      rest = __webpack_require__(356);

  /**
   * Assigns own and inherited enumerable string keyed properties of source
   * objects to the destination object for all destination properties that
   * resolve to `undefined`. Source objects are applied from left to right.
   * Once a property is set, additional values of the same property are ignored.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @see _.defaultsDeep
   * @example
   *
   * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
   * // => { 'user': 'barney', 'age': 36 }
   */
  var defaults = rest(function(args) {
    args.push(undefined, assignInDefaults);
    return apply(assignInWith, undefined, args);
  });

  module.exports = defaults;


/***/ },
/* 477 */
/***/ function(module, exports) {

  /**
   * This method returns the first argument given to it.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {*} value Any value.
   * @returns {*} Returns `value`.
   * @example
   *
   * var object = { 'user': 'fred' };
   *
   * console.log(_.identity(object) === object);
   * // => true
   */
  function identity(value) {
    return value;
  }

  module.exports = identity;


/***/ },
/* 478 */
/***/ function(module, exports, __webpack_require__) {

  var isArrayLike = __webpack_require__(186),
      isObjectLike = __webpack_require__(164);

  /**
   * This method is like `_.isArrayLike` except that it also checks if `value`
   * is an object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array-like object,
   *  else `false`.
   * @example
   *
   * _.isArrayLikeObject([1, 2, 3]);
   * // => true
   *
   * _.isArrayLikeObject(document.body.children);
   * // => true
   *
   * _.isArrayLikeObject('abc');
   * // => false
   *
   * _.isArrayLikeObject(_.noop);
   * // => false
   */
  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }

  module.exports = isArrayLikeObject;


/***/ },
/* 479 */
/***/ function(module, exports, __webpack_require__) {

  var isObjectLike = __webpack_require__(164);

  /** `Object#toString` result references. */
  var boolTag = '[object Boolean]';

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objectToString = objectProto.toString;

  /**
   * Checks if `value` is classified as a boolean primitive or object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified,
   *  else `false`.
   * @example
   *
   * _.isBoolean(false);
   * // => true
   *
   * _.isBoolean(null);
   * // => false
   */
  function isBoolean(value) {
    return value === true || value === false ||
      (isObjectLike(value) && objectToString.call(value) == boolTag);
  }

  module.exports = isBoolean;


/***/ },
/* 480 */
/***/ function(module, exports, __webpack_require__) {

  var isObjectLike = __webpack_require__(164);

  /** `Object#toString` result references. */
  var numberTag = '[object Number]';

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objectToString = objectProto.toString;

  /**
   * Checks if `value` is classified as a `Number` primitive or object.
   *
   * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
   * classified as numbers, use the `_.isFinite` method.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified,
   *  else `false`.
   * @example
   *
   * _.isNumber(3);
   * // => true
   *
   * _.isNumber(Number.MIN_VALUE);
   * // => true
   *
   * _.isNumber(Infinity);
   * // => true
   *
   * _.isNumber('3');
   * // => false
   */
  function isNumber(value) {
    return typeof value == 'number' ||
      (isObjectLike(value) && objectToString.call(value) == numberTag);
  }

  module.exports = isNumber;


/***/ },
/* 481 */
/***/ function(module, exports, __webpack_require__) {

  var getPrototype = __webpack_require__(350),
      isHostObject = __webpack_require__(257),
      isObjectLike = __webpack_require__(164);

  /** `Object#toString` result references. */
  var objectTag = '[object Object]';

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString = Function.prototype.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /** Used to infer the `Object` constructor. */
  var objectCtorString = funcToString.call(Object);

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objectToString = objectProto.toString;

  /**
   * Checks if `value` is a plain object, that is, an object created by the
   * `Object` constructor or one with a `[[Prototype]]` of `null`.
   *
   * @static
   * @memberOf _
   * @since 0.8.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a plain object,
   *  else `false`.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   * }
   *
   * _.isPlainObject(new Foo);
   * // => false
   *
   * _.isPlainObject([1, 2, 3]);
   * // => false
   *
   * _.isPlainObject({ 'x': 0, 'y': 0 });
   * // => true
   *
   * _.isPlainObject(Object.create(null));
   * // => true
   */
  function isPlainObject(value) {
    if (!isObjectLike(value) ||
        objectToString.call(value) != objectTag || isHostObject(value)) {
      return false;
    }
    var proto = getPrototype(value);
    if (proto === null) {
      return true;
    }
    var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
    return (typeof Ctor == 'function' &&
      Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
  }

  module.exports = isPlainObject;


/***/ },
/* 482 */
/***/ function(module, exports, __webpack_require__) {

  var isObject = __webpack_require__(133);

  /** `Object#toString` result references. */
  var regexpTag = '[object RegExp]';

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objectToString = objectProto.toString;

  /**
   * Checks if `value` is classified as a `RegExp` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified,
   *  else `false`.
   * @example
   *
   * _.isRegExp(/abc/);
   * // => true
   *
   * _.isRegExp('/abc/');
   * // => false
   */
  function isRegExp(value) {
    return isObject(value) && objectToString.call(value) == regexpTag;
  }

  module.exports = isRegExp;


/***/ },
/* 483 */
/***/ function(module, exports) {

  'use strict';

  // Note: adler32 takes 12% for level 0 and 2% for level 6.
  // It doesn't worth to make additional optimizationa as in original.
  // Small size is preferable.

  function adler32(adler, buf, len, pos) {
    var s1 = (adler & 0xffff) |0,
        s2 = ((adler >>> 16) & 0xffff) |0,
        n = 0;

    while (len !== 0) {
      // Set limit ~ twice less than 5552, to keep
      // s2 in 31-bits, because we force signed ints.
      // in other case %= will fail.
      n = len > 2000 ? 2000 : len;
      len -= n;

      do {
        s1 = (s1 + buf[pos++]) |0;
        s2 = (s2 + s1) |0;
      } while (--n);

      s1 %= 65521;
      s2 %= 65521;
    }

    return (s1 | (s2 << 16)) |0;
  }


  module.exports = adler32;


/***/ },
/* 484 */
/***/ function(module, exports) {

  'use strict';

  // Note: we can't get significant speed boost here.
  // So write code to minimize size - no pregenerated tables
  // and array tools dependencies.


  // Use ordinary array, since untyped makes no boost here
  function makeTable() {
    var c, table = [];

    for (var n =0; n < 256; n++) {
      c = n;
      for (var k =0; k < 8; k++) {
        c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
      }
      table[n] = c;
    }

    return table;
  }

  // Create table on load. Just 255 signed longs. Not a problem.
  var crcTable = makeTable();


  function crc32(crc, buf, len, pos) {
    var t = crcTable,
        end = pos + len;

    crc = crc ^ (-1);

    for (var i = pos; i < end; i++) {
      crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
    }

    return (crc ^ (-1)); // >>> 0;
  }


  module.exports = crc32;


/***/ },
/* 485 */
/***/ function(module, exports) {

  'use strict';

  module.exports = {
    '2':    'need dictionary',     /* Z_NEED_DICT       2  */
    '1':    'stream end',          /* Z_STREAM_END      1  */
    '0':    '',                    /* Z_OK              0  */
    '-1':   'file error',          /* Z_ERRNO         (-1) */
    '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
    '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
    '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
    '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
    '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
  };


/***/ },
/* 486 */
/***/ function(module, exports) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule CSSProperty
   */

  'use strict';

  /**
   * CSS properties which accept numbers but are not in units of "px".
   */

  var isUnitlessNumber = {
    animationIterationCount: true,
    borderImageOutset: true,
    borderImageSlice: true,
    borderImageWidth: true,
    boxFlex: true,
    boxFlexGroup: true,
    boxOrdinalGroup: true,
    columnCount: true,
    flex: true,
    flexGrow: true,
    flexPositive: true,
    flexShrink: true,
    flexNegative: true,
    flexOrder: true,
    gridRow: true,
    gridColumn: true,
    fontWeight: true,
    lineClamp: true,
    lineHeight: true,
    opacity: true,
    order: true,
    orphans: true,
    tabSize: true,
    widows: true,
    zIndex: true,
    zoom: true,

    // SVG-related properties
    fillOpacity: true,
    floodOpacity: true,
    stopOpacity: true,
    strokeDasharray: true,
    strokeDashoffset: true,
    strokeMiterlimit: true,
    strokeOpacity: true,
    strokeWidth: true
  };

  /**
   * @param {string} prefix vendor-specific prefix, eg: Webkit
   * @param {string} key style name, eg: transitionDuration
   * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
   * WebkitTransitionDuration
   */
  function prefixKey(prefix, key) {
    return prefix + key.charAt(0).toUpperCase() + key.substring(1);
  }

  /**
   * Support style names that may come passed in prefixed by adding permutations
   * of vendor prefixes.
   */
  var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

  // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
  // infinite loop, because it iterates over the newly added props too.
  Object.keys(isUnitlessNumber).forEach(function (prop) {
    prefixes.forEach(function (prefix) {
      isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
    });
  });

  /**
   * Most style properties can be unset by doing .style[prop] = '' but IE8
   * doesn't like doing that with shorthand properties so for the properties that
   * IE8 breaks on, which are listed here, we instead unset each of the
   * individual properties. See http://bugs.jquery.com/ticket/12385.
   * The 4-value 'clock' properties like margin, padding, border-width seem to
   * behave without any problems. Curiously, list-style works too without any
   * special prodding.
   */
  var shorthandPropertyExpansions = {
    background: {
      backgroundAttachment: true,
      backgroundColor: true,
      backgroundImage: true,
      backgroundPositionX: true,
      backgroundPositionY: true,
      backgroundRepeat: true
    },
    backgroundPosition: {
      backgroundPositionX: true,
      backgroundPositionY: true
    },
    border: {
      borderWidth: true,
      borderStyle: true,
      borderColor: true
    },
    borderBottom: {
      borderBottomWidth: true,
      borderBottomStyle: true,
      borderBottomColor: true
    },
    borderLeft: {
      borderLeftWidth: true,
      borderLeftStyle: true,
      borderLeftColor: true
    },
    borderRight: {
      borderRightWidth: true,
      borderRightStyle: true,
      borderRightColor: true
    },
    borderTop: {
      borderTopWidth: true,
      borderTopStyle: true,
      borderTopColor: true
    },
    font: {
      fontStyle: true,
      fontVariant: true,
      fontWeight: true,
      fontSize: true,
      lineHeight: true,
      fontFamily: true
    },
    outline: {
      outlineWidth: true,
      outlineStyle: true,
      outlineColor: true
    }
  };

  var CSSProperty = {
    isUnitlessNumber: isUnitlessNumber,
    shorthandPropertyExpansions: shorthandPropertyExpansions
  };

  module.exports = CSSProperty;

/***/ },
/* 487 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule CallbackQueue
   */

  'use strict';

  var _assign = __webpack_require__(100);

  var PooledClass = __webpack_require__(166);

  var invariant = __webpack_require__(91);

  /**
   * A specialized pseudo-event module to help keep track of components waiting to
   * be notified when their DOM representations are available for use.
   *
   * This implements `PooledClass`, so you should never need to instantiate this.
   * Instead, use `CallbackQueue.getPooled()`.
   *
   * @class ReactMountReady
   * @implements PooledClass
   * @internal
   */
  function CallbackQueue() {
    this._callbacks = null;
    this._contexts = null;
  }

  _assign(CallbackQueue.prototype, {

    /**
     * Enqueues a callback to be invoked when `notifyAll` is invoked.
     *
     * @param {function} callback Invoked when `notifyAll` is invoked.
     * @param {?object} context Context to call `callback` with.
     * @internal
     */
    enqueue: function (callback, context) {
      this._callbacks = this._callbacks || [];
      this._contexts = this._contexts || [];
      this._callbacks.push(callback);
      this._contexts.push(context);
    },

    /**
     * Invokes all enqueued callbacks and clears the queue. This is invoked after
     * the DOM representation of a component has been created or updated.
     *
     * @internal
     */
    notifyAll: function () {
      var callbacks = this._callbacks;
      var contexts = this._contexts;
      if (callbacks) {
        !(callbacks.length === contexts.length) ?  true ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : void 0;
        this._callbacks = null;
        this._contexts = null;
        for (var i = 0; i < callbacks.length; i++) {
          callbacks[i].call(contexts[i]);
        }
        callbacks.length = 0;
        contexts.length = 0;
      }
    },

    checkpoint: function () {
      return this._callbacks ? this._callbacks.length : 0;
    },

    rollback: function (len) {
      if (this._callbacks) {
        this._callbacks.length = len;
        this._contexts.length = len;
      }
    },

    /**
     * Resets the internal queue.
     *
     * @internal
     */
    reset: function () {
      this._callbacks = null;
      this._contexts = null;
    },

    /**
     * `PooledClass` looks for this.
     */
    destructor: function () {
      this.reset();
    }

  });

  PooledClass.addPoolingTo(CallbackQueue);

  module.exports = CallbackQueue;

/***/ },
/* 488 */
/***/ function(module, exports) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule DOMNamespaces
   */

  'use strict';

  var DOMNamespaces = {
    html: 'http://www.w3.org/1999/xhtml',
    mathml: 'http://www.w3.org/1998/Math/MathML',
    svg: 'http://www.w3.org/2000/svg'
  };

  module.exports = DOMNamespaces;

/***/ },
/* 489 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactChildren
   */

  'use strict';

  var PooledClass = __webpack_require__(166);
  var ReactElement = __webpack_require__(135);

  var emptyFunction = __webpack_require__(124);
  var traverseAllChildren = __webpack_require__(374);

  var twoArgumentPooler = PooledClass.twoArgumentPooler;
  var fourArgumentPooler = PooledClass.fourArgumentPooler;

  var userProvidedKeyEscapeRegex = /\/+/g;
  function escapeUserProvidedKey(text) {
    return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
  }

  /**
   * PooledClass representing the bookkeeping associated with performing a child
   * traversal. Allows avoiding binding callbacks.
   *
   * @constructor ForEachBookKeeping
   * @param {!function} forEachFunction Function to perform traversal with.
   * @param {?*} forEachContext Context to perform context with.
   */
  function ForEachBookKeeping(forEachFunction, forEachContext) {
    this.func = forEachFunction;
    this.context = forEachContext;
    this.count = 0;
  }
  ForEachBookKeeping.prototype.destructor = function () {
    this.func = null;
    this.context = null;
    this.count = 0;
  };
  PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

  function forEachSingleChild(bookKeeping, child, name) {
    var func = bookKeeping.func;
    var context = bookKeeping.context;

    func.call(context, child, bookKeeping.count++);
  }

  /**
   * Iterates through children that are typically specified as `props.children`.
   *
   * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
   *
   * The provided forEachFunc(child, index) will be called for each
   * leaf child.
   *
   * @param {?*} children Children tree container.
   * @param {function(*, int)} forEachFunc
   * @param {*} forEachContext Context for forEachContext.
   */
  function forEachChildren(children, forEachFunc, forEachContext) {
    if (children == null) {
      return children;
    }
    var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
    traverseAllChildren(children, forEachSingleChild, traverseContext);
    ForEachBookKeeping.release(traverseContext);
  }

  /**
   * PooledClass representing the bookkeeping associated with performing a child
   * mapping. Allows avoiding binding callbacks.
   *
   * @constructor MapBookKeeping
   * @param {!*} mapResult Object containing the ordered map of results.
   * @param {!function} mapFunction Function to perform mapping with.
   * @param {?*} mapContext Context to perform mapping with.
   */
  function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
    this.result = mapResult;
    this.keyPrefix = keyPrefix;
    this.func = mapFunction;
    this.context = mapContext;
    this.count = 0;
  }
  MapBookKeeping.prototype.destructor = function () {
    this.result = null;
    this.keyPrefix = null;
    this.func = null;
    this.context = null;
    this.count = 0;
  };
  PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

  function mapSingleChildIntoContext(bookKeeping, child, childKey) {
    var result = bookKeeping.result;
    var keyPrefix = bookKeeping.keyPrefix;
    var func = bookKeeping.func;
    var context = bookKeeping.context;


    var mappedChild = func.call(context, child, bookKeeping.count++);
    if (Array.isArray(mappedChild)) {
      mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
    } else if (mappedChild != null) {
      if (ReactElement.isValidElement(mappedChild)) {
        mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
        // Keep both the (mapped) and old keys if they differ, just as
        // traverseAllChildren used to do for objects as children
        keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
      }
      result.push(mappedChild);
    }
  }

  function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
    var escapedPrefix = '';
    if (prefix != null) {
      escapedPrefix = escapeUserProvidedKey(prefix) + '/';
    }
    var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
    traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
    MapBookKeeping.release(traverseContext);
  }

  /**
   * Maps children that are typically specified as `props.children`.
   *
   * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
   *
   * The provided mapFunction(child, key, index) will be called for each
   * leaf child.
   *
   * @param {?*} children Children tree container.
   * @param {function(*, int)} func The map function.
   * @param {*} context Context for mapFunction.
   * @return {object} Object containing the ordered map of results.
   */
  function mapChildren(children, func, context) {
    if (children == null) {
      return children;
    }
    var result = [];
    mapIntoWithKeyPrefixInternal(children, result, null, func, context);
    return result;
  }

  function forEachSingleChildDummy(traverseContext, child, name) {
    return null;
  }

  /**
   * Count the number of children that are typically specified as
   * `props.children`.
   *
   * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
   *
   * @param {?*} children Children tree container.
   * @return {number} The number of children.
   */
  function countChildren(children, context) {
    return traverseAllChildren(children, forEachSingleChildDummy, null);
  }

  /**
   * Flatten a children object (typically specified as `props.children`) and
   * return an array with appropriately re-keyed children.
   *
   * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
   */
  function toArray(children) {
    var result = [];
    mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
    return result;
  }

  var ReactChildren = {
    forEach: forEachChildren,
    map: mapChildren,
    mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
    count: countChildren,
    toArray: toArray
  };

  module.exports = ReactChildren;

/***/ },
/* 490 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactClass
   */

  'use strict';

  var _assign = __webpack_require__(100);

  var ReactComponent = __webpack_require__(491);
  var ReactElement = __webpack_require__(135);
  var ReactPropTypeLocations = __webpack_require__(274);
  var ReactPropTypeLocationNames = __webpack_require__(273);
  var ReactNoopUpdateQueue = __webpack_require__(503);

  var emptyObject = __webpack_require__(249);
  var invariant = __webpack_require__(91);
  var keyMirror = __webpack_require__(250);
  var keyOf = __webpack_require__(163);
  var warning = __webpack_require__(94);

  var MIXINS_KEY = keyOf({ mixins: null });

  /**
   * Policies that describe methods in `ReactClassInterface`.
   */
  var SpecPolicy = keyMirror({
    /**
     * These methods may be defined only once by the class specification or mixin.
     */
    DEFINE_ONCE: null,
    /**
     * These methods may be defined by both the class specification and mixins.
     * Subsequent definitions will be chained. These methods must return void.
     */
    DEFINE_MANY: null,
    /**
     * These methods are overriding the base class.
     */
    OVERRIDE_BASE: null,
    /**
     * These methods are similar to DEFINE_MANY, except we assume they return
     * objects. We try to merge the keys of the return values of all the mixed in
     * functions. If there is a key conflict we throw.
     */
    DEFINE_MANY_MERGED: null
  });

  var injectedMixins = [];

  /**
   * Composite components are higher-level components that compose other composite
   * or native components.
   *
   * To create a new type of `ReactClass`, pass a specification of
   * your new class to `React.createClass`. The only requirement of your class
   * specification is that you implement a `render` method.
   *
   *   var MyComponent = React.createClass({
   *     render: function() {
   *       return <div>Hello World</div>;
   *     }
   *   });
   *
   * The class specification supports a specific protocol of methods that have
   * special meaning (e.g. `render`). See `ReactClassInterface` for
   * more the comprehensive protocol. Any other properties and methods in the
   * class specification will be available on the prototype.
   *
   * @interface ReactClassInterface
   * @internal
   */
  var ReactClassInterface = {

    /**
     * An array of Mixin objects to include when defining your component.
     *
     * @type {array}
     * @optional
     */
    mixins: SpecPolicy.DEFINE_MANY,

    /**
     * An object containing properties and methods that should be defined on
     * the component's constructor instead of its prototype (static methods).
     *
     * @type {object}
     * @optional
     */
    statics: SpecPolicy.DEFINE_MANY,

    /**
     * Definition of prop types for this component.
     *
     * @type {object}
     * @optional
     */
    propTypes: SpecPolicy.DEFINE_MANY,

    /**
     * Definition of context types for this component.
     *
     * @type {object}
     * @optional
     */
    contextTypes: SpecPolicy.DEFINE_MANY,

    /**
     * Definition of context types this component sets for its children.
     *
     * @type {object}
     * @optional
     */
    childContextTypes: SpecPolicy.DEFINE_MANY,

    // ==== Definition methods ====

    /**
     * Invoked when the component is mounted. Values in the mapping will be set on
     * `this.props` if that prop is not specified (i.e. using an `in` check).
     *
     * This method is invoked before `getInitialState` and therefore cannot rely
     * on `this.state` or use `this.setState`.
     *
     * @return {object}
     * @optional
     */
    getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

    /**
     * Invoked once before the component is mounted. The return value will be used
     * as the initial value of `this.state`.
     *
     *   getInitialState: function() {
     *     return {
     *       isOn: false,
     *       fooBaz: new BazFoo()
     *     }
     *   }
     *
     * @return {object}
     * @optional
     */
    getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

    /**
     * @return {object}
     * @optional
     */
    getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

    /**
     * Uses props from `this.props` and state from `this.state` to render the
     * structure of the component.
     *
     * No guarantees are made about when or how often this method is invoked, so
     * it must not have side effects.
     *
     *   render: function() {
     *     var name = this.props.name;
     *     return <div>Hello, {name}!</div>;
     *   }
     *
     * @return {ReactComponent}
     * @nosideeffects
     * @required
     */
    render: SpecPolicy.DEFINE_ONCE,

    // ==== Delegate methods ====

    /**
     * Invoked when the component is initially created and about to be mounted.
     * This may have side effects, but any external subscriptions or data created
     * by this method must be cleaned up in `componentWillUnmount`.
     *
     * @optional
     */
    componentWillMount: SpecPolicy.DEFINE_MANY,

    /**
     * Invoked when the component has been mounted and has a DOM representation.
     * However, there is no guarantee that the DOM node is in the document.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been mounted (initialized and rendered) for the first time.
     *
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */
    componentDidMount: SpecPolicy.DEFINE_MANY,

    /**
     * Invoked before the component receives new props.
     *
     * Use this as an opportunity to react to a prop transition by updating the
     * state using `this.setState`. Current props are accessed via `this.props`.
     *
     *   componentWillReceiveProps: function(nextProps, nextContext) {
     *     this.setState({
     *       likesIncreasing: nextProps.likeCount > this.props.likeCount
     *     });
     *   }
     *
     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
     * transition may cause a state change, but the opposite is not true. If you
     * need it, you are probably looking for `componentWillUpdate`.
     *
     * @param {object} nextProps
     * @optional
     */
    componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

    /**
     * Invoked while deciding if the component should be updated as a result of
     * receiving new props, state and/or context.
     *
     * Use this as an opportunity to `return false` when you're certain that the
     * transition to the new props/state/context will not require a component
     * update.
     *
     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
     *     return !equal(nextProps, this.props) ||
     *       !equal(nextState, this.state) ||
     *       !equal(nextContext, this.context);
     *   }
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @return {boolean} True if the component should update.
     * @optional
     */
    shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

    /**
     * Invoked when the component is about to update due to a transition from
     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
     * and `nextContext`.
     *
     * Use this as an opportunity to perform preparation before an update occurs.
     *
     * NOTE: You **cannot** use `this.setState()` in this method.
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @param {ReactReconcileTransaction} transaction
     * @optional
     */
    componentWillUpdate: SpecPolicy.DEFINE_MANY,

    /**
     * Invoked when the component's DOM representation has been updated.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been updated.
     *
     * @param {object} prevProps
     * @param {?object} prevState
     * @param {?object} prevContext
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */
    componentDidUpdate: SpecPolicy.DEFINE_MANY,

    /**
     * Invoked when the component is about to be removed from its parent and have
     * its DOM representation destroyed.
     *
     * Use this as an opportunity to deallocate any external resources.
     *
     * NOTE: There is no `componentDidUnmount` since your component will have been
     * destroyed by that point.
     *
     * @optional
     */
    componentWillUnmount: SpecPolicy.DEFINE_MANY,

    // ==== Advanced methods ====

    /**
     * Updates the component's currently mounted DOM representation.
     *
     * By default, this implements React's rendering and reconciliation algorithm.
     * Sophisticated clients may wish to override this.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     * @overridable
     */
    updateComponent: SpecPolicy.OVERRIDE_BASE

  };

  /**
   * Mapping from class specification keys to special processing functions.
   *
   * Although these are declared like instance properties in the specification
   * when defining classes using `React.createClass`, they are actually static
   * and are accessible on the constructor instead of the prototype. Despite
   * being static, they must be defined outside of the "statics" key under
   * which all other static methods are defined.
   */
  var RESERVED_SPEC_KEYS = {
    displayName: function (Constructor, displayName) {
      Constructor.displayName = displayName;
    },
    mixins: function (Constructor, mixins) {
      if (mixins) {
        for (var i = 0; i < mixins.length; i++) {
          mixSpecIntoComponent(Constructor, mixins[i]);
        }
      }
    },
    childContextTypes: function (Constructor, childContextTypes) {
      if (true) {
        validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
      }
      Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);
    },
    contextTypes: function (Constructor, contextTypes) {
      if (true) {
        validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
      }
      Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);
    },
    /**
     * Special case getDefaultProps which should move into statics but requires
     * automatic merging.
     */
    getDefaultProps: function (Constructor, getDefaultProps) {
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
      } else {
        Constructor.getDefaultProps = getDefaultProps;
      }
    },
    propTypes: function (Constructor, propTypes) {
      if (true) {
        validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
      }
      Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
    },
    statics: function (Constructor, statics) {
      mixStaticSpecIntoComponent(Constructor, statics);
    },
    autobind: function () {} };

  // noop
  function validateTypeDef(Constructor, typeDef, location) {
    for (var propName in typeDef) {
      if (typeDef.hasOwnProperty(propName)) {
        // use a warning instead of an invariant so components
        // don't show up in prod but only in __DEV__
         true ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
      }
    }
  }

  function validateMethodOverride(isAlreadyDefined, name) {
    var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

    // Disallow overriding of base class methods unless explicitly allowed.
    if (ReactClassMixin.hasOwnProperty(name)) {
      !(specPolicy === SpecPolicy.OVERRIDE_BASE) ?  true ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : void 0;
    }

    // Disallow defining methods more than once unless explicitly allowed.
    if (isAlreadyDefined) {
      !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ?  true ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : void 0;
    }
  }

  /**
   * Mixin helper which handles policy validation and reserved
   * specification keys when building React classes.
   */
  function mixSpecIntoComponent(Constructor, spec) {
    if (!spec) {
      return;
    }

    !(typeof spec !== 'function') ?  true ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class or function as a mixin. Instead, just use a ' + 'regular object.') : invariant(false) : void 0;
    !!ReactElement.isValidElement(spec) ?  true ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : void 0;

    var proto = Constructor.prototype;
    var autoBindPairs = proto.__reactAutoBindPairs;

    // By handling mixins before any other properties, we ensure the same
    // chaining order is applied to methods with DEFINE_MANY policy, whether
    // mixins are listed before or after these methods in the spec.
    if (spec.hasOwnProperty(MIXINS_KEY)) {
      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
    }

    for (var name in spec) {
      if (!spec.hasOwnProperty(name)) {
        continue;
      }

      if (name === MIXINS_KEY) {
        // We have already handled mixins in a special case above.
        continue;
      }

      var property = spec[name];
      var isAlreadyDefined = proto.hasOwnProperty(name);
      validateMethodOverride(isAlreadyDefined, name);

      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
        RESERVED_SPEC_KEYS[name](Constructor, property);
      } else {
        // Setup methods on prototype:
        // The following member methods should not be automatically bound:
        // 1. Expected ReactClass methods (in the "interface").
        // 2. Overridden methods (that were mixed in).
        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
        var isFunction = typeof property === 'function';
        var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

        if (shouldAutoBind) {
          autoBindPairs.push(name, property);
          proto[name] = property;
        } else {
          if (isAlreadyDefined) {
            var specPolicy = ReactClassInterface[name];

            // These cases should already be caught by validateMethodOverride.
            !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ?  true ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : void 0;

            // For methods which are defined more than once, call the existing
            // methods before calling the new property, merging if appropriate.
            if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
              proto[name] = createMergedResultFunction(proto[name], property);
            } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
              proto[name] = createChainedFunction(proto[name], property);
            }
          } else {
            proto[name] = property;
            if (true) {
              // Add verbose displayName to the function, which helps when looking
              // at profiling tools.
              if (typeof property === 'function' && spec.displayName) {
                proto[name].displayName = spec.displayName + '_' + name;
              }
            }
          }
        }
      }
    }
  }

  function mixStaticSpecIntoComponent(Constructor, statics) {
    if (!statics) {
      return;
    }
    for (var name in statics) {
      var property = statics[name];
      if (!statics.hasOwnProperty(name)) {
        continue;
      }

      var isReserved = name in RESERVED_SPEC_KEYS;
      !!isReserved ?  true ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : void 0;

      var isInherited = name in Constructor;
      !!isInherited ?  true ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : void 0;
      Constructor[name] = property;
    }
  }

  /**
   * Merge two objects, but throw if both contain the same key.
   *
   * @param {object} one The first object, which is mutated.
   * @param {object} two The second object
   * @return {object} one after it has been mutated to contain everything in two.
   */
  function mergeIntoWithNoDuplicateKeys(one, two) {
    !(one && two && typeof one === 'object' && typeof two === 'object') ?  true ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : void 0;

    for (var key in two) {
      if (two.hasOwnProperty(key)) {
        !(one[key] === undefined) ?  true ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : void 0;
        one[key] = two[key];
      }
    }
    return one;
  }

  /**
   * Creates a function that invokes two functions and merges their return values.
   *
   * @param {function} one Function to invoke first.
   * @param {function} two Function to invoke second.
   * @return {function} Function that invokes the two argument functions.
   * @private
   */
  function createMergedResultFunction(one, two) {
    return function mergedResult() {
      var a = one.apply(this, arguments);
      var b = two.apply(this, arguments);
      if (a == null) {
        return b;
      } else if (b == null) {
        return a;
      }
      var c = {};
      mergeIntoWithNoDuplicateKeys(c, a);
      mergeIntoWithNoDuplicateKeys(c, b);
      return c;
    };
  }

  /**
   * Creates a function that invokes two functions and ignores their return vales.
   *
   * @param {function} one Function to invoke first.
   * @param {function} two Function to invoke second.
   * @return {function} Function that invokes the two argument functions.
   * @private
   */
  function createChainedFunction(one, two) {
    return function chainedFunction() {
      one.apply(this, arguments);
      two.apply(this, arguments);
    };
  }

  /**
   * Binds a method to the component.
   *
   * @param {object} component Component whose method is going to be bound.
   * @param {function} method Method to be bound.
   * @return {function} The bound method.
   */
  function bindAutoBindMethod(component, method) {
    var boundMethod = method.bind(component);
    if (true) {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function (newThis) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        // User is trying to bind() an autobound method; we effectively will
        // ignore the value of "this" that the user is trying to use, so
        // let's warn.
        if (newThis !== component && newThis !== null) {
           true ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
        } else if (!args.length) {
           true ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }

  /**
   * Binds all auto-bound methods in a component.
   *
   * @param {object} component Component whose method is going to be bound.
   */
  function bindAutoBindMethods(component) {
    var pairs = component.__reactAutoBindPairs;
    for (var i = 0; i < pairs.length; i += 2) {
      var autoBindKey = pairs[i];
      var method = pairs[i + 1];
      component[autoBindKey] = bindAutoBindMethod(component, method);
    }
  }

  /**
   * Add more to the ReactClass base class. These are all legacy features and
   * therefore not already part of the modern ReactComponent.
   */
  var ReactClassMixin = {

    /**
     * TODO: This will be deprecated because state should always keep a consistent
     * type signature and the only use case for this, is to avoid that.
     */
    replaceState: function (newState, callback) {
      this.updater.enqueueReplaceState(this, newState);
      if (callback) {
        this.updater.enqueueCallback(this, callback, 'replaceState');
      }
    },

    /**
     * Checks whether or not this composite component is mounted.
     * @return {boolean} True if mounted, false otherwise.
     * @protected
     * @final
     */
    isMounted: function () {
      return this.updater.isMounted(this);
    }
  };

  var ReactClassComponent = function () {};
  _assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

  /**
   * Module for creating composite components.
   *
   * @class ReactClass
   */
  var ReactClass = {

    /**
     * Creates a composite component class given a class specification.
     * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
     *
     * @param {object} spec Class specification (which must define `render`).
     * @return {function} Component constructor function.
     * @public
     */
    createClass: function (spec) {
      var Constructor = function (props, context, updater) {
        // This constructor gets overridden by mocks. The argument is used
        // by mocks to assert on what gets mounted.

        if (true) {
           true ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
        }

        // Wire up auto-binding
        if (this.__reactAutoBindPairs.length) {
          bindAutoBindMethods(this);
        }

        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;

        this.state = null;

        // ReactClasses doesn't have constructors. Instead, they use the
        // getInitialState and componentWillMount methods for initialization.

        var initialState = this.getInitialState ? this.getInitialState() : null;
        if (true) {
          // We allow auto-mocks to proceed as if they're returning null.
          if (initialState === undefined && this.getInitialState._isMockFunction) {
            // This is probably bad practice. Consider warning here and
            // deprecating this convenience.
            initialState = null;
          }
        }
        !(typeof initialState === 'object' && !Array.isArray(initialState)) ?  true ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : void 0;

        this.state = initialState;
      };
      Constructor.prototype = new ReactClassComponent();
      Constructor.prototype.constructor = Constructor;
      Constructor.prototype.__reactAutoBindPairs = [];

      injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

      mixSpecIntoComponent(Constructor, spec);

      // Initialize the defaultProps property after all mixins have been merged.
      if (Constructor.getDefaultProps) {
        Constructor.defaultProps = Constructor.getDefaultProps();
      }

      if (true) {
        // This is a tag to indicate that the use of these method names is ok,
        // since it's used with createClass. If it's not, then it's likely a
        // mistake so we'll warn you to use the static property, property
        // initializer or constructor respectively.
        if (Constructor.getDefaultProps) {
          Constructor.getDefaultProps.isReactClassApproved = {};
        }
        if (Constructor.prototype.getInitialState) {
          Constructor.prototype.getInitialState.isReactClassApproved = {};
        }
      }

      !Constructor.prototype.render ?  true ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : void 0;

      if (true) {
         true ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
         true ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
      }

      // Reduce time spent doing lookups by setting these on the prototype.
      for (var methodName in ReactClassInterface) {
        if (!Constructor.prototype[methodName]) {
          Constructor.prototype[methodName] = null;
        }
      }

      return Constructor;
    },

    injection: {
      injectMixin: function (mixin) {
        injectedMixins.push(mixin);
      }
    }

  };

  module.exports = ReactClass;

/***/ },
/* 491 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactComponent
   */

  'use strict';

  var ReactNoopUpdateQueue = __webpack_require__(503);
  var ReactInstrumentation = __webpack_require__(125);

  var canDefineProperty = __webpack_require__(365);
  var emptyObject = __webpack_require__(249);
  var invariant = __webpack_require__(91);
  var warning = __webpack_require__(94);

  /**
   * Base class helpers for the updating state of a component.
   */
  function ReactComponent(props, context, updater) {
    this.props = props;
    this.context = context;
    this.refs = emptyObject;
    // We initialize the default updater but the real one gets injected by the
    // renderer.
    this.updater = updater || ReactNoopUpdateQueue;
  }

  ReactComponent.prototype.isReactComponent = {};

  /**
   * Sets a subset of the state. Always use this to mutate
   * state. You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * There is no guarantee that calls to `setState` will run synchronously,
   * as they may eventually be batched together.  You can provide an optional
   * callback that will be executed when the call to setState is actually
   * completed.
   *
   * When a function is provided to setState, it will be called at some point in
   * the future (not synchronously). It will be called with the up to date
   * component arguments (state, props, context). These values can be different
   * from this.* because your function may be called after receiveProps but before
   * shouldComponentUpdate, and this new state, props, and context will not yet be
   * assigned to this.
   *
   * @param {object|function} partialState Next partial state or function to
   *        produce next partial state to be merged with current state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  ReactComponent.prototype.setState = function (partialState, callback) {
    !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ?  true ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : void 0;
    if (true) {
      ReactInstrumentation.debugTool.onSetState();
       true ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
    }
    this.updater.enqueueSetState(this, partialState);
    if (callback) {
      this.updater.enqueueCallback(this, callback, 'setState');
    }
  };

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {?function} callback Called after update is complete.
   * @final
   * @protected
   */
  ReactComponent.prototype.forceUpdate = function (callback) {
    this.updater.enqueueForceUpdate(this);
    if (callback) {
      this.updater.enqueueCallback(this, callback, 'forceUpdate');
    }
  };

  /**
   * Deprecated APIs. These APIs used to exist on classic React classes but since
   * we would like to deprecate them, we're not going to move them over to this
   * modern base class. Instead, we define a getter that warns if it's accessed.
   */
  if (true) {
    var deprecatedAPIs = {
      isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
      replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
    };
    var defineDeprecationWarning = function (methodName, info) {
      if (canDefineProperty) {
        Object.defineProperty(ReactComponent.prototype, methodName, {
          get: function () {
             true ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
            return undefined;
          }
        });
      }
    };
    for (var fnName in deprecatedAPIs) {
      if (deprecatedAPIs.hasOwnProperty(fnName)) {
        defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
      }
    }
  }

  module.exports = ReactComponent;

/***/ },
/* 492 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactComponentBrowserEnvironment
   */

  'use strict';

  var DOMChildrenOperations = __webpack_require__(357);
  var ReactDOMIDOperations = __webpack_require__(1235);

  /**
   * Abstracts away all functionality of the reconciler that requires knowledge of
   * the browser context. TODO: These callers should be refactored to avoid the
   * need for this injection.
   */
  var ReactComponentBrowserEnvironment = {

    processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

    replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup,

    /**
     * If a particular environment requires that some resources be cleaned up,
     * specify this in the injected Mixin. In the DOM, we would likely want to
     * purge any cached node ID lookups.
     *
     * @private
     */
    unmountIDFromEnvironment: function (rootNodeID) {}

  };

  module.exports = ReactComponentBrowserEnvironment;

/***/ },
/* 493 */
/***/ function(module, exports) {

  /**
   * Copyright 2015-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMComponentFlags
   */

  'use strict';

  var ReactDOMComponentFlags = {
    hasCachedChildNodes: 1 << 0
  };

  module.exports = ReactDOMComponentFlags;

/***/ },
/* 494 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMSelect
   */

  'use strict';

  var _assign = __webpack_require__(100);

  var DisabledInputUtils = __webpack_require__(270);
  var LinkedValueUtils = __webpack_require__(361);
  var ReactDOMComponentTree = __webpack_require__(108);
  var ReactUpdates = __webpack_require__(147);

  var warning = __webpack_require__(94);

  var didWarnValueLink = false;
  var didWarnValueNull = false;
  var didWarnValueDefaultValue = false;

  function updateOptionsIfPendingUpdateAndMounted() {
    if (this._rootNodeID && this._wrapperState.pendingUpdate) {
      this._wrapperState.pendingUpdate = false;

      var props = this._currentElement.props;
      var value = LinkedValueUtils.getValue(props);

      if (value != null) {
        updateOptions(this, Boolean(props.multiple), value);
      }
    }
  }

  function getDeclarationErrorAddendum(owner) {
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  }

  function warnIfValueIsNull(props) {
    if (props != null && props.value === null && !didWarnValueNull) {
       true ? warning(false, '`value` prop on `select` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.') : void 0;

      didWarnValueNull = true;
    }
  }

  var valuePropNames = ['value', 'defaultValue'];

  /**
   * Validation function for `value` and `defaultValue`.
   * @private
   */
  function checkSelectPropTypes(inst, props) {
    var owner = inst._currentElement._owner;
    LinkedValueUtils.checkPropTypes('select', props, owner);

    if (props.valueLink !== undefined && !didWarnValueLink) {
       true ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
      didWarnValueLink = true;
    }

    for (var i = 0; i < valuePropNames.length; i++) {
      var propName = valuePropNames[i];
      if (props[propName] == null) {
        continue;
      }
      if (props.multiple) {
         true ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
      } else {
         true ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
      }
    }
  }

  /**
   * @param {ReactDOMComponent} inst
   * @param {boolean} multiple
   * @param {*} propValue A stringable (with `multiple`, a list of stringables).
   * @private
   */
  function updateOptions(inst, multiple, propValue) {
    var selectedValue, i;
    var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;

    if (multiple) {
      selectedValue = {};
      for (i = 0; i < propValue.length; i++) {
        selectedValue['' + propValue[i]] = true;
      }
      for (i = 0; i < options.length; i++) {
        var selected = selectedValue.hasOwnProperty(options[i].value);
        if (options[i].selected !== selected) {
          options[i].selected = selected;
        }
      }
    } else {
      // Do not set `select.value` as exact behavior isn't consistent across all
      // browsers for all cases.
      selectedValue = '' + propValue;
      for (i = 0; i < options.length; i++) {
        if (options[i].value === selectedValue) {
          options[i].selected = true;
          return;
        }
      }
      if (options.length) {
        options[0].selected = true;
      }
    }
  }

  /**
   * Implements a <select> native component that allows optionally setting the
   * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
   * stringable. If `multiple` is true, the prop must be an array of stringables.
   *
   * If `value` is not supplied (or null/undefined), user actions that change the
   * selected option will trigger updates to the rendered options.
   *
   * If it is supplied (and not null/undefined), the rendered options will not
   * update in response to user actions. Instead, the `value` prop must change in
   * order for the rendered options to update.
   *
   * If `defaultValue` is provided, any options with the supplied values will be
   * selected.
   */
  var ReactDOMSelect = {
    getNativeProps: function (inst, props) {
      return _assign({}, DisabledInputUtils.getNativeProps(inst, props), {
        onChange: inst._wrapperState.onChange,
        value: undefined
      });
    },

    mountWrapper: function (inst, props) {
      if (true) {
        checkSelectPropTypes(inst, props);
        warnIfValueIsNull(props);
      }

      var value = LinkedValueUtils.getValue(props);
      inst._wrapperState = {
        pendingUpdate: false,
        initialValue: value != null ? value : props.defaultValue,
        listeners: null,
        onChange: _handleChange.bind(inst),
        wasMultiple: Boolean(props.multiple)
      };

      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
         true ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
        didWarnValueDefaultValue = true;
      }
    },

    getSelectValueContext: function (inst) {
      // ReactDOMOption looks at this initial value so the initial generated
      // markup has correct `selected` attributes
      return inst._wrapperState.initialValue;
    },

    postUpdateWrapper: function (inst) {
      var props = inst._currentElement.props;
      if (true) {
        warnIfValueIsNull(props);
      }

      // After the initial mount, we control selected-ness manually so don't pass
      // this value down
      inst._wrapperState.initialValue = undefined;

      var wasMultiple = inst._wrapperState.wasMultiple;
      inst._wrapperState.wasMultiple = Boolean(props.multiple);

      var value = LinkedValueUtils.getValue(props);
      if (value != null) {
        inst._wrapperState.pendingUpdate = false;
        updateOptions(inst, Boolean(props.multiple), value);
      } else if (wasMultiple !== Boolean(props.multiple)) {
        // For simplicity, reapply `defaultValue` if `multiple` is toggled.
        if (props.defaultValue != null) {
          updateOptions(inst, Boolean(props.multiple), props.defaultValue);
        } else {
          // Revert the select back to its default unselected state.
          updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
        }
      }
    }
  };

  function _handleChange(event) {
    var props = this._currentElement.props;
    var returnValue = LinkedValueUtils.executeOnChange(props, event);

    if (this._rootNodeID) {
      this._wrapperState.pendingUpdate = true;
    }
    ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
    return returnValue;
  }

  module.exports = ReactDOMSelect;

/***/ },
/* 495 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2014-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactElementValidator
   */

  /**
   * ReactElementValidator provides a wrapper around a element factory
   * which validates the props passed to the element. This is intended to be
   * used only in DEV and could be replaced by a static type checker for languages
   * that support it.
   */

  'use strict';

  var ReactElement = __webpack_require__(135);
  var ReactPropTypeLocations = __webpack_require__(274);
  var ReactPropTypeLocationNames = __webpack_require__(273);
  var ReactCurrentOwner = __webpack_require__(167);

  var canDefineProperty = __webpack_require__(365);
  var getIteratorFn = __webpack_require__(370);
  var invariant = __webpack_require__(91);
  var warning = __webpack_require__(94);

  function getDeclarationErrorAddendum() {
    if (ReactCurrentOwner.current) {
      var name = ReactCurrentOwner.current.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  }

  /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */
  var ownerHasKeyUseWarning = {};

  var loggedTypeFailures = {};

  /**
   * Warn if the element doesn't have an explicit key assigned to it.
   * This element is in an array. The array could grow and shrink or be
   * reordered. All children that haven't already been validated are required to
   * have a "key" property assigned to it.
   *
   * @internal
   * @param {ReactElement} element Element that requires a key.
   * @param {*} parentType element's parent's type.
   */
  function validateExplicitKey(element, parentType) {
    if (!element._store || element._store.validated || element.key != null) {
      return;
    }
    element._store.validated = true;

    var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
    if (addenda === null) {
      // we already showed the warning
      return;
    }
     true ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : void 0;
  }

  /**
   * Shared warning and monitoring code for the key warnings.
   *
   * @internal
   * @param {string} messageType A key used for de-duping warnings.
   * @param {ReactElement} element Component that requires a key.
   * @param {*} parentType element's parent's type.
   * @returns {?object} A set of addenda to use in the warning message, or null
   * if the warning has already been shown before (and shouldn't be shown again).
   */
  function getAddendaForKeyUse(messageType, element, parentType) {
    var addendum = getDeclarationErrorAddendum();
    if (!addendum) {
      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
      if (parentName) {
        addendum = ' Check the top-level render call using <' + parentName + '>.';
      }
    }

    var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});
    if (memoizer[addendum]) {
      return null;
    }
    memoizer[addendum] = true;

    var addenda = {
      parentOrOwner: addendum,
      url: ' See https://fb.me/react-warning-keys for more information.',
      childOwner: null
    };

    // Usually the current owner is the offender, but if it accepts children as a
    // property, it may be the creator of the child that's responsible for
    // assigning it a key.
    if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
      // Give the component that originally created this child.
      addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
    }

    return addenda;
  }

  /**
   * Ensure that every element either is passed in a static location, in an
   * array with an explicit keys property defined, or in an object literal
   * with valid key property.
   *
   * @internal
   * @param {ReactNode} node Statically passed child of any type.
   * @param {*} parentType node's parent's type.
   */
  function validateChildKeys(node, parentType) {
    if (typeof node !== 'object') {
      return;
    }
    if (Array.isArray(node)) {
      for (var i = 0; i < node.length; i++) {
        var child = node[i];
        if (ReactElement.isValidElement(child)) {
          validateExplicitKey(child, parentType);
        }
      }
    } else if (ReactElement.isValidElement(node)) {
      // This element was passed in a valid location.
      if (node._store) {
        node._store.validated = true;
      }
    } else if (node) {
      var iteratorFn = getIteratorFn(node);
      // Entry iterators provide implicit keys.
      if (iteratorFn) {
        if (iteratorFn !== node.entries) {
          var iterator = iteratorFn.call(node);
          var step;
          while (!(step = iterator.next()).done) {
            if (ReactElement.isValidElement(step.value)) {
              validateExplicitKey(step.value, parentType);
            }
          }
        }
      }
    }
  }

  /**
   * Assert that the props are valid
   *
   * @param {string} componentName Name of the component for error messages.
   * @param {object} propTypes Map of prop name to a ReactPropType
   * @param {object} props
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  function checkPropTypes(componentName, propTypes, props, location) {
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          !(typeof propTypes[propName] === 'function') ?  true ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : void 0;
          error = propTypes[propName](props, propName, componentName, location);
        } catch (ex) {
          error = ex;
        }
         true ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : void 0;
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var addendum = getDeclarationErrorAddendum();
           true ? warning(false, 'Failed propType: %s%s', error.message, addendum) : void 0;
        }
      }
    }
  }

  /**
   * Given an element, validate that its props follow the propTypes definition,
   * provided by the type.
   *
   * @param {ReactElement} element
   */
  function validatePropTypes(element) {
    var componentClass = element.type;
    if (typeof componentClass !== 'function') {
      return;
    }
    var name = componentClass.displayName || componentClass.name;
    if (componentClass.propTypes) {
      checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);
    }
    if (typeof componentClass.getDefaultProps === 'function') {
       true ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
    }
  }

  var ReactElementValidator = {

    createElement: function (type, props, children) {
      var validType = typeof type === 'string' || typeof type === 'function';
      // We warn in this case but don't throw. We expect the element creation to
      // succeed and there will likely be errors in render.
       true ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : void 0;

      var element = ReactElement.createElement.apply(this, arguments);

      // The result can be nullish if a mock or a custom function is used.
      // TODO: Drop this when these are no longer allowed as the type argument.
      if (element == null) {
        return element;
      }

      // Skip key warning if the type isn't valid since our key validation logic
      // doesn't expect a non-string/function type and can throw confusing errors.
      // We don't want exception behavior to differ between dev and prod.
      // (Rendering will throw with a helpful message and as soon as the type is
      // fixed, the key warnings will appear.)
      if (validType) {
        for (var i = 2; i < arguments.length; i++) {
          validateChildKeys(arguments[i], type);
        }
      }

      validatePropTypes(element);

      return element;
    },

    createFactory: function (type) {
      var validatedFactory = ReactElementValidator.createElement.bind(null, type);
      // Legacy hook TODO: Warn if this is accessed
      validatedFactory.type = type;

      if (true) {
        if (canDefineProperty) {
          Object.defineProperty(validatedFactory, 'type', {
            enumerable: false,
            get: function () {
               true ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;
              Object.defineProperty(this, 'type', {
                value: type
              });
              return type;
            }
          });
        }
      }

      return validatedFactory;
    },

    cloneElement: function (element, props, children) {
      var newElement = ReactElement.cloneElement.apply(this, arguments);
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], newElement.type);
      }
      validatePropTypes(newElement);
      return newElement;
    }

  };

  module.exports = ReactElementValidator;

/***/ },
/* 496 */
/***/ function(module, exports) {

  /**
   * Copyright 2014-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactEmptyComponent
   */

  'use strict';

  var emptyComponentFactory;

  var ReactEmptyComponentInjection = {
    injectEmptyComponentFactory: function (factory) {
      emptyComponentFactory = factory;
    }
  };

  var ReactEmptyComponent = {
    create: function (instantiate) {
      return emptyComponentFactory(instantiate);
    }
  };

  ReactEmptyComponent.injection = ReactEmptyComponentInjection;

  module.exports = ReactEmptyComponent;

/***/ },
/* 497 */
/***/ function(module, exports) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactFeatureFlags
   */

  'use strict';

  var ReactFeatureFlags = {
    // When true, call console.time() before and .timeEnd() after each top-level
    // render (both initial renders and updates). Useful when looking at prod-mode
    // timeline profiles in Chrome, for example.
    logTopLevelRenders: false
  };

  module.exports = ReactFeatureFlags;

/***/ },
/* 498 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactInputSelection
   */

  'use strict';

  var ReactDOMSelection = __webpack_require__(1239);

  var containsNode = __webpack_require__(1050);
  var focusNode = __webpack_require__(440);
  var getActiveElement = __webpack_require__(441);

  function isInDocument(node) {
    return containsNode(document.documentElement, node);
  }

  /**
   * @ReactInputSelection: React input selection module. Based on Selection.js,
   * but modified to be suitable for react and has a couple of bug fixes (doesn't
   * assume buttons have range selections allowed).
   * Input selection module for React.
   */
  var ReactInputSelection = {

    hasSelectionCapabilities: function (elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
      return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
    },

    getSelectionInformation: function () {
      var focusedElem = getActiveElement();
      return {
        focusedElem: focusedElem,
        selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
      };
    },

    /**
     * @restoreSelection: If any selection information was potentially lost,
     * restore it. This is useful when performing operations that could remove dom
     * nodes and place them back in, resulting in focus being lost.
     */
    restoreSelection: function (priorSelectionInformation) {
      var curFocusedElem = getActiveElement();
      var priorFocusedElem = priorSelectionInformation.focusedElem;
      var priorSelectionRange = priorSelectionInformation.selectionRange;
      if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
        if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
          ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
        }
        focusNode(priorFocusedElem);
      }
    },

    /**
     * @getSelection: Gets the selection bounds of a focused textarea, input or
     * contentEditable node.
     * -@input: Look up selection bounds of this input
     * -@return {start: selectionStart, end: selectionEnd}
     */
    getSelection: function (input) {
      var selection;

      if ('selectionStart' in input) {
        // Modern browser with input or textarea.
        selection = {
          start: input.selectionStart,
          end: input.selectionEnd
        };
      } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
        // IE8 input.
        var range = document.selection.createRange();
        // There can only be one selection per document in IE, so it must
        // be in our element.
        if (range.parentElement() === input) {
          selection = {
            start: -range.moveStart('character', -input.value.length),
            end: -range.moveEnd('character', -input.value.length)
          };
        }
      } else {
        // Content editable or old IE textarea.
        selection = ReactDOMSelection.getOffsets(input);
      }

      return selection || { start: 0, end: 0 };
    },

    /**
     * @setSelection: Sets the selection bounds of a textarea or input and focuses
     * the input.
     * -@input     Set selection bounds of this input or textarea
     * -@offsets   Object of same form that is returned from get*
     */
    setSelection: function (input, offsets) {
      var start = offsets.start;
      var end = offsets.end;
      if (end === undefined) {
        end = start;
      }

      if ('selectionStart' in input) {
        input.selectionStart = start;
        input.selectionEnd = Math.min(end, input.value.length);
      } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
        var range = input.createTextRange();
        range.collapse(true);
        range.moveStart('character', start);
        range.moveEnd('character', end - start);
        range.select();
      } else {
        ReactDOMSelection.setOffsets(input, offsets);
      }
    }
  };

  module.exports = ReactInputSelection;

/***/ },
/* 499 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactMount
   */

  'use strict';

  var DOMLazyTree = __webpack_require__(200);
  var DOMProperty = __webpack_require__(187);
  var ReactBrowserEventEmitter = __webpack_require__(272);
  var ReactCurrentOwner = __webpack_require__(167);
  var ReactDOMComponentTree = __webpack_require__(108);
  var ReactDOMContainerInfo = __webpack_require__(1230);
  var ReactDOMFeatureFlags = __webpack_require__(1234);
  var ReactElement = __webpack_require__(135);
  var ReactFeatureFlags = __webpack_require__(497);
  var ReactInstrumentation = __webpack_require__(125);
  var ReactMarkupChecksum = __webpack_require__(1251);
  var ReactReconciler = __webpack_require__(201);
  var ReactUpdateQueue = __webpack_require__(505);
  var ReactUpdates = __webpack_require__(147);

  var emptyObject = __webpack_require__(249);
  var instantiateReactComponent = __webpack_require__(512);
  var invariant = __webpack_require__(91);
  var setInnerHTML = __webpack_require__(372);
  var shouldUpdateReactComponent = __webpack_require__(373);
  var warning = __webpack_require__(94);

  var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
  var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;

  var ELEMENT_NODE_TYPE = 1;
  var DOC_NODE_TYPE = 9;
  var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

  var instancesByReactRootID = {};

  /**
   * Finds the index of the first character
   * that's not common between the two given strings.
   *
   * @return {number} the index of the character where the strings diverge
   */
  function firstDifferenceIndex(string1, string2) {
    var minLen = Math.min(string1.length, string2.length);
    for (var i = 0; i < minLen; i++) {
      if (string1.charAt(i) !== string2.charAt(i)) {
        return i;
      }
    }
    return string1.length === string2.length ? -1 : minLen;
  }

  /**
   * @param {DOMElement|DOMDocument} container DOM element that may contain
   * a React component
   * @return {?*} DOM element that may have the reactRoot ID, or null.
   */
  function getReactRootElementInContainer(container) {
    if (!container) {
      return null;
    }

    if (container.nodeType === DOC_NODE_TYPE) {
      return container.documentElement;
    } else {
      return container.firstChild;
    }
  }

  function internalGetID(node) {
    // If node is something like a window, document, or text node, none of
    // which support attributes or a .getAttribute method, gracefully return
    // the empty string, as if the attribute were missing.
    return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
  }

  /**
   * Mounts this component and inserts it into the DOM.
   *
   * @param {ReactComponent} componentInstance The instance to mount.
   * @param {DOMElement} container DOM element to mount into.
   * @param {ReactReconcileTransaction} transaction
   * @param {boolean} shouldReuseMarkup If true, do not insert markup
   */
  function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
    var markerName;
    if (ReactFeatureFlags.logTopLevelRenders) {
      var wrappedElement = wrapperInstance._currentElement.props;
      var type = wrappedElement.type;
      markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
      console.time(markerName);
    }

    var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context);

    if (markerName) {
      console.timeEnd(markerName);
    }

    wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
    ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
  }

  /**
   * Batched mount.
   *
   * @param {ReactComponent} componentInstance The instance to mount.
   * @param {DOMElement} container DOM element to mount into.
   * @param {boolean} shouldReuseMarkup If true, do not insert markup
   */
  function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
    var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
    /* useCreateElement */
    !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
    transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
    ReactUpdates.ReactReconcileTransaction.release(transaction);
  }

  /**
   * Unmounts a component and removes it from the DOM.
   *
   * @param {ReactComponent} instance React component instance.
   * @param {DOMElement} container DOM element to unmount from.
   * @final
   * @internal
   * @see {ReactMount.unmountComponentAtNode}
   */
  function unmountComponentFromNode(instance, container, safely) {
    ReactReconciler.unmountComponent(instance, safely);

    if (container.nodeType === DOC_NODE_TYPE) {
      container = container.documentElement;
    }

    // http://jsperf.com/emptying-a-node
    while (container.lastChild) {
      container.removeChild(container.lastChild);
    }
  }

  /**
   * True if the supplied DOM node has a direct React-rendered child that is
   * not a React root element. Useful for warning in `render`,
   * `unmountComponentAtNode`, etc.
   *
   * @param {?DOMElement} node The candidate DOM node.
   * @return {boolean} True if the DOM element contains a direct child that was
   * rendered by React but is not a root element.
   * @internal
   */
  function hasNonRootReactChild(container) {
    var rootEl = getReactRootElementInContainer(container);
    if (rootEl) {
      var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
      return !!(inst && inst._nativeParent);
    }
  }

  function getNativeRootInstanceInContainer(container) {
    var rootEl = getReactRootElementInContainer(container);
    var prevNativeInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
    return prevNativeInstance && !prevNativeInstance._nativeParent ? prevNativeInstance : null;
  }

  function getTopLevelWrapperInContainer(container) {
    var root = getNativeRootInstanceInContainer(container);
    return root ? root._nativeContainerInfo._topLevelWrapper : null;
  }

  /**
   * Temporary (?) hack so that we can store all top-level pending updates on
   * composites instead of having to worry about different types of components
   * here.
   */
  var topLevelRootCounter = 1;
  var TopLevelWrapper = function () {
    this.rootID = topLevelRootCounter++;
  };
  TopLevelWrapper.prototype.isReactComponent = {};
  if (true) {
    TopLevelWrapper.displayName = 'TopLevelWrapper';
  }
  TopLevelWrapper.prototype.render = function () {
    // this.props is actually a ReactElement
    return this.props;
  };

  /**
   * Mounting is the process of initializing a React component by creating its
   * representative DOM elements and inserting them into a supplied `container`.
   * Any prior content inside `container` is destroyed in the process.
   *
   *   ReactMount.render(
   *     component,
   *     document.getElementById('container')
   *   );
   *
   *   <div id="container">                   <-- Supplied `container`.
   *     <div data-reactid=".3">              <-- Rendered reactRoot of React
   *       // ...                                 component.
   *     </div>
   *   </div>
   *
   * Inside of `container`, the first element rendered is the "reactRoot".
   */
  var ReactMount = {

    TopLevelWrapper: TopLevelWrapper,

    /**
     * Used by devtools. The keys are not important.
     */
    _instancesByReactRootID: instancesByReactRootID,

    /**
     * This is a hook provided to support rendering React components while
     * ensuring that the apparent scroll position of its `container` does not
     * change.
     *
     * @param {DOMElement} container The `container` being rendered into.
     * @param {function} renderCallback This must be called once to do the render.
     */
    scrollMonitor: function (container, renderCallback) {
      renderCallback();
    },

    /**
     * Take a component that's already mounted into the DOM and replace its props
     * @param {ReactComponent} prevComponent component instance already in the DOM
     * @param {ReactElement} nextElement component instance to render
     * @param {DOMElement} container container to render into
     * @param {?function} callback function triggered on completion
     */
    _updateRootComponent: function (prevComponent, nextElement, container, callback) {
      ReactMount.scrollMonitor(container, function () {
        ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
        if (callback) {
          ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
        }
      });

      return prevComponent;
    },

    /**
     * Render a new component into the DOM. Hooked by devtools!
     *
     * @param {ReactElement} nextElement element to render
     * @param {DOMElement} container container to render into
     * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
     * @return {ReactComponent} nextComponent
     */
    _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
      if (true) {
        ReactInstrumentation.debugTool.onBeginFlush();
      }

      // Various parts of our code (such as ReactCompositeComponent's
      // _renderValidatedComponent) assume that calls to render aren't nested;
      // verify that that's the case.
       true ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

      !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ?  true ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : void 0;

      ReactBrowserEventEmitter.ensureScrollValueMonitoring();
      var componentInstance = instantiateReactComponent(nextElement);

      if (true) {
        // Mute future events from the top level wrapper.
        // It is an implementation detail that devtools should not know about.
        componentInstance._debugID = 0;
      }

      // The initial render is synchronous but any updates that happen during
      // rendering, in componentWillMount or componentDidMount, will be batched
      // according to the current batching strategy.

      ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);

      var wrapperID = componentInstance._instance.rootID;
      instancesByReactRootID[wrapperID] = componentInstance;

      if (true) {
        // The instance here is TopLevelWrapper so we report mount for its child.
        ReactInstrumentation.debugTool.onMountRootComponent(componentInstance._renderedComponent._debugID);
        ReactInstrumentation.debugTool.onEndFlush();
      }

      return componentInstance;
    },

    /**
     * Renders a React component into the DOM in the supplied `container`.
     *
     * If the React component was previously rendered into `container`, this will
     * perform an update on it and only mutate the DOM as necessary to reflect the
     * latest React component.
     *
     * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
     * @param {ReactElement} nextElement Component element to render.
     * @param {DOMElement} container DOM element to render into.
     * @param {?function} callback function triggered on completion
     * @return {ReactComponent} Component instance rendered in `container`.
     */
    renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
      !(parentComponent != null && parentComponent._reactInternalInstance != null) ?  true ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : void 0;
      return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
    },

    _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
      ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
      !ReactElement.isValidElement(nextElement) ?  true ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' :
      // Check if it quacks like an element
      nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : void 0;

       true ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;

      var nextWrappedElement = ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);

      var prevComponent = getTopLevelWrapperInContainer(container);

      if (prevComponent) {
        var prevWrappedElement = prevComponent._currentElement;
        var prevElement = prevWrappedElement.props;
        if (shouldUpdateReactComponent(prevElement, nextElement)) {
          var publicInst = prevComponent._renderedComponent.getPublicInstance();
          var updatedCallback = callback && function () {
            callback.call(publicInst);
          };
          ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);
          return publicInst;
        } else {
          ReactMount.unmountComponentAtNode(container);
        }
      }

      var reactRootElement = getReactRootElementInContainer(container);
      var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
      var containerHasNonRootReactChild = hasNonRootReactChild(container);

      if (true) {
         true ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

        if (!containerHasReactMarkup || reactRootElement.nextSibling) {
          var rootElementSibling = reactRootElement;
          while (rootElementSibling) {
            if (internalGetID(rootElementSibling)) {
               true ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
              break;
            }
            rootElementSibling = rootElementSibling.nextSibling;
          }
        }
      }

      var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
      var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();
      if (callback) {
        callback.call(component);
      }
      return component;
    },

    /**
     * Renders a React component into the DOM in the supplied `container`.
     * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
     *
     * If the React component was previously rendered into `container`, this will
     * perform an update on it and only mutate the DOM as necessary to reflect the
     * latest React component.
     *
     * @param {ReactElement} nextElement Component element to render.
     * @param {DOMElement} container DOM element to render into.
     * @param {?function} callback function triggered on completion
     * @return {ReactComponent} Component instance rendered in `container`.
     */
    render: function (nextElement, container, callback) {
      return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
    },

    /**
     * Unmounts and destroys the React component rendered in the `container`.
     * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
     *
     * @param {DOMElement} container DOM element containing a React component.
     * @return {boolean} True if a component was found in and unmounted from
     *                   `container`
     */
    unmountComponentAtNode: function (container) {
      // Various parts of our code (such as ReactCompositeComponent's
      // _renderValidatedComponent) assume that calls to render aren't nested;
      // verify that that's the case. (Strictly speaking, unmounting won't cause a
      // render but we still don't expect to be in a render call here.)
       true ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

      !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ?  true ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : void 0;

      var prevComponent = getTopLevelWrapperInContainer(container);
      if (!prevComponent) {
        // Check if the node being unmounted was rendered by React, but isn't a
        // root node.
        var containerHasNonRootReactChild = hasNonRootReactChild(container);

        // Check if the container itself is a React root node.
        var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);

        if (true) {
           true ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
        }

        return false;
      }
      delete instancesByReactRootID[prevComponent._instance.rootID];
      ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
      return true;
    },

    _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
      !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ?  true ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : void 0;

      if (shouldReuseMarkup) {
        var rootElement = getReactRootElementInContainer(container);
        if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
          ReactDOMComponentTree.precacheNode(instance, rootElement);
          return;
        } else {
          var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
          rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

          var rootMarkup = rootElement.outerHTML;
          rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

          var normalizedMarkup = markup;
          if (true) {
            // because rootMarkup is retrieved from the DOM, various normalizations
            // will have occurred which will not be present in `markup`. Here,
            // insert markup into a <div> or <iframe> depending on the container
            // type to perform the same normalizations before comparing.
            var normalizer;
            if (container.nodeType === ELEMENT_NODE_TYPE) {
              normalizer = document.createElement('div');
              normalizer.innerHTML = markup;
              normalizedMarkup = normalizer.innerHTML;
            } else {
              normalizer = document.createElement('iframe');
              document.body.appendChild(normalizer);
              normalizer.contentDocument.write(markup);
              normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
              document.body.removeChild(normalizer);
            }
          }

          var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
          var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

          !(container.nodeType !== DOC_NODE_TYPE) ?  true ? invariant(false, 'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s', difference) : invariant(false) : void 0;

          if (true) {
             true ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
          }
        }
      }

      !(container.nodeType !== DOC_NODE_TYPE) ?  true ? invariant(false, 'You\'re trying to render a component to the document but ' + 'you didn\'t use server rendering. We can\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : void 0;

      if (transaction.useCreateElement) {
        while (container.lastChild) {
          container.removeChild(container.lastChild);
        }
        DOMLazyTree.insertTreeBefore(container, markup, null);
      } else {
        setInnerHTML(container, markup);
        ReactDOMComponentTree.precacheNode(instance, container.firstChild);
      }

      if (true) {
        var nativeNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
        if (nativeNode._debugID !== 0) {
          ReactInstrumentation.debugTool.onNativeOperation(nativeNode._debugID, 'mount', markup.toString());
        }
      }
    }
  };

  module.exports = ReactMount;

/***/ },
/* 500 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactMultiChildUpdateTypes
   */

  'use strict';

  var keyMirror = __webpack_require__(250);

  /**
   * When a component's children are updated, a series of update configuration
   * objects are created in order to batch and serialize the required changes.
   *
   * Enumerates all the possible types of update configurations.
   *
   * @internal
   */
  var ReactMultiChildUpdateTypes = keyMirror({
    INSERT_MARKUP: null,
    MOVE_EXISTING: null,
    REMOVE_NODE: null,
    SET_MARKUP: null,
    TEXT_CONTENT: null
  });

  module.exports = ReactMultiChildUpdateTypes;

/***/ },
/* 501 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2014-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactNativeComponent
   */

  'use strict';

  var _assign = __webpack_require__(100);

  var invariant = __webpack_require__(91);

  var autoGenerateWrapperClass = null;
  var genericComponentClass = null;
  // This registry keeps track of wrapper classes around native tags.
  var tagToComponentClass = {};
  var textComponentClass = null;

  var ReactNativeComponentInjection = {
    // This accepts a class that receives the tag string. This is a catch all
    // that can render any kind of tag.
    injectGenericComponentClass: function (componentClass) {
      genericComponentClass = componentClass;
    },
    // This accepts a text component class that takes the text string to be
    // rendered as props.
    injectTextComponentClass: function (componentClass) {
      textComponentClass = componentClass;
    },
    // This accepts a keyed object with classes as values. Each key represents a
    // tag. That particular tag will use this class instead of the generic one.
    injectComponentClasses: function (componentClasses) {
      _assign(tagToComponentClass, componentClasses);
    }
  };

  /**
   * Get a composite component wrapper class for a specific tag.
   *
   * @param {ReactElement} element The tag for which to get the class.
   * @return {function} The React class constructor function.
   */
  function getComponentClassForElement(element) {
    if (typeof element.type === 'function') {
      return element.type;
    }
    var tag = element.type;
    var componentClass = tagToComponentClass[tag];
    if (componentClass == null) {
      tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
    }
    return componentClass;
  }

  /**
   * Get a native internal component class for a specific tag.
   *
   * @param {ReactElement} element The element to create.
   * @return {function} The internal class constructor function.
   */
  function createInternalComponent(element) {
    !genericComponentClass ?  true ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : void 0;
    return new genericComponentClass(element);
  }

  /**
   * @param {ReactText} text
   * @return {ReactComponent}
   */
  function createInstanceForText(text) {
    return new textComponentClass(text);
  }

  /**
   * @param {ReactComponent} component
   * @return {boolean}
   */
  function isTextComponent(component) {
    return component instanceof textComponentClass;
  }

  var ReactNativeComponent = {
    getComponentClassForElement: getComponentClassForElement,
    createInternalComponent: createInternalComponent,
    createInstanceForText: createInstanceForText,
    isTextComponent: isTextComponent,
    injection: ReactNativeComponentInjection
  };

  module.exports = ReactNativeComponent;

/***/ },
/* 502 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactNodeTypes
   */

  'use strict';

  var ReactElement = __webpack_require__(135);

  var invariant = __webpack_require__(91);

  var ReactNodeTypes = {
    NATIVE: 0,
    COMPOSITE: 1,
    EMPTY: 2,

    getType: function (node) {
      if (node === null || node === false) {
        return ReactNodeTypes.EMPTY;
      } else if (ReactElement.isValidElement(node)) {
        if (typeof node.type === 'function') {
          return ReactNodeTypes.COMPOSITE;
        } else {
          return ReactNodeTypes.NATIVE;
        }
      }
       true ?  true ? invariant(false, 'Unexpected node: %s', node) : invariant(false) : void 0;
    }
  };

  module.exports = ReactNodeTypes;

/***/ },
/* 503 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2015-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactNoopUpdateQueue
   */

  'use strict';

  var warning = __webpack_require__(94);

  function warnTDZ(publicInstance, callerName) {
    if (true) {
       true ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : void 0;
    }
  }

  /**
   * This is the abstract API for an update queue.
   */
  var ReactNoopUpdateQueue = {

    /**
     * Checks whether or not this composite component is mounted.
     * @param {ReactClass} publicInstance The instance we want to test.
     * @return {boolean} True if mounted, false otherwise.
     * @protected
     * @final
     */
    isMounted: function (publicInstance) {
      return false;
    },

    /**
     * Enqueue a callback that will be executed after all the pending updates
     * have processed.
     *
     * @param {ReactClass} publicInstance The instance to use as `this` context.
     * @param {?function} callback Called after state is updated.
     * @internal
     */
    enqueueCallback: function (publicInstance, callback) {},

    /**
     * Forces an update. This should only be invoked when it is known with
     * certainty that we are **not** in a DOM transaction.
     *
     * You may want to call this when you know that some deeper aspect of the
     * component's state has changed but `setState` was not called.
     *
     * This will not invoke `shouldComponentUpdate`, but it will invoke
     * `componentWillUpdate` and `componentDidUpdate`.
     *
     * @param {ReactClass} publicInstance The instance that should rerender.
     * @internal
     */
    enqueueForceUpdate: function (publicInstance) {
      warnTDZ(publicInstance, 'forceUpdate');
    },

    /**
     * Replaces all of the state. Always use this or `setState` to mutate state.
     * You should treat `this.state` as immutable.
     *
     * There is no guarantee that `this.state` will be immediately updated, so
     * accessing `this.state` after calling this method may return the old value.
     *
     * @param {ReactClass} publicInstance The instance that should rerender.
     * @param {object} completeState Next state.
     * @internal
     */
    enqueueReplaceState: function (publicInstance, completeState) {
      warnTDZ(publicInstance, 'replaceState');
    },

    /**
     * Sets a subset of the state. This only exists because _pendingState is
     * internal. This provides a merging strategy that is not available to deep
     * properties which is confusing. TODO: Expose pendingState or don't use it
     * during the merge.
     *
     * @param {ReactClass} publicInstance The instance that should rerender.
     * @param {object} partialState Next partial state to be merged with state.
     * @internal
     */
    enqueueSetState: function (publicInstance, partialState) {
      warnTDZ(publicInstance, 'setState');
    }
  };

  module.exports = ReactNoopUpdateQueue;

/***/ },
/* 504 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactPropTypes
   */

  'use strict';

  var ReactElement = __webpack_require__(135);
  var ReactPropTypeLocationNames = __webpack_require__(273);

  var emptyFunction = __webpack_require__(124);
  var getIteratorFn = __webpack_require__(370);

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  function createChainableTypeChecker(validate) {
    function checkType(isRequired, props, propName, componentName, location, propFullName) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;
      if (props[propName] == null) {
        var locationName = ReactPropTypeLocationNames[location];
        if (isRequired) {
          return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        var locationName = ReactPropTypeLocationNames[location];
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunction.thatReturns(null));
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new Error('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var locationName = ReactPropTypeLocationNames[location];
        var propType = getPropType(propValue);
        return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']');
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!ReactElement.isValidElement(props[propName])) {
        var locationName = ReactPropTypeLocationNames[location];
        return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var locationName = ReactPropTypeLocationNames[location];
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      return createChainableTypeChecker(function () {
        return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
      });
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var locationName = ReactPropTypeLocationNames[location];
      var valuesString = JSON.stringify(expectedValues);
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new Error('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        var locationName = ReactPropTypeLocationNames[location];
        return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (propValue.hasOwnProperty(key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      return createChainableTypeChecker(function () {
        return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
      });
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName) == null) {
          return null;
        }
      }

      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        var locationName = ReactPropTypeLocationNames[location];
        return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        var locationName = ReactPropTypeLocationNames[location];
        return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || ReactElement.isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  module.exports = ReactPropTypes;

/***/ },
/* 505 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2015-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactUpdateQueue
   */

  'use strict';

  var ReactCurrentOwner = __webpack_require__(167);
  var ReactInstanceMap = __webpack_require__(364);
  var ReactUpdates = __webpack_require__(147);

  var invariant = __webpack_require__(91);
  var warning = __webpack_require__(94);

  function enqueueUpdate(internalInstance) {
    ReactUpdates.enqueueUpdate(internalInstance);
  }

  function formatUnexpectedArgument(arg) {
    var type = typeof arg;
    if (type !== 'object') {
      return type;
    }
    var displayName = arg.constructor && arg.constructor.name || type;
    var keys = Object.keys(arg);
    if (keys.length > 0 && keys.length < 20) {
      return displayName + ' (keys: ' + keys.join(', ') + ')';
    }
    return displayName;
  }

  function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
    var internalInstance = ReactInstanceMap.get(publicInstance);
    if (!internalInstance) {
      if (true) {
        // Only warn when we have a callerName. Otherwise we should be silent.
        // We're probably calling from enqueueCallback. We don't want to warn
        // there because we already warned for the corresponding lifecycle method.
         true ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : void 0;
      }
      return null;
    }

    if (true) {
       true ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + 'within `render` or another component\'s constructor). Render methods ' + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
    }

    return internalInstance;
  }

  /**
   * ReactUpdateQueue allows for state updates to be scheduled into a later
   * reconciliation step.
   */
  var ReactUpdateQueue = {

    /**
     * Checks whether or not this composite component is mounted.
     * @param {ReactClass} publicInstance The instance we want to test.
     * @return {boolean} True if mounted, false otherwise.
     * @protected
     * @final
     */
    isMounted: function (publicInstance) {
      if (true) {
        var owner = ReactCurrentOwner.current;
        if (owner !== null) {
           true ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
          owner._warnedAboutRefsInRender = true;
        }
      }
      var internalInstance = ReactInstanceMap.get(publicInstance);
      if (internalInstance) {
        // During componentWillMount and render this will still be null but after
        // that will always render to something. At least for now. So we can use
        // this hack.
        return !!internalInstance._renderedComponent;
      } else {
        return false;
      }
    },

    /**
     * Enqueue a callback that will be executed after all the pending updates
     * have processed.
     *
     * @param {ReactClass} publicInstance The instance to use as `this` context.
     * @param {?function} callback Called after state is updated.
     * @param {string} callerName Name of the calling function in the public API.
     * @internal
     */
    enqueueCallback: function (publicInstance, callback, callerName) {
      ReactUpdateQueue.validateCallback(callback, callerName);
      var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

      // Previously we would throw an error if we didn't have an internal
      // instance. Since we want to make it a no-op instead, we mirror the same
      // behavior we have in other enqueue* methods.
      // We also need to ignore callbacks in componentWillMount. See
      // enqueueUpdates.
      if (!internalInstance) {
        return null;
      }

      if (internalInstance._pendingCallbacks) {
        internalInstance._pendingCallbacks.push(callback);
      } else {
        internalInstance._pendingCallbacks = [callback];
      }
      // TODO: The callback here is ignored when setState is called from
      // componentWillMount. Either fix it or disallow doing so completely in
      // favor of getInitialState. Alternatively, we can disallow
      // componentWillMount during server-side rendering.
      enqueueUpdate(internalInstance);
    },

    enqueueCallbackInternal: function (internalInstance, callback) {
      if (internalInstance._pendingCallbacks) {
        internalInstance._pendingCallbacks.push(callback);
      } else {
        internalInstance._pendingCallbacks = [callback];
      }
      enqueueUpdate(internalInstance);
    },

    /**
     * Forces an update. This should only be invoked when it is known with
     * certainty that we are **not** in a DOM transaction.
     *
     * You may want to call this when you know that some deeper aspect of the
     * component's state has changed but `setState` was not called.
     *
     * This will not invoke `shouldComponentUpdate`, but it will invoke
     * `componentWillUpdate` and `componentDidUpdate`.
     *
     * @param {ReactClass} publicInstance The instance that should rerender.
     * @internal
     */
    enqueueForceUpdate: function (publicInstance) {
      var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

      if (!internalInstance) {
        return;
      }

      internalInstance._pendingForceUpdate = true;

      enqueueUpdate(internalInstance);
    },

    /**
     * Replaces all of the state. Always use this or `setState` to mutate state.
     * You should treat `this.state` as immutable.
     *
     * There is no guarantee that `this.state` will be immediately updated, so
     * accessing `this.state` after calling this method may return the old value.
     *
     * @param {ReactClass} publicInstance The instance that should rerender.
     * @param {object} completeState Next state.
     * @internal
     */
    enqueueReplaceState: function (publicInstance, completeState) {
      var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

      if (!internalInstance) {
        return;
      }

      internalInstance._pendingStateQueue = [completeState];
      internalInstance._pendingReplaceState = true;

      enqueueUpdate(internalInstance);
    },

    /**
     * Sets a subset of the state. This only exists because _pendingState is
     * internal. This provides a merging strategy that is not available to deep
     * properties which is confusing. TODO: Expose pendingState or don't use it
     * during the merge.
     *
     * @param {ReactClass} publicInstance The instance that should rerender.
     * @param {object} partialState Next partial state to be merged with state.
     * @internal
     */
    enqueueSetState: function (publicInstance, partialState) {
      var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

      if (!internalInstance) {
        return;
      }

      var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
      queue.push(partialState);

      enqueueUpdate(internalInstance);
    },

    enqueueElementInternal: function (internalInstance, newElement) {
      internalInstance._pendingElement = newElement;
      enqueueUpdate(internalInstance);
    },

    validateCallback: function (callback, callerName) {
      !(!callback || typeof callback === 'function') ?  true ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : invariant(false) : void 0;
    }

  };

  module.exports = ReactUpdateQueue;

/***/ },
/* 506 */
/***/ function(module, exports) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactVersion
   */

  'use strict';

  module.exports = '15.1.0';

/***/ },
/* 507 */
/***/ function(module, exports) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ViewportMetrics
   */

  'use strict';

  var ViewportMetrics = {

    currentScrollLeft: 0,

    currentScrollTop: 0,

    refreshScrollValues: function (scrollPosition) {
      ViewportMetrics.currentScrollLeft = scrollPosition.x;
      ViewportMetrics.currentScrollTop = scrollPosition.y;
    }

  };

  module.exports = ViewportMetrics;

/***/ },
/* 508 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2014-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule accumulateInto
   */

  'use strict';

  var invariant = __webpack_require__(91);

  /**
   *
   * Accumulates items that must not be null or undefined into the first one. This
   * is used to conserve memory by avoiding array allocations, and thus sacrifices
   * API cleanness. Since `current` can be null before being passed in and not
   * null after this function, make sure to assign it back to `current`:
   *
   * `a = accumulateInto(a, b);`
   *
   * This API should be sparingly used. Try `accumulate` for something cleaner.
   *
   * @return {*|array<*>} An accumulation of items.
   */

  function accumulateInto(current, next) {
    !(next != null) ?  true ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : void 0;
    if (current == null) {
      return next;
    }

    // Both are not empty. Warning: Never call x.concat(y) when you are not
    // certain that x is an Array (x could be a string with concat method).
    var currentIsArray = Array.isArray(current);
    var nextIsArray = Array.isArray(next);

    if (currentIsArray && nextIsArray) {
      current.push.apply(current, next);
      return current;
    }

    if (currentIsArray) {
      current.push(next);
      return current;
    }

    if (nextIsArray) {
      // A bit too dangerous to mutate `next`.
      return [current].concat(next);
    }

    return [current, next];
  }

  module.exports = accumulateInto;

/***/ },
/* 509 */
/***/ function(module, exports) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule forEachAccumulated
   */

  'use strict';

  /**
   * @param {array} arr an "accumulation" of items which is either an Array or
   * a single item. Useful when paired with the `accumulate` module. This is a
   * simple utility that allows us to reason about a collection of items, but
   * handling the case when there is exactly one item (and we do not need to
   * allocate an array).
   */

  var forEachAccumulated = function (arr, cb, scope) {
    if (Array.isArray(arr)) {
      arr.forEach(cb, scope);
    } else if (arr) {
      cb.call(scope, arr);
    }
  };

  module.exports = forEachAccumulated;

/***/ },
/* 510 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule getNativeComponentFromComposite
   */

  'use strict';

  var ReactNodeTypes = __webpack_require__(502);

  function getNativeComponentFromComposite(inst) {
    var type;

    while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
      inst = inst._renderedComponent;
    }

    if (type === ReactNodeTypes.NATIVE) {
      return inst._renderedComponent;
    } else if (type === ReactNodeTypes.EMPTY) {
      return null;
    }
  }

  module.exports = getNativeComponentFromComposite;

/***/ },
/* 511 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule getTextContentAccessor
   */

  'use strict';

  var ExecutionEnvironment = __webpack_require__(109);

  var contentKey = null;

  /**
   * Gets the key used to access text content on a DOM node.
   *
   * @return {?string} Key used to access text content.
   * @internal
   */
  function getTextContentAccessor() {
    if (!contentKey && ExecutionEnvironment.canUseDOM) {
      // Prefer textContent to innerText because many browsers support both but
      // SVG <text> elements don't support innerText even when <div> does.
      contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
    }
    return contentKey;
  }

  module.exports = getTextContentAccessor;

/***/ },
/* 512 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule instantiateReactComponent
   */

  'use strict';

  var _assign = __webpack_require__(100);

  var ReactCompositeComponent = __webpack_require__(1226);
  var ReactEmptyComponent = __webpack_require__(496);
  var ReactNativeComponent = __webpack_require__(501);
  var ReactInstrumentation = __webpack_require__(125);

  var invariant = __webpack_require__(91);
  var warning = __webpack_require__(94);

  // To avoid a cyclic dependency, we create the final class in this module
  var ReactCompositeComponentWrapper = function (element) {
    this.construct(element);
  };
  _assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
    _instantiateReactComponent: instantiateReactComponent
  });

  function getDeclarationErrorAddendum(owner) {
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  }

  function getDisplayName(instance) {
    var element = instance._currentElement;
    if (element == null) {
      return '#empty';
    } else if (typeof element === 'string' || typeof element === 'number') {
      return '#text';
    } else if (typeof element.type === 'string') {
      return element.type;
    } else if (instance.getName) {
      return instance.getName() || 'Unknown';
    } else {
      return element.type.displayName || element.type.name || 'Unknown';
    }
  }

  /**
   * Check if the type reference is a known internal type. I.e. not a user
   * provided composite type.
   *
   * @param {function} type
   * @return {boolean} Returns true if this is a valid internal type.
   */
  function isInternalComponentType(type) {
    return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
  }

  var nextDebugID = 1;

  /**
   * Given a ReactNode, create an instance that will actually be mounted.
   *
   * @param {ReactNode} node
   * @return {object} A new instance of the element's constructor.
   * @protected
   */
  function instantiateReactComponent(node) {
    var instance;

    var isEmpty = node === null || node === false;
    if (isEmpty) {
      instance = ReactEmptyComponent.create(instantiateReactComponent);
    } else if (typeof node === 'object') {
      var element = node;
      !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ?  true ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : invariant(false) : void 0;

      // Special case string values
      if (typeof element.type === 'string') {
        instance = ReactNativeComponent.createInternalComponent(element);
      } else if (isInternalComponentType(element.type)) {
        // This is temporarily available for custom components that are not string
        // representations. I.e. ART. Once those are updated to use the string
        // representation, we can drop this code path.
        instance = new element.type(element);
      } else {
        instance = new ReactCompositeComponentWrapper(element);
      }
    } else if (typeof node === 'string' || typeof node === 'number') {
      instance = ReactNativeComponent.createInstanceForText(node);
    } else {
       true ?  true ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : invariant(false) : void 0;
    }

    if (true) {
       true ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getNativeNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
    }

    // These two fields are used by the DOM and ART diffing algorithms
    // respectively. Instead of using expandos on components, we should be
    // storing the state needed by the diffing algorithms elsewhere.
    instance._mountIndex = 0;
    instance._mountImage = null;

    if (true) {
      instance._isOwnerNecessary = false;
      instance._warnedAboutRefsInRender = false;
    }

    if (true) {
      var debugID = isEmpty ? 0 : nextDebugID++;
      instance._debugID = debugID;

      if (debugID !== 0) {
        var displayName = getDisplayName(instance);
        ReactInstrumentation.debugTool.onSetDisplayName(debugID, displayName);
        var owner = node && node._owner;
        if (owner) {
          ReactInstrumentation.debugTool.onSetOwner(debugID, owner._debugID);
        }
      }
    }

    // Internal instances should fully constructed at this point, so they should
    // not get any new fields added to them at this point.
    if (true) {
      if (Object.preventExtensions) {
        Object.preventExtensions(instance);
      }
    }

    return instance;
  }

  module.exports = instantiateReactComponent;

/***/ },
/* 513 */
/***/ function(module, exports) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule isTextInputElement
   */

  'use strict';

  /**
   * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
   */

  var supportedInputTypes = {
    'color': true,
    'date': true,
    'datetime': true,
    'datetime-local': true,
    'email': true,
    'month': true,
    'number': true,
    'password': true,
    'range': true,
    'search': true,
    'tel': true,
    'text': true,
    'time': true,
    'url': true,
    'week': true
  };

  function isTextInputElement(elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');
  }

  module.exports = isTextInputElement;

/***/ },
/* 514 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule setTextContent
   */

  'use strict';

  var ExecutionEnvironment = __webpack_require__(109);
  var escapeTextContentForBrowser = __webpack_require__(277);
  var setInnerHTML = __webpack_require__(372);

  /**
   * Set the textContent property of a node, ensuring that whitespace is preserved
   * even in IE8. innerText is a poor substitute for textContent and, among many
   * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
   * as it should.
   *
   * @param {DOMElement} node
   * @param {string} text
   * @internal
   */
  var setTextContent = function (node, text) {
    node.textContent = text;
  };

  if (ExecutionEnvironment.canUseDOM) {
    if (!('textContent' in document.documentElement)) {
      setTextContent = function (node, text) {
        setInnerHTML(node, escapeTextContentForBrowser(text));
      };
    }
  }

  module.exports = setTextContent;

/***/ },
/* 515 */
/***/ function(module, exports) {

  'use strict';
  module.exports = function (str) {
  	var isExtendedLengthPath = /^\\\\\?\\/.test(str);
  	var hasNonAscii = /[^\x00-\x80]+/.test(str);

  	if (isExtendedLengthPath || hasNonAscii) {
  		return str;
  	}

  	return str.replace(/\\/g, '/');
  };


/***/ },
/* 516 */
/***/ function(module, exports, __webpack_require__) {

  /* -*- Mode: js; js-indent-level: 2; -*- */
  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */

  var util = __webpack_require__(223);
  var has = Object.prototype.hasOwnProperty;

  /**
   * A data structure which is a combination of an array and a set. Adding a new
   * member is O(1), testing for membership is O(1), and finding the index of an
   * element is O(1). Removing elements from the set is not supported. Only
   * strings are supported for membership.
   */
  function ArraySet() {
    this._array = [];
    this._set = Object.create(null);
  }

  /**
   * Static method for creating ArraySet instances from an existing array.
   */
  ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
    var set = new ArraySet();
    for (var i = 0, len = aArray.length; i < len; i++) {
      set.add(aArray[i], aAllowDuplicates);
    }
    return set;
  };

  /**
   * Return how many unique items are in this ArraySet. If duplicates have been
   * added, than those do not count towards the size.
   *
   * @returns Number
   */
  ArraySet.prototype.size = function ArraySet_size() {
    return Object.getOwnPropertyNames(this._set).length;
  };

  /**
   * Add the given string to this set.
   *
   * @param String aStr
   */
  ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
    var sStr = util.toSetString(aStr);
    var isDuplicate = has.call(this._set, sStr);
    var idx = this._array.length;
    if (!isDuplicate || aAllowDuplicates) {
      this._array.push(aStr);
    }
    if (!isDuplicate) {
      this._set[sStr] = idx;
    }
  };

  /**
   * Is the given string a member of this set?
   *
   * @param String aStr
   */
  ArraySet.prototype.has = function ArraySet_has(aStr) {
    var sStr = util.toSetString(aStr);
    return has.call(this._set, sStr);
  };

  /**
   * What is the index of the given string in the array?
   *
   * @param String aStr
   */
  ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
    var sStr = util.toSetString(aStr);
    if (has.call(this._set, sStr)) {
      return this._set[sStr];
    }
    throw new Error('"' + aStr + '" is not in the set.');
  };

  /**
   * What is the element at the given index?
   *
   * @param Number aIdx
   */
  ArraySet.prototype.at = function ArraySet_at(aIdx) {
    if (aIdx >= 0 && aIdx < this._array.length) {
      return this._array[aIdx];
    }
    throw new Error('No element indexed by ' + aIdx);
  };

  /**
   * Returns the array representation of this set (which has the proper indices
   * indicated by indexOf). Note that this is a copy of the internal array used
   * for storing the members so that no one can mess with internal state.
   */
  ArraySet.prototype.toArray = function ArraySet_toArray() {
    return this._array.slice();
  };

  exports.ArraySet = ArraySet;


/***/ },
/* 517 */
/***/ function(module, exports, __webpack_require__) {

  /* -*- Mode: js; js-indent-level: 2; -*- */
  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   *
   * Based on the Base 64 VLQ implementation in Closure Compiler:
   * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
   *
   * Copyright 2011 The Closure Compiler Authors. All rights reserved.
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are
   * met:
   *
   *  * Redistributions of source code must retain the above copyright
   *    notice, this list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above
   *    copyright notice, this list of conditions and the following
   *    disclaimer in the documentation and/or other materials provided
   *    with the distribution.
   *  * Neither the name of Google Inc. nor the names of its
   *    contributors may be used to endorse or promote products derived
   *    from this software without specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
   * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
   * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
   * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
   * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   */

  var base64 = __webpack_require__(1286);

  // A single base 64 digit can contain 6 bits of data. For the base 64 variable
  // length quantities we use in the source map spec, the first bit is the sign,
  // the next four bits are the actual value, and the 6th bit is the
  // continuation bit. The continuation bit tells us whether there are more
  // digits in this value following this digit.
  //
  //   Continuation
  //   |    Sign
  //   |    |
  //   V    V
  //   101011

  var VLQ_BASE_SHIFT = 5;

  // binary: 100000
  var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

  // binary: 011111
  var VLQ_BASE_MASK = VLQ_BASE - 1;

  // binary: 100000
  var VLQ_CONTINUATION_BIT = VLQ_BASE;

  /**
   * Converts from a two-complement value to a value where the sign bit is
   * placed in the least significant bit.  For example, as decimals:
   *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
   *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
   */
  function toVLQSigned(aValue) {
    return aValue < 0
      ? ((-aValue) << 1) + 1
      : (aValue << 1) + 0;
  }

  /**
   * Converts to a two-complement value from a value where the sign bit is
   * placed in the least significant bit.  For example, as decimals:
   *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
   *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
   */
  function fromVLQSigned(aValue) {
    var isNegative = (aValue & 1) === 1;
    var shifted = aValue >> 1;
    return isNegative
      ? -shifted
      : shifted;
  }

  /**
   * Returns the base 64 VLQ encoded value.
   */
  exports.encode = function base64VLQ_encode(aValue) {
    var encoded = "";
    var digit;

    var vlq = toVLQSigned(aValue);

    do {
      digit = vlq & VLQ_BASE_MASK;
      vlq >>>= VLQ_BASE_SHIFT;
      if (vlq > 0) {
        // There are still more digits in this value, so we must make sure the
        // continuation bit is marked.
        digit |= VLQ_CONTINUATION_BIT;
      }
      encoded += base64.encode(digit);
    } while (vlq > 0);

    return encoded;
  };

  /**
   * Decodes the next base 64 VLQ value from the given string and returns the
   * value and the rest of the string via the out parameter.
   */
  exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
    var strLen = aStr.length;
    var result = 0;
    var shift = 0;
    var continuation, digit;

    do {
      if (aIndex >= strLen) {
        throw new Error("Expected more digits in base 64 VLQ value.");
      }

      digit = base64.decode(aStr.charCodeAt(aIndex++));
      if (digit === -1) {
        throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
      }

      continuation = !!(digit & VLQ_CONTINUATION_BIT);
      digit &= VLQ_BASE_MASK;
      result = result + (digit << shift);
      shift += VLQ_BASE_SHIFT;
    } while (continuation);

    aOutParam.value = fromVLQSigned(result);
    aOutParam.rest = aIndex;
  };


/***/ },
/* 518 */
/***/ function(module, exports, __webpack_require__) {

  /* -*- Mode: js; js-indent-level: 2; -*- */
  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */

  var base64VLQ = __webpack_require__(517);
  var util = __webpack_require__(223);
  var ArraySet = __webpack_require__(516).ArraySet;
  var MappingList = __webpack_require__(1288).MappingList;

  /**
   * An instance of the SourceMapGenerator represents a source map which is
   * being built incrementally. You may pass an object with the following
   * properties:
   *
   *   - file: The filename of the generated source.
   *   - sourceRoot: A root for all relative URLs in this source map.
   */
  function SourceMapGenerator(aArgs) {
    if (!aArgs) {
      aArgs = {};
    }
    this._file = util.getArg(aArgs, 'file', null);
    this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
    this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
    this._sources = new ArraySet();
    this._names = new ArraySet();
    this._mappings = new MappingList();
    this._sourcesContents = null;
  }

  SourceMapGenerator.prototype._version = 3;

  /**
   * Creates a new SourceMapGenerator based on a SourceMapConsumer
   *
   * @param aSourceMapConsumer The SourceMap.
   */
  SourceMapGenerator.fromSourceMap =
    function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
      var sourceRoot = aSourceMapConsumer.sourceRoot;
      var generator = new SourceMapGenerator({
        file: aSourceMapConsumer.file,
        sourceRoot: sourceRoot
      });
      aSourceMapConsumer.eachMapping(function (mapping) {
        var newMapping = {
          generated: {
            line: mapping.generatedLine,
            column: mapping.generatedColumn
          }
        };

        if (mapping.source != null) {
          newMapping.source = mapping.source;
          if (sourceRoot != null) {
            newMapping.source = util.relative(sourceRoot, newMapping.source);
          }

          newMapping.original = {
            line: mapping.originalLine,
            column: mapping.originalColumn
          };

          if (mapping.name != null) {
            newMapping.name = mapping.name;
          }
        }

        generator.addMapping(newMapping);
      });
      aSourceMapConsumer.sources.forEach(function (sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          generator.setSourceContent(sourceFile, content);
        }
      });
      return generator;
    };

  /**
   * Add a single mapping from original source line and column to the generated
   * source's line and column for this source map being created. The mapping
   * object should have the following properties:
   *
   *   - generated: An object with the generated line and column positions.
   *   - original: An object with the original line and column positions.
   *   - source: The original source file (relative to the sourceRoot).
   *   - name: An optional original token name for this mapping.
   */
  SourceMapGenerator.prototype.addMapping =
    function SourceMapGenerator_addMapping(aArgs) {
      var generated = util.getArg(aArgs, 'generated');
      var original = util.getArg(aArgs, 'original', null);
      var source = util.getArg(aArgs, 'source', null);
      var name = util.getArg(aArgs, 'name', null);

      if (!this._skipValidation) {
        this._validateMapping(generated, original, source, name);
      }

      if (source != null) {
        source = String(source);
        if (!this._sources.has(source)) {
          this._sources.add(source);
        }
      }

      if (name != null) {
        name = String(name);
        if (!this._names.has(name)) {
          this._names.add(name);
        }
      }

      this._mappings.add({
        generatedLine: generated.line,
        generatedColumn: generated.column,
        originalLine: original != null && original.line,
        originalColumn: original != null && original.column,
        source: source,
        name: name
      });
    };

  /**
   * Set the source content for a source file.
   */
  SourceMapGenerator.prototype.setSourceContent =
    function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
      var source = aSourceFile;
      if (this._sourceRoot != null) {
        source = util.relative(this._sourceRoot, source);
      }

      if (aSourceContent != null) {
        // Add the source content to the _sourcesContents map.
        // Create a new _sourcesContents map if the property is null.
        if (!this._sourcesContents) {
          this._sourcesContents = Object.create(null);
        }
        this._sourcesContents[util.toSetString(source)] = aSourceContent;
      } else if (this._sourcesContents) {
        // Remove the source file from the _sourcesContents map.
        // If the _sourcesContents map is empty, set the property to null.
        delete this._sourcesContents[util.toSetString(source)];
        if (Object.keys(this._sourcesContents).length === 0) {
          this._sourcesContents = null;
        }
      }
    };

  /**
   * Applies the mappings of a sub-source-map for a specific source file to the
   * source map being generated. Each mapping to the supplied source file is
   * rewritten using the supplied source map. Note: The resolution for the
   * resulting mappings is the minimium of this map and the supplied map.
   *
   * @param aSourceMapConsumer The source map to be applied.
   * @param aSourceFile Optional. The filename of the source file.
   *        If omitted, SourceMapConsumer's file property will be used.
   * @param aSourceMapPath Optional. The dirname of the path to the source map
   *        to be applied. If relative, it is relative to the SourceMapConsumer.
   *        This parameter is needed when the two source maps aren't in the same
   *        directory, and the source map to be applied contains relative source
   *        paths. If so, those relative source paths need to be rewritten
   *        relative to the SourceMapGenerator.
   */
  SourceMapGenerator.prototype.applySourceMap =
    function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
      var sourceFile = aSourceFile;
      // If aSourceFile is omitted, we will use the file property of the SourceMap
      if (aSourceFile == null) {
        if (aSourceMapConsumer.file == null) {
          throw new Error(
            'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
            'or the source map\'s "file" property. Both were omitted.'
          );
        }
        sourceFile = aSourceMapConsumer.file;
      }
      var sourceRoot = this._sourceRoot;
      // Make "sourceFile" relative if an absolute Url is passed.
      if (sourceRoot != null) {
        sourceFile = util.relative(sourceRoot, sourceFile);
      }
      // Applying the SourceMap can add and remove items from the sources and
      // the names array.
      var newSources = new ArraySet();
      var newNames = new ArraySet();

      // Find mappings for the "sourceFile"
      this._mappings.unsortedForEach(function (mapping) {
        if (mapping.source === sourceFile && mapping.originalLine != null) {
          // Check if it can be mapped by the source map, then update the mapping.
          var original = aSourceMapConsumer.originalPositionFor({
            line: mapping.originalLine,
            column: mapping.originalColumn
          });
          if (original.source != null) {
            // Copy mapping
            mapping.source = original.source;
            if (aSourceMapPath != null) {
              mapping.source = util.join(aSourceMapPath, mapping.source)
            }
            if (sourceRoot != null) {
              mapping.source = util.relative(sourceRoot, mapping.source);
            }
            mapping.originalLine = original.line;
            mapping.originalColumn = original.column;
            if (original.name != null) {
              mapping.name = original.name;
            }
          }
        }

        var source = mapping.source;
        if (source != null && !newSources.has(source)) {
          newSources.add(source);
        }

        var name = mapping.name;
        if (name != null && !newNames.has(name)) {
          newNames.add(name);
        }

      }, this);
      this._sources = newSources;
      this._names = newNames;

      // Copy sourcesContents of applied map.
      aSourceMapConsumer.sources.forEach(function (sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          if (aSourceMapPath != null) {
            sourceFile = util.join(aSourceMapPath, sourceFile);
          }
          if (sourceRoot != null) {
            sourceFile = util.relative(sourceRoot, sourceFile);
          }
          this.setSourceContent(sourceFile, content);
        }
      }, this);
    };

  /**
   * A mapping can have one of the three levels of data:
   *
   *   1. Just the generated position.
   *   2. The Generated position, original position, and original source.
   *   3. Generated and original position, original source, as well as a name
   *      token.
   *
   * To maintain consistency, we validate that any new mapping being added falls
   * in to one of these categories.
   */
  SourceMapGenerator.prototype._validateMapping =
    function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
                                                aName) {
      if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
          && aGenerated.line > 0 && aGenerated.column >= 0
          && !aOriginal && !aSource && !aName) {
        // Case 1.
        return;
      }
      else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
               && aOriginal && 'line' in aOriginal && 'column' in aOriginal
               && aGenerated.line > 0 && aGenerated.column >= 0
               && aOriginal.line > 0 && aOriginal.column >= 0
               && aSource) {
        // Cases 2 and 3.
        return;
      }
      else {
        throw new Error('Invalid mapping: ' + JSON.stringify({
          generated: aGenerated,
          source: aSource,
          original: aOriginal,
          name: aName
        }));
      }
    };

  /**
   * Serialize the accumulated mappings in to the stream of base 64 VLQs
   * specified by the source map format.
   */
  SourceMapGenerator.prototype._serializeMappings =
    function SourceMapGenerator_serializeMappings() {
      var previousGeneratedColumn = 0;
      var previousGeneratedLine = 1;
      var previousOriginalColumn = 0;
      var previousOriginalLine = 0;
      var previousName = 0;
      var previousSource = 0;
      var result = '';
      var next;
      var mapping;
      var nameIdx;
      var sourceIdx;

      var mappings = this._mappings.toArray();
      for (var i = 0, len = mappings.length; i < len; i++) {
        mapping = mappings[i];
        next = ''

        if (mapping.generatedLine !== previousGeneratedLine) {
          previousGeneratedColumn = 0;
          while (mapping.generatedLine !== previousGeneratedLine) {
            next += ';';
            previousGeneratedLine++;
          }
        }
        else {
          if (i > 0) {
            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
              continue;
            }
            next += ',';
          }
        }

        next += base64VLQ.encode(mapping.generatedColumn
                                   - previousGeneratedColumn);
        previousGeneratedColumn = mapping.generatedColumn;

        if (mapping.source != null) {
          sourceIdx = this._sources.indexOf(mapping.source);
          next += base64VLQ.encode(sourceIdx - previousSource);
          previousSource = sourceIdx;

          // lines are stored 0-based in SourceMap spec version 3
          next += base64VLQ.encode(mapping.originalLine - 1
                                     - previousOriginalLine);
          previousOriginalLine = mapping.originalLine - 1;

          next += base64VLQ.encode(mapping.originalColumn
                                     - previousOriginalColumn);
          previousOriginalColumn = mapping.originalColumn;

          if (mapping.name != null) {
            nameIdx = this._names.indexOf(mapping.name);
            next += base64VLQ.encode(nameIdx - previousName);
            previousName = nameIdx;
          }
        }

        result += next;
      }

      return result;
    };

  SourceMapGenerator.prototype._generateSourcesContent =
    function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
      return aSources.map(function (source) {
        if (!this._sourcesContents) {
          return null;
        }
        if (aSourceRoot != null) {
          source = util.relative(aSourceRoot, source);
        }
        var key = util.toSetString(source);
        return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)
          ? this._sourcesContents[key]
          : null;
      }, this);
    };

  /**
   * Externalize the source map.
   */
  SourceMapGenerator.prototype.toJSON =
    function SourceMapGenerator_toJSON() {
      var map = {
        version: this._version,
        sources: this._sources.toArray(),
        names: this._names.toArray(),
        mappings: this._serializeMappings()
      };
      if (this._file != null) {
        map.file = this._file;
      }
      if (this._sourceRoot != null) {
        map.sourceRoot = this._sourceRoot;
      }
      if (this._sourcesContents) {
        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
      }

      return map;
    };

  /**
   * Render the source map being generated to a string.
   */
  SourceMapGenerator.prototype.toString =
    function SourceMapGenerator_toString() {
      return JSON.stringify(this.toJSON());
    };

  exports.SourceMapGenerator = SourceMapGenerator;


/***/ },
/* 519 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Copyright 2009-2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE.txt or:
   * http://opensource.org/licenses/BSD-3-Clause
   */
  exports.SourceMapGenerator = __webpack_require__(518).SourceMapGenerator;
  exports.SourceMapConsumer = __webpack_require__(1290).SourceMapConsumer;
  exports.SourceNode = __webpack_require__(1291).SourceNode;


/***/ },
/* 520 */
/***/ function(module, exports, __webpack_require__) {

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  var Buffer = __webpack_require__(291).Buffer;

  var isBufferEncoding = Buffer.isEncoding
    || function(encoding) {
         switch (encoding && encoding.toLowerCase()) {
           case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
           default: return false;
         }
       }


  function assertEncoding(encoding) {
    if (encoding && !isBufferEncoding(encoding)) {
      throw new Error('Unknown encoding: ' + encoding);
    }
  }

  // StringDecoder provides an interface for efficiently splitting a series of
  // buffers into a series of JS strings without breaking apart multi-byte
  // characters. CESU-8 is handled as part of the UTF-8 encoding.
  //
  // @TODO Handling all encodings inside a single object makes it very difficult
  // to reason about this code, so it should be split up in the future.
  // @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
  // points as used by CESU-8.
  var StringDecoder = exports.StringDecoder = function(encoding) {
    this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
    assertEncoding(encoding);
    switch (this.encoding) {
      case 'utf8':
        // CESU-8 represents each of Surrogate Pair by 3-bytes
        this.surrogateSize = 3;
        break;
      case 'ucs2':
      case 'utf16le':
        // UTF-16 represents each of Surrogate Pair by 2-bytes
        this.surrogateSize = 2;
        this.detectIncompleteChar = utf16DetectIncompleteChar;
        break;
      case 'base64':
        // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
        this.surrogateSize = 3;
        this.detectIncompleteChar = base64DetectIncompleteChar;
        break;
      default:
        this.write = passThroughWrite;
        return;
    }

    // Enough space to store all bytes of a single character. UTF-8 needs 4
    // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
    this.charBuffer = new Buffer(6);
    // Number of bytes received for the current incomplete multi-byte character.
    this.charReceived = 0;
    // Number of bytes expected for the current incomplete multi-byte character.
    this.charLength = 0;
  };


  // write decodes the given buffer and returns it as JS string that is
  // guaranteed to not contain any partial multi-byte characters. Any partial
  // character found at the end of the buffer is buffered up, and will be
  // returned when calling write again with the remaining bytes.
  //
  // Note: Converting a Buffer containing an orphan surrogate to a String
  // currently works, but converting a String to a Buffer (via `new Buffer`, or
  // Buffer#write) will replace incomplete surrogates with the unicode
  // replacement character. See https://codereview.chromium.org/121173009/ .
  StringDecoder.prototype.write = function(buffer) {
    var charStr = '';
    // if our last write ended with an incomplete multibyte character
    while (this.charLength) {
      // determine how many remaining bytes this buffer has to offer for this char
      var available = (buffer.length >= this.charLength - this.charReceived) ?
          this.charLength - this.charReceived :
          buffer.length;

      // add the new bytes to the char buffer
      buffer.copy(this.charBuffer, this.charReceived, 0, available);
      this.charReceived += available;

      if (this.charReceived < this.charLength) {
        // still not enough chars in this buffer? wait for more ...
        return '';
      }

      // remove bytes belonging to the current character from the buffer
      buffer = buffer.slice(available, buffer.length);

      // get the character that was split
      charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

      // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
      var charCode = charStr.charCodeAt(charStr.length - 1);
      if (charCode >= 0xD800 && charCode <= 0xDBFF) {
        this.charLength += this.surrogateSize;
        charStr = '';
        continue;
      }
      this.charReceived = this.charLength = 0;

      // if there are no more bytes in this buffer, just emit our char
      if (buffer.length === 0) {
        return charStr;
      }
      break;
    }

    // determine and set charLength / charReceived
    this.detectIncompleteChar(buffer);

    var end = buffer.length;
    if (this.charLength) {
      // buffer the incomplete character bytes we got
      buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
      end -= this.charReceived;
    }

    charStr += buffer.toString(this.encoding, 0, end);

    var end = charStr.length - 1;
    var charCode = charStr.charCodeAt(end);
    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      var size = this.surrogateSize;
      this.charLength += size;
      this.charReceived += size;
      this.charBuffer.copy(this.charBuffer, size, 0, size);
      buffer.copy(this.charBuffer, 0, 0, size);
      return charStr.substring(0, end);
    }

    // or just emit the charStr
    return charStr;
  };

  // detectIncompleteChar determines if there is an incomplete UTF-8 character at
  // the end of the given buffer. If so, it sets this.charLength to the byte
  // length that character, and sets this.charReceived to the number of bytes
  // that are available for this character.
  StringDecoder.prototype.detectIncompleteChar = function(buffer) {
    // determine how many bytes we have to check at the end of this buffer
    var i = (buffer.length >= 3) ? 3 : buffer.length;

    // Figure out if one of the last i bytes of our buffer announces an
    // incomplete char.
    for (; i > 0; i--) {
      var c = buffer[buffer.length - i];

      // See http://en.wikipedia.org/wiki/UTF-8#Description

      // 110XXXXX
      if (i == 1 && c >> 5 == 0x06) {
        this.charLength = 2;
        break;
      }

      // 1110XXXX
      if (i <= 2 && c >> 4 == 0x0E) {
        this.charLength = 3;
        break;
      }

      // 11110XXX
      if (i <= 3 && c >> 3 == 0x1E) {
        this.charLength = 4;
        break;
      }
    }
    this.charReceived = i;
  };

  StringDecoder.prototype.end = function(buffer) {
    var res = '';
    if (buffer && buffer.length)
      res = this.write(buffer);

    if (this.charReceived) {
      var cr = this.charReceived;
      var buf = this.charBuffer;
      var enc = this.encoding;
      res += buf.slice(0, cr).toString(enc);
    }

    return res;
  };

  function passThroughWrite(buffer) {
    return buffer.toString(this.encoding);
  }

  function utf16DetectIncompleteChar(buffer) {
    this.charReceived = buffer.length % 2;
    this.charLength = this.charReceived ? 2 : 0;
  }

  function base64DetectIncompleteChar(buffer) {
    this.charReceived = buffer.length % 3;
    this.charLength = this.charReceived ? 3 : 0;
  }


/***/ },
/* 521 */
/***/ function(module, exports) {

  module.exports = function(module) {
  	if(!module.webpackPolyfill) {
  		module.deprecate = function() {};
  		module.paths = [];
  		// module.parent = undefined by default
  		module.children = [];
  		module.webpackPolyfill = 1;
  	}
  	return module;
  }


/***/ },
/* 522 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(1311)

  var md5 = toConstructor(__webpack_require__(1300))
  var rmd160 = toConstructor(__webpack_require__(1309))

  function toConstructor (fn) {
    return function () {
      var buffers = []
      var m= {
        update: function (data, enc) {
          if(!Buffer.isBuffer(data)) data = new Buffer(data, enc)
          buffers.push(data)
          return this
        },
        digest: function (enc) {
          var buf = Buffer.concat(buffers)
          var r = fn(buf)
          buffers = null
          return enc ? r.toString(enc) : r
        }
      }
      return m
    }
  }

  module.exports = function (alg) {
    if('md5' === alg) return new md5()
    if('rmd160' === alg) return new rmd160()
    return createHash(alg)
  }

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(115).Buffer))

/***/ },
/* 523 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {var rng = __webpack_require__(1302)

  function error () {
    var m = [].slice.call(arguments).join(' ')
    throw new Error([
      m,
      'we accept pull requests',
      'http://github.com/dominictarr/crypto-browserify'
      ].join('\n'))
  }

  exports.createHash = __webpack_require__(522)

  exports.createHmac = __webpack_require__(1298)

  exports.randomBytes = function(size, callback) {
    if (callback && callback.call) {
      try {
        callback.call(this, undefined, new Buffer(rng(size)))
      } catch (err) { callback(err) }
    } else {
      return new Buffer(rng(size))
    }
  }

  function each(a, f) {
    for(var i in a)
      f(a[i], i)
  }

  exports.getHashes = function () {
    return ['sha1', 'sha256', 'sha512', 'md5', 'rmd160']
  }

  var p = __webpack_require__(1301)(exports)
  exports.pbkdf2 = p.pbkdf2
  exports.pbkdf2Sync = p.pbkdf2Sync


  // the least I can do is make error messages for the rest of the node.js/crypto api.
  each(['createCredentials'
  , 'createCipher'
  , 'createCipheriv'
  , 'createDecipher'
  , 'createDecipheriv'
  , 'createSign'
  , 'createVerify'
  , 'createDiffieHellman'
  ], function (name) {
    exports[name] = function () {
      error('sorry,', name, 'is not implemented yet')
    }
  })

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(115).Buffer))

/***/ },
/* 524 */
/***/ function(module, exports, __webpack_require__) {

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  // a passthrough stream.
  // basically just the most minimal sort of Transform stream.
  // Every written chunk gets output as-is.

  module.exports = PassThrough;

  var Transform = __webpack_require__(376);

  /*<replacement>*/
  var util = __webpack_require__(211);
  util.inherits = __webpack_require__(185);
  /*</replacement>*/

  util.inherits(PassThrough, Transform);

  function PassThrough(options) {
    if (!(this instanceof PassThrough))
      return new PassThrough(options);

    Transform.call(this, options);
  }

  PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
  };


/***/ },
/* 525 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  module.exports = Readable;

  /*<replacement>*/
  var isArray = __webpack_require__(1305);
  /*</replacement>*/


  /*<replacement>*/
  var Buffer = __webpack_require__(115).Buffer;
  /*</replacement>*/

  Readable.ReadableState = ReadableState;

  var EE = __webpack_require__(438).EventEmitter;

  /*<replacement>*/
  if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
    return emitter.listeners(type).length;
  };
  /*</replacement>*/

  var Stream = __webpack_require__(278);

  /*<replacement>*/
  var util = __webpack_require__(211);
  util.inherits = __webpack_require__(185);
  /*</replacement>*/

  var StringDecoder;


  /*<replacement>*/
  var debug = __webpack_require__(1316);
  if (debug && debug.debuglog) {
    debug = debug.debuglog('stream');
  } else {
    debug = function () {};
  }
  /*</replacement>*/


  util.inherits(Readable, Stream);

  function ReadableState(options, stream) {
    var Duplex = __webpack_require__(188);

    options = options || {};

    // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    var hwm = options.highWaterMark;
    var defaultHwm = options.objectMode ? 16 : 16 * 1024;
    this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

    // cast to ints.
    this.highWaterMark = ~~this.highWaterMark;

    this.buffer = [];
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;

    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;

    // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;


    // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;

    if (stream instanceof Duplex)
      this.objectMode = this.objectMode || !!options.readableObjectMode;

    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8';

    // when piping, we only care about 'readable' events that happen
    // after read()ing all the bytes and not getting any pushback.
    this.ranOut = false;

    // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0;

    // if true, a maybeReadMore has been scheduled
    this.readingMore = false;

    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
      if (!StringDecoder)
        StringDecoder = __webpack_require__(520).StringDecoder;
      this.decoder = new StringDecoder(options.encoding);
      this.encoding = options.encoding;
    }
  }

  function Readable(options) {
    var Duplex = __webpack_require__(188);

    if (!(this instanceof Readable))
      return new Readable(options);

    this._readableState = new ReadableState(options, this);

    // legacy
    this.readable = true;

    Stream.call(this);
  }

  // Manually shove something into the read() buffer.
  // This returns true if the highWaterMark has not been hit yet,
  // similar to how Writable.write() returns true if you should
  // write() some more.
  Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;

    if (util.isString(chunk) && !state.objectMode) {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = new Buffer(chunk, encoding);
        encoding = '';
      }
    }

    return readableAddChunk(this, state, chunk, encoding, false);
  };

  // Unshift should *always* be something directly out of read()
  Readable.prototype.unshift = function(chunk) {
    var state = this._readableState;
    return readableAddChunk(this, state, chunk, '', true);
  };

  function readableAddChunk(stream, state, chunk, encoding, addToFront) {
    var er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (util.isNullOrUndefined(chunk)) {
      state.reading = false;
      if (!state.ended)
        onEofChunk(stream, state);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (state.ended && !addToFront) {
        var e = new Error('stream.push() after EOF');
        stream.emit('error', e);
      } else if (state.endEmitted && addToFront) {
        var e = new Error('stream.unshift() after end event');
        stream.emit('error', e);
      } else {
        if (state.decoder && !addToFront && !encoding)
          chunk = state.decoder.write(chunk);

        if (!addToFront)
          state.reading = false;

        // if we want the data now, just emit it.
        if (state.flowing && state.length === 0 && !state.sync) {
          stream.emit('data', chunk);
          stream.read(0);
        } else {
          // update the buffer info.
          state.length += state.objectMode ? 1 : chunk.length;
          if (addToFront)
            state.buffer.unshift(chunk);
          else
            state.buffer.push(chunk);

          if (state.needReadable)
            emitReadable(stream);
        }

        maybeReadMore(stream, state);
      }
    } else if (!addToFront) {
      state.reading = false;
    }

    return needMoreData(state);
  }



  // if it's past the high water mark, we can push in some more.
  // Also, if we have no data yet, we can stand some
  // more bytes.  This is to work around cases where hwm=0,
  // such as the repl.  Also, if the push() triggered a
  // readable event, and the user called read(largeNumber) such that
  // needReadable was set, then we ought to push more, so that another
  // 'readable' event will be triggered.
  function needMoreData(state) {
    return !state.ended &&
           (state.needReadable ||
            state.length < state.highWaterMark ||
            state.length === 0);
  }

  // backwards compatibility.
  Readable.prototype.setEncoding = function(enc) {
    if (!StringDecoder)
      StringDecoder = __webpack_require__(520).StringDecoder;
    this._readableState.decoder = new StringDecoder(enc);
    this._readableState.encoding = enc;
    return this;
  };

  // Don't raise the hwm > 128MB
  var MAX_HWM = 0x800000;
  function roundUpToNextPowerOf2(n) {
    if (n >= MAX_HWM) {
      n = MAX_HWM;
    } else {
      // Get the next highest power of 2
      n--;
      for (var p = 1; p < 32; p <<= 1) n |= n >> p;
      n++;
    }
    return n;
  }

  function howMuchToRead(n, state) {
    if (state.length === 0 && state.ended)
      return 0;

    if (state.objectMode)
      return n === 0 ? 0 : 1;

    if (isNaN(n) || util.isNull(n)) {
      // only flow one buffer at a time
      if (state.flowing && state.buffer.length)
        return state.buffer[0].length;
      else
        return state.length;
    }

    if (n <= 0)
      return 0;

    // If we're asking for more than the target buffer level,
    // then raise the water mark.  Bump up to the next highest
    // power of 2, to prevent increasing it excessively in tiny
    // amounts.
    if (n > state.highWaterMark)
      state.highWaterMark = roundUpToNextPowerOf2(n);

    // don't have that much.  return null, unless we've ended.
    if (n > state.length) {
      if (!state.ended) {
        state.needReadable = true;
        return 0;
      } else
        return state.length;
    }

    return n;
  }

  // you can override either this method, or the async _read(n) below.
  Readable.prototype.read = function(n) {
    debug('read', n);
    var state = this._readableState;
    var nOrig = n;

    if (!util.isNumber(n) || n > 0)
      state.emittedReadable = false;

    // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 &&
        state.needReadable &&
        (state.length >= state.highWaterMark || state.ended)) {
      debug('read: emitReadable', state.length, state.ended);
      if (state.length === 0 && state.ended)
        endReadable(this);
      else
        emitReadable(this);
      return null;
    }

    n = howMuchToRead(n, state);

    // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
      if (state.length === 0)
        endReadable(this);
      return null;
    }

    // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.

    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    debug('need readable', doRead);

    // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
      doRead = true;
      debug('length less than watermark', doRead);
    }

    // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
      doRead = false;
      debug('reading or ended', doRead);
    }

    if (doRead) {
      debug('do read');
      state.reading = true;
      state.sync = true;
      // if the length is currently zero, then we *need* a readable event.
      if (state.length === 0)
        state.needReadable = true;
      // call internal read method
      this._read(state.highWaterMark);
      state.sync = false;
    }

    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (doRead && !state.reading)
      n = howMuchToRead(nOrig, state);

    var ret;
    if (n > 0)
      ret = fromList(n, state);
    else
      ret = null;

    if (util.isNull(ret)) {
      state.needReadable = true;
      n = 0;
    }

    state.length -= n;

    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (state.length === 0 && !state.ended)
      state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended && state.length === 0)
      endReadable(this);

    if (!util.isNull(ret))
      this.emit('data', ret);

    return ret;
  };

  function chunkInvalid(state, chunk) {
    var er = null;
    if (!util.isBuffer(chunk) &&
        !util.isString(chunk) &&
        !util.isNullOrUndefined(chunk) &&
        !state.objectMode) {
      er = new TypeError('Invalid non-string/buffer chunk');
    }
    return er;
  }


  function onEofChunk(stream, state) {
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) {
        state.buffer.push(chunk);
        state.length += state.objectMode ? 1 : chunk.length;
      }
    }
    state.ended = true;

    // emit 'readable' now to make sure it gets picked up.
    emitReadable(stream);
  }

  // Don't emit readable right away in sync mode, because this can trigger
  // another read() call => stack overflow.  This way, it might trigger
  // a nextTick recursion warning, but that's not so bad.
  function emitReadable(stream) {
    var state = stream._readableState;
    state.needReadable = false;
    if (!state.emittedReadable) {
      debug('emitReadable', state.flowing);
      state.emittedReadable = true;
      if (state.sync)
        process.nextTick(function() {
          emitReadable_(stream);
        });
      else
        emitReadable_(stream);
    }
  }

  function emitReadable_(stream) {
    debug('emit readable');
    stream.emit('readable');
    flow(stream);
  }


  // at this point, the user has presumably seen the 'readable' event,
  // and called read() to consume some data.  that may have triggered
  // in turn another _read(n) call, in which case reading = true if
  // it's in progress.
  // However, if we're not ended, or reading, and the length < hwm,
  // then go ahead and try to read some more preemptively.
  function maybeReadMore(stream, state) {
    if (!state.readingMore) {
      state.readingMore = true;
      process.nextTick(function() {
        maybeReadMore_(stream, state);
      });
    }
  }

  function maybeReadMore_(stream, state) {
    var len = state.length;
    while (!state.reading && !state.flowing && !state.ended &&
           state.length < state.highWaterMark) {
      debug('maybeReadMore read 0');
      stream.read(0);
      if (len === state.length)
        // didn't get any data, stop spinning.
        break;
      else
        len = state.length;
    }
    state.readingMore = false;
  }

  // abstract method.  to be overridden in specific implementation classes.
  // call cb(er, data) where data is <= n in length.
  // for virtual (non-string, non-buffer) streams, "length" is somewhat
  // arbitrary, and perhaps not very meaningful.
  Readable.prototype._read = function(n) {
    this.emit('error', new Error('not implemented'));
  };

  Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;

    switch (state.pipesCount) {
      case 0:
        state.pipes = dest;
        break;
      case 1:
        state.pipes = [state.pipes, dest];
        break;
      default:
        state.pipes.push(dest);
        break;
    }
    state.pipesCount += 1;
    debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

    var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
                dest !== process.stdout &&
                dest !== process.stderr;

    var endFn = doEnd ? onend : cleanup;
    if (state.endEmitted)
      process.nextTick(endFn);
    else
      src.once('end', endFn);

    dest.on('unpipe', onunpipe);
    function onunpipe(readable) {
      debug('onunpipe');
      if (readable === src) {
        cleanup();
      }
    }

    function onend() {
      debug('onend');
      dest.end();
    }

    // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = pipeOnDrain(src);
    dest.on('drain', ondrain);

    function cleanup() {
      debug('cleanup');
      // cleanup event handlers once the pipe is broken
      dest.removeListener('close', onclose);
      dest.removeListener('finish', onfinish);
      dest.removeListener('drain', ondrain);
      dest.removeListener('error', onerror);
      dest.removeListener('unpipe', onunpipe);
      src.removeListener('end', onend);
      src.removeListener('end', cleanup);
      src.removeListener('data', ondata);

      // if the reader is waiting for a drain event from this
      // specific writer, then it would cause it to never start
      // flowing again.
      // So, if this is awaiting a drain, then we just call it now.
      // If we don't know, then assume that we are waiting for one.
      if (state.awaitDrain &&
          (!dest._writableState || dest._writableState.needDrain))
        ondrain();
    }

    src.on('data', ondata);
    function ondata(chunk) {
      debug('ondata');
      var ret = dest.write(chunk);
      if (false === ret) {
        debug('false write response, pause',
              src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        src.pause();
      }
    }

    // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
      debug('onerror', er);
      unpipe();
      dest.removeListener('error', onerror);
      if (EE.listenerCount(dest, 'error') === 0)
        dest.emit('error', er);
    }
    // This is a brutally ugly hack to make sure that our error handler
    // is attached before any userland ones.  NEVER DO THIS.
    if (!dest._events || !dest._events.error)
      dest.on('error', onerror);
    else if (isArray(dest._events.error))
      dest._events.error.unshift(onerror);
    else
      dest._events.error = [onerror, dest._events.error];



    // Both close and finish should trigger unpipe, but only once.
    function onclose() {
      dest.removeListener('finish', onfinish);
      unpipe();
    }
    dest.once('close', onclose);
    function onfinish() {
      debug('onfinish');
      dest.removeListener('close', onclose);
      unpipe();
    }
    dest.once('finish', onfinish);

    function unpipe() {
      debug('unpipe');
      src.unpipe(dest);
    }

    // tell the dest that it's being piped to
    dest.emit('pipe', src);

    // start the flow if it hasn't been started already.
    if (!state.flowing) {
      debug('pipe resume');
      src.resume();
    }

    return dest;
  };

  function pipeOnDrain(src) {
    return function() {
      var state = src._readableState;
      debug('pipeOnDrain', state.awaitDrain);
      if (state.awaitDrain)
        state.awaitDrain--;
      if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
        state.flowing = true;
        flow(src);
      }
    };
  }


  Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;

    // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0)
      return this;

    // just one destination.  most common case.
    if (state.pipesCount === 1) {
      // passed in one, but it's not the right one.
      if (dest && dest !== state.pipes)
        return this;

      if (!dest)
        dest = state.pipes;

      // got a match.
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;
      if (dest)
        dest.emit('unpipe', this);
      return this;
    }

    // slow case. multiple pipe destinations.

    if (!dest) {
      // remove all.
      var dests = state.pipes;
      var len = state.pipesCount;
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;

      for (var i = 0; i < len; i++)
        dests[i].emit('unpipe', this);
      return this;
    }

    // try to find the right one.
    var i = indexOf(state.pipes, dest);
    if (i === -1)
      return this;

    state.pipes.splice(i, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1)
      state.pipes = state.pipes[0];

    dest.emit('unpipe', this);

    return this;
  };

  // set up data events if they are asked for
  // Ensure readable listeners eventually get something
  Readable.prototype.on = function(ev, fn) {
    var res = Stream.prototype.on.call(this, ev, fn);

    // If listening to data, and it has not explicitly been paused,
    // then call resume to start the flow of data on the next tick.
    if (ev === 'data' && false !== this._readableState.flowing) {
      this.resume();
    }

    if (ev === 'readable' && this.readable) {
      var state = this._readableState;
      if (!state.readableListening) {
        state.readableListening = true;
        state.emittedReadable = false;
        state.needReadable = true;
        if (!state.reading) {
          var self = this;
          process.nextTick(function() {
            debug('readable nexttick read 0');
            self.read(0);
          });
        } else if (state.length) {
          emitReadable(this, state);
        }
      }
    }

    return res;
  };
  Readable.prototype.addListener = Readable.prototype.on;

  // pause() and resume() are remnants of the legacy readable stream API
  // If the user uses them, then switch into old mode.
  Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
      debug('resume');
      state.flowing = true;
      if (!state.reading) {
        debug('resume read 0');
        this.read(0);
      }
      resume(this, state);
    }
    return this;
  };

  function resume(stream, state) {
    if (!state.resumeScheduled) {
      state.resumeScheduled = true;
      process.nextTick(function() {
        resume_(stream, state);
      });
    }
  }

  function resume_(stream, state) {
    state.resumeScheduled = false;
    stream.emit('resume');
    flow(stream);
    if (state.flowing && !state.reading)
      stream.read(0);
  }

  Readable.prototype.pause = function() {
    debug('call pause flowing=%j', this._readableState.flowing);
    if (false !== this._readableState.flowing) {
      debug('pause');
      this._readableState.flowing = false;
      this.emit('pause');
    }
    return this;
  };

  function flow(stream) {
    var state = stream._readableState;
    debug('flow', state.flowing);
    if (state.flowing) {
      do {
        var chunk = stream.read();
      } while (null !== chunk && state.flowing);
    }
  }

  // wrap an old-style stream as the async data source.
  // This is *not* part of the readable stream interface.
  // It is an ugly unfortunate mess of history.
  Readable.prototype.wrap = function(stream) {
    var state = this._readableState;
    var paused = false;

    var self = this;
    stream.on('end', function() {
      debug('wrapped end');
      if (state.decoder && !state.ended) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length)
          self.push(chunk);
      }

      self.push(null);
    });

    stream.on('data', function(chunk) {
      debug('wrapped data');
      if (state.decoder)
        chunk = state.decoder.write(chunk);
      if (!chunk || !state.objectMode && !chunk.length)
        return;

      var ret = self.push(chunk);
      if (!ret) {
        paused = true;
        stream.pause();
      }
    });

    // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for (var i in stream) {
      if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {
        this[i] = function(method) { return function() {
          return stream[method].apply(stream, arguments);
        }}(i);
      }
    }

    // proxy certain important events.
    var events = ['error', 'close', 'destroy', 'pause', 'resume'];
    forEach(events, function(ev) {
      stream.on(ev, self.emit.bind(self, ev));
    });

    // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    self._read = function(n) {
      debug('wrapped _read', n);
      if (paused) {
        paused = false;
        stream.resume();
      }
    };

    return self;
  };



  // exposed for testing purposes only.
  Readable._fromList = fromList;

  // Pluck off n bytes from an array of buffers.
  // Length is the combined lengths of all the buffers in the list.
  function fromList(n, state) {
    var list = state.buffer;
    var length = state.length;
    var stringMode = !!state.decoder;
    var objectMode = !!state.objectMode;
    var ret;

    // nothing in the list, definitely empty.
    if (list.length === 0)
      return null;

    if (length === 0)
      ret = null;
    else if (objectMode)
      ret = list.shift();
    else if (!n || n >= length) {
      // read it all, truncate the array.
      if (stringMode)
        ret = list.join('');
      else
        ret = Buffer.concat(list, length);
      list.length = 0;
    } else {
      // read just some of it.
      if (n < list[0].length) {
        // just take a part of the first list item.
        // slice is the same for buffers and strings.
        var buf = list[0];
        ret = buf.slice(0, n);
        list[0] = buf.slice(n);
      } else if (n === list[0].length) {
        // first list is a perfect match
        ret = list.shift();
      } else {
        // complex case.
        // we have enough to cover it, but it spans past the first buffer.
        if (stringMode)
          ret = '';
        else
          ret = new Buffer(n);

        var c = 0;
        for (var i = 0, l = list.length; i < l && c < n; i++) {
          var buf = list[0];
          var cpy = Math.min(n - c, buf.length);

          if (stringMode)
            ret += buf.slice(0, cpy);
          else
            buf.copy(ret, c, 0, cpy);

          if (cpy < buf.length)
            list[0] = buf.slice(cpy);
          else
            list.shift();

          c += cpy;
        }
      }
    }

    return ret;
  }

  function endReadable(stream) {
    var state = stream._readableState;

    // If we get here before consuming all the bytes, then that is a
    // bug in node.  Should never happen.
    if (state.length > 0)
      throw new Error('endReadable called on non-empty stream');

    if (!state.endEmitted) {
      state.ended = true;
      process.nextTick(function() {
        // Check that we didn't get one last unshift.
        if (!state.endEmitted && state.length === 0) {
          state.endEmitted = true;
          stream.readable = false;
          stream.emit('end');
        }
      });
    }
  }

  function forEach (xs, f) {
    for (var i = 0, l = xs.length; i < l; i++) {
      f(xs[i], i);
    }
  }

  function indexOf (xs, x) {
    for (var i = 0, l = xs.length; i < l; i++) {
      if (xs[i] === x) return i;
    }
    return -1;
  }

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(111)))

/***/ },
/* 526 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = __webpack_require__(376)


/***/ },
/* 527 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(module) {'use strict';

  function assembleStyles () {
  	var styles = {
  		modifiers: {
  			reset: [0, 0],
  			bold: [1, 22], // 21 isn't widely supported and 22 does the same thing
  			dim: [2, 22],
  			italic: [3, 23],
  			underline: [4, 24],
  			inverse: [7, 27],
  			hidden: [8, 28],
  			strikethrough: [9, 29]
  		},
  		colors: {
  			black: [30, 39],
  			red: [31, 39],
  			green: [32, 39],
  			yellow: [33, 39],
  			blue: [34, 39],
  			magenta: [35, 39],
  			cyan: [36, 39],
  			white: [37, 39],
  			gray: [90, 39]
  		},
  		bgColors: {
  			bgBlack: [40, 49],
  			bgRed: [41, 49],
  			bgGreen: [42, 49],
  			bgYellow: [43, 49],
  			bgBlue: [44, 49],
  			bgMagenta: [45, 49],
  			bgCyan: [46, 49],
  			bgWhite: [47, 49]
  		}
  	};

  	// fix humans
  	styles.colors.grey = styles.colors.gray;

  	Object.keys(styles).forEach(function (groupName) {
  		var group = styles[groupName];

  		Object.keys(group).forEach(function (styleName) {
  			var style = group[styleName];

  			styles[styleName] = group[styleName] = {
  				open: '\u001b[' + style[0] + 'm',
  				close: '\u001b[' + style[1] + 'm'
  			};
  		});

  		Object.defineProperty(styles, groupName, {
  			value: group,
  			enumerable: false
  		});
  	});

  	return styles;
  }

  Object.defineProperty(module, 'exports', {
  	enumerable: true,
  	get: assembleStyles
  });

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(521)(module)))

/***/ },
/* 528 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(global) {// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
  //
  // THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
  //
  // Originally from narwhal.js (http://narwhaljs.org)
  // Copyright (c) 2009 Thomas Robinson <280north.com>
  //
  // Permission is hereby granted, free of charge, to any person obtaining a copy
  // of this software and associated documentation files (the 'Software'), to
  // deal in the Software without restriction, including without limitation the
  // rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
  // sell copies of the Software, and to permit persons to whom the Software is
  // furnished to do so, subject to the following conditions:
  //
  // The above copyright notice and this permission notice shall be included in
  // all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  // AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  // ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

  'use strict';

  // UTILITY
  function compare(bufa, bufb) {
    var cmpLen = Math.min(bufa, bufb);
    if (cmpLen <= 0) {
      return 0;
    }
    var i = -1;
    var a,b;
    while (++i < cmpLen) {
      a = bufa[i];
      b = bufb[i];
      if (a < b) {
        return -1;
      } else if (a > b) {
        return 1;
      }
    }
    return 0;
  }
  var util = __webpack_require__(168);
  var Buffer = __webpack_require__(291).Buffer;
  var BufferShim = __webpack_require__(791);
  var hasOwn = Object.prototype.hasOwnProperty;
  var pSlice = Array.prototype.slice;
  var functionsHaveNames = (function () {
    return function foo() {}.name === 'foo';
  }());
  function pToString (obj) {
    return Object.prototype.toString.call(obj);
  }
  function isView(arrbuf) {
    if (typeof global.ArrayBuffer !== 'function') {
      return false;
    }
    if (typeof ArrayBuffer.isView === 'function') {
      return ArrayBuffer.isView(arrbuf);
    }
    if (!arrbuf) {
      return false;
    }
    if (arrbuf instanceof DataView) {
      return true;
    }
    if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
      return true;
    }
    return false;
  }
  // 1. The assert module provides functions that throw
  // AssertionError's when particular conditions are not met. The
  // assert module must conform to the following interface.

  var assert = module.exports = ok;

  // 2. The AssertionError is defined in assert.
  // new assert.AssertionError({ message: message,
  //                             actual: actual,
  //                             expected: expected })

  var regex = /\s*function\s+([^\(\s]*)\s*/;
  // based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
  function getName(func) {
    if (!util.isFunction(func)) {
      return;
    }
    if (functionsHaveNames) {
      return func.name;
    }
    var str = func.toString();
    var match = str.match(regex);
    return match && match[1];
  }
  assert.AssertionError = function AssertionError(options) {
    this.name = 'AssertionError';
    this.actual = options.actual;
    this.expected = options.expected;
    this.operator = options.operator;
    if (options.message) {
      this.message = options.message;
      this.generatedMessage = false;
    } else {
      this.message = getMessage(this);
      this.generatedMessage = true;
    }
    var stackStartFunction = options.stackStartFunction || fail;
    if (Error.captureStackTrace) {
     Error.captureStackTrace(this, stackStartFunction);
   } else {
     // non v8 browsers so we can have a stacktrace
     var err = new Error();
     if (err.stack) {
       var out = err.stack;

       // try to strip useless frames
       var fn_name = getName(stackStartFunction);
       var idx = out.indexOf('\n' + fn_name);
       if (idx >= 0) {
         // once we have located the function frame
         // we need to strip out everything before it (and its line)
         var next_line = out.indexOf('\n', idx + 1);
         out = out.substring(next_line + 1);
       }

       this.stack = out;
     }
    }
  };

  // assert.AssertionError instanceof Error
  util.inherits(assert.AssertionError, Error);

  function truncate(s, n) {
    if (typeof s === 'string') {
      return s.length < n ? s : s.slice(0, n);
    } else {
      return s;
    }
  }
  function inspect(something) {
    if (functionsHaveNames || !util.isFunction(something)) {
      return util.inspect(something);
    }
    var rawname = getName(something);
    var name = rawname ? ': ' + rawname : '';
    return '[Function' +  name + ']';
  }
  function getMessage(self) {
    return truncate(inspect(self.actual), 128) + ' ' +
           self.operator + ' ' +
           truncate(inspect(self.expected), 128);
  }

  // At present only the three keys mentioned above are used and
  // understood by the spec. Implementations or sub modules can pass
  // other keys to the AssertionError's constructor - they will be
  // ignored.

  // 3. All of the following functions must throw an AssertionError
  // when a corresponding condition is not met, with a message that
  // may be undefined if not provided.  All assertion methods provide
  // both the actual and expected values to the assertion error for
  // display purposes.

  function fail(actual, expected, message, operator, stackStartFunction) {
    throw new assert.AssertionError({
      message: message,
      actual: actual,
      expected: expected,
      operator: operator,
      stackStartFunction: stackStartFunction
    });
  }

  // EXTENSION! allows for well behaved errors defined elsewhere.
  assert.fail = fail;

  // 4. Pure assertion tests whether a value is truthy, as determined
  // by !!guard.
  // assert.ok(guard, message_opt);
  // This statement is equivalent to assert.equal(true, !!guard,
  // message_opt);. To test strictly for the value true, use
  // assert.strictEqual(true, guard, message_opt);.

  function ok(value, message) {
    if (!value) fail(value, true, message, '==', assert.ok);
  }
  assert.ok = ok;

  // 5. The equality assertion tests shallow, coercive equality with
  // ==.
  // assert.equal(actual, expected, message_opt);

  assert.equal = function equal(actual, expected, message) {
    if (actual != expected) fail(actual, expected, message, '==', assert.equal);
  };

  // 6. The non-equality assertion tests for whether two objects are not equal
  // with != assert.notEqual(actual, expected, message_opt);

  assert.notEqual = function notEqual(actual, expected, message) {
    if (actual == expected) {
      fail(actual, expected, message, '!=', assert.notEqual);
    }
  };

  // 7. The equivalence assertion tests a deep equality relation.
  // assert.deepEqual(actual, expected, message_opt);

  assert.deepEqual = function deepEqual(actual, expected, message) {
    if (!_deepEqual(actual, expected, false)) {
      fail(actual, expected, message, 'deepEqual', assert.deepEqual);
    }
  };

  assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
    if (!_deepEqual(actual, expected, true)) {
      fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
    }
  };

  function _deepEqual(actual, expected, strict, memos) {
    // 7.1. All identical values are equivalent, as determined by ===.
    if (actual === expected) {
      return true;
    } else if (Buffer.isBuffer(actual) && Buffer.isBuffer(expected)) {
      return compare(actual, expected) === 0;

    // 7.2. If the expected value is a Date object, the actual value is
    // equivalent if it is also a Date object that refers to the same time.
    } else if (util.isDate(actual) && util.isDate(expected)) {
      return actual.getTime() === expected.getTime();

    // 7.3 If the expected value is a RegExp object, the actual value is
    // equivalent if it is also a RegExp object with the same source and
    // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
    } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
      return actual.source === expected.source &&
             actual.global === expected.global &&
             actual.multiline === expected.multiline &&
             actual.lastIndex === expected.lastIndex &&
             actual.ignoreCase === expected.ignoreCase;

    // 7.4. Other pairs that do not both pass typeof value == 'object',
    // equivalence is determined by ==.
    } else if ((actual === null || typeof actual !== 'object') &&
               (expected === null || typeof expected !== 'object')) {
      return strict ? actual === expected : actual == expected;

    // If both values are instances of typed arrays, wrap their underlying
    // ArrayBuffers in a Buffer each to increase performance
    // This optimization requires the arrays to have the same type as checked by
    // Object.prototype.toString (aka pToString). Never perform binary
    // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
    // bit patterns are not identical.
    } else if (isView(actual) && isView(expected) &&
               pToString(actual) === pToString(expected) &&
               !(actual instanceof Float32Array ||
                 actual instanceof Float64Array)) {
      return compare(BufferShim.from(actual.buffer),
                     BufferShim.from(expected.buffer)) === 0;

    // 7.5 For all other Object pairs, including Array objects, equivalence is
    // determined by having the same number of owned properties (as verified
    // with Object.prototype.hasOwnProperty.call), the same set of keys
    // (although not necessarily the same order), equivalent values for every
    // corresponding key, and an identical 'prototype' property. Note: this
    // accounts for both named and indexed properties on Arrays.
    } else {
      memos = memos || {actual: [], expected: []};

      var actualIndex = memos.actual.indexOf(actual);
      if (actualIndex !== -1) {
        if (actualIndex === memos.expected.indexOf(expected)) {
          return true;
        }
      }

      memos.actual.push(actual);
      memos.expected.push(expected);

      return objEquiv(actual, expected, strict, memos);
    }
  }

  function isArguments(object) {
    return Object.prototype.toString.call(object) == '[object Arguments]';
  }

  function objEquiv(a, b, strict, actualVisitedObjects) {
    if (a === null || a === undefined || b === null || b === undefined)
      return false;
    // if one is a primitive, the other must be same
    if (util.isPrimitive(a) || util.isPrimitive(b))
      return a === b;
    if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
      return false;
    var aIsArgs = isArguments(a);
    var bIsArgs = isArguments(b);
    if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
      return false;
    if (aIsArgs) {
      a = pSlice.call(a);
      b = pSlice.call(b);
      return _deepEqual(a, b, strict);
    }
    var ka = objectKeys(a);
    var kb = objectKeys(b);
    var key, i;
    // having the same number of owned properties (keys incorporates
    // hasOwnProperty)
    if (ka.length !== kb.length)
      return false;
    //the same set of keys (although not necessarily the same order),
    ka.sort();
    kb.sort();
    //~~~cheap key test
    for (i = ka.length - 1; i >= 0; i--) {
      if (ka[i] !== kb[i])
        return false;
    }
    //equivalent values for every corresponding key, and
    //~~~possibly expensive deep test
    for (i = ka.length - 1; i >= 0; i--) {
      key = ka[i];
      if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
        return false;
    }
    return true;
  }

  // 8. The non-equivalence assertion tests for any deep inequality.
  // assert.notDeepEqual(actual, expected, message_opt);

  assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
    if (_deepEqual(actual, expected, false)) {
      fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
    }
  };

  assert.notDeepStrictEqual = notDeepStrictEqual;
  function notDeepStrictEqual(actual, expected, message) {
    if (_deepEqual(actual, expected, true)) {
      fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
    }
  }


  // 9. The strict equality assertion tests strict equality, as determined by ===.
  // assert.strictEqual(actual, expected, message_opt);

  assert.strictEqual = function strictEqual(actual, expected, message) {
    if (actual !== expected) {
      fail(actual, expected, message, '===', assert.strictEqual);
    }
  };

  // 10. The strict non-equality assertion tests for strict inequality, as
  // determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

  assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
    if (actual === expected) {
      fail(actual, expected, message, '!==', assert.notStrictEqual);
    }
  };

  function expectedException(actual, expected) {
    if (!actual || !expected) {
      return false;
    }

    if (Object.prototype.toString.call(expected) == '[object RegExp]') {
      return expected.test(actual);
    }

    try {
      if (actual instanceof expected) {
        return true;
      }
    } catch (e) {
      // Ignore.  The instanceof check doesn't work for arrow functions.
    }

    if (Error.isPrototypeOf(expected)) {
      return false;
    }

    return expected.call({}, actual) === true;
  }

  function _tryBlock(block) {
    var error;
    try {
      block();
    } catch (e) {
      error = e;
    }
    return error;
  }

  function _throws(shouldThrow, block, expected, message) {
    var actual;

    if (typeof block !== 'function') {
      throw new TypeError('"block" argument must be a function');
    }

    if (typeof expected === 'string') {
      message = expected;
      expected = null;
    }

    actual = _tryBlock(block);

    message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
              (message ? ' ' + message : '.');

    if (shouldThrow && !actual) {
      fail(actual, expected, 'Missing expected exception' + message);
    }

    var userProvidedMessage = typeof message === 'string';
    var isUnwantedException = !shouldThrow && util.isError(actual);
    var isUnexpectedException = !shouldThrow && actual && !expected;

    if ((isUnwantedException &&
        userProvidedMessage &&
        expectedException(actual, expected)) ||
        isUnexpectedException) {
      fail(actual, expected, 'Got unwanted exception' + message);
    }

    if ((shouldThrow && actual && expected &&
        !expectedException(actual, expected)) || (!shouldThrow && actual)) {
      throw actual;
    }
  }

  // 11. Expected to throw an error:
  // assert.throws(block, Error_opt, message_opt);

  assert.throws = function(block, /*optional*/error, /*optional*/message) {
    _throws(true, block, error, message);
  };

  // EXTENSION! This is annoying to write outside this module.
  assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
    _throws(false, block, error, message);
  };

  assert.ifError = function(err) { if (err) throw err; };

  var objectKeys = Object.keys || function (obj) {
    var keys = [];
    for (var key in obj) {
      if (hasOwn.call(obj, key)) keys.push(key);
    }
    return keys;
  };

  /* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 529 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = __webpack_require__(380);


/***/ },
/* 530 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  exports.__esModule = true;

  var _getIterator2 = __webpack_require__(93);

  var _getIterator3 = _interopRequireDefault(_getIterator2);

  exports.default = function (dest, src) {
    if (!dest || !src) return;

    return (0, _mergeWith2.default)(dest, src, function (a, b) {
      if (b && Array.isArray(a)) {
        var newArray = b.slice(0);

        for (var _iterator = a, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
          var _ref;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
          }

          var item = _ref;

          if (newArray.indexOf(item) < 0) {
            newArray.push(item);
          }
        }

        return newArray;
      }
    });
  };

  var _mergeWith = __webpack_require__(1186);

  var _mergeWith2 = _interopRequireDefault(_mergeWith);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  module.exports = exports["default"];

/***/ },
/* 531 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  exports.__esModule = true;

  exports.default = function (ast, comments, tokens) {
    if (ast) {
      if (ast.type === "Program") {
        return t.file(ast, comments || [], tokens || []);
      } else if (ast.type === "File") {
        return ast;
      }
    }

    throw new Error("Not a valid ast?");
  };

  var _babelTypes = __webpack_require__(90);

  var t = _interopRequireWildcard(_babelTypes);

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  module.exports = exports["default"];

  /**
   * Normalize an AST.
   *
   * - Wrap `Program` node with a `File` node.
   */

/***/ },
/* 532 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(process) {"use strict";

  exports.__esModule = true;

  var _typeof2 = __webpack_require__(127);

  var _typeof3 = _interopRequireDefault(_typeof2);

  exports.default = function (loc) {
    var relative = arguments.length <= 1 || arguments[1] === undefined ? process.cwd() : arguments[1];

    // we're in the browser, probably
    if ((typeof _module2.default === "undefined" ? "undefined" : (0, _typeof3.default)(_module2.default)) === "object") return null;

    var relativeMod = relativeModules[relative];

    if (!relativeMod) {
      relativeMod = new _module2.default();

      // We need to define an id and filename on our "fake" relative` module so that
      // Node knows what "." means in the case of us trying to resolve a plugin
      // such as "./myPlugins/somePlugin.js". If we don't specify id and filename here,
      // Node presumes "." is process.cwd(), not our relative path.
      // Since this fake module is never "loaded", we don't have to worry about mutating
      // any global Node module cache state here.
      var filename = _path2.default.join(relative, ".babelrc");
      relativeMod.id = filename;
      relativeMod.filename = filename;

      relativeMod.paths = _module2.default._nodeModulePaths(relative);
      relativeModules[relative] = relativeMod;
    }

    try {
      return _module2.default._resolveFilename(loc, relativeMod);
    } catch (err) {
      return null;
    }
  };

  var _module = __webpack_require__(126);

  var _module2 = _interopRequireDefault(_module);

  var _path = __webpack_require__(134);

  var _path2 = _interopRequireDefault(_path);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var relativeModules = {};

  module.exports = exports["default"];
  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(111)))

/***/ },
/* 533 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  exports.__esModule = true;

  exports.default = function (whitelist) {
    var outputType = arguments.length <= 1 || arguments[1] === undefined ? "global" : arguments[1];

    var namespace = t.identifier("babelHelpers");

    var builder = function builder(body) {
      return buildHelpers(body, namespace, whitelist);
    };

    var tree = void 0;

    var build = {
      global: buildGlobal,
      umd: buildUmd,
      var: buildVar
    }[outputType];

    if (build) {
      tree = build(namespace, builder);
    } else {
      throw new Error(messages.get("unsupportedOutputType", outputType));
    }

    return (0, _babelGenerator2.default)(tree).code;
  };

  var _babelHelpers = __webpack_require__(385);

  var helpers = _interopRequireWildcard(_babelHelpers);

  var _babelGenerator = __webpack_require__(383);

  var _babelGenerator2 = _interopRequireDefault(_babelGenerator);

  var _babelMessages = __webpack_require__(157);

  var messages = _interopRequireWildcard(_babelMessages);

  var _babelTemplate = __webpack_require__(287);

  var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

  var _each = __webpack_require__(353);

  var _each2 = _interopRequireDefault(_each);

  var _babelTypes = __webpack_require__(90);

  var t = _interopRequireWildcard(_babelTypes);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  /* eslint max-len: 0 */

  var buildUmdWrapper = (0, _babelTemplate2.default)("\n  (function (root, factory) {\n    if (typeof define === \"function\" && define.amd) {\n      define(AMD_ARGUMENTS, factory);\n    } else if (typeof exports === \"object\") {\n      factory(COMMON_ARGUMENTS);\n    } else {\n      factory(BROWSER_ARGUMENTS);\n    }\n  })(UMD_ROOT, function (FACTORY_PARAMETERS) {\n    FACTORY_BODY\n  });\n");

  function buildGlobal(namespace, builder) {
    var body = [];
    var container = t.functionExpression(null, [t.identifier("global")], t.blockStatement(body));
    var tree = t.program([t.expressionStatement(t.callExpression(container, [helpers.get("selfGlobal")]))]);

    body.push(t.variableDeclaration("var", [t.variableDeclarator(namespace, t.assignmentExpression("=", t.memberExpression(t.identifier("global"), namespace), t.objectExpression([])))]));

    builder(body);

    return tree;
  }

  function buildUmd(namespace, builder) {
    var body = [];
    body.push(t.variableDeclaration("var", [t.variableDeclarator(namespace, t.identifier("global"))]));

    builder(body);

    return t.program([buildUmdWrapper({
      FACTORY_PARAMETERS: t.identifier("global"),
      BROWSER_ARGUMENTS: t.assignmentExpression("=", t.memberExpression(t.identifier("root"), namespace), t.objectExpression([])),
      COMMON_ARGUMENTS: t.identifier("exports"),
      AMD_ARGUMENTS: t.arrayExpression([t.stringLiteral("exports")]),
      FACTORY_BODY: body,
      UMD_ROOT: t.identifier("this")
    })]);
  }

  function buildVar(namespace, builder) {
    var body = [];
    body.push(t.variableDeclaration("var", [t.variableDeclarator(namespace, t.objectExpression([]))]));
    builder(body);
    body.push(t.expressionStatement(namespace));
    return t.program(body);
  }

  function buildHelpers(body, namespace, whitelist) {
    (0, _each2.default)(helpers.list, function (name) {
      if (whitelist && whitelist.indexOf(name) < 0) return;

      var key = t.identifier(name);
      body.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(namespace, key), helpers.get(name))));
    });
  }
  module.exports = exports["default"];

/***/ },
/* 534 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  exports.__esModule = true;

  var _classCallCheck2 = __webpack_require__(97);

  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

  var _node = __webpack_require__(1029);

  var _node2 = _interopRequireDefault(_node);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var verboseDebug = (0, _node2.default)("babel:verbose");
  var generalDebug = (0, _node2.default)("babel");

  var seenDeprecatedMessages = [];

  var Logger = function () {
    function Logger(file, filename) {
      (0, _classCallCheck3.default)(this, Logger);

      this.filename = filename;
      this.file = file;
    }

    Logger.prototype._buildMessage = function _buildMessage(msg) {
      var parts = "[BABEL] " + this.filename;
      if (msg) parts += ": " + msg;
      return parts;
    };

    Logger.prototype.warn = function warn(msg) {
      console.warn(this._buildMessage(msg));
    };

    Logger.prototype.error = function error(msg) {
      var Constructor = arguments.length <= 1 || arguments[1] === undefined ? Error : arguments[1];

      throw new Constructor(this._buildMessage(msg));
    };

    Logger.prototype.deprecate = function deprecate(msg) {
      if (this.file.opts && this.file.opts.suppressDeprecationMessages) return;

      msg = this._buildMessage(msg);

      // already seen this message
      if (seenDeprecatedMessages.indexOf(msg) >= 0) return;

      // make sure we don't see it again
      seenDeprecatedMessages.push(msg);

      console.error(msg);
    };

    Logger.prototype.verbose = function verbose(msg) {
      if (verboseDebug.enabled) verboseDebug(this._buildMessage(msg));
    };

    Logger.prototype.debug = function debug(msg) {
      if (generalDebug.enabled) generalDebug(this._buildMessage(msg));
    };

    Logger.prototype.deopt = function deopt(node, msg) {
      this.debug(msg);
    };

    return Logger;
  }();

  exports.default = Logger;
  module.exports = exports["default"];

/***/ },
/* 535 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  exports.__esModule = true;
  exports.ImportDeclaration = exports.ModuleDeclaration = undefined;

  var _getIterator2 = __webpack_require__(93);

  var _getIterator3 = _interopRequireDefault(_getIterator2);

  exports.ExportDeclaration = ExportDeclaration;
  exports.Scope = Scope;

  var _babelTypes = __webpack_require__(90);

  var t = _interopRequireWildcard(_babelTypes);

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var ModuleDeclaration = exports.ModuleDeclaration = {
    enter: function enter(path, file) {
      var node = path.node;

      if (node.source) {
        node.source.value = file.resolveModuleSource(node.source.value);
      }
    }
  };

  var ImportDeclaration = exports.ImportDeclaration = {
    exit: function exit(path, file) {
      var node = path.node;


      var specifiers = [];
      var imported = [];
      file.metadata.modules.imports.push({
        source: node.source.value,
        imported: imported,
        specifiers: specifiers
      });

      for (var _iterator = path.get("specifiers"), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var specifier = _ref;

        var local = specifier.node.local.name;

        if (specifier.isImportDefaultSpecifier()) {
          imported.push("default");
          specifiers.push({
            kind: "named",
            imported: "default",
            local: local
          });
        }

        if (specifier.isImportSpecifier()) {
          var importedName = specifier.node.imported.name;
          imported.push(importedName);
          specifiers.push({
            kind: "named",
            imported: importedName,
            local: local
          });
        }

        if (specifier.isImportNamespaceSpecifier()) {
          imported.push("*");
          specifiers.push({
            kind: "namespace",
            local: local
          });
        }
      }
    }
  };

  function ExportDeclaration(path, file) {
    var node = path.node;


    var source = node.source ? node.source.value : null;
    var exports = file.metadata.modules.exports;

    // export function foo() {}
    // export let foo = "bar";
    var declar = path.get("declaration");
    if (declar.isStatement()) {
      var bindings = declar.getBindingIdentifiers();

      for (var name in bindings) {
        exports.exported.push(name);
        exports.specifiers.push({
          kind: "local",
          local: name,
          exported: path.isExportDefaultDeclaration() ? "default" : name
        });
      }
    }

    if (path.isExportNamedDeclaration() && node.specifiers) {
      for (var _iterator2 = node.specifiers, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var specifier = _ref2;

        var exported = specifier.exported.name;
        exports.exported.push(exported);

        // export foo from "bar";
        if (t.isExportDefaultSpecifier(specifier)) {
          exports.specifiers.push({
            kind: "external",
            local: exported,
            exported: exported,
            source: source
          });
        }

        // export * as foo from "bar";
        if (t.isExportNamespaceSpecifier(specifier)) {
          exports.specifiers.push({
            kind: "external-namespace",
            exported: exported,
            source: source
          });
        }

        var local = specifier.local;
        if (!local) continue;

        // export { foo } from "bar";
        // export { foo as bar } from "bar";
        if (source) {
          exports.specifiers.push({
            kind: "external",
            local: local.name,
            exported: exported,
            source: source
          });
        }

        // export { foo };
        // export { foo as bar };
        if (!source) {
          exports.specifiers.push({
            kind: "local",
            local: local.name,
            exported: exported
          });
        }
      }
    }

    // export * from "bar";
    if (path.isExportAllDeclaration()) {
      exports.specifiers.push({
        kind: "external-all",
        source: source
      });
    }
  }

  function Scope(path) {
    path.skip();
  }

/***/ },
/* 536 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  exports.__esModule = true;

  var _plugin = __webpack_require__(224);

  var _plugin2 = _interopRequireDefault(_plugin);

  var _sortBy = __webpack_require__(1189);

  var _sortBy2 = _interopRequireDefault(_sortBy);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  exports.default = new _plugin2.default({
    /**
     * [Please add a description.]
     *
     * Priority:
     *
     *  - 0 We want this to be at the **very** bottom
     *  - 1 Default node position
     *  - 2 Priority over normal nodes
     *  - 3 We want this to be at the **very** top
     */

    visitor: {
      Block: {
        exit: function exit(_ref) {
          var node = _ref.node;

          var hasChange = false;
          for (var i = 0; i < node.body.length; i++) {
            var bodyNode = node.body[i];
            if (bodyNode && bodyNode._blockHoist != null) {
              hasChange = true;
              break;
            }
          }
          if (!hasChange) return;

          node.body = (0, _sortBy2.default)(node.body, function (bodyNode) {
            var priority = bodyNode && bodyNode._blockHoist;
            if (priority == null) priority = 1;
            if (priority === true) priority = 2;

            // Higher priorities should move toward the top.
            return -1 * priority;
          });
        }
      }
    }
  });
  module.exports = exports["default"];

/***/ },
/* 537 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  exports.__esModule = true;

  var _symbol = __webpack_require__(286);

  var _symbol2 = _interopRequireDefault(_symbol);

  var _plugin = __webpack_require__(224);

  var _plugin2 = _interopRequireDefault(_plugin);

  var _babelTypes = __webpack_require__(90);

  var t = _interopRequireWildcard(_babelTypes);

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var SUPER_THIS_BOUND = (0, _symbol2.default)("super this bound");

  var superVisitor = {
    CallExpression: function CallExpression(path) {
      if (!path.get("callee").isSuper()) return;

      var node = path.node;

      if (node[SUPER_THIS_BOUND]) return;
      node[SUPER_THIS_BOUND] = true;

      path.replaceWith(t.assignmentExpression("=", this.id, node));
    }
  };

  exports.default = new _plugin2.default({
    visitor: {
      ThisExpression: function ThisExpression(path) {
        remap(path, "this");
      },
      ReferencedIdentifier: function ReferencedIdentifier(path) {
        if (path.node.name === "arguments") {
          remap(path, "arguments");
        }
      }
    }
  });


  function shouldShadow(path, shadowPath) {
    if (path.is("_forceShadow")) {
      return true;
    } else {
      return shadowPath;
    }
  }

  function remap(path, key) {
    // ensure that we're shadowed
    var shadowPath = path.inShadow(key);
    if (!shouldShadow(path, shadowPath)) return;

    var shadowFunction = path.node._shadowedFunctionLiteral;

    var currentFunction = void 0;
    var passedShadowFunction = false;

    var fnPath = path.findParent(function (path) {
      if (path.isProgram() || path.isFunction()) {
        // catch current function in case this is the shadowed one and we can ignore it
        currentFunction = currentFunction || path;
      }

      if (path.isProgram()) {
        passedShadowFunction = true;

        return true;
      } else if (path.isFunction() && !path.isArrowFunctionExpression()) {
        if (shadowFunction) {
          if (path === shadowFunction || path.node === shadowFunction.node) return true;
        } else {
          if (!path.is("shadow")) return true;
        }

        passedShadowFunction = true;
        return false;
      }

      return false;
    });

    if (shadowFunction && fnPath.isProgram() && !shadowFunction.isProgram()) {
      // If the shadow wasn't found, take the closest function as a backup.
      // This is a bit of a hack, but it will allow the parameter transforms to work properly
      // without introducing yet another shadow-controlling flag.
      fnPath = path.findParent(function (p) {
        return p.isProgram() || p.isFunction();
      });
    }

    // no point in realiasing if we're in this function
    if (fnPath === currentFunction) return;

    // If the only functions that were encountered are arrow functions, skip remapping the
    // binding since arrow function syntax already does that.
    if (!passedShadowFunction) return;

    var cached = fnPath.getData(key);
    if (cached) return path.replaceWith(cached);

    var id = path.scope.generateUidIdentifier(key);

    fnPath.setData(key, id);

    var classPath = fnPath.findParent(function (p) {
      return p.isClass();
    });
    var hasSuperClass = !!(classPath && classPath.node && classPath.node.superClass);

    if (key === "this" && fnPath.isMethod({ kind: "constructor" }) && hasSuperClass) {
      fnPath.scope.push({ id: id });

      fnPath.traverse(superVisitor, { id: id });
    } else {
      var init = key === "this" ? t.thisExpression() : t.identifier(key);

      fnPath.scope.push({ id: id, init: init });
    }

    return path.replaceWith(id);
  }
  module.exports = exports["default"];

/***/ },
/* 538 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  exports.__esModule = true;

  var _classCallCheck2 = __webpack_require__(97);

  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

  var _normalizeAst = __webpack_require__(531);

  var _normalizeAst2 = _interopRequireDefault(_normalizeAst);

  var _plugin = __webpack_require__(224);

  var _plugin2 = _interopRequireDefault(_plugin);

  var _file = __webpack_require__(280);

  var _file2 = _interopRequireDefault(_file);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var Pipeline = function () {
    function Pipeline() {
      (0, _classCallCheck3.default)(this, Pipeline);
    }

    Pipeline.prototype.lint = function lint(code) {
      var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      opts.code = false;
      opts.mode = "lint";
      return this.transform(code, opts);
    };

    Pipeline.prototype.pretransform = function pretransform(code, opts) {
      var file = new _file2.default(opts, this);
      return file.wrap(code, function () {
        file.addCode(code);
        file.parseCode(code);
        return file;
      });
    };

    Pipeline.prototype.transform = function transform(code, opts) {
      var file = new _file2.default(opts, this);
      return file.wrap(code, function () {
        file.addCode(code);
        file.parseCode(code);
        return file.transform();
      });
    };

    Pipeline.prototype.analyse = function analyse(code) {
      var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
      var visitor = arguments[2];

      opts.code = false;
      if (visitor) {
        opts.plugins = opts.plugins || [];
        opts.plugins.push(new _plugin2.default({ visitor: visitor }));
      }
      return this.transform(code, opts).metadata;
    };

    Pipeline.prototype.transformFromAst = function transformFromAst(ast, code, opts) {
      ast = (0, _normalizeAst2.default)(ast);

      var file = new _file2.default(opts, this);
      return file.wrap(code, function () {
        file.addCode(code);
        file.addAst(ast);
        return file.transform();
      });
    };

    return Pipeline;
  }(); /* global BabelFileResult, BabelFileMetadata */


  exports.default = Pipeline;
  module.exports = exports["default"];

/***/ },
/* 539 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  exports.__esModule = true;

  var _classCallCheck2 = __webpack_require__(97);

  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

  var _possibleConstructorReturn2 = __webpack_require__(172);

  var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

  var _inherits2 = __webpack_require__(171);

  var _inherits3 = _interopRequireDefault(_inherits2);

  var _store = __webpack_require__(279);

  var _store2 = _interopRequireDefault(_store);

  var _babelTraverse = __webpack_require__(128);

  var _babelTraverse2 = _interopRequireDefault(_babelTraverse);

  var _file5 = __webpack_require__(280);

  var _file6 = _interopRequireDefault(_file5);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var PluginPass = function (_Store) {
    (0, _inherits3.default)(PluginPass, _Store);

    function PluginPass(file, plugin) {
      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
      (0, _classCallCheck3.default)(this, PluginPass);

      var _this = (0, _possibleConstructorReturn3.default)(this, _Store.call(this));

      _this.plugin = plugin;
      _this.file = file;
      _this.opts = options;
      return _this;
    }

    PluginPass.prototype.transform = function transform() {
      var file = this.file;
      file.log.debug("Start transformer " + this.key);
      (0, _babelTraverse2.default)(file.ast, this.plugin.visitor, file.scope, file);
      file.log.debug("Finish transformer " + this.key);
    };

    PluginPass.prototype.addHelper = function addHelper() {
      var _file;

      return (_file = this.file).addHelper.apply(_file, arguments);
    };

    PluginPass.prototype.addImport = function addImport() {
      var _file2;

      return (_file2 = this.file).addImport.apply(_file2, arguments);
    };

    PluginPass.prototype.getModuleName = function getModuleName() {
      var _file3;

      return (_file3 = this.file).getModuleName.apply(_file3, arguments);
    };

    PluginPass.prototype.buildCodeFrameError = function buildCodeFrameError() {
      var _file4;

      return (_file4 = this.file).buildCodeFrameError.apply(_file4, arguments);
    };

    return PluginPass;
  }(_store2.default);

  exports.default = PluginPass;
  module.exports = exports["default"];

/***/ },
/* 540 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;

  var _classCallCheck2 = __webpack_require__(97);

  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

  var /*istanbul ignore next*/_repeat = __webpack_require__(268);

  /*istanbul ignore next*/
  var _repeat2 = _interopRequireDefault(_repeat);

  var /*istanbul ignore next*/_trimEnd = __webpack_require__(1196);

  /*istanbul ignore next*/
  var _trimEnd2 = _interopRequireDefault(_trimEnd);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Buffer for collecting generated output.
   */

  var Buffer = function () {
    function /*istanbul ignore next*/Buffer(position, format) {
      /*istanbul ignore next*/(0, _classCallCheck3.default)(this, Buffer);

      this.printedCommentStarts = {};
      this.parenPushNewlineState = null;
      this.position = position;
      this._indent = format.indent.base;
      this.format = format;
      this.buf = "";

      // Maintaining a reference to the last char in the buffer is an optimization
      // to make sure that v8 doesn't "flatten" the string more often than needed
      // see https://github.com/babel/babel/pull/3283 for details.
      this.last = "";

      this.map = null;
      this._sourcePosition = {
        line: null,
        column: null,
        filename: null
      };
    }

    /**
     * Description
     */

    Buffer.prototype.catchUp = function catchUp(node) {
      // catch up to this nodes newline if we're behind
      if (node.loc && this.format.retainLines && this.buf) {
        while (this.position.line < node.loc.start.line) {
          this._push("\n");
        }
      }
    };

    /**
     * Get the current trimmed buffer.
     */

    Buffer.prototype.get = function get() {
      return (/*istanbul ignore next*/(0, _trimEnd2.default)(this.buf)
      );
    };

    /**
     * Get the current indent.
     */

    Buffer.prototype.getIndent = function getIndent() {
      if (this.format.compact || this.format.concise) {
        return "";
      } else {
        return (/*istanbul ignore next*/(0, _repeat2.default)(this.format.indent.style, this._indent)
        );
      }
    };

    /**
     * Get the current indent size.
     */

    Buffer.prototype.indentSize = function indentSize() {
      return this.getIndent().length;
    };

    /**
     * Increment indent size.
     */

    Buffer.prototype.indent = function indent() {
      this._indent++;
    };

    /**
     * Decrement indent size.
     */

    Buffer.prototype.dedent = function dedent() {
      this._indent--;
    };

    /**
     * Add a semicolon to the buffer.
     */

    Buffer.prototype.semicolon = function semicolon() {
      this.push(";");
    };

    /**
     * Ensure last character is a semicolon.
     */

    Buffer.prototype.ensureSemicolon = function ensureSemicolon() {
      if (!this.isLast(";")) this.semicolon();
    };

    /**
     * Add a right brace to the buffer.
     */

    Buffer.prototype.rightBrace = function rightBrace() {
      this.newline(true);
      if (this.format.minified && !this._lastPrintedIsEmptyStatement) {
        this._removeLast(";");
      }
      this.push("}");
    };

    /**
     * Add a keyword to the buffer.
     */

    Buffer.prototype.keyword = function keyword(name) {
      this.push(name);
      this.space();
    };

    /**
     * Add a space to the buffer unless it is compact (override with force).
     */

    Buffer.prototype.space = function space(force) {
      if (!force && this.format.compact) return;

      if (force || this.buf && !this.isLast(" ") && !this.isLast("\n")) {
        this.push(" ");
      }
    };

    /**
     * Remove the last character.
     */

    Buffer.prototype.removeLast = function removeLast(cha) {
      if (this.format.compact) return;
      return this._removeLast(cha);
    };

    Buffer.prototype._removeLast = function _removeLast(cha) {
      if (!this._isLast(cha)) return;
      this.buf = this.buf.slice(0, -1);
      this.last = this.buf[this.buf.length - 1];
      this.position.unshift(cha);
    };

    /**
     * Set some state that will be modified if a newline has been inserted before any
     * non-space characters.
     *
     * This is to prevent breaking semantics for terminatorless separator nodes. eg:
     *
     *    return foo;
     *
     * returns `foo`. But if we do:
     *
     *   return
     *   foo;
     *
     *  `undefined` will be returned and not `foo` due to the terminator.
     */

    Buffer.prototype.startTerminatorless = function startTerminatorless() {
      return this.parenPushNewlineState = {
        printed: false
      };
    };

    /**
     * Print an ending parentheses if a starting one has been printed.
     */

    Buffer.prototype.endTerminatorless = function endTerminatorless(state) {
      if (state.printed) {
        this.dedent();
        this.newline();
        this.push(")");
      }
    };

    /**
     * Add a newline (or many newlines), maintaining formatting.
     * Strips multiple newlines if removeLast is true.
     */

    Buffer.prototype.newline = function newline(i, removeLast) {
      if (this.format.retainLines || this.format.compact) return;

      if (this.format.concise) {
        this.space();
        return;
      }

      // never allow more than two lines
      if (this.endsWith("\n\n")) return;

      if (typeof i === "boolean") removeLast = i;
      if (typeof i !== "number") i = 1;

      i = Math.min(2, i);
      if (this.endsWith("{\n") || this.endsWith(":\n")) i--;
      if (i <= 0) return;

      // remove the last newline
      if (removeLast) {
        this.removeLast("\n");
      }

      this.removeLast(" ");
      this._removeSpacesAfterLastNewline();
      this._push( /*istanbul ignore next*/(0, _repeat2.default)("\n", i));
    };

    /**
     * If buffer ends with a newline and some spaces after it, trim those spaces.
     */

    Buffer.prototype._removeSpacesAfterLastNewline = function _removeSpacesAfterLastNewline() {
      var lastNewlineIndex = this.buf.lastIndexOf("\n");
      if (lastNewlineIndex >= 0 && this.get().length <= lastNewlineIndex) {
        this.buf = this.buf.substring(0, lastNewlineIndex + 1);
        this.last = "\n";
      }
    };

    /**
     * Sets a given position as the current source location so generated code after this call
     * will be given this position in the sourcemap.
     */

    Buffer.prototype.source = function source(prop, loc) {
      if (prop && !loc) return;

      var pos = loc ? loc[prop] : null;

      this._sourcePosition.line = pos ? pos.line : null;
      this._sourcePosition.column = pos ? pos.column : null;
      this._sourcePosition.filename = loc && loc.filename || null;
    };

    /**
     * Call a callback with a specific source location and restore on completion.
     */

    Buffer.prototype.withSource = function withSource(prop, loc, cb) {
      // Use the call stack to manage a stack of "source location" data.
      var originalLine = this._sourcePosition.line;
      var originalColumn = this._sourcePosition.column;
      var originalFilename = this._sourcePosition.filename;

      this.source(prop, loc);

      cb();

      this._sourcePosition.line = originalLine;
      this._sourcePosition.column = originalColumn;
      this._sourcePosition.filename = originalFilename;
    };

    /**
     * Push a string to the buffer, maintaining indentation and newlines.
     */

    Buffer.prototype.push = function push(str, noIndent) {
      if (!this.format.compact && this._indent && !noIndent && str !== "\n") {
        // we have an indent level and we aren't pushing a newline
        var indent = this.getIndent();

        // replace all newlines with newlines with the indentation
        str = str.replace(/\n/g, /*istanbul ignore next*/"\n" + indent);

        // we've got a newline before us so prepend on the indentation
        if (this.isLast("\n")) this._push(indent);
      }

      this._push(str);
    };

    /**
     * Push a string to the buffer.
     */

    Buffer.prototype._push = function _push(str) {
      // see startTerminatorless() instance method
      var parenPushNewlineState = this.parenPushNewlineState;
      if (parenPushNewlineState) {
        for (var i = 0; i < str.length; i++) {
          var cha = str[i];

          // we can ignore spaces since they wont interupt a terminatorless separator
          if (cha === " ") continue;

          this.parenPushNewlineState = null;

          if (cha === "\n" || cha === "/") {
            // we're going to break this terminator expression so we need to add a parentheses
            this._push("(");
            this.indent();
            parenPushNewlineState.printed = true;
          }

          break;
        }
      }

      // If there the line is ending, adding a new mapping marker is redundant
      if (str[0] !== "\n") this.map.mark(this._sourcePosition);

      //
      this.position.push(str);
      this.buf += str;
      this.last = str[str.length - 1];
    };

    /**
     * Test if the buffer ends with a string.
     */

    Buffer.prototype.endsWith = function endsWith(str) {
      if (str.length === 1) {
        return this.last === str;
      } else {
        return this.buf.slice(-str.length) === str;
      }
    };

    /**
     * Test if a character is last in the buffer.
     */

    Buffer.prototype.isLast = function isLast(cha) {
      if (this.format.compact) return false;
      return this._isLast(cha);
    };

    Buffer.prototype._isLast = function _isLast(cha) {
      var last = this.last;

      if (Array.isArray(cha)) {
        return cha.indexOf(last) >= 0;
      } else {
        return cha === last;
      }
    };

    return Buffer;
  }();

  /*istanbul ignore next*/exports.default = Buffer;
  /*istanbul ignore next*/module.exports = exports["default"];

/***/ },
/* 541 */
/***/ function(module, exports) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;
  exports.File = File;
  /*istanbul ignore next*/exports.Program = Program;
  /*istanbul ignore next*/exports.BlockStatement = BlockStatement;
  /*istanbul ignore next*/exports.Noop = Noop;
  /*istanbul ignore next*/exports.Directive = Directive;
  /*istanbul ignore next*/exports.DirectiveLiteral = DirectiveLiteral;
  function File(node) {
    this.print(node.program, node);
  }

  function Program(node) {
    this.printInnerComments(node, false);

    this.printSequence(node.directives, node);
    if (node.directives && node.directives.length) this.newline();

    this.printSequence(node.body, node);
  }

  function BlockStatement(node) {
    this.push("{");
    this.printInnerComments(node);
    if (node.body.length) {
      this.newline();

      this.printSequence(node.directives, node, { indent: true });
      if (node.directives && node.directives.length) this.newline();

      this.printSequence(node.body, node, { indent: true });
      if (!this.format.retainLines && !this.format.concise) this.removeLast("\n");

      this.source("end", node.loc);
      this.rightBrace();
    } else {
      this.source("end", node.loc);
      this.push("}");
    }
  }

  function Noop() {}

  function Directive(node) {
    this.print(node.value, node);
    this.semicolon();
  }

  function DirectiveLiteral(node) {
    this.push(this._stringLiteral(node.value));
  }

/***/ },
/* 542 */
/***/ function(module, exports) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;
  exports.ClassDeclaration = ClassDeclaration;
  /*istanbul ignore next*/exports.ClassBody = ClassBody;
  /*istanbul ignore next*/exports.ClassProperty = ClassProperty;
  /*istanbul ignore next*/exports.ClassMethod = ClassMethod;
  function ClassDeclaration(node) {
    this.printJoin(node.decorators, node, { separator: "" });
    this.push("class");

    if (node.id) {
      this.push(" ");
      this.print(node.id, node);
    }

    this.print(node.typeParameters, node);

    if (node.superClass) {
      this.push(" extends ");
      this.print(node.superClass, node);
      this.print(node.superTypeParameters, node);
    }

    if (node.implements) {
      this.push(" implements ");
      this.printJoin(node.implements, node, { separator: ", " });
    }

    this.space();
    this.print(node.body, node);
  }

  /*istanbul ignore next*/exports.ClassExpression = ClassDeclaration;
  function ClassBody(node) {
    this.push("{");
    this.printInnerComments(node);
    if (node.body.length === 0) {
      this.push("}");
    } else {
      this.newline();

      this.indent();
      this.printSequence(node.body, node);
      this.dedent();

      this.rightBrace();
    }
  }

  function ClassProperty(node) {
    this.printJoin(node.decorators, node, { separator: "" });

    if (node.static) this.push("static ");
    this.print(node.key, node);
    this.print(node.typeAnnotation, node);
    if (node.value) {
      this.space();
      this.push("=");
      this.space();
      this.print(node.value, node);
    }
    this.semicolon();
  }

  function ClassMethod(node) {
    this.printJoin(node.decorators, node, { separator: "" });

    if (node.static) {
      this.push("static ");
    }

    if (node.kind === "constructorCall") {
      this.push("call ");
    }

    this._method(node);
  }

/***/ },
/* 543 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;
  exports.LogicalExpression = exports.BinaryExpression = exports.AwaitExpression = exports.YieldExpression = undefined;
  exports.UnaryExpression = UnaryExpression;
  /*istanbul ignore next*/exports.DoExpression = DoExpression;
  /*istanbul ignore next*/exports.ParenthesizedExpression = ParenthesizedExpression;
  /*istanbul ignore next*/exports.UpdateExpression = UpdateExpression;
  /*istanbul ignore next*/exports.ConditionalExpression = ConditionalExpression;
  /*istanbul ignore next*/exports.NewExpression = NewExpression;
  /*istanbul ignore next*/exports.SequenceExpression = SequenceExpression;
  /*istanbul ignore next*/exports.ThisExpression = ThisExpression;
  /*istanbul ignore next*/exports.Super = Super;
  /*istanbul ignore next*/exports.Decorator = Decorator;
  /*istanbul ignore next*/exports.CallExpression = CallExpression;
  /*istanbul ignore next*/exports.EmptyStatement = EmptyStatement;
  /*istanbul ignore next*/exports.ExpressionStatement = ExpressionStatement;
  /*istanbul ignore next*/exports.AssignmentPattern = AssignmentPattern;
  /*istanbul ignore next*/exports.AssignmentExpression = AssignmentExpression;
  /*istanbul ignore next*/exports.BindExpression = BindExpression;
  /*istanbul ignore next*/exports.MemberExpression = MemberExpression;
  /*istanbul ignore next*/exports.MetaProperty = MetaProperty;

  var /*istanbul ignore next*/_isInteger = __webpack_require__(1183);

  /*istanbul ignore next*/
  var _isInteger2 = _interopRequireDefault(_isInteger);

  var /*istanbul ignore next*/_isNumber = __webpack_require__(480);

  /*istanbul ignore next*/
  var _isNumber2 = _interopRequireDefault(_isNumber);

  var /*istanbul ignore next*/_babelTypes = __webpack_require__(90);

  /*istanbul ignore next*/
  var t = _interopRequireWildcard(_babelTypes);

  var /*istanbul ignore next*/_node = __webpack_require__(384);

  /*istanbul ignore next*/
  var n = _interopRequireWildcard(_node);

  /*istanbul ignore next*/
  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /* eslint max-len: 0 */

  var SCIENTIFIC_NOTATION = /e/i;
  var ZERO_DECIMAL_INTEGER = /\.0+$/;
  var NON_DECIMAL_LITERAL = /^0[box]/;

  function UnaryExpression(node) {
    var needsSpace = /[a-z]$/.test(node.operator);
    var arg = node.argument;

    if (t.isUpdateExpression(arg) || t.isUnaryExpression(arg)) {
      needsSpace = true;
    }

    if (t.isUnaryExpression(arg) && arg.operator === "!") {
      needsSpace = false;
    }

    this.push(node.operator);
    if (needsSpace) this.push(" ");
    this.print(node.argument, node);
  }

  function DoExpression(node) {
    this.push("do");
    this.space();
    this.print(node.body, node);
  }

  function ParenthesizedExpression(node) {
    this.push("(");
    this.print(node.expression, node);
    this.push(")");
  }

  function UpdateExpression(node) {
    if (node.prefix) {
      this.push(node.operator);
      this.print(node.argument, node);
    } else {
      this.print(node.argument, node);
      this.push(node.operator);
    }
  }

  function ConditionalExpression(node) {
    this.print(node.test, node);
    this.space();
    this.push("?");
    this.space();
    this.print(node.consequent, node);
    this.space();
    this.push(":");
    this.space();
    this.print(node.alternate, node);
  }

  function NewExpression(node, parent) {
    this.push("new ");
    this.print(node.callee, node);
    if (node.arguments.length === 0 && this.format.minified && !t.isCallExpression(parent, { callee: node }) && !t.isMemberExpression(parent) && !t.isNewExpression(parent)) return;

    this.push("(");
    this.printList(node.arguments, node);
    this.push(")");
  }

  function SequenceExpression(node) {
    this.printList(node.expressions, node);
  }

  function ThisExpression() {
    this.push("this");
  }

  function Super() {
    this.push("super");
  }

  function Decorator(node) {
    this.push("@");
    this.print(node.expression, node);
    this.newline();
  }

  function CallExpression(node) {
    this.print(node.callee, node);
    if (node.loc) this.printAuxAfterComment();

    this.push("(");

    var isPrettyCall = node._prettyCall && !this.format.retainLines && !this.format.compact;

    var separator = /*istanbul ignore next*/void 0;
    if (isPrettyCall) {
      separator = ",\n";
      this.newline();
      this.indent();
    }

    this.printList(node.arguments, node, { separator: separator });

    if (isPrettyCall) {
      this.newline();
      this.dedent();
    }

    this.push(")");
  }

  function buildYieldAwait(keyword) {
    return function (node) {
      this.push(keyword);

      if (node.delegate) {
        this.push("*");
      }

      if (node.argument) {
        this.push(" ");
        var terminatorState = this.startTerminatorless();
        this.print(node.argument, node);
        this.endTerminatorless(terminatorState);
      }
    };
  }

  var YieldExpression = /*istanbul ignore next*/exports.YieldExpression = buildYieldAwait("yield");
  var AwaitExpression = /*istanbul ignore next*/exports.AwaitExpression = buildYieldAwait("await");

  function EmptyStatement() {
    this._lastPrintedIsEmptyStatement = true;
    this.semicolon();
  }

  function ExpressionStatement(node) {
    this.print(node.expression, node);
    this.semicolon();
  }

  function AssignmentPattern(node) {
    this.print(node.left, node);
    this.space();
    this.push("=");
    this.space();
    this.print(node.right, node);
  }

  function AssignmentExpression(node, parent) {
    // Somewhere inside a for statement `init` node but doesn't usually
    // needs a paren except for `in` expressions: `for (a in b ? a : b;;)`
    var parens = this._inForStatementInitCounter && node.operator === "in" && !n.needsParens(node, parent);

    if (parens) {
      this.push("(");
    }

    this.print(node.left, node);

    var spaces = !this.format.compact || node.operator === "in" || node.operator === "instanceof";
    if (spaces) this.push(" ");

    this.push(node.operator);

    if (!spaces) {
      // space is mandatory to avoid outputting <!--
      // http://javascript.spec.whatwg.org/#comment-syntax
      spaces = node.operator === "<" && t.isUnaryExpression(node.right, { prefix: true, operator: "!" }) && t.isUnaryExpression(node.right.argument, { prefix: true, operator: "--" });

      // Need spaces for operators of the same kind to avoid: `a+++b`
      if (!spaces) {
        var right = getLeftMost(node.right);
        spaces = t.isUnaryExpression(right, { prefix: true, operator: node.operator }) || t.isUpdateExpression(right, { prefix: true, operator: node.operator + node.operator });
      }
    }

    if (spaces) this.push(" ");

    this.print(node.right, node);

    if (parens) {
      this.push(")");
    }
  }

  function BindExpression(node) {
    this.print(node.object, node);
    this.push("::");
    this.print(node.callee, node);
  }

  /*istanbul ignore next*/exports.BinaryExpression = AssignmentExpression;
  /*istanbul ignore next*/exports.LogicalExpression = AssignmentExpression;
  function MemberExpression(node) {
    this.print(node.object, node);

    if (!node.computed && t.isMemberExpression(node.property)) {
      throw new TypeError("Got a MemberExpression for MemberExpression property");
    }

    var computed = node.computed;
    if (t.isLiteral(node.property) && /*istanbul ignore next*/(0, _isNumber2.default)(node.property.value)) {
      computed = true;
    }

    if (computed) {
      this.push("[");
      this.print(node.property, node);
      this.push("]");
    } else {
      if (t.isNumericLiteral(node.object)) {
        var val = this.getPossibleRaw(node.object) || node.object.value;
        if ( /*istanbul ignore next*/(0, _isInteger2.default)(+val) && !NON_DECIMAL_LITERAL.test(val) && !SCIENTIFIC_NOTATION.test(val) && !ZERO_DECIMAL_INTEGER.test(val) && !this.endsWith(".")) {
          this.push(".");
        }
      }

      this.push(".");
      this.print(node.property, node);
    }
  }

  function MetaProperty(node) {
    this.print(node.meta, node);
    this.push(".");
    this.print(node.property, node);
  }

  function getLeftMost(binaryExpr) {
    if (!t.isBinaryExpression(binaryExpr)) {
      return binaryExpr;
    }
    return getLeftMost(binaryExpr.left);
  }

/***/ },
/* 544 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;
  exports.TypeParameterDeclaration = exports.NumericLiteralTypeAnnotation = exports.GenericTypeAnnotation = exports.ClassImplements = undefined;
  exports.AnyTypeAnnotation = AnyTypeAnnotation;
  /*istanbul ignore next*/exports.ArrayTypeAnnotation = ArrayTypeAnnotation;
  /*istanbul ignore next*/exports.BooleanTypeAnnotation = BooleanTypeAnnotation;
  /*istanbul ignore next*/exports.BooleanLiteralTypeAnnotation = BooleanLiteralTypeAnnotation;
  /*istanbul ignore next*/exports.NullLiteralTypeAnnotation = NullLiteralTypeAnnotation;
  /*istanbul ignore next*/exports.DeclareClass = DeclareClass;
  /*istanbul ignore next*/exports.DeclareFunction = DeclareFunction;
  /*istanbul ignore next*/exports.DeclareInterface = DeclareInterface;
  /*istanbul ignore next*/exports.DeclareModule = DeclareModule;
  /*istanbul ignore next*/exports.DeclareTypeAlias = DeclareTypeAlias;
  /*istanbul ignore next*/exports.DeclareVariable = DeclareVariable;
  /*istanbul ignore next*/exports.ExistentialTypeParam = ExistentialTypeParam;
  /*istanbul ignore next*/exports.FunctionTypeAnnotation = FunctionTypeAnnotation;
  /*istanbul ignore next*/exports.FunctionTypeParam = FunctionTypeParam;
  /*istanbul ignore next*/exports.InterfaceExtends = InterfaceExtends;
  /*istanbul ignore next*/exports._interfaceish = _interfaceish;
  /*istanbul ignore next*/exports.InterfaceDeclaration = InterfaceDeclaration;
  /*istanbul ignore next*/exports.IntersectionTypeAnnotation = IntersectionTypeAnnotation;
  /*istanbul ignore next*/exports.MixedTypeAnnotation = MixedTypeAnnotation;
  /*istanbul ignore next*/exports.NullableTypeAnnotation = NullableTypeAnnotation;
  /*istanbul ignore next*/
  var _types = __webpack_require__(382);

  Object.defineProperty(exports, "NumericLiteralTypeAnnotation", {
    enumerable: true,
    get: function get() {
      return _types.NumericLiteral;
    }
  });
  /*istanbul ignore next*/exports.NumberTypeAnnotation = NumberTypeAnnotation;
  /*istanbul ignore next*/exports.StringLiteralTypeAnnotation = StringLiteralTypeAnnotation;
  /*istanbul ignore next*/exports.StringTypeAnnotation = StringTypeAnnotation;
  /*istanbul ignore next*/exports.ThisTypeAnnotation = ThisTypeAnnotation;
  /*istanbul ignore next*/exports.TupleTypeAnnotation = TupleTypeAnnotation;
  /*istanbul ignore next*/exports.TypeofTypeAnnotation = TypeofTypeAnnotation;
  /*istanbul ignore next*/exports.TypeAlias = TypeAlias;
  /*istanbul ignore next*/exports.TypeAnnotation = TypeAnnotation;
  /*istanbul ignore next*/exports.TypeParameterInstantiation = TypeParameterInstantiation;
  /*istanbul ignore next*/exports.ObjectTypeAnnotation = ObjectTypeAnnotation;
  /*istanbul ignore next*/exports.ObjectTypeCallProperty = ObjectTypeCallProperty;
  /*istanbul ignore next*/exports.ObjectTypeIndexer = ObjectTypeIndexer;
  /*istanbul ignore next*/exports.ObjectTypeProperty = ObjectTypeProperty;
  /*istanbul ignore next*/exports.QualifiedTypeIdentifier = QualifiedTypeIdentifier;
  /*istanbul ignore next*/exports.UnionTypeAnnotation = UnionTypeAnnotation;
  /*istanbul ignore next*/exports.TypeCastExpression = TypeCastExpression;
  /*istanbul ignore next*/exports.VoidTypeAnnotation = VoidTypeAnnotation;

  var /*istanbul ignore next*/_babelTypes = __webpack_require__(90);

  /*istanbul ignore next*/
  var t = _interopRequireWildcard(_babelTypes);

  /*istanbul ignore next*/
  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function AnyTypeAnnotation() {
    this.push("any");
  } /* eslint max-len: 0 */

  function ArrayTypeAnnotation(node) {
    this.print(node.elementType, node);
    this.push("[");
    this.push("]");
  }

  function BooleanTypeAnnotation() {
    this.push("bool");
  }

  function BooleanLiteralTypeAnnotation(node) {
    this.push(node.value ? "true" : "false");
  }

  function NullLiteralTypeAnnotation() {
    this.push("null");
  }

  function DeclareClass(node) {
    this.push("declare class ");
    this._interfaceish(node);
  }

  function DeclareFunction(node) {
    this.push("declare function ");
    this.print(node.id, node);
    this.print(node.id.typeAnnotation.typeAnnotation, node);
    this.semicolon();
  }

  function DeclareInterface(node) {
    this.push("declare ");
    this.InterfaceDeclaration(node);
  }

  function DeclareModule(node) {
    this.push("declare module ");
    this.print(node.id, node);
    this.space();
    this.print(node.body, node);
  }

  function DeclareTypeAlias(node) {
    this.push("declare ");
    this.TypeAlias(node);
  }

  function DeclareVariable(node) {
    this.push("declare var ");
    this.print(node.id, node);
    this.print(node.id.typeAnnotation, node);
    this.semicolon();
  }

  function ExistentialTypeParam() {
    this.push("*");
  }

  function FunctionTypeAnnotation(node, parent) {
    this.print(node.typeParameters, node);
    this.push("(");
    this.printList(node.params, node);

    if (node.rest) {
      if (node.params.length) {
        this.push(",");
        this.space();
      }
      this.push("...");
      this.print(node.rest, node);
    }

    this.push(")");

    // this node type is overloaded, not sure why but it makes it EXTREMELY annoying
    if (parent.type === "ObjectTypeProperty" || parent.type === "ObjectTypeCallProperty" || parent.type === "DeclareFunction") {
      this.push(":");
    } else {
      this.space();
      this.push("=>");
    }

    this.space();
    this.print(node.returnType, node);
  }

  function FunctionTypeParam(node) {
    this.print(node.name, node);
    if (node.optional) this.push("?");
    this.push(":");
    this.space();
    this.print(node.typeAnnotation, node);
  }

  function InterfaceExtends(node) {
    this.print(node.id, node);
    this.print(node.typeParameters, node);
  }

  /*istanbul ignore next*/exports.ClassImplements = InterfaceExtends;
  /*istanbul ignore next*/exports.GenericTypeAnnotation = InterfaceExtends;
  function _interfaceish(node) {
    this.print(node.id, node);
    this.print(node.typeParameters, node);
    if (node.extends.length) {
      this.push(" extends ");
      this.printJoin(node.extends, node, { separator: ", " });
    }
    if (node.mixins && node.mixins.length) {
      this.push(" mixins ");
      this.printJoin(node.mixins, node, { separator: ", " });
    }
    this.space();
    this.print(node.body, node);
  }

  function InterfaceDeclaration(node) {
    this.push("interface ");
    this._interfaceish(node);
  }

  function IntersectionTypeAnnotation(node) {
    this.printJoin(node.types, node, { separator: " & " });
  }

  function MixedTypeAnnotation() {
    this.push("mixed");
  }

  function NullableTypeAnnotation(node) {
    this.push("?");
    this.print(node.typeAnnotation, node);
  }

  function NumberTypeAnnotation() {
    this.push("number");
  }

  function StringLiteralTypeAnnotation(node) {
    this.push(this._stringLiteral(node.value));
  }

  function StringTypeAnnotation() {
    this.push("string");
  }

  function ThisTypeAnnotation() {
    this.push("this");
  }

  function TupleTypeAnnotation(node) {
    this.push("[");
    this.printJoin(node.types, node, { separator: ", " });
    this.push("]");
  }

  function TypeofTypeAnnotation(node) {
    this.push("typeof ");
    this.print(node.argument, node);
  }

  function TypeAlias(node) {
    this.push("type ");
    this.print(node.id, node);
    this.print(node.typeParameters, node);
    this.space();
    this.push("=");
    this.space();
    this.print(node.right, node);
    this.semicolon();
  }

  function TypeAnnotation(node) {
    this.push(":");
    this.space();
    if (node.optional) this.push("?");
    this.print(node.typeAnnotation, node);
  }

  function TypeParameterInstantiation(node) {
    /*istanbul ignore next*/
    var _this = this;

    this.push("<");
    this.printJoin(node.params, node, {
      separator: ", ",
      iterator: function /*istanbul ignore next*/iterator(node) {
        /*istanbul ignore next*/_this.print(node.typeAnnotation, node);
      }
    });
    this.push(">");
  }

  /*istanbul ignore next*/exports.TypeParameterDeclaration = TypeParameterInstantiation;
  function ObjectTypeAnnotation(node) {
    /*istanbul ignore next*/
    var _this2 = this;

    this.push("{");
    var props = node.properties.concat(node.callProperties, node.indexers);

    if (props.length) {
      this.space();

      this.printJoin(props, node, {
        separator: false,
        indent: true,
        iterator: function /*istanbul ignore next*/iterator() {
          if (props.length !== 1) {
            /*istanbul ignore next*/_this2.semicolon();
            /*istanbul ignore next*/_this2.space();
          }
        }
      });

      this.space();
    }

    this.push("}");
  }

  function ObjectTypeCallProperty(node) {
    if (node.static) this.push("static ");
    this.print(node.value, node);
  }

  function ObjectTypeIndexer(node) {
    if (node.static) this.push("static ");
    this.push("[");
    this.print(node.id, node);
    this.push(":");
    this.space();
    this.print(node.key, node);
    this.push("]");
    this.push(":");
    this.space();
    this.print(node.value, node);
  }

  function ObjectTypeProperty(node) {
    if (node.static) this.push("static ");
    this.print(node.key, node);
    if (node.optional) this.push("?");
    if (!t.isFunctionTypeAnnotation(node.value)) {
      this.push(":");
      this.space();
    }
    this.print(node.value, node);
  }

  function QualifiedTypeIdentifier(node) {
    this.print(node.qualification, node);
    this.push(".");
    this.print(node.id, node);
  }

  function UnionTypeAnnotation(node) {
    this.printJoin(node.types, node, { separator: " | " });
  }

  function TypeCastExpression(node) {
    this.push("(");
    this.print(node.expression, node);
    this.print(node.typeAnnotation, node);
    this.push(")");
  }

  function VoidTypeAnnotation() {
    this.push("void");
  }

/***/ },
/* 545 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;

  var _getIterator2 = __webpack_require__(93);

  var _getIterator3 = _interopRequireDefault(_getIterator2);

  exports.JSXAttribute = JSXAttribute;
  /*istanbul ignore next*/exports.JSXIdentifier = JSXIdentifier;
  /*istanbul ignore next*/exports.JSXNamespacedName = JSXNamespacedName;
  /*istanbul ignore next*/exports.JSXMemberExpression = JSXMemberExpression;
  /*istanbul ignore next*/exports.JSXSpreadAttribute = JSXSpreadAttribute;
  /*istanbul ignore next*/exports.JSXExpressionContainer = JSXExpressionContainer;
  /*istanbul ignore next*/exports.JSXText = JSXText;
  /*istanbul ignore next*/exports.JSXElement = JSXElement;
  /*istanbul ignore next*/exports.JSXOpeningElement = JSXOpeningElement;
  /*istanbul ignore next*/exports.JSXClosingElement = JSXClosingElement;
  /*istanbul ignore next*/exports.JSXEmptyExpression = JSXEmptyExpression;
  /*istanbul ignore next*/
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function JSXAttribute(node) {
    this.print(node.name, node);
    if (node.value) {
      this.push("=");
      this.print(node.value, node);
    }
  }

  function JSXIdentifier(node) {
    this.push(node.name);
  }

  function JSXNamespacedName(node) {
    this.print(node.namespace, node);
    this.push(":");
    this.print(node.name, node);
  }

  function JSXMemberExpression(node) {
    this.print(node.object, node);
    this.push(".");
    this.print(node.property, node);
  }

  function JSXSpreadAttribute(node) {
    this.push("{...");
    this.print(node.argument, node);
    this.push("}");
  }

  function JSXExpressionContainer(node) {
    this.push("{");
    this.print(node.expression, node);
    this.push("}");
  }

  function JSXText(node) {
    this.push(node.value, true);
  }

  function JSXElement(node) {
    var open = node.openingElement;
    this.print(open, node);
    if (open.selfClosing) return;

    this.indent();
    for ( /*istanbul ignore next*/var _iterator = node.children, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
      /*istanbul ignore next*/
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var child = _ref;

      this.print(child, node);
    }
    this.dedent();

    this.print(node.closingElement, node);
  }

  function JSXOpeningElement(node) {
    this.push("<");
    this.print(node.name, node);
    if (node.attributes.length > 0) {
      this.push(" ");
      this.printJoin(node.attributes, node, { separator: " " });
    }
    this.push(node.selfClosing ? " />" : ">");
  }

  function JSXClosingElement(node) {
    this.push("</");
    this.print(node.name, node);
    this.push(">");
  }

  function JSXEmptyExpression() {}

/***/ },
/* 546 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;
  exports.FunctionDeclaration = undefined;
  exports._params = _params;
  /*istanbul ignore next*/exports._method = _method;
  /*istanbul ignore next*/exports.FunctionExpression = FunctionExpression;
  /*istanbul ignore next*/exports.ArrowFunctionExpression = ArrowFunctionExpression;

  var /*istanbul ignore next*/_babelTypes = __webpack_require__(90);

  /*istanbul ignore next*/
  var t = _interopRequireWildcard(_babelTypes);

  /*istanbul ignore next*/
  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _params(node) {
    /*istanbul ignore next*/
    var _this = this;

    this.print(node.typeParameters, node);
    this.push("(");
    this.printList(node.params, node, {
      iterator: function /*istanbul ignore next*/iterator(node) {
        if (node.optional) /*istanbul ignore next*/_this.push("?");
        /*istanbul ignore next*/_this.print(node.typeAnnotation, node);
      }
    });
    this.push(")");

    if (node.returnType) {
      this.print(node.returnType, node);
    }
  }

  function _method(node) {
    var kind = node.kind;
    var key = node.key;

    if (kind === "method" || kind === "init") {
      if (node.generator) {
        this.push("*");
      }
    }

    if (kind === "get" || kind === "set") {
      this.push(kind + " ");
    }

    if (node.async) this.push("async ");

    if (node.computed) {
      this.push("[");
      this.print(key, node);
      this.push("]");
    } else {
      this.print(key, node);
    }

    this._params(node);
    this.space();
    this.print(node.body, node);
  }

  function FunctionExpression(node) {
    if (node.async) this.push("async ");
    this.push("function");
    if (node.generator) this.push("*");

    if (node.id) {
      this.push(" ");
      this.print(node.id, node);
    } else {
      this.space();
    }

    this._params(node);
    this.space();
    this.print(node.body, node);
  }

  /*istanbul ignore next*/exports.FunctionDeclaration = FunctionExpression;
  function ArrowFunctionExpression(node) {
    if (node.async) this.push("async ");

    if (node.params.length === 1 && t.isIdentifier(node.params[0])) {
      this.print(node.params[0], node);
    } else {
      this._params(node);
    }

    this.push(" => ");

    this.print(node.body, node);
  }

/***/ },
/* 547 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;
  exports.ImportSpecifier = ImportSpecifier;
  /*istanbul ignore next*/exports.ImportDefaultSpecifier = ImportDefaultSpecifier;
  /*istanbul ignore next*/exports.ExportDefaultSpecifier = ExportDefaultSpecifier;
  /*istanbul ignore next*/exports.ExportSpecifier = ExportSpecifier;
  /*istanbul ignore next*/exports.ExportNamespaceSpecifier = ExportNamespaceSpecifier;
  /*istanbul ignore next*/exports.ExportAllDeclaration = ExportAllDeclaration;
  /*istanbul ignore next*/exports.ExportNamedDeclaration = ExportNamedDeclaration;
  /*istanbul ignore next*/exports.ExportDefaultDeclaration = ExportDefaultDeclaration;
  /*istanbul ignore next*/exports.ImportDeclaration = ImportDeclaration;
  /*istanbul ignore next*/exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;

  var /*istanbul ignore next*/_babelTypes = __webpack_require__(90);

  /*istanbul ignore next*/
  var t = _interopRequireWildcard(_babelTypes);

  /*istanbul ignore next*/
  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function ImportSpecifier(node) {
    this.print(node.imported, node);
    if (node.local && node.local.name !== node.imported.name) {
      this.push(" as ");
      this.print(node.local, node);
    }
  }

  function ImportDefaultSpecifier(node) {
    this.print(node.local, node);
  }

  function ExportDefaultSpecifier(node) {
    this.print(node.exported, node);
  }

  function ExportSpecifier(node) {
    this.print(node.local, node);
    if (node.exported && node.local.name !== node.exported.name) {
      this.push(" as ");
      this.print(node.exported, node);
    }
  }

  function ExportNamespaceSpecifier(node) {
    this.push("* as ");
    this.print(node.exported, node);
  }

  function ExportAllDeclaration(node) {
    this.push("export *");
    if (node.exported) {
      this.push(" as ");
      this.print(node.exported, node);
    }
    this.push(" from ");
    this.print(node.source, node);
    this.semicolon();
  }

  function ExportNamedDeclaration() {
    this.push("export ");
    ExportDeclaration.apply(this, arguments);
  }

  function ExportDefaultDeclaration() {
    this.push("export default ");
    ExportDeclaration.apply(this, arguments);
  }

  function ExportDeclaration(node) {
    if (node.declaration) {
      var declar = node.declaration;
      this.print(declar, node);
      if (t.isStatement(declar) || t.isFunction(declar) || t.isClass(declar)) return;
    } else {
      if (node.exportKind === "type") {
        this.push("type ");
      }

      var specifiers = node.specifiers.slice(0);

      // print "special" specifiers first
      var hasSpecial = false;
      while (true) {
        var first = specifiers[0];
        if (t.isExportDefaultSpecifier(first) || t.isExportNamespaceSpecifier(first)) {
          hasSpecial = true;
          this.print(specifiers.shift(), node);
          if (specifiers.length) {
            this.push(", ");
          }
        } else {
          break;
        }
      }

      if (specifiers.length || !specifiers.length && !hasSpecial) {
        this.push("{");
        if (specifiers.length) {
          this.space();
          this.printJoin(specifiers, node, { separator: ", " });
          this.space();
        }
        this.push("}");
      }

      if (node.source) {
        this.push(" from ");
        this.print(node.source, node);
      }
    }

    this.ensureSemicolon();
  }

  function ImportDeclaration(node) {
    this.push("import ");

    if (node.importKind === "type" || node.importKind === "typeof") {
      this.push(node.importKind + " ");
    }

    var specifiers = node.specifiers.slice(0);
    if (specifiers && specifiers.length) {
      // print "special" specifiers first
      while (true) {
        var first = specifiers[0];
        if (t.isImportDefaultSpecifier(first) || t.isImportNamespaceSpecifier(first)) {
          this.print(specifiers.shift(), node);
          if (specifiers.length) {
            this.push(", ");
          }
        } else {
          break;
        }
      }

      if (specifiers.length) {
        this.push("{");
        this.space();
        this.printJoin(specifiers, node, { separator: ", " });
        this.space();
        this.push("}");
      }

      this.push(" from ");
    }

    this.print(node.source, node);
    this.semicolon();
  }

  function ImportNamespaceSpecifier(node) {
    this.push("* as ");
    this.print(node.local, node);
  }

/***/ },
/* 548 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;
  exports.ThrowStatement = exports.BreakStatement = exports.ReturnStatement = exports.ContinueStatement = exports.ForOfStatement = exports.ForInStatement = undefined;

  var _getIterator2 = __webpack_require__(93);

  var _getIterator3 = _interopRequireDefault(_getIterator2);

  exports.WithStatement = WithStatement;
  /*istanbul ignore next*/exports.IfStatement = IfStatement;
  /*istanbul ignore next*/exports.ForStatement = ForStatement;
  /*istanbul ignore next*/exports.WhileStatement = WhileStatement;
  /*istanbul ignore next*/exports.DoWhileStatement = DoWhileStatement;
  /*istanbul ignore next*/exports.LabeledStatement = LabeledStatement;
  /*istanbul ignore next*/exports.TryStatement = TryStatement;
  /*istanbul ignore next*/exports.CatchClause = CatchClause;
  /*istanbul ignore next*/exports.SwitchStatement = SwitchStatement;
  /*istanbul ignore next*/exports.SwitchCase = SwitchCase;
  /*istanbul ignore next*/exports.DebuggerStatement = DebuggerStatement;
  /*istanbul ignore next*/exports.VariableDeclaration = VariableDeclaration;
  /*istanbul ignore next*/exports.VariableDeclarator = VariableDeclarator;

  var /*istanbul ignore next*/_repeat = __webpack_require__(268);

  /*istanbul ignore next*/
  var _repeat2 = _interopRequireDefault(_repeat);

  var /*istanbul ignore next*/_babelTypes = __webpack_require__(90);

  /*istanbul ignore next*/
  var t = _interopRequireWildcard(_babelTypes);

  /*istanbul ignore next*/
  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var NON_ALPHABETIC_UNARY_OPERATORS = t.UPDATE_OPERATORS.concat(t.NUMBER_UNARY_OPERATORS).concat(["!"]);

  function WithStatement(node) {
    this.keyword("with");
    this.push("(");
    this.print(node.object, node);
    this.push(")");
    this.printBlock(node);
  }

  function IfStatement(node) {
    this.keyword("if");
    this.push("(");
    this.print(node.test, node);
    this.push(")");
    this.space();

    var needsBlock = node.alternate && t.isIfStatement(getLastStatement(node.consequent));
    if (needsBlock) {
      this.push("{");
      this.newline();
      this.indent();
    }

    this.printAndIndentOnComments(node.consequent, node);

    if (needsBlock) {
      this.dedent();
      this.newline();
      this.push("}");
    }

    if (node.alternate) {
      if (this.isLast("}")) this.space();
      this.push("else ");
      this.printAndIndentOnComments(node.alternate, node);
    }
  }

  // Recursively get the last statement.
  function getLastStatement(statement) {
    if (!t.isStatement(statement.body)) return statement;
    return getLastStatement(statement.body);
  }

  function ForStatement(node) {
    this.keyword("for");
    this.push("(");

    this._inForStatementInitCounter++;
    this.print(node.init, node);
    this._inForStatementInitCounter--;
    this.push(";");

    if (node.test) {
      this.space();
      this.print(node.test, node);
    }
    this.push(";");

    if (node.update) {
      this.space();
      this.print(node.update, node);
    }

    this.push(")");
    this.printBlock(node);
  }

  function WhileStatement(node) {
    this.keyword("while");
    this.push("(");
    this.print(node.test, node);
    this.push(")");
    this.printBlock(node);
  }

  var buildForXStatement = function buildForXStatement(op) {
    return function (node) {
      this.keyword("for");
      this.push("(");
      this.print(node.left, node);
      this.push( /*istanbul ignore next*/" " + op + " ");
      this.print(node.right, node);
      this.push(")");
      this.printBlock(node);
    };
  };

  var ForInStatement = /*istanbul ignore next*/exports.ForInStatement = buildForXStatement("in");
  var ForOfStatement = /*istanbul ignore next*/exports.ForOfStatement = buildForXStatement("of");

  function DoWhileStatement(node) {
    this.push("do ");
    this.print(node.body, node);
    this.space();
    this.keyword("while");
    this.push("(");
    this.print(node.test, node);
    this.push(");");
  }

  function buildLabelStatement(prefix) {
    /*istanbul ignore next*/var key = arguments.length <= 1 || arguments[1] === undefined ? "label" : arguments[1];

    return function (node) {
      this.push(prefix);

      var label = node[key];
      if (label) {
        if (!(this.format.minified && (t.isUnaryExpression(label, { prefix: true }) || t.isUpdateExpression(label, { prefix: true })) && NON_ALPHABETIC_UNARY_OPERATORS.indexOf(label.operator) > -1)) {
          this.push(" ");
        }

        var terminatorState = this.startTerminatorless();
        this.print(label, node);
        this.endTerminatorless(terminatorState);
      }

      this.semicolon();
    };
  }

  var ContinueStatement = /*istanbul ignore next*/exports.ContinueStatement = buildLabelStatement("continue");
  var ReturnStatement = /*istanbul ignore next*/exports.ReturnStatement = buildLabelStatement("return", "argument");
  var BreakStatement = /*istanbul ignore next*/exports.BreakStatement = buildLabelStatement("break");
  var ThrowStatement = /*istanbul ignore next*/exports.ThrowStatement = buildLabelStatement("throw", "argument");

  function LabeledStatement(node) {
    this.print(node.label, node);
    this.push(": ");
    this.print(node.body, node);
  }

  function TryStatement(node) {
    this.keyword("try");
    this.print(node.block, node);
    this.space();

    // Esprima bug puts the catch clause in a `handlers` array.
    // see https://code.google.com/p/esprima/issues/detail?id=433
    // We run into this from regenerator generated ast.
    if (node.handlers) {
      this.print(node.handlers[0], node);
    } else {
      this.print(node.handler, node);
    }

    if (node.finalizer) {
      this.space();
      this.push("finally ");
      this.print(node.finalizer, node);
    }
  }

  function CatchClause(node) {
    this.keyword("catch");
    this.push("(");
    this.print(node.param, node);
    this.push(")");
    this.space();
    this.print(node.body, node);
  }

  function SwitchStatement(node) {
    this.keyword("switch");
    this.push("(");
    this.print(node.discriminant, node);
    this.push(")");
    this.space();
    this.push("{");

    this.printSequence(node.cases, node, {
      indent: true,
      /*istanbul ignore next*/addNewlines: function addNewlines(leading, cas) {
        if (!leading && node.cases[node.cases.length - 1] === cas) return -1;
      }
    });

    this.push("}");
  }

  function SwitchCase(node) {
    if (node.test) {
      this.push("case ");
      this.print(node.test, node);
      this.push(":");
    } else {
      this.push("default:");
    }

    if (node.consequent.length) {
      this.newline();
      this.printSequence(node.consequent, node, { indent: true });
    }
  }

  function DebuggerStatement() {
    this.push("debugger;");
  }

  function VariableDeclaration(node, parent) {
    this.push(node.kind + " ");

    var hasInits = false;
    // don't add whitespace to loop heads
    if (!t.isFor(parent)) {
      for ( /*istanbul ignore next*/var _iterator = node.declarations, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
        /*istanbul ignore next*/
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var declar = _ref;

        if (declar.init) {
          // has an init so let's split it up over multiple lines
          hasInits = true;
        }
      }
    }

    //
    // use a pretty separator when we aren't in compact mode, have initializers and don't have retainLines on
    // this will format declarations like:
    //
    //   let foo = "bar", bar = "foo";
    //
    // into
    //
    //   let foo = "bar",
    //       bar = "foo";
    //

    var sep = /*istanbul ignore next*/void 0;
    if (!this.format.compact && !this.format.concise && hasInits && !this.format.retainLines) {
      sep = /*istanbul ignore next*/",\n" + /*istanbul ignore next*/(0, _repeat2.default)(" ", node.kind.length + 1);
    }

    //

    this.printList(node.declarations, node, { separator: sep });

    if (t.isFor(parent)) {
      // don't give semicolons to these nodes since they'll be inserted in the parent generator
      if (parent.left === node || parent.init === node) return;
    }

    this.semicolon();
  }

  function VariableDeclarator(node) {
    this.print(node.id, node);
    this.print(node.id.typeAnnotation, node);
    if (node.init) {
      this.space();
      this.push("=");
      this.space();
      this.print(node.init, node);
    }
  }

/***/ },
/* 549 */
/***/ function(module, exports) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;
  exports.TaggedTemplateExpression = TaggedTemplateExpression;
  /*istanbul ignore next*/exports.TemplateElement = TemplateElement;
  /*istanbul ignore next*/exports.TemplateLiteral = TemplateLiteral;
  function TaggedTemplateExpression(node) {
    this.print(node.tag, node);
    this.print(node.quasi, node);
  }

  function TemplateElement(node) {
    this._push(node.value.raw);
  }

  function TemplateLiteral(node) {
    this.push("`");

    var quasis = node.quasis;

    for (var i = 0; i < quasis.length; i++) {
      this.print(quasis[i], node);

      if (i + 1 < quasis.length) {
        this._push("${ ");
        this.print(node.expressions[i], node);
        this.push(" }");
      }
    }

    this._push("`");
  }

/***/ },
/* 550 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;
  exports.AwaitExpression = exports.FunctionTypeAnnotation = undefined;
  exports.NullableTypeAnnotation = NullableTypeAnnotation;
  /*istanbul ignore next*/exports.UpdateExpression = UpdateExpression;
  /*istanbul ignore next*/exports.ObjectExpression = ObjectExpression;
  /*istanbul ignore next*/exports.Binary = Binary;
  /*istanbul ignore next*/exports.BinaryExpression = BinaryExpression;
  /*istanbul ignore next*/exports.SequenceExpression = SequenceExpression;
  /*istanbul ignore next*/exports.YieldExpression = YieldExpression;
  /*istanbul ignore next*/exports.ClassExpression = ClassExpression;
  /*istanbul ignore next*/exports.UnaryLike = UnaryLike;
  /*istanbul ignore next*/exports.FunctionExpression = FunctionExpression;
  /*istanbul ignore next*/exports.ArrowFunctionExpression = ArrowFunctionExpression;
  /*istanbul ignore next*/exports.ConditionalExpression = ConditionalExpression;
  /*istanbul ignore next*/exports.AssignmentExpression = AssignmentExpression;

  var /*istanbul ignore next*/_babelTypes = __webpack_require__(90);

  /*istanbul ignore next*/
  var t = _interopRequireWildcard(_babelTypes);

  /*istanbul ignore next*/
  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  var PRECEDENCE = {
    "||": 0,
    "&&": 1,
    "|": 2,
    "^": 3,
    "&": 4,
    "==": 5,
    "===": 5,
    "!=": 5,
    "!==": 5,
    "<": 6,
    ">": 6,
    "<=": 6,
    ">=": 6,
    in: 6,
    instanceof: 6,
    ">>": 7,
    "<<": 7,
    ">>>": 7,
    "+": 8,
    "-": 8,
    "*": 9,
    "/": 9,
    "%": 9,
    "**": 10
  };

  function NullableTypeAnnotation(node, parent) {
    return t.isArrayTypeAnnotation(parent);
  }

  /*istanbul ignore next*/exports.FunctionTypeAnnotation = NullableTypeAnnotation;
  function UpdateExpression(node, parent) {
    if (t.isMemberExpression(parent) && parent.object === node) {
      // (foo++).test()
      return true;
    }

    return false;
  }

  function ObjectExpression(node, parent, printStack) {
    return isFirstInStatement(printStack, { considerArrow: true });
  }

  function Binary(node, parent) {
    if ((t.isCallExpression(parent) || t.isNewExpression(parent)) && parent.callee === node) {
      return true;
    }

    if (t.isUnaryLike(parent)) {
      return true;
    }

    if (t.isMemberExpression(parent) && parent.object === node) {
      return true;
    }

    if (t.isBinary(parent)) {
      var parentOp = parent.operator;
      var parentPos = PRECEDENCE[parentOp];

      var nodeOp = node.operator;
      var nodePos = PRECEDENCE[nodeOp];

      if (parentPos > nodePos) {
        return true;
      }

      // Logical expressions with the same precedence don't need parens.
      if (parentPos === nodePos && parent.right === node && !t.isLogicalExpression(parent)) {
        return true;
      }
    }

    return false;
  }

  function BinaryExpression(node, parent) {
    if (node.operator === "in") {
      // let i = (1 in []);
      if (t.isVariableDeclarator(parent)) {
        return true;
      }

      // for ((1 in []);;);
      if (t.isFor(parent)) {
        return true;
      }
    }

    return false;
  }

  function SequenceExpression(node, parent) {
    if (t.isForStatement(parent)) {
      // Although parentheses wouldn"t hurt around sequence
      // expressions in the head of for loops, traditional style
      // dictates that e.g. i++, j++ should not be wrapped with
      // parentheses.
      return false;
    }

    if (t.isExpressionStatement(parent) && parent.expression === node) {
      return false;
    }

    if (t.isReturnStatement(parent)) {
      return false;
    }

    if (t.isThrowStatement(parent)) {
      return false;
    }

    if (t.isSwitchStatement(parent) && parent.discriminant === node) {
      return false;
    }

    if (t.isWhileStatement(parent) && parent.test === node) {
      return false;
    }

    if (t.isIfStatement(parent) && parent.test === node) {
      return false;
    }

    if (t.isForInStatement(parent) && parent.right === node) {
      return false;
    }

    // Otherwise err on the side of overparenthesization, adding
    // explicit exceptions above if this proves overzealous.
    return true;
  }

  function YieldExpression(node, parent) {
    return t.isBinary(parent) || t.isUnaryLike(parent) || t.isCallExpression(parent) || t.isMemberExpression(parent) || t.isNewExpression(parent);
  }

  /*istanbul ignore next*/exports.AwaitExpression = YieldExpression;
  function ClassExpression(node, parent, printStack) {
    return isFirstInStatement(printStack, { considerDefaultExports: true });
  }

  function UnaryLike(node, parent) {
    if (t.isMemberExpression(parent, { object: node })) {
      return true;
    }

    if (t.isCallExpression(parent, { callee: node }) || t.isNewExpression(parent, { callee: node })) {
      return true;
    }

    return false;
  }

  function FunctionExpression(node, parent, printStack) {
    return isFirstInStatement(printStack, { considerDefaultExports: true });
  }

  function ArrowFunctionExpression(node, parent) {
    // export default (function () {});
    if (t.isExportDeclaration(parent)) {
      return true;
    }

    if (t.isBinaryExpression(parent) || t.isLogicalExpression(parent)) {
      return true;
    }

    if (t.isUnaryExpression(parent)) {
      return true;
    }

    return UnaryLike(node, parent);
  }

  function ConditionalExpression(node, parent) {
    if (t.isUnaryLike(parent)) {
      return true;
    }

    if (t.isBinary(parent)) {
      return true;
    }

    if (t.isConditionalExpression(parent, { test: node })) {
      return true;
    }

    return UnaryLike(node, parent);
  }

  function AssignmentExpression(node) {
    if (t.isObjectPattern(node.left)) {
      return true;
    } else {
      return (/*istanbul ignore next*/ConditionalExpression.apply( /*istanbul ignore next*/undefined, arguments)
      );
    }
  }

  // Walk up the print stack to deterimine if our node can come first
  // in statement.
  function isFirstInStatement(printStack) {
    /*istanbul ignore next*/
    var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    /*istanbul ignore next*/var _ref$considerArrow = _ref.considerArrow;
    /*istanbul ignore next*/var considerArrow = _ref$considerArrow === undefined ? false : _ref$considerArrow;
    /*istanbul ignore next*/var _ref$considerDefaultE = _ref.considerDefaultExports;
    /*istanbul ignore next*/var considerDefaultExports = _ref$considerDefaultE === undefined ? false : _ref$considerDefaultE;

    var i = printStack.length - 1;
    var node = printStack[i];
    i--;
    var parent = printStack[i];
    while (i > 0) {
      if (t.isExpressionStatement(parent, { expression: node })) {
        return true;
      }

      if (considerDefaultExports && t.isExportDefaultDeclaration(parent, { declaration: node })) {
        return true;
      }

      if (considerArrow && t.isArrowFunctionExpression(parent, { body: node })) {
        return true;
      }

      if (t.isCallExpression(parent, { callee: node }) || t.isSequenceExpression(parent) && parent.expressions[0] === node || t.isMemberExpression(parent, { object: node }) || t.isConditional(parent, { test: node }) || t.isBinary(parent, { left: node }) || t.isAssignmentExpression(parent, { left: node })) {
        node = parent;
        i--;
        parent = printStack[i];
      } else {
        return false;
      }
    }

    return false;
  }

/***/ },
/* 551 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  var /*istanbul ignore next*/_isBoolean = __webpack_require__(479);

  /*istanbul ignore next*/
  var _isBoolean2 = _interopRequireDefault(_isBoolean);

  var /*istanbul ignore next*/_each = __webpack_require__(353);

  /*istanbul ignore next*/
  var _each2 = _interopRequireDefault(_each);

  var /*istanbul ignore next*/_map = __webpack_require__(1184);

  /*istanbul ignore next*/
  var _map2 = _interopRequireDefault(_map);

  var /*istanbul ignore next*/_babelTypes = __webpack_require__(90);

  /*istanbul ignore next*/
  var t = _interopRequireWildcard(_babelTypes);

  /*istanbul ignore next*/
  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Crawl a node to test if it contains a CallExpression, a Function, or a Helper.
   *
   * @example
   * crawl(node)
   * // { hasCall: false, hasFunction: true, hasHelper: false }
   */

  function crawl(node) {
    /*istanbul ignore next*/var state = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    if (t.isMemberExpression(node)) {
      crawl(node.object, state);
      if (node.computed) crawl(node.property, state);
    } else if (t.isBinary(node) || t.isAssignmentExpression(node)) {
      crawl(node.left, state);
      crawl(node.right, state);
    } else if (t.isCallExpression(node)) {
      state.hasCall = true;
      crawl(node.callee, state);
    } else if (t.isFunction(node)) {
      state.hasFunction = true;
    } else if (t.isIdentifier(node)) {
      state.hasHelper = state.hasHelper || isHelper(node.callee);
    }

    return state;
  }

  /**
   * Test if a node is or has a helper.
   */

  function isHelper(node) {
    if (t.isMemberExpression(node)) {
      return isHelper(node.object) || isHelper(node.property);
    } else if (t.isIdentifier(node)) {
      return node.name === "require" || node.name[0] === "_";
    } else if (t.isCallExpression(node)) {
      return isHelper(node.callee);
    } else if (t.isBinary(node) || t.isAssignmentExpression(node)) {
      return t.isIdentifier(node.left) && isHelper(node.left) || isHelper(node.right);
    } else {
      return false;
    }
  }

  function isType(node) {
    return t.isLiteral(node) || t.isObjectExpression(node) || t.isArrayExpression(node) || t.isIdentifier(node) || t.isMemberExpression(node);
  }

  /**
   * Tests for node types that need whitespace.
   */

  exports.nodes = { /*istanbul ignore next*/

    /**
     * Test if AssignmentExpression needs whitespace.
     */

    AssignmentExpression: function AssignmentExpression(node) {
      var state = crawl(node.right);
      if (state.hasCall && state.hasHelper || state.hasFunction) {
        return {
          before: state.hasFunction,
          after: true
        };
      }
    },
    /*istanbul ignore next*/

    /**
     * Test if SwitchCase needs whitespace.
     */

    SwitchCase: function SwitchCase(node, parent) {
      return {
        before: node.consequent.length || parent.cases[0] === node
      };
    },
    /*istanbul ignore next*/

    /**
     * Test if LogicalExpression needs whitespace.
     */

    LogicalExpression: function LogicalExpression(node) {
      if (t.isFunction(node.left) || t.isFunction(node.right)) {
        return {
          after: true
        };
      }
    },
    /*istanbul ignore next*/

    /**
     * Test if Literal needs whitespace.
     */

    Literal: function Literal(node) {
      if (node.value === "use strict") {
        return {
          after: true
        };
      }
    },
    /*istanbul ignore next*/

    /**
     * Test if CallExpression needs whitespace.
     */

    CallExpression: function CallExpression(node) {
      if (t.isFunction(node.callee) || isHelper(node)) {
        return {
          before: true,
          after: true
        };
      }
    },
    /*istanbul ignore next*/

    /**
     * Test if VariableDeclaration needs whitespace.
     */

    VariableDeclaration: function VariableDeclaration(node) {
      for (var i = 0; i < node.declarations.length; i++) {
        var declar = node.declarations[i];

        var enabled = isHelper(declar.id) && !isType(declar.init);
        if (!enabled) {
          var state = crawl(declar.init);
          enabled = isHelper(declar.init) && state.hasCall || state.hasFunction;
        }

        if (enabled) {
          return {
            before: true,
            after: true
          };
        }
      }
    },
    /*istanbul ignore next*/

    /**
     * Test if IfStatement needs whitespace.
     */

    IfStatement: function IfStatement(node) {
      if (t.isBlockStatement(node.consequent)) {
        return {
          before: true,
          after: true
        };
      }
    }
  };

  /**
   * Test if Property or SpreadProperty needs whitespace.
   */

  exports.nodes.ObjectProperty = exports.nodes.ObjectMethod = exports.nodes.SpreadProperty = function (node, parent) {
    if (parent.properties[0] === node) {
      return {
        before: true
      };
    }
  };

  /**
   * Returns lists from node types that need whitespace.
   */

  exports.list = { /*istanbul ignore next*/

    /**
     * Return VariableDeclaration declarations init properties.
     */

    VariableDeclaration: function VariableDeclaration(node) {
      return (/*istanbul ignore next*/(0, _map2.default)(node.declarations, "init")
      );
    },
    /*istanbul ignore next*/

    /**
     * Return VariableDeclaration elements.
     */

    ArrayExpression: function ArrayExpression(node) {
      return node.elements;
    },
    /*istanbul ignore next*/

    /**
     * Return VariableDeclaration properties.
     */

    ObjectExpression: function ObjectExpression(node) {
      return node.properties;
    }
  };

  /**
   * Add whitespace tests for nodes and their aliases.
   */

  /*istanbul ignore next*/(0, _each2.default)({
    Function: true,
    Class: true,
    Loop: true,
    LabeledStatement: true,
    SwitchStatement: true,
    TryStatement: true
  }, function (amounts, type) {
    if ( /*istanbul ignore next*/(0, _isBoolean2.default)(amounts)) {
      amounts = { after: amounts, before: amounts };
    }

    /*istanbul ignore next*/(0, _each2.default)([type].concat(t.FLIPPED_ALIAS_KEYS[type] || []), function (type) {
      exports.nodes[type] = function () {
        return amounts;
      };
    });
  });

/***/ },
/* 552 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;

  var _classCallCheck2 = __webpack_require__(97);

  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Track current position in code generation.
   */

  var Position = function () {
    function /*istanbul ignore next*/Position() {
      /*istanbul ignore next*/(0, _classCallCheck3.default)(this, Position);

      this.line = 1;
      this.column = 0;
    }

    /**
     * Push a string to the current position, mantaining the current line and column.
     */

    Position.prototype.push = function push(str) {
      for (var i = 0; i < str.length; i++) {
        if (str[i] === "\n") {
          this.line++;
          this.column = 0;
        } else {
          this.column++;
        }
      }
    };

    /**
     * Unshift a string from the current position, mantaining the current line and column.
     */

    Position.prototype.unshift = function unshift(str) {
      for (var i = 0; i < str.length; i++) {
        if (str[i] === "\n") {
          this.line--;
        } else {
          this.column--;
        }
      }
    };

    return Position;
  }();

  /*istanbul ignore next*/exports.default = Position;
  /*istanbul ignore next*/module.exports = exports["default"];

/***/ },
/* 553 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;

  var _assign = __webpack_require__(285);

  var _assign2 = _interopRequireDefault(_assign);

  var _getIterator2 = __webpack_require__(93);

  var _getIterator3 = _interopRequireDefault(_getIterator2);

  var _stringify = __webpack_require__(170);

  var _stringify2 = _interopRequireDefault(_stringify);

  var _classCallCheck2 = __webpack_require__(97);

  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

  var _possibleConstructorReturn2 = __webpack_require__(172);

  var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

  var _inherits2 = __webpack_require__(171);

  var _inherits3 = _interopRequireDefault(_inherits2);

  var /*istanbul ignore next*/_repeat = __webpack_require__(268);

  /*istanbul ignore next*/
  var _repeat2 = _interopRequireDefault(_repeat);

  var /*istanbul ignore next*/_buffer = __webpack_require__(540);

  /*istanbul ignore next*/
  var _buffer2 = _interopRequireDefault(_buffer);

  var /*istanbul ignore next*/_node = __webpack_require__(384);

  /*istanbul ignore next*/
  var n = _interopRequireWildcard(_node);

  var /*istanbul ignore next*/_babelTypes = __webpack_require__(90);

  /*istanbul ignore next*/
  var t = _interopRequireWildcard(_babelTypes);

  /*istanbul ignore next*/
  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /* eslint max-len: 0 */

  var Printer = function (_Buffer) {
    (0, _inherits3.default)(Printer, _Buffer);

    function /*istanbul ignore next*/Printer() {
      /*istanbul ignore next*/(0, _classCallCheck3.default)(this, Printer);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      /*istanbul ignore next*/
      var _this = (0, _possibleConstructorReturn3.default)(this, /*istanbul ignore next*/_Buffer.call.apply( /*istanbul ignore next*/_Buffer, /*istanbul ignore next*/[this].concat(args)));

      /*istanbul ignore next*/_this.insideAux = false;
      /*istanbul ignore next*/_this.printAuxAfterOnNextUserNode = false;
      /*istanbul ignore next*/_this._printStack = [];
      /*istanbul ignore next*/return _this;
    }

    Printer.prototype.print = function print(node, parent) {
      /*istanbul ignore next*/
      var _this2 = this;

      var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

      if (!node) return;

      this._lastPrintedIsEmptyStatement = false;

      if (parent && parent._compact) {
        node._compact = true;
      }

      var oldInAux = this.insideAux;
      this.insideAux = !node.loc;

      var oldConcise = this.format.concise;
      if (node._compact) {
        this.format.concise = true;
      }

      var printMethod = this[node.type];
      if (!printMethod) {
        throw new ReferenceError( /*istanbul ignore next*/"unknown node of type " + /*istanbul ignore next*/(0, _stringify2.default)(node.type) + " with constructor " + /*istanbul ignore next*/(0, _stringify2.default)(node && node.constructor.name));
      }

      this._printStack.push(node);

      if (node.loc) this.printAuxAfterComment();
      this.printAuxBeforeComment(oldInAux);

      var needsParens = n.needsParens(node, parent, this._printStack);
      if (needsParens) this.push("(");

      this.printLeadingComments(node, parent);

      this.catchUp(node);

      this._printNewline(true, node, parent, opts);

      if (opts.before) opts.before();

      var loc = t.isProgram(node) || t.isFile(node) ? null : node.loc;
      this.withSource("start", loc, function () {
        /*istanbul ignore next*/_this2._print(node, parent);
      });

      // Check again if any of our children may have left an aux comment on the stack
      if (node.loc) this.printAuxAfterComment();

      this.printTrailingComments(node, parent);

      if (needsParens) this.push(")");

      // end
      this._printStack.pop();
      if (opts.after) opts.after();

      this.format.concise = oldConcise;
      this.insideAux = oldInAux;

      this._printNewline(false, node, parent, opts);
    };

    Printer.prototype.printAuxBeforeComment = function printAuxBeforeComment(wasInAux) {
      var comment = this.format.auxiliaryCommentBefore;
      if (!wasInAux && this.insideAux && !this.printAuxAfterOnNextUserNode) {
        this.printAuxAfterOnNextUserNode = true;
        if (comment) this.printComment({
          type: "CommentBlock",
          value: comment
        });
      }
    };

    Printer.prototype.printAuxAfterComment = function printAuxAfterComment() {
      if (this.printAuxAfterOnNextUserNode) {
        this.printAuxAfterOnNextUserNode = false;
        var comment = this.format.auxiliaryCommentAfter;
        if (comment) this.printComment({
          type: "CommentBlock",
          value: comment
        });
      }
    };

    Printer.prototype.getPossibleRaw = function getPossibleRaw(node) {
      var extra = node.extra;
      if (extra && extra.raw != null && extra.rawValue != null && node.value === extra.rawValue) {
        return extra.raw;
      }
    };

    Printer.prototype._print = function _print(node, parent) {
      // In minified mode we need to produce as little bytes as needed
      // and need to make sure that string quoting is consistent.
      // That means we have to always reprint as opposed to getting
      // the raw value.
      if (!this.format.minified) {
        var extra = this.getPossibleRaw(node);
        if (extra) {
          this.push("");
          this._push(extra);
          return;
        }
      }

      var printMethod = this[node.type];
      printMethod.call(this, node, parent);
    };

    Printer.prototype.printJoin = function printJoin(nodes, parent) {
      /*istanbul ignore next*/
      var _this3 = this;

      var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

      if (!nodes || !nodes.length) return;

      var len = nodes.length;
      var node = /*istanbul ignore next*/void 0,
          i = /*istanbul ignore next*/void 0;

      if (opts.indent) this.indent();

      var printOpts = {
        statement: opts.statement,
        addNewlines: opts.addNewlines,
        after: function /*istanbul ignore next*/after() {
          if (opts.iterator) {
            opts.iterator(node, i);
          }

          if (opts.separator && parent.loc) {
            /*istanbul ignore next*/_this3.printAuxAfterComment();
          }

          if (opts.separator && i < len - 1) {
            /*istanbul ignore next*/_this3.push(opts.separator);
          }
        }
      };

      for (i = 0; i < nodes.length; i++) {
        node = nodes[i];
        this.print(node, parent, printOpts);
      }

      if (opts.indent) this.dedent();
    };

    Printer.prototype.printAndIndentOnComments = function printAndIndentOnComments(node, parent) {
      var indent = !!node.leadingComments;
      if (indent) this.indent();
      this.print(node, parent);
      if (indent) this.dedent();
    };

    Printer.prototype.printBlock = function printBlock(parent) {
      var node = parent.body;

      if (!t.isEmptyStatement(node)) {
        this.space();
      }

      this.print(node, parent);
    };

    Printer.prototype.generateComment = function generateComment(comment) {
      var val = comment.value;
      if (comment.type === "CommentLine") {
        val = /*istanbul ignore next*/"//" + val;
      } else {
        val = /*istanbul ignore next*/"/*" + val + "*/";
      }
      return val;
    };

    Printer.prototype.printTrailingComments = function printTrailingComments(node, parent) {
      this.printComments(this.getComments(false, node, parent));
    };

    Printer.prototype.printLeadingComments = function printLeadingComments(node, parent) {
      this.printComments(this.getComments(true, node, parent));
    };

    Printer.prototype.printInnerComments = function printInnerComments(node) {
      /*istanbul ignore next*/var indent = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

      if (!node.innerComments) return;
      if (indent) this.indent();
      this.printComments(node.innerComments);
      if (indent) this.dedent();
    };

    Printer.prototype.printSequence = function printSequence(nodes, parent) {
      /*istanbul ignore next*/var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

      opts.statement = true;
      return this.printJoin(nodes, parent, opts);
    };

    Printer.prototype.printList = function printList(items, parent) {
      /*istanbul ignore next*/var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

      if (opts.separator == null) {
        opts.separator = ",";
        if (!this.format.compact) opts.separator += " ";
      }

      return this.printJoin(items, parent, opts);
    };

    Printer.prototype._printNewline = function _printNewline(leading, node, parent, opts) {
      // Fast path since 'this.newline' does nothing when not tracking lines.
      if (this.format.retainLines || this.format.compact) return;

      if (!opts.statement && !n.isUserWhitespacable(node, parent)) {
        return;
      }

      // Fast path for concise since 'this.newline' just inserts a space when
      // concise formatting is in use.
      if (this.format.concise) {
        this.space();
        return;
      }

      var lines = 0;

      if (node.start != null && !node._ignoreUserWhitespace && this.tokens.length) {
        // user node
        if (leading) {
          lines = this.whitespace.getNewlinesBefore(node);
        } else {
          lines = this.whitespace.getNewlinesAfter(node);
        }
      } else {
        // generated node
        if (!leading) lines++; // always include at least a single line after
        if (opts.addNewlines) lines += opts.addNewlines(leading, node) || 0;

        var needs = n.needsWhitespaceAfter;
        if (leading) needs = n.needsWhitespaceBefore;
        if (needs(node, parent)) lines++;

        // generated nodes can't add starting file whitespace
        if (!this.buf) lines = 0;
      }

      this.newline(lines);
    };

    Printer.prototype.getComments = function getComments(leading, node) {
      // Note, we use a boolean flag here instead of passing in the attribute name as it is faster
      // because this is called extremely frequently.
      return node && (leading ? node.leadingComments : node.trailingComments) || [];
    };

    Printer.prototype.shouldPrintComment = function shouldPrintComment(comment) {
      if (this.format.shouldPrintComment) {
        return this.format.shouldPrintComment(comment.value);
      } else {
        if (!this.format.minified && (comment.value.indexOf("@license") >= 0 || comment.value.indexOf("@preserve") >= 0)) {
          return true;
        } else {
          return this.format.comments;
        }
      }
    };

    Printer.prototype.printComment = function printComment(comment) {
      /*istanbul ignore next*/
      var _this4 = this;

      if (!this.shouldPrintComment(comment)) return;

      if (comment.ignore) return;
      comment.ignore = true;

      if (comment.start != null) {
        if (this.printedCommentStarts[comment.start]) return;
        this.printedCommentStarts[comment.start] = true;
      }

      // Exclude comments from source mappings since they will only clutter things.
      this.withSource(null, null, function () {
        /*istanbul ignore next*/_this4.catchUp(comment);

        // whitespace before
        /*istanbul ignore next*/_this4.newline( /*istanbul ignore next*/_this4.whitespace.getNewlinesBefore(comment));

        var column = /*istanbul ignore next*/_this4.position.column;
        var val = /*istanbul ignore next*/_this4.generateComment(comment);

        if (column && ! /*istanbul ignore next*/_this4.isLast(["\n", " ", "[", "{"])) {
          /*istanbul ignore next*/_this4._push(" ");
          column++;
        }

        //
        if (comment.type === "CommentBlock" && /*istanbul ignore next*/_this4.format.indent.adjustMultilineComment) {
          var offset = comment.loc && comment.loc.start.column;
          if (offset) {
            var newlineRegex = new RegExp("\\n\\s{1," + offset + "}", "g");
            val = val.replace(newlineRegex, "\n");
          }

          var indent = Math.max( /*istanbul ignore next*/_this4.indentSize(), column);
          val = val.replace(/\n/g, /*istanbul ignore next*/"\n" + /*istanbul ignore next*/(0, _repeat2.default)(" ", indent));
        }

        if (column === 0) {
          val = /*istanbul ignore next*/_this4.getIndent() + val;
        }

        // force a newline for line comments when retainLines is set in case the next printed node
        // doesn't catch up
        if (( /*istanbul ignore next*/_this4.format.compact || /*istanbul ignore next*/_this4.format.concise || /*istanbul ignore next*/_this4.format.retainLines) && comment.type === "CommentLine") {
          val += "\n";
        }

        //
        /*istanbul ignore next*/_this4._push(val);

        // whitespace after
        /*istanbul ignore next*/_this4.newline( /*istanbul ignore next*/_this4.whitespace.getNewlinesAfter(comment));
      });
    };

    Printer.prototype.printComments = function printComments(comments) {
      if (!comments || !comments.length) return;

      for ( /*istanbul ignore next*/var _iterator = comments, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
        /*istanbul ignore next*/
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var comment = _ref;

        this.printComment(comment);
      }
    };

    return Printer;
  }(_buffer2.default);

  /*istanbul ignore next*/exports.default = Printer;
  /*istanbul ignore next*/var _arr = [__webpack_require__(549), __webpack_require__(543), __webpack_require__(548), __webpack_require__(542), __webpack_require__(546), __webpack_require__(547), __webpack_require__(382), __webpack_require__(544), __webpack_require__(541), __webpack_require__(545)];


  for ( /*istanbul ignore next*/var _i2 = 0; _i2 < _arr.length; _i2++) {
    var generator = /*istanbul ignore next*/_arr[_i2];
    /*istanbul ignore next*/(0, _assign2.default)(Printer.prototype, generator);
  }
  /*istanbul ignore next*/module.exports = exports["default"];

/***/ },
/* 554 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;

  var _keys = __webpack_require__(190);

  var _keys2 = _interopRequireDefault(_keys);

  var _typeof2 = __webpack_require__(127);

  var _typeof3 = _interopRequireDefault(_typeof2);

  var _classCallCheck2 = __webpack_require__(97);

  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

  var /*istanbul ignore next*/_sourceMap = __webpack_require__(519);

  /*istanbul ignore next*/
  var _sourceMap2 = _interopRequireDefault(_sourceMap);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Build a sourcemap.
   */

  var SourceMap = function () {
    function /*istanbul ignore next*/SourceMap(position, opts, code) {
      /*istanbul ignore next*/
      var _this = this;

      (0, _classCallCheck3.default)(this, SourceMap);

      this.position = position;
      this.opts = opts;
      this.last = { generated: {}, original: {} };

      if (opts.sourceMaps) {
        this.map = new /*istanbul ignore next*/_sourceMap2.default.SourceMapGenerator({
          file: opts.sourceMapTarget,
          sourceRoot: opts.sourceRoot
        });

        if (typeof code === "string") {
          this.map.setSourceContent(opts.sourceFileName, code);
        } else if ( /*istanbul ignore next*/(typeof code === "undefined" ? "undefined" : (0, _typeof3.default)(code)) === "object") {
          /*istanbul ignore next*/(0, _keys2.default)(code).forEach(function (sourceFileName) {
            /*istanbul ignore next*/_this.map.setSourceContent(sourceFileName, code[sourceFileName]);
          });
        }
      } else {
        this.map = null;
      }
    }

    /**
     * Get the sourcemap.
     */

    SourceMap.prototype.get = function get() {
      var map = this.map;
      if (map) {
        return map.toJSON();
      } else {
        return map;
      }
    };

    /**
     * Mark the current generated position with a source position. May also be passed null line/column
     * values to insert a mapping to nothing.
     */

    SourceMap.prototype.mark = function mark(sourcePos) {
      var map = this.map;
      if (!map) return; // no source map

      var position = this.position;

      // Adding an empty mapping at the start of a generated line just clutters the map.
      if (this._lastGenLine !== position.line && sourcePos.line === null) return;

      // If this mapping points to the same source location as the last one, we can ignore it since
      // the previous one covers it.
      if (this._lastGenLine === position.line && this._lastSourceLine === sourcePos.line && this._lastSourceColumn === sourcePos.column) {
        return;
      }

      this._lastGenLine = position.line;
      this._lastSourceLine = sourcePos.line;
      this._lastSourceColumn = sourcePos.column;

      map.addMapping({
        generated: {
          line: position.line,
          column: position.column
        },
        source: sourcePos.line == null ? null : sourcePos.filename || this.opts.sourceFileName,
        original: sourcePos.line == null ? null : {
          line: sourcePos.line,
          column: sourcePos.column
        }
      });
    };

    return SourceMap;
  }();

  /*istanbul ignore next*/exports.default = SourceMap;
  /*istanbul ignore next*/module.exports = exports["default"];

/***/ },
/* 555 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;

  var _classCallCheck2 = __webpack_require__(97);

  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Get whitespace around tokens.
   */

  var Whitespace = function () {
    function /*istanbul ignore next*/Whitespace(tokens) {
      /*istanbul ignore next*/(0, _classCallCheck3.default)(this, Whitespace);

      this.tokens = tokens;
      this.used = {};
    }

    /**
     * Count all the newlines before a node.
     */

    Whitespace.prototype.getNewlinesBefore = function getNewlinesBefore(node) {
      var startToken = /*istanbul ignore next*/void 0;
      var endToken = /*istanbul ignore next*/void 0;
      var tokens = this.tokens;

      var index = this._findToken(function (token) /*istanbul ignore next*/{
        return token.start - node.start;
      }, 0, tokens.length);
      if (index >= 0) {
        while (index && node.start === tokens[index - 1].start) /*istanbul ignore next*/{
          --index;
        }startToken = tokens[index - 1];
        endToken = tokens[index];
      }

      return this.getNewlinesBetween(startToken, endToken);
    };

    /**
     * Count all the newlines after a node.
     */

    Whitespace.prototype.getNewlinesAfter = function getNewlinesAfter(node) {
      var startToken = /*istanbul ignore next*/void 0;
      var endToken = /*istanbul ignore next*/void 0;
      var tokens = this.tokens;

      var index = this._findToken(function (token) /*istanbul ignore next*/{
        return token.end - node.end;
      }, 0, tokens.length);
      if (index >= 0) {
        while (index && node.end === tokens[index - 1].end) /*istanbul ignore next*/{
          --index;
        }startToken = tokens[index];
        endToken = tokens[index + 1];
        if (endToken.type.label === ",") endToken = tokens[index + 2];
      }

      if (endToken && endToken.type.label === "eof") {
        return 1;
      } else {
        var lines = this.getNewlinesBetween(startToken, endToken);
        if (node.type === "CommentLine" && !lines) {
          // line comment
          return 1;
        } else {
          return lines;
        }
      }
    };

    /**
     * Count all the newlines between two tokens.
     */

    Whitespace.prototype.getNewlinesBetween = function getNewlinesBetween(startToken, endToken) {
      if (!endToken || !endToken.loc) return 0;

      var start = startToken ? startToken.loc.end.line : 1;
      var end = endToken.loc.start.line;
      var lines = 0;

      for (var line = start; line < end; line++) {
        if (typeof this.used[line] === "undefined") {
          this.used[line] = true;
          lines++;
        }
      }

      return lines;
    };

    /**
     * Find a token between start and end.
     */

    Whitespace.prototype._findToken = function _findToken(test, start, end) {
      if (start >= end) return -1;
      var middle = start + end >>> 1;
      var match = test(this.tokens[middle]);
      if (match < 0) {
        return this._findToken(test, middle + 1, end);
      } else if (match > 0) {
        return this._findToken(test, start, middle);
      } else if (match === 0) {
        return middle;
      }
      return -1;
    };

    return Whitespace;
  }();

  /*istanbul ignore next*/exports.default = Whitespace;
  /*istanbul ignore next*/module.exports = exports["default"];

/***/ },
/* 556 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;

  var /*istanbul ignore next*/_babelTemplate = __webpack_require__(287);

  /*istanbul ignore next*/
  var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var helpers = {}; /* eslint max-len: 0 */

  /*istanbul ignore next*/exports.default = helpers;


  helpers.typeof = /*istanbul ignore next*/(0, _babelTemplate2.default)( /*istanbul ignore next*/"\n  (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\")\n    ? function (obj) { return typeof obj; }\n    : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n");

  helpers.jsx = /*istanbul ignore next*/(0, _babelTemplate2.default)( /*istanbul ignore next*/"\n  (function () {\n    var REACT_ELEMENT_TYPE = (typeof Symbol === \"function\" && Symbol.for && Symbol.for(\"react.element\")) || 0xeac7;\n\n    return function createRawReactElement (type, props, key, children) {\n      var defaultProps = type && type.defaultProps;\n      var childrenLength = arguments.length - 3;\n\n      if (!props && childrenLength !== 0) {\n        // If we're going to assign props.children, we create a new object now\n        // to avoid mutating defaultProps.\n        props = {};\n      }\n      if (props && defaultProps) {\n        for (var propName in defaultProps) {\n          if (props[propName] === void 0) {\n            props[propName] = defaultProps[propName];\n          }\n        }\n      } else if (!props) {\n        props = defaultProps || {};\n      }\n\n      if (childrenLength === 1) {\n        props.children = children;\n      } else if (childrenLength > 1) {\n        var childArray = Array(childrenLength);\n        for (var i = 0; i < childrenLength; i++) {\n          childArray[i] = arguments[i + 3];\n        }\n        props.children = childArray;\n      }\n\n      return {\n        $$typeof: REACT_ELEMENT_TYPE,\n        type: type,\n        key: key === undefined ? null : '' + key,\n        ref: null,\n        props: props,\n        _owner: null,\n      };\n    };\n\n  })()\n");

  helpers.asyncToGenerator = /*istanbul ignore next*/(0, _babelTemplate2.default)( /*istanbul ignore next*/"\n  (function (fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              return step(\"next\", value);\n            }, function (err) {\n              return step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  })\n");

  helpers.classCallCheck = /*istanbul ignore next*/(0, _babelTemplate2.default)( /*istanbul ignore next*/"\n  (function (instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  });\n");

  helpers.createClass = /*istanbul ignore next*/(0, _babelTemplate2.default)( /*istanbul ignore next*/"\n  (function() {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i ++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  })()\n");

  helpers.defineEnumerableProperties = /*istanbul ignore next*/(0, _babelTemplate2.default)( /*istanbul ignore next*/"\n  (function (obj, descs) {\n    for (var key in descs) {\n      var desc = descs[key];\n      desc.configurable = desc.enumerable = true;\n      if (\"value\" in desc) desc.writable = true;\n      Object.defineProperty(obj, key, desc);\n    }\n    return obj;\n  })\n");

  helpers.defaults = /*istanbul ignore next*/(0, _babelTemplate2.default)( /*istanbul ignore next*/"\n  (function (obj, defaults) {\n    var keys = Object.getOwnPropertyNames(defaults);\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var value = Object.getOwnPropertyDescriptor(defaults, key);\n      if (value && value.configurable && obj[key] === undefined) {\n        Object.defineProperty(obj, key, value);\n      }\n    }\n    return obj;\n  })\n");

  helpers.defineProperty = /*istanbul ignore next*/(0, _babelTemplate2.default)( /*istanbul ignore next*/"\n  (function (obj, key, value) {\n    // Shortcircuit the slow defineProperty path when possible.\n    // We are trying to avoid issues where setters defined on the\n    // prototype cause side effects under the fast path of simple\n    // assignment. By checking for existence of the property with\n    // the in operator, we can optimize most of this overhead away.\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n    return obj;\n  });\n");

  helpers.extends = /*istanbul ignore next*/(0, _babelTemplate2.default)( /*istanbul ignore next*/"\n  Object.assign || (function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  })\n");

  helpers.get = /*istanbul ignore next*/(0, _babelTemplate2.default)( /*istanbul ignore next*/"\n  (function get(object, property, receiver) {\n    if (object === null) object = Function.prototype;\n\n    var desc = Object.getOwnPropertyDescriptor(object, property);\n\n    if (desc === undefined) {\n      var parent = Object.getPrototypeOf(object);\n\n      if (parent === null) {\n        return undefined;\n      } else {\n        return get(parent, property, receiver);\n      }\n    } else if (\"value\" in desc) {\n      return desc.value;\n    } else {\n      var getter = desc.get;\n\n      if (getter === undefined) {\n        return undefined;\n      }\n\n      return getter.call(receiver);\n    }\n  });\n");

  helpers.inherits = /*istanbul ignore next*/(0, _babelTemplate2.default)( /*istanbul ignore next*/"\n  (function (subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  })\n");

  helpers.instanceof = /*istanbul ignore next*/(0, _babelTemplate2.default)( /*istanbul ignore next*/"\n  (function (left, right) {\n    if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n      return right[Symbol.hasInstance](left);\n    } else {\n      return left instanceof right;\n    }\n  });\n");

  helpers.interopRequireDefault = /*istanbul ignore next*/(0, _babelTemplate2.default)( /*istanbul ignore next*/"\n  (function (obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n  })\n");

  helpers.interopRequireWildcard = /*istanbul ignore next*/(0, _babelTemplate2.default)( /*istanbul ignore next*/"\n  (function (obj) {\n    if (obj && obj.__esModule) {\n      return obj;\n    } else {\n      var newObj = {};\n      if (obj != null) {\n        for (var key in obj) {\n          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n        }\n      }\n      newObj.default = obj;\n      return newObj;\n    }\n  })\n");

  helpers.newArrowCheck = /*istanbul ignore next*/(0, _babelTemplate2.default)( /*istanbul ignore next*/"\n  (function (innerThis, boundThis) {\n    if (innerThis !== boundThis) {\n      throw new TypeError(\"Cannot instantiate an arrow function\");\n    }\n  });\n");

  helpers.objectDestructuringEmpty = /*istanbul ignore next*/(0, _babelTemplate2.default)( /*istanbul ignore next*/"\n  (function (obj) {\n    if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n  });\n");

  helpers.objectWithoutProperties = /*istanbul ignore next*/(0, _babelTemplate2.default)( /*istanbul ignore next*/"\n  (function (obj, keys) {\n    var target = {};\n    for (var i in obj) {\n      if (keys.indexOf(i) >= 0) continue;\n      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n      target[i] = obj[i];\n    }\n    return target;\n  })\n");

  helpers.possibleConstructorReturn = /*istanbul ignore next*/(0, _babelTemplate2.default)( /*istanbul ignore next*/"\n  (function (self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n  });\n");

  helpers.selfGlobal = /*istanbul ignore next*/(0, _babelTemplate2.default)( /*istanbul ignore next*/"\n  typeof global === \"undefined\" ? self : global\n");

  helpers.set = /*istanbul ignore next*/(0, _babelTemplate2.default)( /*istanbul ignore next*/"\n  (function set(object, property, value, receiver) {\n    var desc = Object.getOwnPropertyDescriptor(object, property);\n\n    if (desc === undefined) {\n      var parent = Object.getPrototypeOf(object);\n\n      if (parent !== null) {\n        set(parent, property, value, receiver);\n      }\n    } else if (\"value\" in desc && desc.writable) {\n      desc.value = value;\n    } else {\n      var setter = desc.set;\n\n      if (setter !== undefined) {\n        setter.call(receiver, value);\n      }\n    }\n\n    return value;\n  });\n");

  helpers.slicedToArray = /*istanbul ignore next*/(0, _babelTemplate2.default)( /*istanbul ignore next*/"\n  (function () {\n    // Broken out into a separate function to avoid deoptimizations due to the try/catch for the\n    // array iterator case.\n    function sliceIterator(arr, i) {\n      // this is an expanded form of `for...of` that properly supports abrupt completions of\n      // iterators etc. variable names have been minimised to reduce the size of this massive\n      // helper. sometimes spec compliancy is annoying :(\n      //\n      // _n = _iteratorNormalCompletion\n      // _d = _didIteratorError\n      // _e = _iteratorError\n      // _i = _iterator\n      // _s = _step\n\n      var _arr = [];\n      var _n = true;\n      var _d = false;\n      var _e = undefined;\n      try {\n        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n          _arr.push(_s.value);\n          if (i && _arr.length === i) break;\n        }\n      } catch (err) {\n        _d = true;\n        _e = err;\n      } finally {\n        try {\n          if (!_n && _i[\"return\"]) _i[\"return\"]();\n        } finally {\n          if (_d) throw _e;\n        }\n      }\n      return _arr;\n    }\n\n    return function (arr, i) {\n      if (Array.isArray(arr)) {\n        return arr;\n      } else if (Symbol.iterator in Object(arr)) {\n        return sliceIterator(arr, i);\n      } else {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n      }\n    };\n  })();\n");

  helpers.slicedToArrayLoose = /*istanbul ignore next*/(0, _babelTemplate2.default)( /*istanbul ignore next*/"\n  (function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      var _arr = [];\n      for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {\n        _arr.push(_step.value);\n        if (i && _arr.length === i) break;\n      }\n      return _arr;\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  });\n");

  helpers.taggedTemplateLiteral = /*istanbul ignore next*/(0, _babelTemplate2.default)( /*istanbul ignore next*/"\n  (function (strings, raw) {\n    return Object.freeze(Object.defineProperties(strings, {\n        raw: { value: Object.freeze(raw) }\n    }));\n  });\n");

  helpers.taggedTemplateLiteralLoose = /*istanbul ignore next*/(0, _babelTemplate2.default)( /*istanbul ignore next*/"\n  (function (strings, raw) {\n    strings.raw = raw;\n    return strings;\n  });\n");

  helpers.temporalRef = /*istanbul ignore next*/(0, _babelTemplate2.default)( /*istanbul ignore next*/"\n  (function (val, name, undef) {\n    if (val === undef) {\n      throw new ReferenceError(name + \" is not defined - temporal dead zone\");\n    } else {\n      return val;\n    }\n  })\n");

  helpers.temporalUndefined = /*istanbul ignore next*/(0, _babelTemplate2.default)( /*istanbul ignore next*/"\n  ({})\n");

  helpers.toArray = /*istanbul ignore next*/(0, _babelTemplate2.default)( /*istanbul ignore next*/"\n  (function (arr) {\n    return Array.isArray(arr) ? arr : Array.from(arr);\n  });\n");

  helpers.toConsumableArray = /*istanbul ignore next*/(0, _babelTemplate2.default)( /*istanbul ignore next*/"\n  (function (arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n      return arr2;\n    } else {\n      return Array.from(arr);\n    }\n  });\n");
  /*istanbul ignore next*/module.exports = exports["default"];

/***/ },
/* 557 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(process) {'use strict';

  var assign = __webpack_require__(100);
  var babel = __webpack_require__(529);
  var loaderUtils = __webpack_require__(1077);
  var cache = __webpack_require__(731);
  var exists = __webpack_require__(387)();
  var read = __webpack_require__(388)();
  var resolveRc = __webpack_require__(732);
  var pkg = __webpack_require__(1074);
  var path = __webpack_require__(134);

  var transpile = function(source, options) {
    var result = babel.transform(source, options);
    var code = result.code;
    var map = result.map;

    if (map && (!map.sourcesContent || !map.sourcesContent.length)) {
      map.sourcesContent = [source];
    }

    return {
      code: code,
      map: map,
    };
  };

  module.exports = function(source, inputSourceMap) {
    var result = {};

    // Handle filenames (#106)
    var webpackRemainingChain = loaderUtils.getRemainingRequest(this).split('!');
    var filename = webpackRemainingChain[webpackRemainingChain.length - 1];

    // Handle options
    var globalOptions = this.options.babel || {};
    var loaderOptions = loaderUtils.parseQuery(this.query);
    var userOptions = assign({}, globalOptions, loaderOptions);
    var defaultOptions = {
      inputSourceMap: inputSourceMap,
      sourceRoot: process.cwd(),
      filename: filename,
      cacheIdentifier: JSON.stringify({
        'babel-loader': pkg.version,
        'babel-core': babel.version,
        babelrc: exists(userOptions.babelrc) ?
            read(userOptions.babelrc) :
            resolveRc(process.cwd()),
        env: process.env.BABEL_ENV || ("development"),
      }),
    };

    var options = assign({}, defaultOptions, userOptions);

    if (userOptions.sourceMap === undefined) {
      options.sourceMap = this.sourceMap;
    }

    if (options.sourceFileName === undefined) {
      options.sourceFileName = path.relative(
          options.sourceRoot,
          options.filename
      );
    }

    var cacheDirectory = options.cacheDirectory;
    var cacheIdentifier = options.cacheIdentifier;

    delete options.cacheDirectory;
    delete options.cacheIdentifier;

    this.cacheable();

    if (cacheDirectory) {
      var callback = this.async();
      return cache({
        directory: cacheDirectory,
        identifier: cacheIdentifier,
        source: source,
        options: options,
        transform: transpile,
      }, function(err, result) {
        if (err) { return callback(err); }
        return callback(null, result.code, result.map);
      });
    }

    result = transpile(source, options);
    this.callback(null, result.code, result.map);
  };

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(111)))

/***/ },
/* 558 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react = __webpack_require__(1);

  var _react2 = _interopRequireDefault(_react);

  __webpack_require__(1043);

  var _Navigation = __webpack_require__(559);

  var _Navigation2 = _interopRequireDefault(_Navigation);

  var _Sidebar = __webpack_require__(560);

  var _Sidebar2 = _interopRequireDefault(_Sidebar);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function Layout(_ref) {
    var children = _ref.children;

    return _react2.default.createElement(
      "div",
      { className: "root" },
      _react2.default.createElement(_Navigation2.default, null),
      _react2.default.createElement(
        "div",
        { className: "content" },
        _react2.default.createElement(
          "div",
          { className: "layout" },
          children
        ),
        _react2.default.createElement(_Sidebar2.default, null)
      )
    );
  }

  Layout.propTypes = {
    children: _react.PropTypes.element.isRequired
  };

  exports.default = Layout;

/***/ },
/* 559 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react = __webpack_require__(1);

  var _react2 = _interopRequireDefault(_react);

  __webpack_require__(1045);

  var _Link = __webpack_require__(5);

  var _Link2 = _interopRequireDefault(_Link);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var Icon = function Icon(_ref) {
    var type = _ref.type;
    return _react2.default.createElement("i", { className: "fa fa-" + type + " fa-lg fa-fw" });
  };
  Icon.propTypes = { type: _react.PropTypes.string.isRequired };

  function Navigation() {
    return _react2.default.createElement(
      "nav",
      { className: "navbar", role: "navigation" },
      _react2.default.createElement(
        _Link2.default,
        { className: "navbar__link", to: "/" },
        _react2.default.createElement(Icon, { type: "globe" }),
        "Lucas The Nomad"
      ),
      _react2.default.createElement(
        _Link2.default,
        { className: "navbar__link--hideable", to: "https://www.facebook.com/lucasparry" },
        _react2.default.createElement(Icon, { type: "facebook" }),
        "Facebook"
      ),
      _react2.default.createElement(
        _Link2.default,
        { className: "navbar__link--hideable", to: "https://www.twitter.com/lucas_parry" },
        _react2.default.createElement(Icon, { type: "twitter" }),
        "Twitter"
      ),
      _react2.default.createElement(
        _Link2.default,
        { className: "navbar__link--hideable", to: "https://www.flickr.com/photos/lucasthenomad/" },
        _react2.default.createElement(Icon, { type: "flickr" }),
        "Flickr"
      ),
      _react2.default.createElement(
        _Link2.default,
        { className: "navbar__link--hideable", to: "https://instagram.com/lparry" },
        _react2.default.createElement(Icon, { type: "instagram" }),
        "Instagram"
      ),
      _react2.default.createElement(
        _Link2.default,
        { className: "navbar__link--hideable", to: "https://www.couchsurfing.org/people/lucasthenomad/" },
        _react2.default.createElement(Icon, { type: "suitcase" }),
        "Couchsurfing"
      ),
      _react2.default.createElement(
        _Link2.default,
        { className: "navbar__link--hideable", to: "/map" },
        _react2.default.createElement(Icon, { type: "map-marker" }),
        "Map"
      )
    );
  }

  exports.default = Navigation;

/***/ },
/* 560 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react = __webpack_require__(1);

  var _react2 = _interopRequireDefault(_react);

  __webpack_require__(1046);

  var _TagCloud = __webpack_require__(16);

  var _TagCloud2 = _interopRequireDefault(_TagCloud);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var allTags = ["Abandoned", "Africa", "Airplanes", "Airports", "Alcatraz", "Alhambra", "Andalusia", "Antigua", "Athens", "Bags", "Barcelona", "Bath", "Beer", "Berlin", "Bikes", "Blog", "Boats", "Bristol", "Business", "Cambodia", "Cano Island", "Cape Town", "Caves", "Chicken Buses", "Chimpanzees", "Christmas", "Copan", "Corcovado", "Cordoba", "Costa Rica", "Cu Chi Tunnels", "Diving", "Dogs", "Earth Lodge", "Edinburgh", "England", "Festivals", "Finca Mia", "Flores", "Flying", "Germany", "Gorillas", "Graffiti", "Granada", "Greece", "Guatemala", "Guatemala City", "HCMC", "Hiking", "Homestay", "Honduras", "Horseback Riding", "Hot Springs", "Humblebrag", "Ikaria", "India", "Inspiration", "Introspection", "Istanbul", "Jinja", "Jinotega", "Johannesburg", "Kenya", "Koh Tao", "La Boquita", "La Mariposa", "Lago Yejoa", "Laguna Apoyo", "Lake Atitlan", "Lake Nakuru", "Lanquin", "Leon", "Little Corn Island", "Livingston", "London", "Malaga", "Managua", "Masai Mara", "Meditation", "Mediterranean", "Melbourne", "Monkeys", "Montezuma", "Motorbikes", "Mumbai", "Museums", "Mykonos", "NYE", "Ngorongoro Crater", "Nicaragua", "Nicoya Peninsula", "Nottingham", "Ometepe", "Outdoors", "Packing", "Panajachel", "Phu Quoc", "Poi", "Pre Trip", "Quezaltenango", "Quote", "Retreat", "Retrospective", "Rio Dulce", "Roatan", "Ruins", "Rwanda", "Salsa", "Samos", "San Francisco", "San Juan", "San Marcos", "San Pedro", "Santa Cruz", "Santa Teresa", "Santiago", "Scotland", "Security Theater", "Semuc Champey", "Serengeti", "Seville", "Signs", "Singapore", "Somoto Canyon", "South Africa", "Spain", "Spanish Schools", "Stonehenge", "Streamlining", "Surfing", "Syros", "Tanzania", "Tapas", "Thailand", "Theme Park", "Tikal", "Trains", "Travelling", "Turkey", "USA", "Uganda", "Utila", "Uvita", "Victoria Falls", "Vietnam", "Visa Run", "Volcan Masaya", "Volcanoes", "Waterfalls", "White Water Rafting", "Xela", "Yoga", "Zanzibar"];

  var Well = function Well(_ref) {
    var className = _ref.className;
    var children = _ref.children;
    return _react2.default.createElement(
      "div",
      { className: "sidebar__well " + className },
      children
    );
  };
  Well.defaultProps = {
    className: ""
  };

  var Sidebar = function Sidebar() {
    return _react2.default.createElement(
      "div",
      { className: "sidebar" },
      _react2.default.createElement(
        Well,
        { className: "sidebar__about" },
        _react2.default.createElement(
          "h3",
          null,
          _react2.default.createElement("i", { className: "fa fa-info-circle fa-lg fa-fw" }),
          " About Lucas"
        ),
        _react2.default.createElement("img", {
          alt: "avatar",
          src: "/assets/images/avatar.jpg",
          srcSet: "/assets/images/avatar.jpg 1x, /assets/images/avatar@2x.jpg 2x"
        }),
        _react2.default.createElement(
          "p",
          null,
          "An account of Lucas' epic travels, exciting adventures, challenging misfortunes and lucky breaks. They rarely happen with to any real plan, but generally these kinds of things just take care of themselves and I just enjoy the ride."
        ),
        _react2.default.createElement(
          "p",
          null,
          "Lucas is actually back home in Melbourne now, but he's still got a years worth of photos and stories to sort through, so stay tuned!"
        )
      ),
      _react2.default.createElement(
        Well,
        null,
        _react2.default.createElement(
          "h3",
          null,
          _react2.default.createElement("i", { className: "fa fa-tags fa-lg fa-fw" }),
          " Tags"
        ),
        _react2.default.createElement(_TagCloud2.default, { className: "sidebar__tagBox", noTitle: true, tags: allTags })
      )
    );
  };

  exports.default = Sidebar;

/***/ },
/* 561 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _react = __webpack_require__(1);

  var _react2 = _interopRequireDefault(_react);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _class = function (_Component) {
    _inherits(_class, _Component);

    function _class() {
      _classCallCheck(this, _class);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(_class).apply(this, arguments));
    }

    _createClass(_class, [{
      key: 'render',
      value: function render() {
        return _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(
            'h1',
            null,
            'Not Found'
          ),
          _react2.default.createElement(
            'p',
            null,
            'The page you\'re looking for was not found.'
          )
        );
      }
    }]);

    return _class;
  }(_react.Component);

  exports.default = _class;

/***/ },
/* 562 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _react = __webpack_require__(1);

  var _react2 = _interopRequireDefault(_react);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _class = function (_Component) {
    _inherits(_class, _Component);

    function _class() {
      _classCallCheck(this, _class);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(_class).apply(this, arguments));
    }

    _createClass(_class, [{
      key: 'render',
      value: function render() {
        return _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(
            'h1',
            null,
            'Error'
          ),
          _react2.default.createElement(
            'pre',
            null,
            this.props.error ? this.props.error.message + '\n\n' + this.props.error.stack : 'A critical error occurred.'
          )
        );
      }
    }]);

    return _class;
  }(_react.Component);

  _class.propTypes = {
    error: _react.PropTypes.instanceOf(Error)
  };
  exports.default = _class;

/***/ },
/* 563 */,
/* 564 */,
/* 565 */,
/* 566 */,
/* 567 */,
/* 568 */,
/* 569 */,
/* 570 */,
/* 571 */,
/* 572 */,
/* 573 */,
/* 574 */,
/* 575 */,
/* 576 */,
/* 577 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react = __webpack_require__(1);

  var _react2 = _interopRequireDefault(_react);

  var _reactDom = __webpack_require__(1213);

  var _reactDom2 = _interopRequireDefault(_reactDom);

  var _ExecutionEnvironment = __webpack_require__(109);

  var _Location = __webpack_require__(386);

  var _Location2 = _interopRequireDefault(_Location);

  var _Layout = __webpack_require__(558);

  var _Layout2 = _interopRequireDefault(_Layout);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

  __webpack_require__(733);
  __webpack_require__(734);


  var routes = {
    '/404': function _() {
      return __webpack_require__(561).default;
    }, '/500': function _() {
      return __webpack_require__(562).default;
    }, '/2013/03/26/twenty-years-from-now': function twentyYearsFromNow() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(231, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(19)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2013/04/08/the-little-things-that-make-up-a-life': function theLittleThingsThatMakeUpALife() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(230, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(20)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2013/04/22/target-40-litres': function target40Litres() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(223, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(21)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2013/05/07/last-minute-bag-choices': function lastMinuteBagChoices() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(229, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(22)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2013/05/12/it-s-go-time': function itSGoTime() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(228, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(23)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2013/05/14/day-1-melbourne-to-saigon': function day1MelbourneToSaigon() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(222, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(24)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2013/05/22/day-2-ho-chi-minh-city': function day2HoChiMinhCity() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(221, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(25)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2013/05/22/day-3-cu-chi-tunnels': function day3CuChiTunnels() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(220, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(26)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2013/05/22/day-4-motorbikes-in-hcmc': function day4MotorbikesInHcmc() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(219, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(27)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2013/05/24/last-day-in-hcmc': function lastDayInHcmc() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(227, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(28)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2013/05/29/ha-ha-business': function haHaBusiness() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(176, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(29)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2013/05/30/phu-qouc-island-vietnam': function phuQoucIslandVietnam() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(175, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(30)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2013/06/14/mountain-biking-in-siem-reap': function mountainBikingInSiemReap() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(174, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(31)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2013/06/27/airport-security-in-india': function airportSecurityInIndia() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(173, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(32)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2013/06/29/wake-up-call': function wakeUpCall() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(226, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(33)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2013/06/30/thailand': function thailand() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(172, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(34)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2013/08/13/frustration-india-part-1': function frustrationIndiaPart1() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(218, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(35)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2013/08/19/train-stations-parties-until-the-little-hours-of-the-night-india-part-2': function trainStationsPartiesUntilTheLittleHoursOfTheNightIndiaPart2() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(217, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(36)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2013/08/26/three-girls-a-guy-and-a-tour-guide-part-3': function threeGirlsAGuyAndATourGuidePart3() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(216, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(37)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2013/09/02/india-flying-solo-at-one-with-the-chaos-india-part-4': function indiaFlyingSoloAtOneWithTheChaosIndiaPart4() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(215, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(38)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2013/09/03/travelling-light-or-not': function travellingLightOrNot() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(225, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(39)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2013/09/09/johannesburg-to-victoria-falls-and-back': function johannesburgToVictoriaFallsAndBack() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(214, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(40)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2013/09/16/south-africa': function southAfrica() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(170, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(41)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2013/09/23/zanzibar-tanzania': function zanzibarTanzania() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(169, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(42)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2013/09/30/serengeti-national-park-and-the-ngorongoro-crater': function serengetiNationalParkAndTheNgorongoroCrater() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(213, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(43)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2013/10/07/kenya-the-masai-mara-and-lake-nakuru': function kenyaTheMasaiMaraAndLakeNakuru() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(212, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(44)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2013/11/01/uganda-white-water-rafting-tracking-chimps-and-teaching-orphans': function ugandaWhiteWaterRaftingTrackingChimpsAndTeachingOrphans() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(211, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(45)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2013/11/15/the-signs-and-sights-of-the-streets-of-east-africa': function theSignsAndSightsOfTheStreetsOfEastAfrica() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(210, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(46)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2013/11/24/rwanda-gorillas-genocide': function rwandaGorillasGenocide() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(209, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(47)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2013/12/05/spreepark-berlin': function spreeparkBerlin() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(208, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(48)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2014/01/01/a-new-blog-for-the-new-year': function aNewBlogForTheNewYear() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(224, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(49)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2014/01/03/istanbul-turkey': function istanbulTurkey() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(207, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(50)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2014/02/06/turkey': function turkey() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(206, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(51)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2014/02/14/the-greek-islands-and-athens': function theGreekIslandsAndAthens() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(205, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(52)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2014/03/02/england-the-home-of-real-ale': function englandTheHomeOfRealAle() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(204, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(53)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2014/04/06/berlin-part-1': function berlinPart1() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(203, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(54)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2014/04/15/berlin-part-2': function berlinPart2() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(202, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(55)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2014/04/23/berlin-part-3': function berlinPart3() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(201, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(56)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2014/05/03/barcelona-spain': function barcelonaSpain() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(200, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(57)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2014/05/13/happy-travel-birthday-to-me': function happyTravelBirthdayToMe() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(171, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(58)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2014/05/26/granada': function granada() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(199, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(59)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2014/06/06/spain-the-rest-of-andalusia': function spainTheRestOfAndalusia() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(198, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(60)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2014/06/22/christmas-and-nye-in-the-uk': function christmasAndNyeInTheUk() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(197, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(61)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2014/07/01/poi-love-camp': function poiLoveCamp() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(196, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(62)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2014/07/18/corcovado-national-park-costa-rica': function corcovadoNationalParkCostaRica() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(195, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(63)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2014/07/29/uvita-costa-rica': function uvitaCostaRica() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(168, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(64)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2014/07/31/nicoya-peninsula-costa-rica': function nicoyaPeninsulaCostaRica() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(194, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(65)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2014/09/10/la-mariposa-spanish-school-nicaragua': function laMariposaSpanishSchoolNicaragua() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(193, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(66)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2014/10/09/excursion-highlights-from-la-mariposa': function excursionHighlightsFromLaMariposa() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(192, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(67)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2014/10/30/nicaragua-all-over-the-place': function nicaraguaAllOverThePlace() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(191, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(68)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2014/11/17/little-corn-island-leon-and-a-visa-run': function littleCornIslandLeonAndAVisaRun() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(190, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(69)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2014/12/16/the-bay-islands-of-honduras': function theBayIslandsOfHonduras() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(189, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(70)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2015/01/03/firedrums-2014-and-san-francisco': function firedrums2014AndSanFrancisco() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(188, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(71)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2015/02/26/honduras-mainland-lago-yejoa-copan': function hondurasMainlandLagoYejoaCopan() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(187, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(72)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2015/03/30/antigua-guatemala': function antiguaGuatemala() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(186, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(73)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2015/04/20/san-marcos-la-laguna-lake-atitlan-guatemala': function sanMarcosLaLagunaLakeAtitlanGuatemala() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(167, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(74)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2015/04/27/quezaltenango-xela-guatemala': function quezaltenangoXelaGuatemala() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(185, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(75)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2015/05/04/revisiting-antigua-and-earth-lodge': function revisitingAntiguaAndEarthLodge() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(184, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(76)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2015/05/11/more-schooling-in-xela': function moreSchoolingInXela() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(183, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(77)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2015/05/13/two-years-later': function twoYearsLater() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(182, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(78)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2015/05/21/back-to-lake-atitlan': function backToLakeAtitlan() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(181, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(79)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2015/05/26/semuc-champey': function semucChampey() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(180, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(80)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2015/06/01/tikal': function tikal() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(179, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(81)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2015/06/11/rio-dulce-livingston-and-trying-to-leave-guatemala': function rioDulceLivingstonAndTryingToLeaveGuatemala() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(178, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(82)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/2015/08/17/san-francisco-before-the-burn': function sanFranciscoBeforeTheBurn() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(177, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(83)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/': function _() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(13, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(576)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/map': function map() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(232, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(563)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/page/10': function page10() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(12, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(564)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/page/11': function page11() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(11, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(565)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/page/12': function page12() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(10, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(566)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/page/13': function page13() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(9, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(567)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/page/2': function page2() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(8, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(568)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/page/3': function page3() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(7, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(569)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/page/4': function page4() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(6, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(570)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/page/5': function page5() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(5, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(571)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/page/6': function page6() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(4, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(572)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/page/7': function page7() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(3, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(573)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/page/8': function page8() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(2, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(574)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/page/9': function page9() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(1, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(575)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/abandoned': function tagsAbandoned() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(166, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(578)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/africa': function tagsAfrica() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(165, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(579)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/airplanes': function tagsAirplanes() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(164, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(580)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/airports': function tagsAirports() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(163, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(581)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/alcatraz': function tagsAlcatraz() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(162, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(582)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/alhambra': function tagsAlhambra() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(161, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(583)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/andalusia': function tagsAndalusia() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(160, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(584)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/antigua': function tagsAntigua() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(159, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(585)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/athens': function tagsAthens() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(158, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(586)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/bags': function tagsBags() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(157, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(587)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/barcelona': function tagsBarcelona() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(156, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(588)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/bath': function tagsBath() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(155, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(589)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/beer': function tagsBeer() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(154, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(590)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/berlin': function tagsBerlin() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(153, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(591)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/bikes': function tagsBikes() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(152, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(592)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/blog': function tagsBlog() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(151, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(593)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/boats': function tagsBoats() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(150, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(594)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/bristol': function tagsBristol() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(149, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(595)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/business': function tagsBusiness() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(148, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(596)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/cambodia': function tagsCambodia() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(147, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(597)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/cano-island': function tagsCanoIsland() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(146, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(598)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/cape-town': function tagsCapeTown() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(145, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(599)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/caves': function tagsCaves() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(144, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(600)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/chicken-buses': function tagsChickenBuses() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(143, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(601)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/chimpanzees': function tagsChimpanzees() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(142, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(602)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/christmas': function tagsChristmas() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(141, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(603)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/copan': function tagsCopan() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(140, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(604)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/corcovado': function tagsCorcovado() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(139, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(605)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/cordoba': function tagsCordoba() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(138, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(606)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/costa-rica': function tagsCostaRica() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(137, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(607)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/cu-chi-tunnels': function tagsCuChiTunnels() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(136, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(608)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/diving': function tagsDiving() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(135, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(609)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/dogs': function tagsDogs() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(134, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(610)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/earth-lodge': function tagsEarthLodge() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(133, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(611)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/edinburgh': function tagsEdinburgh() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(132, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(612)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/england': function tagsEngland() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(131, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(613)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/festivals': function tagsFestivals() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(130, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(614)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/finca-mia': function tagsFincaMia() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(129, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(615)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/flores': function tagsFlores() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(128, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(616)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/flying': function tagsFlying() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(127, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(617)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/germany': function tagsGermany() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(126, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(618)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/gorillas': function tagsGorillas() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(125, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(619)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/graffiti': function tagsGraffiti() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(124, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(620)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/granada': function tagsGranada() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(123, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(621)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/greece': function tagsGreece() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(122, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(622)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/guatemala-city': function tagsGuatemalaCity() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(121, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(623)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/guatemala': function tagsGuatemala() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(120, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(624)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/hcmc': function tagsHcmc() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(119, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(625)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/hiking': function tagsHiking() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(118, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(626)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/homestay': function tagsHomestay() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(117, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(627)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/honduras': function tagsHonduras() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(116, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(628)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/horseback-riding': function tagsHorsebackRiding() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(115, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(629)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/hot-springs': function tagsHotSprings() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(114, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(630)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/humblebrag': function tagsHumblebrag() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(113, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(631)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/ikaria': function tagsIkaria() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(112, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(632)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/india': function tagsIndia() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(111, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(633)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/inspiration': function tagsInspiration() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(110, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(634)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/introspection': function tagsIntrospection() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(109, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(635)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/istanbul': function tagsIstanbul() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(108, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(636)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/jinja': function tagsJinja() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(107, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(637)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/jinotega': function tagsJinotega() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(106, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(638)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/johannesburg': function tagsJohannesburg() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(105, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(639)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/kenya': function tagsKenya() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(104, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(640)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/koh-tao': function tagsKohTao() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(103, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(641)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/la-boquita': function tagsLaBoquita() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(102, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(642)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/la-mariposa': function tagsLaMariposa() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(101, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(643)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/lago-yejoa': function tagsLagoYejoa() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(100, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(644)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/laguna-apoyo': function tagsLagunaApoyo() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(99, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(645)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/lake-atitlan': function tagsLakeAtitlan() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(98, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(646)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/lake-nakuru': function tagsLakeNakuru() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(97, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(647)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/lanquin': function tagsLanquin() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(96, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(648)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/leon': function tagsLeon() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(95, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(649)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/little-corn-island': function tagsLittleCornIsland() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(94, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(650)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/livingston': function tagsLivingston() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(93, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(651)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/london': function tagsLondon() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(92, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(652)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/malaga': function tagsMalaga() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(91, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(653)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/managua': function tagsManagua() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(90, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(654)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/masai-mara': function tagsMasaiMara() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(89, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(655)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/meditation': function tagsMeditation() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(88, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(656)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/mediterranean': function tagsMediterranean() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(87, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(657)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/melbourne': function tagsMelbourne() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(86, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(658)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/monkeys': function tagsMonkeys() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(85, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(659)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/montezuma': function tagsMontezuma() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(84, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(660)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/motorbikes': function tagsMotorbikes() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(83, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(661)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/mumbai': function tagsMumbai() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(82, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(662)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/museums': function tagsMuseums() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(81, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(663)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/mykonos': function tagsMykonos() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(80, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(664)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/ngorongoro-crater': function tagsNgorongoroCrater() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(79, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(665)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/nicaragua': function tagsNicaragua() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(78, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(666)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/nicoya-peninsula': function tagsNicoyaPeninsula() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(77, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(667)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/nottingham': function tagsNottingham() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(76, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(668)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/nye': function tagsNye() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(75, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(669)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/ometepe': function tagsOmetepe() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(74, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(670)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/outdoors': function tagsOutdoors() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(73, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(671)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/packing': function tagsPacking() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(72, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(672)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/panajachel': function tagsPanajachel() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(71, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(673)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/phu-quoc': function tagsPhuQuoc() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(70, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(674)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/poi': function tagsPoi() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(69, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(675)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/pre-trip': function tagsPreTrip() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(68, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(676)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/quezaltenango': function tagsQuezaltenango() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(67, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(677)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/quote': function tagsQuote() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(66, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(678)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/retreat': function tagsRetreat() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(65, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(679)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/retrospective': function tagsRetrospective() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(64, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(680)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/rio-dulce': function tagsRioDulce() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(63, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(681)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/roatan': function tagsRoatan() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(62, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(682)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/ruins': function tagsRuins() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(61, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(683)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/rwanda': function tagsRwanda() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(60, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(684)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/salsa': function tagsSalsa() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(59, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(685)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/samos': function tagsSamos() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(58, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(686)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/san-francisco': function tagsSanFrancisco() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(57, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(687)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/san-juan': function tagsSanJuan() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(56, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(688)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/san-marcos': function tagsSanMarcos() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(55, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(689)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/san-pedro': function tagsSanPedro() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(54, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(690)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/santa-cruz': function tagsSantaCruz() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(53, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(691)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/santa-teresa': function tagsSantaTeresa() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(52, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(692)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/santiago': function tagsSantiago() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(51, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(693)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/scotland': function tagsScotland() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(50, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(694)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/security-theater': function tagsSecurityTheater() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(49, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(695)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/semuc-champey': function tagsSemucChampey() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(48, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(696)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/serengeti': function tagsSerengeti() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(47, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(697)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/seville': function tagsSeville() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(46, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(698)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/signs': function tagsSigns() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(45, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(699)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/singapore': function tagsSingapore() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(44, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(700)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/somoto-canyon': function tagsSomotoCanyon() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(43, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(701)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/south-africa': function tagsSouthAfrica() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(42, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(702)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/spain': function tagsSpain() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(41, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(703)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/spanish-schools': function tagsSpanishSchools() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(40, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(704)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/stonehenge': function tagsStonehenge() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(39, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(705)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/streamlining': function tagsStreamlining() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(38, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(706)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/surfing': function tagsSurfing() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(37, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(707)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/syros': function tagsSyros() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(36, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(708)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/tanzania': function tagsTanzania() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(35, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(709)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/tapas': function tagsTapas() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(34, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(710)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/thailand': function tagsThailand() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(33, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(711)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/theme-park': function tagsThemePark() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(32, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(712)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/tikal': function tagsTikal() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(31, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(713)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/trains': function tagsTrains() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(30, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(714)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/travelling': function tagsTravelling() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(29, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(715)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/turkey': function tagsTurkey() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(28, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(716)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/uganda': function tagsUganda() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(27, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(717)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/usa': function tagsUsa() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(26, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(718)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/utila': function tagsUtila() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(25, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(719)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/uvita': function tagsUvita() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(24, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(720)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/victoria-falls': function tagsVictoriaFalls() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(23, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(721)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/vietnam': function tagsVietnam() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(22, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(722)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/visa-run': function tagsVisaRun() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(21, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(723)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/volcan-masaya': function tagsVolcanMasaya() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(20, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(724)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/volcanoes': function tagsVolcanoes() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(19, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(725)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/waterfalls': function tagsWaterfalls() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(18, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(726)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/white-water-rafting': function tagsWhiteWaterRafting() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(17, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(727)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/xela': function tagsXela() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(16, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(728)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/yoga': function tagsYoga() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(15, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(729)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    }, '/tags/zanzibar': function tagsZanzibar() {
      return new Promise(function (resolve) {
        return __webpack_require__.e/* require */(14, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(730)]; (resolve.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
      }).then(function (x) {
        return x.default;
      }).catch(function () {
        return null;
      });
    } }; // Auto-generated on build. See tools/lib/routes-loader.js

  var route = function () {
    var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(path, callback) {
      var handler, component;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              handler = routes[path] || routes[path.replace(/\/$/, "")] || routes["/404"];
              _context.next = 3;
              return handler();

            case 3:
              component = _context.sent;
              _context.next = 6;
              return callback(_react2.default.createElement(
                _Layout2.default,
                null,
                _react2.default.createElement(component)
              ));

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, undefined);
    }));

    return function route(_x, _x2) {
      return ref.apply(this, arguments);
    };
  }();

  function run() {
    var _this = this;

    var container = document.getElementById("app");
    _Location2.default.listen(function (location) {
      route(location.pathname, function () {
        var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(component) {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  return _context2.abrupt("return", _reactDom2.default.render(component, container, function () {
                    // Track the page view event via Google Analytics
                    window.ga("send", "pageview");
                  }));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, _this);
        }));

        return function (_x3) {
          return ref.apply(this, arguments);
        };
      }());
    });
  }

  if (_ExecutionEnvironment.canUseDOM) {
    // Run the application when both DOM is ready and page content is loaded
    if (["complete", "loaded", "interactive"].includes(document.readyState) && document.body) {
      run();
    } else {
      document.addEventListener("DOMContentLoaded", run, false);
    }
  }

  exports.default = { route: route, routes: routes };

/***/ },
/* 578 */,
/* 579 */,
/* 580 */,
/* 581 */,
/* 582 */,
/* 583 */,
/* 584 */,
/* 585 */,
/* 586 */,
/* 587 */,
/* 588 */,
/* 589 */,
/* 590 */,
/* 591 */,
/* 592 */,
/* 593 */,
/* 594 */,
/* 595 */,
/* 596 */,
/* 597 */,
/* 598 */,
/* 599 */,
/* 600 */,
/* 601 */,
/* 602 */,
/* 603 */,
/* 604 */,
/* 605 */,
/* 606 */,
/* 607 */,
/* 608 */,
/* 609 */,
/* 610 */,
/* 611 */,
/* 612 */,
/* 613 */,
/* 614 */,
/* 615 */,
/* 616 */,
/* 617 */,
/* 618 */,
/* 619 */,
/* 620 */,
/* 621 */,
/* 622 */,
/* 623 */,
/* 624 */,
/* 625 */,
/* 626 */,
/* 627 */,
/* 628 */,
/* 629 */,
/* 630 */,
/* 631 */,
/* 632 */,
/* 633 */,
/* 634 */,
/* 635 */,
/* 636 */,
/* 637 */,
/* 638 */,
/* 639 */,
/* 640 */,
/* 641 */,
/* 642 */,
/* 643 */,
/* 644 */,
/* 645 */,
/* 646 */,
/* 647 */,
/* 648 */,
/* 649 */,
/* 650 */,
/* 651 */,
/* 652 */,
/* 653 */,
/* 654 */,
/* 655 */,
/* 656 */,
/* 657 */,
/* 658 */,
/* 659 */,
/* 660 */,
/* 661 */,
/* 662 */,
/* 663 */,
/* 664 */,
/* 665 */,
/* 666 */,
/* 667 */,
/* 668 */,
/* 669 */,
/* 670 */,
/* 671 */,
/* 672 */,
/* 673 */,
/* 674 */,
/* 675 */,
/* 676 */,
/* 677 */,
/* 678 */,
/* 679 */,
/* 680 */,
/* 681 */,
/* 682 */,
/* 683 */,
/* 684 */,
/* 685 */,
/* 686 */,
/* 687 */,
/* 688 */,
/* 689 */,
/* 690 */,
/* 691 */,
/* 692 */,
/* 693 */,
/* 694 */,
/* 695 */,
/* 696 */,
/* 697 */,
/* 698 */,
/* 699 */,
/* 700 */,
/* 701 */,
/* 702 */,
/* 703 */,
/* 704 */,
/* 705 */,
/* 706 */,
/* 707 */,
/* 708 */,
/* 709 */,
/* 710 */,
/* 711 */,
/* 712 */,
/* 713 */,
/* 714 */,
/* 715 */,
/* 716 */,
/* 717 */,
/* 718 */,
/* 719 */,
/* 720 */,
/* 721 */,
/* 722 */,
/* 723 */,
/* 724 */,
/* 725 */,
/* 726 */,
/* 727 */,
/* 728 */,
/* 729 */,
/* 730 */,
/* 731 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  /**
   * Filesystem cache
   *
   * Given a file and a transform function, cache the result into files
   * or retrieve the previously cached files if the given file is already known.
   *
   * @see https://github.com/babel/babel-loader/issues/34
   * @see https://github.com/babel/babel-loader/pull/41
   */
  var crypto = __webpack_require__(523);
  var mkdirp = __webpack_require__(1200);
  var fs = __webpack_require__(126);
  var os = __webpack_require__(1303);
  var path = __webpack_require__(134);
  var zlib = __webpack_require__(790);

  /**
   * Read the contents from the compressed file.
   *
   * @async
   * @params {String} filename
   * @params {Function} callback
   */
  var read = function(filename, callback) {
    return fs.readFile(filename, function(err, data) {
      if (err) { return callback(err); }

      return zlib.gunzip(data, function(err, content) {
        var result = {};

        if (err) { return callback(err); }

        try {
          result = JSON.parse(content);
        } catch (e) {
          return callback(e);
        }

        return callback(null, result);
      });
    });
  };


  /**
   * Write contents into a compressed file.
   *
   * @async
   * @params {String} filename
   * @params {String} result
   * @params {Function} callback
   */
  var write = function(filename, result, callback) {
    var content = JSON.stringify(result);

    return zlib.gzip(content, function(err, data) {
      if (err) { return callback(err); }

      return fs.writeFile(filename, data, callback);
    });
  };


  /**
   * Build the filename for the cached file
   *
   * @params {String} source  File source code
   * @params {Object} options Options used
   *
   * @return {String}
   */
  var filename = function(source, identifier, options) {
    var hash = crypto.createHash('SHA1');
    var contents = JSON.stringify({
      source: source,
      options: options,
      identifier: identifier,
    });

    hash.end(contents);

    return hash.read().toString('hex') + '.json.gzip';
  };

  /**
   * Retrieve file from cache, or create a new one for future reads
   *
   * @async
   * @param  {Object}   params
   * @param  {String}   params.directory  Directory to store cached files
   * @param  {String}   params.identifier Unique identifier to bust cache
   * @param  {String}   params.source   Original contents of the file to be cached
   * @param  {Object}   params.options  Options to be given to the transform fn
   * @param  {Function} params.transform  Function that will transform the
   *                                      original file and whose result will be
   *                                      cached
   *
   * @param  {Function<err, result>} callback
   *
   * @example
   *
   *   cache({
   *     directory: '.tmp/cache',
   *     identifier: 'babel-loader-cachefile',
   *     source: *source code from file*,
   *     options: {
   *       experimental: true,
   *       runtime: true
   *     },
   *     transform: function(source, options) {
   *       var content = *do what you need with the source*
   *       return content;
   *     }
   *   }, function(err, result) {
   *
   *   });
   */
  var cache = module.exports = function(params, callback) {
    // Spread params into named variables
    // Forgive user whenever possible
    var source = params.source;
    var options = params.options || {};
    var transform = params.transform;
    var identifier = params.identifier;
    var directory = (typeof params.directory === 'string') ?
          params.directory :
          os.tmpdir();
    var file = path.join(directory, filename(source, identifier, options));

    // Make sure the directory exists.
    return mkdirp(directory, function(err) {
      if (err) { return callback(err); }

      return read(file, function(err, content) {
        var result = {};
        // No errors mean that the file was previously cached
        // we just need to return it
        if (!err) { return callback(null, content); }

        // Otherwise just transform the file
        // return it to the user asap and write it in cache
        try {
          result = transform(source, options);
        } catch (error) {
          return callback(error);
        }

        return write(file, result, function(err) {
          return callback(err, result);
        });
      });
    });
  };


/***/ },
/* 732 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  /**
   * The purpose of this module, is to find the project's .babelrc and
   * use its contents to bust the babel-loader's internal cache whenever an option
   * changes.
   *
   * @see https://github.com/babel/babel-loader/issues/62
   * @see http://git.io/vLEvu
   */
  var fs = __webpack_require__(126);
  var path = __webpack_require__(134);
  var assign = __webpack_require__(100);
  var exists = __webpack_require__(387)({});
  var read = __webpack_require__(388)({});

  var find = function find(start, rel) {
    var file = path.join(start, rel);
    var opts = {};
    var up = '';

    if (exists(file)) {
      return read(file);
    }

    up = path.dirname(start);
    if (up !== start) {
      // Reached root
      return find(up, rel);
    }

  };

  module.exports = function(loc, rel) {
    rel = rel || '.babelrc';
    return find(loc, rel);
  };


/***/ },
/* 733 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(global) {"use strict";

  __webpack_require__(1027);

  __webpack_require__(1281);

  __webpack_require__(796);

  /* eslint max-len: 0 */

  if (global._babelPolyfill) {
    throw new Error("only one instance of babel-polyfill is allowed");
  }
  global._babelPolyfill = true;

  // Should be removed in the next major release:

  var DEFINE_PROPERTY = "defineProperty";
  function define(O, key, value) {
    O[key] || Object[DEFINE_PROPERTY](O, key, {
      writable: true,
      configurable: true,
      value: value
    });
  }

  define(String.prototype, "padLeft", "".padStart);
  define(String.prototype, "padRight", "".padEnd);

  "pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
    [][key] && define(Array, key, Function.call.bind([][key]));
  });
  /* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 734 */
/***/ function(module, exports) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;

  exports.default = function () {};

  /*istanbul ignore next*/module.exports = exports["default"]; // required to safely use babel/register within a browserify codebase

/***/ },
/* 735 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = { "default": __webpack_require__(799), __esModule: true };

/***/ },
/* 736 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = { "default": __webpack_require__(800), __esModule: true };

/***/ },
/* 737 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = { "default": __webpack_require__(803), __esModule: true };

/***/ },
/* 738 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = { "default": __webpack_require__(804), __esModule: true };

/***/ },
/* 739 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = { "default": __webpack_require__(805), __esModule: true };

/***/ },
/* 740 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = { "default": __webpack_require__(807), __esModule: true };

/***/ },
/* 741 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = { "default": __webpack_require__(808), __esModule: true };

/***/ },
/* 742 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = { "default": __webpack_require__(810), __esModule: true };

/***/ },
/* 743 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = { "default": __webpack_require__(811), __esModule: true };

/***/ },
/* 744 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;

  var _getIterator2 = __webpack_require__(93);

  var _getIterator3 = _interopRequireDefault(_getIterator2);

  var _classCallCheck2 = __webpack_require__(97);

  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

  var /*istanbul ignore next*/_path2 = __webpack_require__(173);

  /*istanbul ignore next*/
  var _path3 = _interopRequireDefault(_path2);

  var /*istanbul ignore next*/_babelTypes = __webpack_require__(90);

  /*istanbul ignore next*/
  var t = _interopRequireWildcard(_babelTypes);

  /*istanbul ignore next*/
  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var testing = ("development") === "test";

  /*istanbul ignore next*/
  var TraversalContext = function () {
    function /*istanbul ignore next*/TraversalContext(scope, opts, state, parentPath) {
      /*istanbul ignore next*/(0, _classCallCheck3.default)(this, TraversalContext);
      this.queue = null;

      this.parentPath = parentPath;
      this.scope = scope;
      this.state = state;
      this.opts = opts;
    }

    /**
     * This method does a simple check to determine whether or not we really need to attempt
     * visit a node. This will prevent us from constructing a NodePath.
     */

    TraversalContext.prototype.shouldVisit = function shouldVisit(node) {
      var opts = this.opts;
      if (opts.enter || opts.exit) return true;

      // check if we have a visitor for this node
      if (opts[node.type]) return true;

      // check if we're going to traverse into this node
      var keys = t.VISITOR_KEYS[node.type];
      if (!keys || !keys.length) return false;

      // we need to traverse into this node so ensure that it has children to traverse into!
      for ( /*istanbul ignore next*/var _iterator = keys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
        /*istanbul ignore next*/
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var key = _ref;

        if (node[key]) return true;
      }

      return false;
    };

    TraversalContext.prototype.create = function create(node, obj, key, listKey) {
      return (/*istanbul ignore next*/_path3.default.get({
          parentPath: this.parentPath,
          parent: node,
          container: obj,
          key: key,
          listKey: listKey
        })
      );
    };

    TraversalContext.prototype.maybeQueue = function maybeQueue(path, notPriority) {
      if (this.trap) {
        throw new Error("Infinite cycle detected");
      }

      if (this.queue) {
        if (notPriority) {
          this.queue.push(path);
        } else {
          this.priorityQueue.push(path);
        }
      }
    };

    TraversalContext.prototype.visitMultiple = function visitMultiple(container, parent, listKey) {
      // nothing to traverse!
      if (container.length === 0) return false;

      var queue = [];

      // build up initial queue
      for (var key = 0; key < container.length; key++) {
        var node = container[key];
        if (node && this.shouldVisit(node)) {
          queue.push(this.create(parent, container, key, listKey));
        }
      }

      return this.visitQueue(queue);
    };

    TraversalContext.prototype.visitSingle = function visitSingle(node, key) {
      if (this.shouldVisit(node[key])) {
        return this.visitQueue([this.create(node, node, key)]);
      } else {
        return false;
      }
    };

    TraversalContext.prototype.visitQueue = function visitQueue(queue) {
      // set queue
      this.queue = queue;
      this.priorityQueue = [];

      var visited = [];
      var stop = false;

      // visit the queue
      for ( /*istanbul ignore next*/var _iterator2 = queue, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
        /*istanbul ignore next*/
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var path = _ref2;

        path.resync();

        if (path.contexts.length === 0 || path.contexts[path.contexts.length - 1] !== this) {
          // The context might already have been pushed when this path was inserted and queued.
          // If we always re-pushed here, we could get duplicates and risk leaving contexts
          // on the stack after the traversal has completed, which could break things.
          path.pushContext(this);
        }

        // this path no longer belongs to the tree
        if (path.key === null) continue;

        if (testing && queue.length >= 1000) {
          this.trap = true;
        }

        // ensure we don't visit the same node twice
        if (visited.indexOf(path.node) >= 0) continue;
        visited.push(path.node);

        if (path.visit()) {
          stop = true;
          break;
        }

        if (this.priorityQueue.length) {
          stop = this.visitQueue(this.priorityQueue);
          this.priorityQueue = [];
          this.queue = queue;
          if (stop) break;
        }
      }

      // clear queue
      for ( /*istanbul ignore next*/var _iterator3 = queue, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);;) {
        /*istanbul ignore next*/
        var _ref3;

        if (_isArray3) {
          if (_i3 >= _iterator3.length) break;
          _ref3 = _iterator3[_i3++];
        } else {
          _i3 = _iterator3.next();
          if (_i3.done) break;
          _ref3 = _i3.value;
        }

        var _path = _ref3;

        _path.popContext();
      }

      // clear queue
      this.queue = null;

      return stop;
    };

    TraversalContext.prototype.visit = function visit(node, key) {
      var nodes = node[key];
      if (!nodes) return false;

      if (Array.isArray(nodes)) {
        return this.visitMultiple(nodes, node, key);
      } else {
        return this.visitSingle(node, key);
      }
    };

    return TraversalContext;
  }();

  /*istanbul ignore next*/exports.default = TraversalContext;
  /*istanbul ignore next*/module.exports = exports["default"];

/***/ },
/* 745 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;

  var _getIterator2 = __webpack_require__(93);

  var _getIterator3 = _interopRequireDefault(_getIterator2);

  exports.findParent = findParent;
  /*istanbul ignore next*/exports.find = find;
  /*istanbul ignore next*/exports.getFunctionParent = getFunctionParent;
  /*istanbul ignore next*/exports.getStatementParent = getStatementParent;
  /*istanbul ignore next*/exports.getEarliestCommonAncestorFrom = getEarliestCommonAncestorFrom;
  /*istanbul ignore next*/exports.getDeepestCommonAncestorFrom = getDeepestCommonAncestorFrom;
  /*istanbul ignore next*/exports.getAncestry = getAncestry;
  /*istanbul ignore next*/exports.inType = inType;
  /*istanbul ignore next*/exports.inShadow = inShadow;

  var /*istanbul ignore next*/_babelTypes = __webpack_require__(90);

  /*istanbul ignore next*/
  var t = _interopRequireWildcard(_babelTypes);

  var /*istanbul ignore next*/_index = __webpack_require__(173);

  /*istanbul ignore next*/
  var _index2 = _interopRequireDefault(_index);

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Call the provided `callback` with the `NodePath`s of all the parents.
   * When the `callback` returns a truthy value, we return that node path.
   */

  // This file contains that retrieve or validate anything related to the current paths ancestry.

  function findParent(callback) {
    var path = this;
    while (path = path.parentPath) {
      if (callback(path)) return path;
    }
    return null;
  }

  /**
   * Description
   */

  function find(callback) {
    var path = this;
    do {
      if (callback(path)) return path;
    } while (path = path.parentPath);
    return null;
  }

  /**
   * Get the parent function of the current path.
   */

  function getFunctionParent() {
    return this.findParent(function (path) /*istanbul ignore next*/{
      return path.isFunction() || path.isProgram();
    });
  }

  /**
   * Walk up the tree until we hit a parent node path in a list.
   */

  function getStatementParent() {
    var path = this;
    do {
      if (Array.isArray(path.container)) {
        return path;
      }
    } while (path = path.parentPath);
  }

  /**
   * Get the deepest common ancestor and then from it, get the earliest relationship path
   * to that ancestor.
   *
   * Earliest is defined as being "before" all the other nodes in terms of list container
   * position and visiting key.
   */

  function getEarliestCommonAncestorFrom(paths) {
    return this.getDeepestCommonAncestorFrom(paths, function (deepest, i, ancestries) {
      var earliest = /*istanbul ignore next*/void 0;
      var keys = t.VISITOR_KEYS[deepest.type];

      for ( /*istanbul ignore next*/var _iterator = ancestries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
        /*istanbul ignore next*/
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var ancestry = _ref;

        var path = ancestry[i + 1];

        // first path
        if (!earliest) {
          earliest = path;
          continue;
        }

        // handle containers
        if (path.listKey && earliest.listKey === path.listKey) {
          // we're in the same container so check if we're earlier
          if (path.key < earliest.key) {
            earliest = path;
            continue;
          }
        }

        // handle keys
        var earliestKeyIndex = keys.indexOf(earliest.parentKey);
        var currentKeyIndex = keys.indexOf(path.parentKey);
        if (earliestKeyIndex > currentKeyIndex) {
          // key appears before so it's earlier
          earliest = path;
        }
      }

      return earliest;
    });
  }

  /**
   * Get the earliest path in the tree where the provided `paths` intersect.
   *
   * TODO: Possible optimisation target.
   */

  function getDeepestCommonAncestorFrom(paths, filter) {
    /*istanbul ignore next*/
    var _this = this;

    if (!paths.length) {
      return this;
    }

    if (paths.length === 1) {
      return paths[0];
    }

    // minimum depth of the tree so we know the highest node
    var minDepth = Infinity;

    // last common ancestor
    var lastCommonIndex = /*istanbul ignore next*/void 0,
        lastCommon = /*istanbul ignore next*/void 0;

    // get the ancestors of the path, breaking when the parent exceeds ourselves
    var ancestries = paths.map(function (path) {
      var ancestry = [];

      do {
        ancestry.unshift(path);
      } while ((path = path.parentPath) && path !== /*istanbul ignore next*/_this);

      // save min depth to avoid going too far in
      if (ancestry.length < minDepth) {
        minDepth = ancestry.length;
      }

      return ancestry;
    });

    // get the first ancestry so we have a seed to assess all other ancestries with
    var first = ancestries[0];

    // check ancestor equality
    depthLoop: for (var i = 0; i < minDepth; i++) {
      var shouldMatch = first[i];

      for ( /*istanbul ignore next*/var _iterator2 = ancestries, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
        /*istanbul ignore next*/
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var ancestry = _ref2;

        if (ancestry[i] !== shouldMatch) {
          // we've hit a snag
          break depthLoop;
        }
      }

      // next iteration may break so store these so they can be returned
      lastCommonIndex = i;
      lastCommon = shouldMatch;
    }

    if (lastCommon) {
      if (filter) {
        return filter(lastCommon, lastCommonIndex, ancestries);
      } else {
        return lastCommon;
      }
    } else {
      throw new Error("Couldn't find intersection");
    }
  }

  /**
   * Build an array of node paths containing the entire ancestry of the current node path.
   *
   * NOTE: The current node path is included in this.
   */

  function getAncestry() {
    var path = this;
    var paths = [];
    do {
      paths.push(path);
    } while (path = path.parentPath);
    return paths;
  }

  function inType() {
    var path = this;
    while (path) {
      for ( /*istanbul ignore next*/var _iterator3 = arguments, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);;) {
        /*istanbul ignore next*/
        var _ref3;

        if (_isArray3) {
          if (_i3 >= _iterator3.length) break;
          _ref3 = _iterator3[_i3++];
        } else {
          _i3 = _iterator3.next();
          if (_i3.done) break;
          _ref3 = _i3.value;
        }

        var type = _ref3;

        if (path.node.type === type) return true;
      }
      path = path.parentPath;
    }

    return false;
  }

  /**
   * Checks whether the binding for 'key' is a local binding in its current function context.
   *
   * Checks if the current path either is, or has a direct parent function that is, inside
   * of a function that is marked for shadowing of a binding matching 'key'. Also returns
   * the parent path if the parent path is an arrow, since arrow functions pass through
   * binding values to their parent, meaning they have no local bindings.
   *
   * Shadowing means that when the given binding is transformed, it will read the binding
   * value from the container containing the shadow function, rather than from inside the
   * shadow function.
   *
   * Function shadowing is acheieved by adding a "shadow" property on "FunctionExpression"
   * and "FunctionDeclaration" node types.
   *
   * Node's "shadow" props have the following behavior:
   *
   * - Boolean true will cause the function to shadow both "this" and "arguments".
   * - {this: false} Shadows "arguments" but not "this".
   * - {arguments: false} Shadows "this" but not "arguments".
   *
   * Separately, individual identifiers can be flagged with two flags:
   *
   * - _forceShadow - If truthy, this specific identifier will be bound in the closest
   *    Function that is not flagged "shadow", or the Program.
   * - _shadowedFunctionLiteral - When set to a NodePath, this specific identifier will be bound
   *    to this NodePath/Node or the Program. If this path is not found relative to the
   *    starting location path, the closest function will be used.
   *
   * Please Note, these flags are for private internal use only and should be avoided.
   * Only "shadow" is a public property that other transforms may manipulate.
   */

  function inShadow(key) {
    var parentFn = this.isFunction() ? this : this.findParent(function (p) /*istanbul ignore next*/{
      return p.isFunction();
    });
    if (!parentFn) return;

    if (parentFn.isFunctionExpression() || parentFn.isFunctionDeclaration()) {
      var shadow = parentFn.node.shadow;

      // this is because sometimes we may have a `shadow` value of:
      //
      //   { this: false }
      //
      // we need to catch this case if `inShadow` has been passed a `key`
      if (shadow && (!key || shadow[key] !== false)) {
        return parentFn;
      }
    } else if (parentFn.isArrowFunctionExpression()) {
      return parentFn;
    }

    // normal function, we've found our function context
    return null;
  }

/***/ },
/* 746 */
/***/ function(module, exports) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;
  exports.shareCommentsWithSiblings = shareCommentsWithSiblings;
  /*istanbul ignore next*/exports.addComment = addComment;
  /*istanbul ignore next*/exports.addComments = addComments;
  // This file contains methods responsible for dealing with comments.

  /**
   * Share comments amongst siblings.
   */

  function shareCommentsWithSiblings() {
    var node = this.node;
    if (!node) return;

    var trailing = node.trailingComments;
    var leading = node.leadingComments;
    if (!trailing && !leading) return;

    var prev = this.getSibling(this.key - 1);
    var next = this.getSibling(this.key + 1);

    if (!prev.node) prev = next;
    if (!next.node) next = prev;

    prev.addComments("trailing", leading);
    next.addComments("leading", trailing);
  }

  function addComment(type, content, line) {
    this.addComments(type, [{
      type: line ? "CommentLine" : "CommentBlock",
      value: content
    }]);
  }

  /**
   * Give node `comments` of the specified `type`.
   */

  function addComments(type, comments) {
    if (!comments) return;

    var node = this.node;
    if (!node) return;

    var key = /*istanbul ignore next*/type + "Comments";

    if (node[key]) {
      node[key] = node[key].concat(comments);
    } else {
      node[key] = comments;
    }
  }

/***/ },
/* 747 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;

  var _getIterator2 = __webpack_require__(93);

  var _getIterator3 = _interopRequireDefault(_getIterator2);

  exports.call = call;
  /*istanbul ignore next*/exports._call = _call;
  /*istanbul ignore next*/exports.isBlacklisted = isBlacklisted;
  /*istanbul ignore next*/exports.visit = visit;
  /*istanbul ignore next*/exports.skip = skip;
  /*istanbul ignore next*/exports.skipKey = skipKey;
  /*istanbul ignore next*/exports.stop = stop;
  /*istanbul ignore next*/exports.setScope = setScope;
  /*istanbul ignore next*/exports.setContext = setContext;
  /*istanbul ignore next*/exports.resync = resync;
  /*istanbul ignore next*/exports._resyncParent = _resyncParent;
  /*istanbul ignore next*/exports._resyncKey = _resyncKey;
  /*istanbul ignore next*/exports._resyncList = _resyncList;
  /*istanbul ignore next*/exports._resyncRemoved = _resyncRemoved;
  /*istanbul ignore next*/exports.popContext = popContext;
  /*istanbul ignore next*/exports.pushContext = pushContext;
  /*istanbul ignore next*/exports.setup = setup;
  /*istanbul ignore next*/exports.setKey = setKey;
  /*istanbul ignore next*/exports.requeue = requeue;
  /*istanbul ignore next*/exports._getQueueContexts = _getQueueContexts;

  var /*istanbul ignore next*/_index = __webpack_require__(128);

  /*istanbul ignore next*/
  var _index2 = _interopRequireDefault(_index);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function call(key) {
    var opts = this.opts;

    this.debug(function () /*istanbul ignore next*/{
      return key;
    });

    if (this.node) {
      if (this._call(opts[key])) return true;
    }

    if (this.node) {
      return this._call(opts[this.node.type] && opts[this.node.type][key]);
    }

    return false;
  } // This file contains methods responsible for maintaining a TraversalContext.

  function _call(fns) {
    if (!fns) return false;

    for ( /*istanbul ignore next*/var _iterator = fns, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
      /*istanbul ignore next*/
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var fn = _ref;

      if (!fn) continue;

      var node = this.node;
      if (!node) return true;

      var ret = fn.call(this.state, this, this.state);
      if (ret) throw new Error( /*istanbul ignore next*/"Unexpected return value from visitor method " + fn);

      // node has been replaced, it will have been requeued
      if (this.node !== node) return true;

      if (this.shouldStop || this.shouldSkip || this.removed) return true;
    }

    return false;
  }

  function isBlacklisted() {
    var blacklist = this.opts.blacklist;
    return blacklist && blacklist.indexOf(this.node.type) > -1;
  }

  function visit() {
    if (!this.node) {
      return false;
    }

    if (this.isBlacklisted()) {
      return false;
    }

    if (this.opts.shouldSkip && this.opts.shouldSkip(this)) {
      return false;
    }

    if (this.call("enter") || this.shouldSkip) {
      this.debug(function () /*istanbul ignore next*/{
        return "Skip...";
      });
      return this.shouldStop;
    }

    this.debug(function () /*istanbul ignore next*/{
      return "Recursing into...";
    });
    /*istanbul ignore next*/_index2.default.node(this.node, this.opts, this.scope, this.state, this, this.skipKeys);

    this.call("exit");

    return this.shouldStop;
  }

  function skip() {
    this.shouldSkip = true;
  }

  function skipKey(key) {
    this.skipKeys[key] = true;
  }

  function stop() {
    this.shouldStop = true;
    this.shouldSkip = true;
  }

  function setScope() {
    if (this.opts && this.opts.noScope) return;

    var target = this.context && this.context.scope;

    if (!target) {
      var path = this.parentPath;
      while (path && !target) {
        if (path.opts && path.opts.noScope) return;

        target = path.scope;
        path = path.parentPath;
      }
    }

    this.scope = this.getScope(target);
    if (this.scope) this.scope.init();
  }

  function setContext(context) {
    this.shouldSkip = false;
    this.shouldStop = false;
    this.removed = false;
    this.skipKeys = {};

    if (context) {
      this.context = context;
      this.state = context.state;
      this.opts = context.opts;
    }

    this.setScope();

    return this;
  }

  /**
   * Here we resync the node paths `key` and `container`. If they've changed according
   * to what we have stored internally then we attempt to resync by crawling and looking
   * for the new values.
   */

  function resync() {
    if (this.removed) return;

    this._resyncParent();
    this._resyncList();
    this._resyncKey();
    //this._resyncRemoved();
  }

  function _resyncParent() {
    if (this.parentPath) {
      this.parent = this.parentPath.node;
    }
  }

  function _resyncKey() {
    if (!this.container) return;

    if (this.node === this.container[this.key]) return;

    // grrr, path key is out of sync. this is likely due to a modification to the AST
    // not done through our path APIs

    if (Array.isArray(this.container)) {
      for (var i = 0; i < this.container.length; i++) {
        if (this.container[i] === this.node) {
          return this.setKey(i);
        }
      }
    } else {
      for (var key in this.container) {
        if (this.container[key] === this.node) {
          return this.setKey(key);
        }
      }
    }

    // ¯\_(ツ)_/¯ who knows where it's gone lol
    this.key = null;
  }

  function _resyncList() {
    if (!this.parent || !this.inList) return;

    var newContainer = this.parent[this.listKey];
    if (this.container === newContainer) return;

    // container is out of sync. this is likely the result of it being reassigned
    this.container = newContainer || null;
  }

  function _resyncRemoved() {
    if (this.key == null || !this.container || this.container[this.key] !== this.node) {
      this._markRemoved();
    }
  }

  function popContext() {
    this.contexts.pop();
    this.setContext(this.contexts[this.contexts.length - 1]);
  }

  function pushContext(context) {
    this.contexts.push(context);
    this.setContext(context);
  }

  function setup(parentPath, container, listKey, key) {
    this.inList = !!listKey;
    this.listKey = listKey;
    this.parentKey = listKey || key;
    this.container = container;

    this.parentPath = parentPath || this.parentPath;
    this.setKey(key);
  }

  function setKey(key) {
    this.key = key;
    this.node = this.container[this.key];
    this.type = this.node && this.node.type;
  }

  function requeue() {
    /*istanbul ignore next*/var pathToQueue = arguments.length <= 0 || arguments[0] === undefined ? this : arguments[0];

    if (pathToQueue.removed) return;

    // TODO(loganfsmyth): This should be switched back to queue in parent contexts
    // automatically once T2892 and T7160 have been resolved. See T7166.
    // let contexts = this._getQueueContexts();
    var contexts = this.contexts;

    for ( /*istanbul ignore next*/var _iterator2 = contexts, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
      /*istanbul ignore next*/
      var _ref2;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref2 = _i2.value;
      }

      var context = _ref2;

      context.maybeQueue(pathToQueue);
    }
  }

  function _getQueueContexts() {
    var path = this;
    var contexts = this.contexts;
    while (!contexts.length) {
      path = path.parentPath;
      contexts = path.contexts;
    }
    return contexts;
  }

/***/ },
/* 748 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;
  exports.toComputedKey = toComputedKey;
  /*istanbul ignore next*/exports.ensureBlock = ensureBlock;
  /*istanbul ignore next*/exports.arrowFunctionToShadowed = arrowFunctionToShadowed;

  var /*istanbul ignore next*/_babelTypes = __webpack_require__(90);

  /*istanbul ignore next*/
  var t = _interopRequireWildcard(_babelTypes);

  /*istanbul ignore next*/
  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function toComputedKey() {
    var node = this.node;

    var key = /*istanbul ignore next*/void 0;
    if (this.isMemberExpression()) {
      key = node.property;
    } else if (this.isProperty() || this.isMethod()) {
      key = node.key;
    } else {
      throw new ReferenceError("todo");
    }

    if (!node.computed) {
      if (t.isIdentifier(key)) key = t.stringLiteral(key.name);
    }

    return key;
  } // This file contains methods that convert the path node into another node or some other type of data.

  function ensureBlock() {
    return t.ensureBlock(this.node);
  }

  function arrowFunctionToShadowed() {
    // todo: maybe error
    if (!this.isArrowFunctionExpression()) return;

    this.ensureBlock();

    /*istanbul ignore next*/var node = this.node;

    node.expression = false;
    node.type = "FunctionExpression";
    node.shadow = node.shadow || true;
  }

/***/ },
/* 749 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(global) {/*istanbul ignore next*/"use strict";

  exports.__esModule = true;

  var _typeof2 = __webpack_require__(127);

  var _typeof3 = _interopRequireDefault(_typeof2);

  var _getIterator2 = __webpack_require__(93);

  var _getIterator3 = _interopRequireDefault(_getIterator2);

  exports.evaluateTruthy = evaluateTruthy;
  /*istanbul ignore next*/exports.evaluate = evaluate;
  /*istanbul ignore next*/
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  // This file contains Babels metainterpreter that can evaluate static code.

  /* eslint eqeqeq: 0 */

  var VALID_CALLEES = ["String", "Number", "Math"]; /* eslint indent: 0 */
  /* eslint max-len: 0 */

  var INVALID_METHODS = ["random"];

  /**
   * Walk the input `node` and statically evaluate if it's truthy.
   *
   * Returning `true` when we're sure that the expression will evaluate to a
   * truthy value, `false` if we're sure that it will evaluate to a falsy
   * value and `undefined` if we aren't sure. Because of this please do not
   * rely on coercion when using this method and check with === if it's false.
   *
   * For example do:
   *
   *   if (t.evaluateTruthy(node) === false) falsyLogic();
   *
   * **AND NOT**
   *
   *   if (!t.evaluateTruthy(node)) falsyLogic();
   *
   */

  function evaluateTruthy() {
    var res = this.evaluate();
    if (res.confident) return !!res.value;
  }

  /**
   * Walk the input `node` and statically evaluate it.
   *
   * Returns an object in the form `{ confident, value }`. `confident` indicates
   * whether or not we had to drop out of evaluating the expression because of
   * hitting an unknown node that we couldn't confidently find the value of.
   *
   * Example:
   *
   *   t.evaluate(parse("5 + 5")) // { confident: true, value: 10 }
   *   t.evaluate(parse("!true")) // { confident: true, value: false }
   *   t.evaluate(parse("foo + foo")) // { confident: false, value: undefined }
   *
   */

  function evaluate() {
    var confident = true;
    var deoptPath = /*istanbul ignore next*/void 0;

    function deopt(path) {
      if (!confident) return;
      deoptPath = path;
      confident = false;
    }

    var value = evaluate(this);
    if (!confident) value = undefined;
    return {
      confident: confident,
      deopt: deoptPath,
      value: value
    };

    function evaluate(path) {
      if (!confident) return;

      /*istanbul ignore next*/var node = path.node;


      if (path.isSequenceExpression()) {
        var exprs = path.get("expressions");
        return evaluate(exprs[exprs.length - 1]);
      }

      if (path.isStringLiteral() || path.isNumericLiteral() || path.isBooleanLiteral()) {
        return node.value;
      }

      if (path.isNullLiteral()) {
        return null;
      }

      if (path.isTemplateLiteral()) {
        var str = "";

        var i = 0;
        var _exprs = path.get("expressions");

        for ( /*istanbul ignore next*/var _iterator = node.quasis, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
          /*istanbul ignore next*/
          var _ref;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
          }

          var elem = _ref;

          // not confident, evaluated an expression we don't like
          if (!confident) break;

          // add on cooked element
          str += elem.value.cooked;

          // add on interpolated expression if it's present
          var expr = _exprs[i++];
          if (expr) str += String(evaluate(expr));
        }

        if (!confident) return;
        return str;
      }

      if (path.isConditionalExpression()) {
        var testResult = evaluate(path.get("test"));
        if (!confident) return;
        if (testResult) {
          return evaluate(path.get("consequent"));
        } else {
          return evaluate(path.get("alternate"));
        }
      }

      if (path.isExpressionWrapper()) {
        // TypeCastExpression, ExpressionStatement etc
        return evaluate(path.get("expression"));
      }

      // "foo".length
      if (path.isMemberExpression() && !path.parentPath.isCallExpression({ callee: node })) {
        var property = path.get("property");
        var object = path.get("object");

        if (object.isLiteral() && property.isIdentifier()) {
          var _value = object.node.value;
          var type = /*istanbul ignore next*/typeof _value === "undefined" ? "undefined" : (0, _typeof3.default)(_value);
          if (type === "number" || type === "string") {
            return _value[property.node.name];
          }
        }
      }

      if (path.isReferencedIdentifier()) {
        var binding = path.scope.getBinding(node.name);
        if (binding && binding.hasValue) {
          return binding.value;
        } else {
          if (node.name === "undefined") {
            return undefined;
          } else if (node.name === "Infinity") {
            return Infinity;
          } else if (node.name === "NaN") {
            return NaN;
          }

          var resolved = path.resolve();
          if (resolved === path) {
            return deopt(path);
          } else {
            return evaluate(resolved);
          }
        }
      }

      if (path.isUnaryExpression({ prefix: true })) {
        if (node.operator === "void") {
          // we don't need to evaluate the argument to know what this will return
          return undefined;
        }

        var argument = path.get("argument");
        if (node.operator === "typeof" && (argument.isFunction() || argument.isClass())) {
          return "function";
        }

        var arg = evaluate(argument);
        if (!confident) return;
        switch (node.operator) {
          case "!":
            return !arg;
          case "+":
            return +arg;
          case "-":
            return -arg;
          case "~":
            return ~arg;
          case "typeof":
            return (/*istanbul ignore next*/typeof arg === "undefined" ? "undefined" : (0, _typeof3.default)(arg)
            );
        }
      }

      if (path.isArrayExpression()) {
        var arr = [];
        var elems = path.get("elements");
        for ( /*istanbul ignore next*/var _iterator2 = elems, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
          /*istanbul ignore next*/
          var _ref2;

          if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref2 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref2 = _i2.value;
          }

          var _elem = _ref2;

          _elem = _elem.evaluate();

          if (_elem.confident) {
            arr.push(_elem.value);
          } else {
            return deopt(_elem);
          }
        }
        return arr;
      }

      if (path.isObjectExpression()) {
        // todo
      }

      if (path.isLogicalExpression()) {
        // If we are confident that one side of an && is false, or the left
        // side of an || is true, we can be confident about the entire expression
        var wasConfident = confident;
        var left = evaluate(path.get("left"));
        var leftConfident = confident;
        confident = wasConfident;
        var right = evaluate(path.get("right"));
        var rightConfident = confident;
        confident = leftConfident && rightConfident;

        switch (node.operator) {
          case "||":
            // TODO consider having a "truthy type" that doesn't bail on
            // left uncertainity but can still evaluate to truthy.
            if (left && leftConfident) {
              confident = true;
              return left;
            }

            if (!confident) return;

            return left || right;
          case "&&":
            if (!left && leftConfident || !right && rightConfident) {
              confident = true;
            }

            if (!confident) return;

            return left && right;
        }
      }

      if (path.isBinaryExpression()) {
        var _left = evaluate(path.get("left"));
        if (!confident) return;
        var _right = evaluate(path.get("right"));
        if (!confident) return;

        switch (node.operator) {
          case "-":
            return _left - _right;
          case "+":
            return _left + _right;
          case "/":
            return _left / _right;
          case "*":
            return _left * _right;
          case "%":
            return _left % _right;
          case "**":
            return (/*istanbul ignore next*/Math.pow(_left, _right)
            );
          case "<":
            return _left < _right;
          case ">":
            return _left > _right;
          case "<=":
            return _left <= _right;
          case ">=":
            return _left >= _right;
          case "==":
            return _left == _right;
          case "!=":
            return _left != _right;
          case "===":
            return _left === _right;
          case "!==":
            return _left !== _right;
          case "|":
            return _left | _right;
          case "&":
            return _left & _right;
          case "^":
            return _left ^ _right;
          case "<<":
            return _left << _right;
          case ">>":
            return _left >> _right;
          case ">>>":
            return _left >>> _right;
        }
      }

      if (path.isCallExpression()) {
        var callee = path.get("callee");
        var context = /*istanbul ignore next*/void 0;
        var func = /*istanbul ignore next*/void 0;

        // Number(1);
        if (callee.isIdentifier() && !path.scope.getBinding(callee.node.name, true) && VALID_CALLEES.indexOf(callee.node.name) >= 0) {
          func = global[node.callee.name];
        }

        if (callee.isMemberExpression()) {
          var _object = callee.get("object");
          var _property = callee.get("property");

          // Math.min(1, 2)
          if (_object.isIdentifier() && _property.isIdentifier() && VALID_CALLEES.indexOf(_object.node.name) >= 0 && INVALID_METHODS.indexOf(_property.node.name) < 0) {
            context = global[_object.node.name];
            func = context[_property.node.name];
          }

          // "abc".charCodeAt(4)
          if (_object.isLiteral() && _property.isIdentifier()) {
            var _type = /*istanbul ignore next*/(0, _typeof3.default)(_object.node.value);
            if (_type === "string" || _type === "number") {
              context = _object.node.value;
              func = context[_property.node.name];
            }
          }
        }

        if (func) {
          var args = path.get("arguments").map(evaluate);
          if (!confident) return;

          return func.apply(context, args);
        }
      }

      deopt(path);
    }
  }
  /* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 750 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;

  var _getIterator2 = __webpack_require__(93);

  var _getIterator3 = _interopRequireDefault(_getIterator2);

  exports.getStatementParent = getStatementParent;
  /*istanbul ignore next*/exports.getOpposite = getOpposite;
  /*istanbul ignore next*/exports.getCompletionRecords = getCompletionRecords;
  /*istanbul ignore next*/exports.getSibling = getSibling;
  /*istanbul ignore next*/exports.get = get;
  /*istanbul ignore next*/exports._getKey = _getKey;
  /*istanbul ignore next*/exports._getPattern = _getPattern;
  /*istanbul ignore next*/exports.getBindingIdentifiers = getBindingIdentifiers;
  /*istanbul ignore next*/exports.getOuterBindingIdentifiers = getOuterBindingIdentifiers;

  var /*istanbul ignore next*/_index = __webpack_require__(173);

  /*istanbul ignore next*/
  var _index2 = _interopRequireDefault(_index);

  var /*istanbul ignore next*/_babelTypes = __webpack_require__(90);

  /*istanbul ignore next*/
  var t = _interopRequireWildcard(_babelTypes);

  /*istanbul ignore next*/
  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function getStatementParent() {
    var path = this;

    do {
      if (!path.parentPath || Array.isArray(path.container) && path.isStatement()) {
        break;
      } else {
        path = path.parentPath;
      }
    } while (path);

    if (path && (path.isProgram() || path.isFile())) {
      throw new Error("File/Program node, we can't possibly find a statement parent to this");
    }

    return path;
  } // This file contains methods responsible for dealing with/retrieving children or siblings.

  function getOpposite() {
    if (this.key === "left") {
      return this.getSibling("right");
    } else if (this.key === "right") {
      return this.getSibling("left");
    }
  }

  function getCompletionRecords() {
    var paths = [];

    var add = function add(path) {
      if (path) paths = paths.concat(path.getCompletionRecords());
    };

    if (this.isIfStatement()) {
      add(this.get("consequent"));
      add(this.get("alternate"));
    } else if (this.isDoExpression() || this.isFor() || this.isWhile()) {
      add(this.get("body"));
    } else if (this.isProgram() || this.isBlockStatement()) {
      add(this.get("body").pop());
    } else if (this.isFunction()) {
      return this.get("body").getCompletionRecords();
    } else if (this.isTryStatement()) {
      add(this.get("block"));
      add(this.get("handler"));
      add(this.get("finalizer"));
    } else {
      paths.push(this);
    }

    return paths;
  }

  function getSibling(key) {
    return (/*istanbul ignore next*/_index2.default.get({
        parentPath: this.parentPath,
        parent: this.parent,
        container: this.container,
        listKey: this.listKey,
        key: key
      })
    );
  }

  function get(key, context) {
    if (context === true) context = this.context;
    var parts = key.split(".");
    if (parts.length === 1) {
      // "foo"
      return this._getKey(key, context);
    } else {
      // "foo.bar"
      return this._getPattern(parts, context);
    }
  }

  function _getKey(key, context) {
    /*istanbul ignore next*/
    var _this = this;

    var node = this.node;
    var container = node[key];

    if (Array.isArray(container)) {
      // requested a container so give them all the paths
      return container.map(function (_, i) {
        return (/*istanbul ignore next*/_index2.default.get({
            listKey: key,
            parentPath: /*istanbul ignore next*/_this,
            parent: node,
            container: container,
            key: i
          }).setContext(context)
        );
      });
    } else {
      return (/*istanbul ignore next*/_index2.default.get({
          parentPath: this,
          parent: node,
          container: node,
          key: key
        }).setContext(context)
      );
    }
  }

  function _getPattern(parts, context) {
    var path = this;
    for ( /*istanbul ignore next*/var _iterator = parts, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
      /*istanbul ignore next*/
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var part = _ref;

      if (part === ".") {
        path = path.parentPath;
      } else {
        if (Array.isArray(path)) {
          path = path[part];
        } else {
          path = path.get(part, context);
        }
      }
    }
    return path;
  }

  function getBindingIdentifiers(duplicates) {
    return t.getBindingIdentifiers(this.node, duplicates);
  }

  function getOuterBindingIdentifiers(duplicates) {
    return t.getOuterBindingIdentifiers(this.node, duplicates);
  }

/***/ },
/* 751 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;

  var _getIterator2 = __webpack_require__(93);

  var _getIterator3 = _interopRequireDefault(_getIterator2);

  exports.getTypeAnnotation = getTypeAnnotation;
  /*istanbul ignore next*/exports._getTypeAnnotation = _getTypeAnnotation;
  /*istanbul ignore next*/exports.isBaseType = isBaseType;
  /*istanbul ignore next*/exports.couldBeBaseType = couldBeBaseType;
  /*istanbul ignore next*/exports.baseTypeStrictlyMatches = baseTypeStrictlyMatches;
  /*istanbul ignore next*/exports.isGenericType = isGenericType;

  var /*istanbul ignore next*/_inferers = __webpack_require__(753);

  /*istanbul ignore next*/
  var inferers = _interopRequireWildcard(_inferers);

  var /*istanbul ignore next*/_babelTypes = __webpack_require__(90);

  /*istanbul ignore next*/
  var t = _interopRequireWildcard(_babelTypes);

  /*istanbul ignore next*/
  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Infer the type of the current `NodePath`.
   */

  function getTypeAnnotation() {
    if (this.typeAnnotation) return this.typeAnnotation;

    var type = this._getTypeAnnotation() || t.anyTypeAnnotation();
    if (t.isTypeAnnotation(type)) type = type.typeAnnotation;
    return this.typeAnnotation = type;
  }

  /**
   * todo: split up this method
   */

  function _getTypeAnnotation() {
    var node = this.node;

    if (!node) {
      // handle initializerless variables, add in checks for loop initializers too
      if (this.key === "init" && this.parentPath.isVariableDeclarator()) {
        var declar = this.parentPath.parentPath;
        var declarParent = declar.parentPath;

        // for (let NODE in bar) {}
        if (declar.key === "left" && declarParent.isForInStatement()) {
          return t.stringTypeAnnotation();
        }

        // for (let NODE of bar) {}
        if (declar.key === "left" && declarParent.isForOfStatement()) {
          return t.anyTypeAnnotation();
        }

        return t.voidTypeAnnotation();
      } else {
        return;
      }
    }

    if (node.typeAnnotation) {
      return node.typeAnnotation;
    }

    var inferer = inferers[node.type];
    if (inferer) {
      return inferer.call(this, node);
    }

    inferer = inferers[this.parentPath.type];
    if (inferer && inferer.validParent) {
      return this.parentPath.getTypeAnnotation();
    }
  }

  function isBaseType(baseName, soft) {
    return _isBaseType(baseName, this.getTypeAnnotation(), soft);
  }

  function _isBaseType(baseName, type, soft) {
    if (baseName === "string") {
      return t.isStringTypeAnnotation(type);
    } else if (baseName === "number") {
      return t.isNumberTypeAnnotation(type);
    } else if (baseName === "boolean") {
      return t.isBooleanTypeAnnotation(type);
    } else if (baseName === "any") {
      return t.isAnyTypeAnnotation(type);
    } else if (baseName === "mixed") {
      return t.isMixedTypeAnnotation(type);
    } else if (baseName === "void") {
      return t.isVoidTypeAnnotation(type);
    } else {
      if (soft) {
        return false;
      } else {
        throw new Error( /*istanbul ignore next*/"Unknown base type " + baseName);
      }
    }
  }

  function couldBeBaseType(name) {
    var type = this.getTypeAnnotation();
    if (t.isAnyTypeAnnotation(type)) return true;

    if (t.isUnionTypeAnnotation(type)) {
      for ( /*istanbul ignore next*/var _iterator = type.types, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
        /*istanbul ignore next*/
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var type2 = _ref;

        if (t.isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) {
          return true;
        }
      }
      return false;
    } else {
      return _isBaseType(name, type, true);
    }
  }

  function baseTypeStrictlyMatches(right) {
    var left = this.getTypeAnnotation();
    right = right.getTypeAnnotation();

    if (!t.isAnyTypeAnnotation(left) && t.isFlowBaseAnnotation(left)) {
      return right.type === left.type;
    }
  }

  function isGenericType(genericName) {
    var type = this.getTypeAnnotation();
    return t.isGenericTypeAnnotation(type) && t.isIdentifier(type.id, { name: genericName });
  }

/***/ },
/* 752 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;

  var _getIterator2 = __webpack_require__(93);

  var _getIterator3 = _interopRequireDefault(_getIterator2);

  exports.default = function (node) {
    if (!this.isReferenced()) return;

    // check if a binding exists of this value and if so then return a union type of all
    // possible types that the binding could be
    var binding = this.scope.getBinding(node.name);
    if (binding) {
      if (binding.identifier.typeAnnotation) {
        return binding.identifier.typeAnnotation;
      } else {
        return getTypeAnnotationBindingConstantViolations(this, node.name);
      }
    }

    // built-in values
    if (node.name === "undefined") {
      return t.voidTypeAnnotation();
    } else if (node.name === "NaN" || node.name === "Infinity") {
      return t.numberTypeAnnotation();
    } else if (node.name === "arguments") {
      // todo
    }
  };

  var /*istanbul ignore next*/_babelTypes = __webpack_require__(90);

  /*istanbul ignore next*/
  var t = _interopRequireWildcard(_babelTypes);

  /*istanbul ignore next*/
  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function getTypeAnnotationBindingConstantViolations(path, name) {
    var binding = path.scope.getBinding(name);

    var types = [];
    path.typeAnnotation = t.unionTypeAnnotation(types);

    var functionConstantViolations = [];
    var constantViolations = getConstantViolationsBefore(binding, path, functionConstantViolations);

    var testType = getConditionalAnnotation(path, name);
    if (testType) {
      /*istanbul ignore next*/
      (function () {
        var testConstantViolations = getConstantViolationsBefore(binding, testType.ifStatement);

        // remove constant violations observed before the IfStatement
        constantViolations = constantViolations.filter(function (path) /*istanbul ignore next*/{
          return testConstantViolations.indexOf(path) < 0;
        });

        // clear current types and add in observed test type
        types.push(testType.typeAnnotation);
      })();
    }

    if (constantViolations.length) {
      // pick one constant from each scope which will represent the last possible
      // control flow path that it could've taken/been
      /* This code is broken for the following problems:
       * It thinks that assignments can only happen in scopes.
       * What about conditionals, if statements without block,
       * or guarded assignments.
       * It also checks to see if one of the assignments is in the
       * same scope and uses that as the only "violation". However,
       * the binding is returned by `getConstantViolationsBefore` so we for
       * sure always going to return that as the only "violation".
      let rawConstantViolations = constantViolations.reverse();
      let visitedScopes = [];
      constantViolations = [];
      for (let violation of (rawConstantViolations: Array<NodePath>)) {
        let violationScope = violation.scope;
        if (visitedScopes.indexOf(violationScope) >= 0) continue;
         visitedScopes.push(violationScope);
        constantViolations.push(violation);
         if (violationScope === path.scope) {
          constantViolations = [violation];
          break;
        }
      }*/

      // add back on function constant violations since we can't track calls
      constantViolations = constantViolations.concat(functionConstantViolations);

      // push on inferred types of violated paths
      for ( /*istanbul ignore next*/var _iterator = constantViolations, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
        /*istanbul ignore next*/
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var violation = _ref;

        types.push(violation.getTypeAnnotation());
      }
    }

    if (types.length) {
      return t.createUnionTypeAnnotation(types);
    }
  }

  function getConstantViolationsBefore(binding, path, functions) {
    var violations = binding.constantViolations.slice();
    violations.unshift(binding.path);
    return violations.filter(function (violation) {
      violation = violation.resolve();
      var status = violation._guessExecutionStatusRelativeTo(path);
      if (functions && status === "function") functions.push(violation);
      return status === "before";
    });
  }

  function inferAnnotationFromBinaryExpression(name, path) {
    var operator = path.node.operator;

    var right = path.get("right").resolve();
    var left = path.get("left").resolve();

    var target = /*istanbul ignore next*/void 0;
    if (left.isIdentifier({ name: name })) {
      target = right;
    } else if (right.isIdentifier({ name: name })) {
      target = left;
    }
    if (target) {
      if (operator === "===") {
        return target.getTypeAnnotation();
      } else if (t.BOOLEAN_NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {
        return t.numberTypeAnnotation();
      } else {
        return;
      }
    } else {
      if (operator !== "===") return;
    }

    //
    var typeofPath = /*istanbul ignore next*/void 0;
    var typePath = /*istanbul ignore next*/void 0;
    if (left.isUnaryExpression({ operator: "typeof" })) {
      typeofPath = left;
      typePath = right;
    } else if (right.isUnaryExpression({ operator: "typeof" })) {
      typeofPath = right;
      typePath = left;
    }
    if (!typePath && !typeofPath) return;

    // ensure that the type path is a Literal
    typePath = typePath.resolve();
    if (!typePath.isLiteral()) return;

    // and that it's a string so we can infer it
    var typeValue = typePath.node.value;
    if (typeof typeValue !== "string") return;

    // and that the argument of the typeof path references us!
    if (!typeofPath.get("argument").isIdentifier({ name: name })) return;

    // turn type value into a type annotation
    return t.createTypeAnnotationBasedOnTypeof(typePath.node.value);
  }

  function getParentConditionalPath(path) {
    var parentPath = /*istanbul ignore next*/void 0;
    while (parentPath = path.parentPath) {
      if (parentPath.isIfStatement() || parentPath.isConditionalExpression()) {
        if (path.key === "test") {
          return;
        } else {
          return parentPath;
        }
      } else {
        path = parentPath;
      }
    }
  }

  function getConditionalAnnotation(path, name) {
    var ifStatement = getParentConditionalPath(path);
    if (!ifStatement) return;

    var test = ifStatement.get("test");
    var paths = [test];
    var types = [];

    do {
      var _path = paths.shift().resolve();

      if (_path.isLogicalExpression()) {
        paths.push(_path.get("left"));
        paths.push(_path.get("right"));
      }

      if (_path.isBinaryExpression()) {
        var type = inferAnnotationFromBinaryExpression(name, _path);
        if (type) types.push(type);
      }
    } while (paths.length);

    if (types.length) {
      return {
        typeAnnotation: t.createUnionTypeAnnotation(types),
        ifStatement: ifStatement
      };
    } else {
      return getConditionalAnnotation(ifStatement, name);
    }
  }
  /*istanbul ignore next*/module.exports = exports["default"];

/***/ },
/* 753 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;
  exports.Class = exports.Function = exports.Identifier = undefined;

  var _infererReference = __webpack_require__(752);

  Object.defineProperty(exports, "Identifier", {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(_infererReference).default;
    }
  });
  /*istanbul ignore next*/exports.VariableDeclarator = VariableDeclarator;
  /*istanbul ignore next*/exports.TypeCastExpression = TypeCastExpression;
  /*istanbul ignore next*/exports.NewExpression = NewExpression;
  /*istanbul ignore next*/exports.TemplateLiteral = TemplateLiteral;
  /*istanbul ignore next*/exports.UnaryExpression = UnaryExpression;
  /*istanbul ignore next*/exports.BinaryExpression = BinaryExpression;
  /*istanbul ignore next*/exports.LogicalExpression = LogicalExpression;
  /*istanbul ignore next*/exports.ConditionalExpression = ConditionalExpression;
  /*istanbul ignore next*/exports.SequenceExpression = SequenceExpression;
  /*istanbul ignore next*/exports.AssignmentExpression = AssignmentExpression;
  /*istanbul ignore next*/exports.UpdateExpression = UpdateExpression;
  /*istanbul ignore next*/exports.StringLiteral = StringLiteral;
  /*istanbul ignore next*/exports.NumericLiteral = NumericLiteral;
  /*istanbul ignore next*/exports.BooleanLiteral = BooleanLiteral;
  /*istanbul ignore next*/exports.NullLiteral = NullLiteral;
  /*istanbul ignore next*/exports.RegExpLiteral = RegExpLiteral;
  /*istanbul ignore next*/exports.ObjectExpression = ObjectExpression;
  /*istanbul ignore next*/exports.ArrayExpression = ArrayExpression;
  /*istanbul ignore next*/exports.RestElement = RestElement;
  /*istanbul ignore next*/exports.CallExpression = CallExpression;
  /*istanbul ignore next*/exports.TaggedTemplateExpression = TaggedTemplateExpression;

  var /*istanbul ignore next*/_babelTypes = __webpack_require__(90);

  /*istanbul ignore next*/
  var t = _interopRequireWildcard(_babelTypes);

  /*istanbul ignore next*/
  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function VariableDeclarator() {
    var id = this.get("id");

    if (id.isIdentifier()) {
      return this.get("init").getTypeAnnotation();
    } else {
      return;
    }
  }

  function TypeCastExpression(node) {
    return node.typeAnnotation;
  }

  TypeCastExpression.validParent = true;

  function NewExpression(node) {
    if (this.get("callee").isIdentifier()) {
      // only resolve identifier callee
      return t.genericTypeAnnotation(node.callee);
    }
  }

  function TemplateLiteral() {
    return t.stringTypeAnnotation();
  }

  function UnaryExpression(node) {
    var operator = node.operator;

    if (operator === "void") {
      return t.voidTypeAnnotation();
    } else if (t.NUMBER_UNARY_OPERATORS.indexOf(operator) >= 0) {
      return t.numberTypeAnnotation();
    } else if (t.STRING_UNARY_OPERATORS.indexOf(operator) >= 0) {
      return t.stringTypeAnnotation();
    } else if (t.BOOLEAN_UNARY_OPERATORS.indexOf(operator) >= 0) {
      return t.booleanTypeAnnotation();
    }
  }

  function BinaryExpression(node) {
    var operator = node.operator;

    if (t.NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {
      return t.numberTypeAnnotation();
    } else if (t.BOOLEAN_BINARY_OPERATORS.indexOf(operator) >= 0) {
      return t.booleanTypeAnnotation();
    } else if (operator === "+") {
      var right = this.get("right");
      var left = this.get("left");

      if (left.isBaseType("number") && right.isBaseType("number")) {
        // both numbers so this will be a number
        return t.numberTypeAnnotation();
      } else if (left.isBaseType("string") || right.isBaseType("string")) {
        // one is a string so the result will be a string
        return t.stringTypeAnnotation();
      }

      // unsure if left and right are strings or numbers so stay on the safe side
      return t.unionTypeAnnotation([t.stringTypeAnnotation(), t.numberTypeAnnotation()]);
    }
  }

  function LogicalExpression() {
    return t.createUnionTypeAnnotation([this.get("left").getTypeAnnotation(), this.get("right").getTypeAnnotation()]);
  }

  function ConditionalExpression() {
    return t.createUnionTypeAnnotation([this.get("consequent").getTypeAnnotation(), this.get("alternate").getTypeAnnotation()]);
  }

  function SequenceExpression() {
    return this.get("expressions").pop().getTypeAnnotation();
  }

  function AssignmentExpression() {
    return this.get("right").getTypeAnnotation();
  }

  function UpdateExpression(node) {
    var operator = node.operator;
    if (operator === "++" || operator === "--") {
      return t.numberTypeAnnotation();
    }
  }

  function StringLiteral() {
    return t.stringTypeAnnotation();
  }

  function NumericLiteral() {
    return t.numberTypeAnnotation();
  }

  function BooleanLiteral() {
    return t.booleanTypeAnnotation();
  }

  function NullLiteral() {
    return t.nullLiteralTypeAnnotation();
  }

  function RegExpLiteral() {
    return t.genericTypeAnnotation(t.identifier("RegExp"));
  }

  function ObjectExpression() {
    return t.genericTypeAnnotation(t.identifier("Object"));
  }

  function ArrayExpression() {
    return t.genericTypeAnnotation(t.identifier("Array"));
  }

  function RestElement() {
    return ArrayExpression();
  }

  RestElement.validParent = true;

  function Func() {
    return t.genericTypeAnnotation(t.identifier("Function"));
  }

  /*istanbul ignore next*/exports.Function = Func;
  /*istanbul ignore next*/exports.Class = Func;
  function CallExpression() {
    return resolveCall(this.get("callee"));
  }

  function TaggedTemplateExpression() {
    return resolveCall(this.get("tag"));
  }

  function resolveCall(callee) {
    callee = callee.resolve();

    if (callee.isFunction()) {
      if (callee.is("async")) {
        if (callee.is("generator")) {
          return t.genericTypeAnnotation(t.identifier("AsyncIterator"));
        } else {
          return t.genericTypeAnnotation(t.identifier("Promise"));
        }
      } else {
        if (callee.node.returnType) {
          return callee.node.returnType;
        } else {
          // todo: get union type of all return arguments
        }
      }
    }
  }

/***/ },
/* 754 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;
  exports.is = undefined;

  var _typeof2 = __webpack_require__(127);

  var _typeof3 = _interopRequireDefault(_typeof2);

  var _getIterator2 = __webpack_require__(93);

  var _getIterator3 = _interopRequireDefault(_getIterator2);

  exports.matchesPattern = matchesPattern;
  /*istanbul ignore next*/exports.has = has;
  /*istanbul ignore next*/exports.isStatic = isStatic;
  /*istanbul ignore next*/exports.isnt = isnt;
  /*istanbul ignore next*/exports.equals = equals;
  /*istanbul ignore next*/exports.isNodeType = isNodeType;
  /*istanbul ignore next*/exports.canHaveVariableDeclarationOrExpression = canHaveVariableDeclarationOrExpression;
  /*istanbul ignore next*/exports.canSwapBetweenExpressionAndStatement = canSwapBetweenExpressionAndStatement;
  /*istanbul ignore next*/exports.isCompletionRecord = isCompletionRecord;
  /*istanbul ignore next*/exports.isStatementOrBlock = isStatementOrBlock;
  /*istanbul ignore next*/exports.referencesImport = referencesImport;
  /*istanbul ignore next*/exports.getSource = getSource;
  /*istanbul ignore next*/exports.willIMaybeExecuteBefore = willIMaybeExecuteBefore;
  /*istanbul ignore next*/exports._guessExecutionStatusRelativeTo = _guessExecutionStatusRelativeTo;
  /*istanbul ignore next*/exports._guessExecutionStatusRelativeToDifferentFunctions = _guessExecutionStatusRelativeToDifferentFunctions;
  /*istanbul ignore next*/exports.resolve = resolve;
  /*istanbul ignore next*/exports._resolve = _resolve;

  var /*istanbul ignore next*/_includes = __webpack_require__(265);

  /*istanbul ignore next*/
  var _includes2 = _interopRequireDefault(_includes);

  var /*istanbul ignore next*/_babelTypes = __webpack_require__(90);

  /*istanbul ignore next*/
  var t = _interopRequireWildcard(_babelTypes);

  /*istanbul ignore next*/
  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Match the current node if it matches the provided `pattern`.
   *
   * For example, given the match `React.createClass` it would match the
   * parsed nodes of `React.createClass` and `React["createClass"]`.
   */

  function matchesPattern(pattern, allowPartial) {
    // not a member expression
    if (!this.isMemberExpression()) return false;

    var parts = pattern.split(".");
    var search = [this.node];
    var i = 0;

    function matches(name) {
      var part = parts[i];
      return part === "*" || name === part;
    }

    while (search.length) {
      var node = search.shift();

      if (allowPartial && i === parts.length) {
        return true;
      }

      if (t.isIdentifier(node)) {
        // this part doesn't match
        if (!matches(node.name)) return false;
      } else if (t.isLiteral(node)) {
        // this part doesn't match
        if (!matches(node.value)) return false;
      } else if (t.isMemberExpression(node)) {
        if (node.computed && !t.isLiteral(node.property)) {
          // we can't deal with this
          return false;
        } else {
          search.unshift(node.property);
          search.unshift(node.object);
          continue;
        }
      } else if (t.isThisExpression(node)) {
        if (!matches("this")) return false;
      } else {
        // we can't deal with this
        return false;
      }

      // too many parts
      if (++i > parts.length) {
        return false;
      }
    }

    return i === parts.length;
  }

  /**
   * Check whether we have the input `key`. If the `key` references an array then we check
   * if the array has any items, otherwise we just check if it's falsy.
   */

  // This file contains methods responsible for introspecting the current path for certain values.

  function has(key) {
    var val = this.node && this.node[key];
    if (val && Array.isArray(val)) {
      return !!val.length;
    } else {
      return !!val;
    }
  }

  /**
   * Description
   */

  function isStatic() {
    return this.scope.isStatic(this.node);
  }

  /**
   * Alias of `has`.
   */

  var is = /*istanbul ignore next*/exports.is = has;

  /**
   * Opposite of `has`.
   */

  function isnt(key) {
    return !this.has(key);
  }

  /**
   * Check whether the path node `key` strict equals `value`.
   */

  function equals(key, value) {
    return this.node[key] === value;
  }

  /**
   * Check the type against our stored internal type of the node. This is handy when a node has
   * been removed yet we still internally know the type and need it to calculate node replacement.
   */

  function isNodeType(type) {
    return t.isType(this.type, type);
  }

  /**
   * This checks whether or not we're in one of the following positions:
   *
   *   for (KEY in right);
   *   for (KEY;;);
   *
   * This is because these spots allow VariableDeclarations AND normal expressions so we need
   * to tell the path replacement that it's ok to replace this with an expression.
   */

  function canHaveVariableDeclarationOrExpression() {
    return (this.key === "init" || this.key === "left") && this.parentPath.isFor();
  }

  /**
   * This checks whether we are swapping an arrow function's body between an
   * expression and a block statement (or vice versa).
   *
   * This is because arrow functions may implicitly return an expression, which
   * is the same as containing a block statement.
   */

  function canSwapBetweenExpressionAndStatement(replacement) {
    if (this.key !== "body" || !this.parentPath.isArrowFunctionExpression()) {
      return false;
    }

    if (this.isExpression()) {
      return t.isBlockStatement(replacement);
    } else if (this.isBlockStatement()) {
      return t.isExpression(replacement);
    }

    return false;
  }

  /**
   * Check whether the current path references a completion record
   */

  function isCompletionRecord(allowInsideFunction) {
    var path = this;
    var first = true;

    do {
      var container = path.container;

      // we're in a function so can't be a completion record
      if (path.isFunction() && !first) {
        return !!allowInsideFunction;
      }

      first = false;

      // check to see if we're the last item in the container and if we are
      // we're a completion record!
      if (Array.isArray(container) && path.key !== container.length - 1) {
        return false;
      }
    } while ((path = path.parentPath) && !path.isProgram());

    return true;
  }

  /**
   * Check whether or not the current `key` allows either a single statement or block statement
   * so we can explode it if necessary.
   */

  function isStatementOrBlock() {
    if (this.parentPath.isLabeledStatement() || t.isBlockStatement(this.container)) {
      return false;
    } else {
      return (/*istanbul ignore next*/(0, _includes2.default)(t.STATEMENT_OR_BLOCK_KEYS, this.key)
      );
    }
  }

  /**
   * Check if the currently assigned path references the `importName` of `moduleSource`.
   */

  function referencesImport(moduleSource, importName) {
    if (!this.isReferencedIdentifier()) return false;

    var binding = this.scope.getBinding(this.node.name);
    if (!binding || binding.kind !== "module") return false;

    var path = binding.path;
    var parent = path.parentPath;
    if (!parent.isImportDeclaration()) return false;

    // check moduleSource
    if (parent.node.source.value === moduleSource) {
      if (!importName) return true;
    } else {
      return false;
    }

    if (path.isImportDefaultSpecifier() && importName === "default") {
      return true;
    }

    if (path.isImportNamespaceSpecifier() && importName === "*") {
      return true;
    }

    if (path.isImportSpecifier() && path.node.imported.name === importName) {
      return true;
    }

    return false;
  }

  /**
   * Get the source code associated with this node.
   */

  function getSource() {
    var node = this.node;
    if (node.end) {
      return this.hub.file.code.slice(node.start, node.end);
    } else {
      return "";
    }
  }

  function willIMaybeExecuteBefore(target) {
    return this._guessExecutionStatusRelativeTo(target) !== "after";
  }

  /**
   * Given a `target` check the execution status of it relative to the current path.
   *
   * "Execution status" simply refers to where or not we **think** this will execuete
   * before or after the input `target` element.
   */

  function _guessExecutionStatusRelativeTo(target) {
    // check if the two paths are in different functions, we can't track execution of these
    var targetFuncParent = target.scope.getFunctionParent();
    var selfFuncParent = this.scope.getFunctionParent();

    // here we check the `node` equality as sometimes we may have different paths for the
    // same node due to path thrashing
    if (targetFuncParent.node !== selfFuncParent.node) {
      var status = this._guessExecutionStatusRelativeToDifferentFunctions(targetFuncParent);
      if (status) {
        return status;
      } else {
        target = targetFuncParent.path;
      }
    }

    var targetPaths = target.getAncestry();
    if (targetPaths.indexOf(this) >= 0) return "after";

    var selfPaths = this.getAncestry();

    // get ancestor where the branches intersect
    var commonPath = /*istanbul ignore next*/void 0;
    var targetIndex = /*istanbul ignore next*/void 0;
    var selfIndex = /*istanbul ignore next*/void 0;
    for (selfIndex = 0; selfIndex < selfPaths.length; selfIndex++) {
      var selfPath = selfPaths[selfIndex];
      targetIndex = targetPaths.indexOf(selfPath);
      if (targetIndex >= 0) {
        commonPath = selfPath;
        break;
      }
    }
    if (!commonPath) {
      return "before";
    }

    // get the relationship paths that associate these nodes to their common ancestor
    var targetRelationship = targetPaths[targetIndex - 1];
    var selfRelationship = selfPaths[selfIndex - 1];
    if (!targetRelationship || !selfRelationship) {
      return "before";
    }

    // container list so let's see which one is after the other
    if (targetRelationship.listKey && targetRelationship.container === selfRelationship.container) {
      return targetRelationship.key > selfRelationship.key ? "before" : "after";
    }

    // otherwise we're associated by a parent node, check which key comes before the other
    var targetKeyPosition = t.VISITOR_KEYS[targetRelationship.type].indexOf(targetRelationship.key);
    var selfKeyPosition = t.VISITOR_KEYS[selfRelationship.type].indexOf(selfRelationship.key);
    return targetKeyPosition > selfKeyPosition ? "before" : "after";
  }

  function _guessExecutionStatusRelativeToDifferentFunctions(targetFuncParent) {
    var targetFuncPath = targetFuncParent.path;
    if (!targetFuncPath.isFunctionDeclaration()) return;

    // so we're in a completely different function, if this is a function declaration
    // then we can be a bit smarter and handle cases where the function is either
    // a. not called at all (part of an export)
    // b. called directly
    var binding = targetFuncPath.scope.getBinding(targetFuncPath.node.id.name);

    // no references!
    if (!binding.references) return "before";

    var referencePaths = binding.referencePaths;

    // verify that all of the references are calls
    for ( /*istanbul ignore next*/var _iterator = referencePaths, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
      /*istanbul ignore next*/
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var path = _ref;

      if (path.key !== "callee" || !path.parentPath.isCallExpression()) {
        return;
      }
    }

    var allStatus = /*istanbul ignore next*/void 0;

    // verify that all the calls have the same execution status
    for ( /*istanbul ignore next*/var _iterator2 = referencePaths, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
      /*istanbul ignore next*/
      var _ref2;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref2 = _i2.value;
      }

      var _path = _ref2;

      // if a reference is a child of the function we're checking against then we can
      // safelty ignore it
      var childOfFunction = !!_path.find(function (path) /*istanbul ignore next*/{
        return path.node === targetFuncPath.node;
      });
      if (childOfFunction) continue;

      var status = this._guessExecutionStatusRelativeTo(_path);

      if (allStatus) {
        if (allStatus !== status) return;
      } else {
        allStatus = status;
      }
    }

    return allStatus;
  }

  /**
   * Resolve a "pointer" `NodePath` to it's absolute path.
   */

  function resolve(dangerous, resolved) {
    return this._resolve(dangerous, resolved) || this;
  }

  function _resolve(dangerous, resolved) {
    /*istanbul ignore next*/
    var _this = this;

    // detect infinite recursion
    // todo: possibly have a max length on this just to be safe
    if (resolved && resolved.indexOf(this) >= 0) return;

    // we store all the paths we've "resolved" in this array to prevent infinite recursion
    resolved = resolved || [];
    resolved.push(this);

    if (this.isVariableDeclarator()) {
      if (this.get("id").isIdentifier()) {
        return this.get("init").resolve(dangerous, resolved);
      } else {
        // otherwise it's a request for a pattern and that's a bit more tricky
      }
    } else if (this.isReferencedIdentifier()) {
        var binding = this.scope.getBinding(this.node.name);
        if (!binding) return;

        // reassigned so we can't really resolve it
        if (!binding.constant) return;

        // todo - lookup module in dependency graph
        if (binding.kind === "module") return;

        if (binding.path !== this) {
          /*istanbul ignore next*/
          var _ret = function () {
            var ret = binding.path.resolve(dangerous, resolved);
            // If the identifier resolves to parent node then we can't really resolve it.
            if ( /*istanbul ignore next*/_this.find(function (parent) /*istanbul ignore next*/{
              return parent.node === ret.node;
            })) return (/*istanbul ignore next*/{
                  v: void 0
                }
              );
            return (/*istanbul ignore next*/{
                v: ret
              }
            );
          }();

          /*istanbul ignore next*/if ((typeof _ret === "undefined" ? "undefined" : (0, _typeof3.default)(_ret)) === "object") return _ret.v;
        }
      } else if (this.isTypeCastExpression()) {
        return this.get("expression").resolve(dangerous, resolved);
      } else if (dangerous && this.isMemberExpression()) {
        // this is dangerous, as non-direct target assignments will mutate it's state
        // making this resolution inaccurate

        var targetKey = this.toComputedKey();
        if (!t.isLiteral(targetKey)) return;

        var targetName = targetKey.value;

        var target = this.get("object").resolve(dangerous, resolved);

        if (target.isObjectExpression()) {
          var props = target.get("properties");
          for ( /*istanbul ignore next*/var _iterator3 = props, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);;) {
            /*istanbul ignore next*/
            var _ref3;

            if (_isArray3) {
              if (_i3 >= _iterator3.length) break;
              _ref3 = _iterator3[_i3++];
            } else {
              _i3 = _iterator3.next();
              if (_i3.done) break;
              _ref3 = _i3.value;
            }

            var prop = _ref3;

            if (!prop.isProperty()) continue;

            var key = prop.get("key");

            // { foo: obj }
            var match = prop.isnt("computed") && key.isIdentifier({ name: targetName });

            // { "foo": "obj" } or { ["foo"]: "obj" }
            match = match || key.isLiteral({ value: targetName });

            if (match) return prop.get("value").resolve(dangerous, resolved);
          }
        } else if (target.isArrayExpression() && !isNaN(+targetName)) {
          var elems = target.get("elements");
          var elem = elems[targetName];
          if (elem) return elem.resolve(dangerous, resolved);
        }
      }
  }

/***/ },
/* 755 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;

  var _classCallCheck2 = __webpack_require__(97);

  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

  var _getIterator2 = __webpack_require__(93);

  var _getIterator3 = _interopRequireDefault(_getIterator2);

  var /*istanbul ignore next*/_babelTypes = __webpack_require__(90);

  /*istanbul ignore next*/
  var t = _interopRequireWildcard(_babelTypes);

  /*istanbul ignore next*/
  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var referenceVisitor = { /*istanbul ignore next*/
    ReferencedIdentifier: function ReferencedIdentifier(path, state) {
      if (path.isJSXIdentifier() && /*istanbul ignore next*/_babelTypes.react.isCompatTag(path.node.name)) {
        return;
      }

      // direct references that we need to track to hoist this to the highest scope we can
      var binding = path.scope.getBinding(path.node.name);
      if (!binding) return;

      // this binding isn't accessible from the parent scope so we can safely ignore it
      // eg. it's in a closure etc
      if (binding !== state.scope.getBinding(path.node.name)) return;

      if (binding.constant) {
        state.bindings[path.node.name] = binding;
      } else {
        for ( /*istanbul ignore next*/var _iterator = binding.constantViolations, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
          /*istanbul ignore next*/
          var _ref;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
          }

          var violationPath = _ref;

          state.breakOnScopePaths = state.breakOnScopePaths.concat(violationPath.getAncestry());
        }
      }
    }
  };

  /*istanbul ignore next*/
  var PathHoister = function () {
    function /*istanbul ignore next*/PathHoister(path, scope) {
      /*istanbul ignore next*/(0, _classCallCheck3.default)(this, PathHoister);

      this.breakOnScopePaths = [];
      this.bindings = {};
      this.scopes = [];
      this.scope = scope;
      this.path = path;
    }

    PathHoister.prototype.isCompatibleScope = function isCompatibleScope(scope) {
      for (var key in this.bindings) {
        var binding = this.bindings[key];
        if (!scope.bindingIdentifierEquals(key, binding.identifier)) {
          return false;
        }
      }

      return true;
    };

    PathHoister.prototype.getCompatibleScopes = function getCompatibleScopes() {
      var scope = this.path.scope;
      do {
        if (this.isCompatibleScope(scope)) {
          this.scopes.push(scope);
        } else {
          break;
        }

        if (this.breakOnScopePaths.indexOf(scope.path) >= 0) {
          break;
        }
      } while (scope = scope.parent);
    };

    PathHoister.prototype.getAttachmentPath = function getAttachmentPath() {
      var scopes = this.scopes;

      var scope = scopes.pop();
      if (!scope) return;

      if (scope.path.isFunction()) {
        if (this.hasOwnParamBindings(scope)) {
          // should ignore this scope since it's ourselves
          if (this.scope === scope) return;

          // needs to be attached to the body
          return scope.path.get("body").get("body")[0];
        } else {
          // doesn't need to be be attached to this scope
          return this.getNextScopeStatementParent();
        }
      } else if (scope.path.isProgram()) {
        return this.getNextScopeStatementParent();
      }
    };

    PathHoister.prototype.getNextScopeStatementParent = function getNextScopeStatementParent() {
      var scope = this.scopes.pop();
      if (scope) return scope.path.getStatementParent();
    };

    PathHoister.prototype.hasOwnParamBindings = function hasOwnParamBindings(scope) {
      for (var name in this.bindings) {
        if (!scope.hasOwnBinding(name)) continue;

        var binding = this.bindings[name];
        if (binding.kind === "param") return true;
      }
      return false;
    };

    PathHoister.prototype.run = function run() {
      var node = this.path.node;
      if (node._hoisted) return;
      node._hoisted = true;

      this.path.traverse(referenceVisitor, this);

      this.getCompatibleScopes();

      var attachTo = this.getAttachmentPath();
      if (!attachTo) return;

      // don't bother hoisting to the same function as this will cause multiple branches to be evaluated more than once leading to a bad optimisation
      if (attachTo.getFunctionParent() === this.path.getFunctionParent()) return;

      var uid = attachTo.scope.generateUidIdentifier("ref");

      attachTo.insertBefore([t.variableDeclaration("var", [t.variableDeclarator(uid, this.path.node)])]);

      var parent = this.path.parentPath;

      if (parent.isJSXElement() && this.path.container === parent.node.children) {
        // turning the `span` in `<div><span /></div>` to an expression so we need to wrap it with
        // an expression container
        uid = t.JSXExpressionContainer(uid);
      }

      this.path.replaceWith(uid);
    };

    return PathHoister;
  }();

  /*istanbul ignore next*/exports.default = PathHoister;
  /*istanbul ignore next*/module.exports = exports["default"];

/***/ },
/* 756 */
/***/ function(module, exports) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;
  // this file contains hooks that handle ancestry cleanup of parent nodes when removing children

  /**
   * Pre hooks should be used for either rejecting removal or delegating removal
   */

  var hooks = /*istanbul ignore next*/exports.hooks = [function (self, parent) {
    if (self.key === "body" && parent.isArrowFunctionExpression()) {
      self.replaceWith(self.scope.buildUndefinedNode());
      return true;
    }
  }, function (self, parent) {
    var removeParent = false;

    // while (NODE);
    // removing the test of a while/switch, we can either just remove it entirely *or* turn the `test` into `true`
    // unlikely that the latter will ever be what's wanted so we just remove the loop to avoid infinite recursion
    removeParent = removeParent || self.key === "test" && (parent.isWhile() || parent.isSwitchCase());

    // export NODE;
    // just remove a declaration for an export as this is no longer valid
    removeParent = removeParent || self.key === "declaration" && parent.isExportDeclaration();

    // label: NODE
    // stray labeled statement with no body
    removeParent = removeParent || self.key === "body" && parent.isLabeledStatement();

    // let NODE;
    // remove an entire declaration if there are no declarators left
    removeParent = removeParent || self.listKey === "declarations" && parent.isVariableDeclaration() && parent.node.declarations.length === 1;

    // NODE;
    // remove the entire expression statement if there's no expression
    removeParent = removeParent || self.key === "expression" && parent.isExpressionStatement();

    if (removeParent) {
      parent.remove();
      return true;
    }
  }, function (self, parent) {
    if (parent.isSequenceExpression() && parent.node.expressions.length === 1) {
      // (node, NODE);
      // we've just removed the second element of a sequence expression so let's turn that sequence
      // expression into a regular expression
      parent.replaceWith(parent.node.expressions[0]);
      return true;
    }
  }, function (self, parent) {
    if (parent.isBinary()) {
      // left + NODE;
      // NODE + right;
      // we're in a binary expression, better remove it and replace it with the last expression
      if (self.key === "left") {
        parent.replaceWith(parent.node.right);
      } else {
        // key === "right"
        parent.replaceWith(parent.node.left);
      }
      return true;
    }
  }];

/***/ },
/* 757 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;

  var _typeof2 = __webpack_require__(127);

  var _typeof3 = _interopRequireDefault(_typeof2);

  var _getIterator2 = __webpack_require__(93);

  var _getIterator3 = _interopRequireDefault(_getIterator2);

  exports.insertBefore = insertBefore;
  /*istanbul ignore next*/exports._containerInsert = _containerInsert;
  /*istanbul ignore next*/exports._containerInsertBefore = _containerInsertBefore;
  /*istanbul ignore next*/exports._containerInsertAfter = _containerInsertAfter;
  /*istanbul ignore next*/exports._maybePopFromStatements = _maybePopFromStatements;
  /*istanbul ignore next*/exports.insertAfter = insertAfter;
  /*istanbul ignore next*/exports.updateSiblingKeys = updateSiblingKeys;
  /*istanbul ignore next*/exports._verifyNodeList = _verifyNodeList;
  /*istanbul ignore next*/exports.unshiftContainer = unshiftContainer;
  /*istanbul ignore next*/exports.pushContainer = pushContainer;
  /*istanbul ignore next*/exports.hoist = hoist;

  var /*istanbul ignore next*/_cache = __webpack_require__(226);

  var /*istanbul ignore next*/_hoister = __webpack_require__(755);

  /*istanbul ignore next*/
  var _hoister2 = _interopRequireDefault(_hoister);

  var /*istanbul ignore next*/_index = __webpack_require__(173);

  /*istanbul ignore next*/
  var _index2 = _interopRequireDefault(_index);

  var /*istanbul ignore next*/_babelTypes = __webpack_require__(90);

  /*istanbul ignore next*/
  var t = _interopRequireWildcard(_babelTypes);

  /*istanbul ignore next*/
  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Insert the provided nodes before the current one.
   */

  /* eslint max-len: 0 */
  // This file contains methods that modify the path/node in some ways.

  function insertBefore(nodes) {
    this._assertUnremoved();

    nodes = this._verifyNodeList(nodes);

    if (this.parentPath.isExpressionStatement() || this.parentPath.isLabeledStatement()) {
      return this.parentPath.insertBefore(nodes);
    } else if (this.isNodeType("Expression") || this.parentPath.isForStatement() && this.key === "init") {
      if (this.node) nodes.push(this.node);
      this.replaceExpressionWithStatements(nodes);
    } else {
      this._maybePopFromStatements(nodes);
      if (Array.isArray(this.container)) {
        return this._containerInsertBefore(nodes);
      } else if (this.isStatementOrBlock()) {
        if (this.node) nodes.push(this.node);
        this._replaceWith(t.blockStatement(nodes));
      } else {
        throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
      }
    }

    return [this];
  }

  function _containerInsert(from, nodes) {
    this.updateSiblingKeys(from, nodes.length);

    var paths = [];

    for (var i = 0; i < nodes.length; i++) {
      var to = from + i;
      var node = nodes[i];
      this.container.splice(to, 0, node);

      if (this.context) {
        var path = this.context.create(this.parent, this.container, to, this.listKey);

        // While this path may have a context, there is currently no guarantee that the context
        // will be the active context, because `popContext` may leave a final context in place.
        // We should remove this `if` and always push once T7171 has been resolved.
        if (this.context.queue) path.pushContext(this.context);
        paths.push(path);
      } else {
        paths.push( /*istanbul ignore next*/_index2.default.get({
          parentPath: this.parentPath,
          parent: this.parent,
          container: this.container,
          listKey: this.listKey,
          key: to
        }));
      }
    }

    var contexts = this._getQueueContexts();

    for ( /*istanbul ignore next*/var _iterator = paths, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
      /*istanbul ignore next*/
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var _path = _ref;

      _path.setScope();
      _path.debug(function () /*istanbul ignore next*/{
        return "Inserted.";
      });

      for ( /*istanbul ignore next*/var _iterator2 = contexts, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
        /*istanbul ignore next*/
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var context = _ref2;

        context.maybeQueue(_path, true);
      }
    }

    return paths;
  }

  function _containerInsertBefore(nodes) {
    return this._containerInsert(this.key, nodes);
  }

  function _containerInsertAfter(nodes) {
    return this._containerInsert(this.key + 1, nodes);
  }

  function _maybePopFromStatements(nodes) {
    var last = nodes[nodes.length - 1];
    var isIdentifier = t.isIdentifier(last) || t.isExpressionStatement(last) && t.isIdentifier(last.expression);

    if (isIdentifier && !this.isCompletionRecord()) {
      nodes.pop();
    }
  }

  /**
   * Insert the provided nodes after the current one. When inserting nodes after an
   * expression, ensure that the completion record is correct by pushing the current node.
   */

  function insertAfter(nodes) {
    this._assertUnremoved();

    nodes = this._verifyNodeList(nodes);

    if (this.parentPath.isExpressionStatement() || this.parentPath.isLabeledStatement()) {
      return this.parentPath.insertAfter(nodes);
    } else if (this.isNodeType("Expression") || this.parentPath.isForStatement() && this.key === "init") {
      if (this.node) {
        var temp = this.scope.generateDeclaredUidIdentifier();
        nodes.unshift(t.expressionStatement(t.assignmentExpression("=", temp, this.node)));
        nodes.push(t.expressionStatement(temp));
      }
      this.replaceExpressionWithStatements(nodes);
    } else {
      this._maybePopFromStatements(nodes);
      if (Array.isArray(this.container)) {
        return this._containerInsertAfter(nodes);
      } else if (this.isStatementOrBlock()) {
        if (this.node) nodes.unshift(this.node);
        this._replaceWith(t.blockStatement(nodes));
      } else {
        throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
      }
    }

    return [this];
  }

  /**
   * Update all sibling node paths after `fromIndex` by `incrementBy`.
   */

  function updateSiblingKeys(fromIndex, incrementBy) {
    if (!this.parent) return;

    var paths = /*istanbul ignore next*/_cache.path.get(this.parent);
    for (var i = 0; i < paths.length; i++) {
      var path = paths[i];
      if (path.key >= fromIndex) {
        path.key += incrementBy;
      }
    }
  }

  function _verifyNodeList(nodes) {
    if (!nodes) {
      return [];
    }

    if (nodes.constructor !== Array) {
      nodes = [nodes];
    }

    for (var i = 0; i < nodes.length; i++) {
      var node = nodes[i];
      var msg = /*istanbul ignore next*/void 0;

      if (!node) {
        msg = "has falsy node";
      } else if ( /*istanbul ignore next*/(typeof node === "undefined" ? "undefined" : (0, _typeof3.default)(node)) !== "object") {
        msg = "contains a non-object node";
      } else if (!node.type) {
        msg = "without a type";
      } else if (node instanceof /*istanbul ignore next*/_index2.default) {
        msg = "has a NodePath when it expected a raw object";
      }

      if (msg) {
        var type = Array.isArray(node) ? "array" : /*istanbul ignore next*/typeof node === "undefined" ? "undefined" : (0, _typeof3.default)(node);
        throw new Error( /*istanbul ignore next*/"Node list " + msg + " with the index of " + i + " and type of " + type);
      }
    }

    return nodes;
  }

  function unshiftContainer(listKey, nodes) {
    this._assertUnremoved();

    nodes = this._verifyNodeList(nodes);

    // get the first path and insert our nodes before it, if it doesn't exist then it
    // doesn't matter, our nodes will be inserted anyway
    var path = /*istanbul ignore next*/_index2.default.get({
      parentPath: this,
      parent: this.node,
      container: this.node[listKey],
      listKey: listKey,
      key: 0
    });

    return path.insertBefore(nodes);
  }

  function pushContainer(listKey, nodes) {
    this._assertUnremoved();

    nodes = this._verifyNodeList(nodes);

    // get an invisible path that represents the last node + 1 and replace it with our
    // nodes, effectively inlining it

    var container = this.node[listKey];
    var path = /*istanbul ignore next*/_index2.default.get({
      parentPath: this,
      parent: this.node,
      container: container,
      listKey: listKey,
      key: container.length
    });

    return path.replaceWithMultiple(nodes);
  }

  /**
   * Hoist the current node to the highest scope possible and return a UID
   * referencing it.
   */

  function hoist() {
    /*istanbul ignore next*/var scope = arguments.length <= 0 || arguments[0] === undefined ? this.scope : arguments[0];

    var hoister = new /*istanbul ignore next*/_hoister2.default(this, scope);
    return hoister.run();
  }

/***/ },
/* 758 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;

  var _getIterator2 = __webpack_require__(93);

  var _getIterator3 = _interopRequireDefault(_getIterator2);

  exports.remove = remove;
  /*istanbul ignore next*/exports._callRemovalHooks = _callRemovalHooks;
  /*istanbul ignore next*/exports._remove = _remove;
  /*istanbul ignore next*/exports._markRemoved = _markRemoved;
  /*istanbul ignore next*/exports._assertUnremoved = _assertUnremoved;

  var /*istanbul ignore next*/_removalHooks = __webpack_require__(756);

  /*istanbul ignore next*/
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function remove() {
    this._assertUnremoved();

    this.resync();

    if (this._callRemovalHooks()) {
      this._markRemoved();
      return;
    }

    this.shareCommentsWithSiblings();
    this._remove();
    this._markRemoved();
  } // This file contains methods responsible for removing a node.

  function _callRemovalHooks() {
    for ( /*istanbul ignore next*/var _iterator = _removalHooks.hooks, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
      /*istanbul ignore next*/
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var fn = _ref;

      if (fn(this, this.parentPath)) return true;
    }
  }

  function _remove() {
    if (Array.isArray(this.container)) {
      this.container.splice(this.key, 1);
      this.updateSiblingKeys(this.key, -1);
    } else {
      this._replaceWith(null);
    }
  }

  function _markRemoved() {
    this.shouldSkip = true;
    this.removed = true;
    this.node = null;
  }

  function _assertUnremoved() {
    if (this.removed) {
      throw this.buildCodeFrameError("NodePath has been removed so is read-only.");
    }
  }

/***/ },
/* 759 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;

  var _getIterator2 = __webpack_require__(93);

  var _getIterator3 = _interopRequireDefault(_getIterator2);

  exports.replaceWithMultiple = replaceWithMultiple;
  /*istanbul ignore next*/exports.replaceWithSourceString = replaceWithSourceString;
  /*istanbul ignore next*/exports.replaceWith = replaceWith;
  /*istanbul ignore next*/exports._replaceWith = _replaceWith;
  /*istanbul ignore next*/exports.replaceExpressionWithStatements = replaceExpressionWithStatements;
  /*istanbul ignore next*/exports.replaceInline = replaceInline;

  var /*istanbul ignore next*/_babelCodeFrame = __webpack_require__(379);

  /*istanbul ignore next*/
  var _babelCodeFrame2 = _interopRequireDefault(_babelCodeFrame);

  var /*istanbul ignore next*/_index = __webpack_require__(128);

  /*istanbul ignore next*/
  var _index2 = _interopRequireDefault(_index);

  var /*istanbul ignore next*/_index3 = __webpack_require__(173);

  /*istanbul ignore next*/
  var _index4 = _interopRequireDefault(_index3);

  var /*istanbul ignore next*/_babylon = __webpack_require__(290);

  var /*istanbul ignore next*/_babelTypes = __webpack_require__(90);

  /*istanbul ignore next*/
  var t = _interopRequireWildcard(_babelTypes);

  /*istanbul ignore next*/
  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var hoistVariablesVisitor = { /*istanbul ignore next*/
    Function: function Function(path) {
      path.skip();
    },
    /*istanbul ignore next*/VariableDeclaration: function VariableDeclaration(path) {
      if (path.node.kind !== "var") return;

      var bindings = path.getBindingIdentifiers();
      for (var key in bindings) {
        path.scope.push({ id: bindings[key] });
      }

      var exprs = [];

      for ( /*istanbul ignore next*/var _iterator = path.node.declarations, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
        /*istanbul ignore next*/
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var declar = _ref;

        if (declar.init) {
          exprs.push(t.expressionStatement(t.assignmentExpression("=", declar.id, declar.init)));
        }
      }

      path.replaceWithMultiple(exprs);
    }
  };

  /**
   * Replace a node with an array of multiple. This method performs the following steps:
   *
   *  - Inherit the comments of first provided node with that of the current node.
   *  - Insert the provided nodes after the current node.
   *  - Remove the current node.
   */

  /* eslint max-len: 0 */
  // This file contains methods responsible for replacing a node with another.

  function replaceWithMultiple(nodes) {
    this.resync();

    nodes = this._verifyNodeList(nodes);
    t.inheritLeadingComments(nodes[0], this.node);
    t.inheritTrailingComments(nodes[nodes.length - 1], this.node);
    this.node = this.container[this.key] = null;
    this.insertAfter(nodes);

    if (this.node) {
      this.requeue();
    } else {
      this.remove();
    }
  }

  /**
   * Parse a string as an expression and replace the current node with the result.
   *
   * NOTE: This is typically not a good idea to use. Building source strings when
   * transforming ASTs is an antipattern and SHOULD NOT be encouraged. Even if it's
   * easier to use, your transforms will be extremely brittle.
   */

  function replaceWithSourceString(replacement) {
    this.resync();

    try {
      replacement = /*istanbul ignore next*/"(" + replacement + ")";
      replacement = /*istanbul ignore next*/(0, _babylon.parse)(replacement);
    } catch (err) {
      var loc = err.loc;
      if (loc) {
        err.message += " - make sure this is an expression.";
        err.message += "\n" + /*istanbul ignore next*/(0, _babelCodeFrame2.default)(replacement, loc.line, loc.column + 1);
      }
      throw err;
    }

    replacement = replacement.program.body[0].expression;
    /*istanbul ignore next*/_index2.default.removeProperties(replacement);
    return this.replaceWith(replacement);
  }

  /**
   * Replace the current node with another.
   */

  function replaceWith(replacement) {
    this.resync();

    if (this.removed) {
      throw new Error("You can't replace this node, we've already removed it");
    }

    if (replacement instanceof /*istanbul ignore next*/_index4.default) {
      replacement = replacement.node;
    }

    if (!replacement) {
      throw new Error("You passed `path.replaceWith()` a falsy node, use `path.remove()` instead");
    }

    if (this.node === replacement) {
      return;
    }

    if (this.isProgram() && !t.isProgram(replacement)) {
      throw new Error("You can only replace a Program root node with another Program node");
    }

    if (Array.isArray(replacement)) {
      throw new Error("Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`");
    }

    if (typeof replacement === "string") {
      throw new Error("Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`");
    }

    if (this.isNodeType("Statement") && t.isExpression(replacement)) {
      if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement)) {
        // replacing a statement with an expression so wrap it in an expression statement
        replacement = t.expressionStatement(replacement);
      }
    }

    if (this.isNodeType("Expression") && t.isStatement(replacement)) {
      if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement)) {
        // replacing an expression with a statement so let's explode it
        return this.replaceExpressionWithStatements([replacement]);
      }
    }

    var oldNode = this.node;
    if (oldNode) {
      t.inheritsComments(replacement, oldNode);
      t.removeComments(oldNode);
    }

    // replace the node
    this._replaceWith(replacement);
    this.type = replacement.type;

    // potentially create new scope
    this.setScope();

    // requeue for visiting
    this.requeue();
  }

  /**
   * Description
   */

  function _replaceWith(node) {
    if (!this.container) {
      throw new ReferenceError("Container is falsy");
    }

    if (this.inList) {
      t.validate(this.parent, this.key, [node]);
    } else {
      t.validate(this.parent, this.key, node);
    }

    this.debug(function () /*istanbul ignore next*/{
      return "Replace with " + (node && node.type);
    });

    this.node = this.container[this.key] = node;
  }

  /**
   * This method takes an array of statements nodes and then explodes it
   * into expressions. This method retains completion records which is
   * extremely important to retain original semantics.
   */

  function replaceExpressionWithStatements(nodes) {
    this.resync();

    var toSequenceExpression = t.toSequenceExpression(nodes, this.scope);

    if (t.isSequenceExpression(toSequenceExpression)) {
      var exprs = toSequenceExpression.expressions;

      if (exprs.length >= 2 && this.parentPath.isExpressionStatement()) {
        this._maybePopFromStatements(exprs);
      }

      // could be just one element due to the previous maybe popping
      if (exprs.length === 1) {
        this.replaceWith(exprs[0]);
      } else {
        this.replaceWith(toSequenceExpression);
      }
    } else if (toSequenceExpression) {
      this.replaceWith(toSequenceExpression);
    } else {
      var container = t.functionExpression(null, [], t.blockStatement(nodes));
      container.shadow = true;

      this.replaceWith(t.callExpression(container, []));
      this.traverse(hoistVariablesVisitor);

      // add implicit returns to all ending expression statements
      var completionRecords = this.get("callee").getCompletionRecords();
      for ( /*istanbul ignore next*/var _iterator2 = completionRecords, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
        /*istanbul ignore next*/
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var path = _ref2;

        if (!path.isExpressionStatement()) continue;

        var loop = path.findParent(function (path) /*istanbul ignore next*/{
          return path.isLoop();
        });
        if (loop) {
          var callee = this.get("callee");

          var uid = callee.scope.generateDeclaredUidIdentifier("ret");
          callee.get("body").pushContainer("body", t.returnStatement(uid));

          path.get("expression").replaceWith(t.assignmentExpression("=", uid, path.node.expression));
        } else {
          path.replaceWith(t.returnStatement(path.node.expression));
        }
      }

      return this.node;
    }
  }

  function replaceInline(nodes) {
    this.resync();

    if (Array.isArray(nodes)) {
      if (Array.isArray(this.container)) {
        nodes = this._verifyNodeList(nodes);
        this._containerInsertAfter(nodes);
        return this.remove();
      } else {
        return this.replaceWithMultiple(nodes);
      }
    } else {
      return this.replaceWith(nodes);
    }
  }

/***/ },
/* 760 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;

  var _classCallCheck2 = __webpack_require__(97);

  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

  var /*istanbul ignore next*/_binding = __webpack_require__(391);

  /*istanbul ignore next*/
  var _binding2 = _interopRequireDefault(_binding);

  var /*istanbul ignore next*/_babelTypes = __webpack_require__(90);

  /*istanbul ignore next*/
  var t = _interopRequireWildcard(_babelTypes);

  /*istanbul ignore next*/
  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var renameVisitor = { /*istanbul ignore next*/
    ReferencedIdentifier: function ReferencedIdentifier(_ref, state) {
      /*istanbul ignore next*/var node = _ref.node;

      if (node.name === state.oldName) {
        node.name = state.newName;
      }
    },
    /*istanbul ignore next*/Scope: function Scope(path, state) {
      if (!path.scope.bindingIdentifierEquals(state.oldName, state.binding.identifier)) {
        path.skip();
      }
    },
    /*istanbul ignore next*/"AssignmentExpression|Declaration": function AssignmentExpressionDeclaration(path, state) {
      var ids = path.getOuterBindingIdentifiers();

      for (var name in ids) {
        if (name === state.oldName) ids[name].name = state.newName;
      }
    }
  };

  /*istanbul ignore next*/
  var Renamer = function () {
    function /*istanbul ignore next*/Renamer(binding, oldName, newName) {
      /*istanbul ignore next*/(0, _classCallCheck3.default)(this, Renamer);

      this.newName = newName;
      this.oldName = oldName;
      this.binding = binding;
    }

    Renamer.prototype.maybeConvertFromExportDeclaration = function maybeConvertFromExportDeclaration(parentDeclar) {
      var exportDeclar = parentDeclar.parentPath.isExportDeclaration() && parentDeclar.parentPath;
      if (!exportDeclar) return;

      // build specifiers that point back to this export declaration
      var isDefault = exportDeclar.isExportDefaultDeclaration();

      if (isDefault && (parentDeclar.isFunctionDeclaration() || parentDeclar.isClassDeclaration()) && !parentDeclar.node.id) {
        // Ensure that default class and function exports have a name so they have a identifier to
        // reference from the export specifier list.
        parentDeclar.node.id = parentDeclar.scope.generateUidIdentifier("default");
      }

      var bindingIdentifiers = parentDeclar.getOuterBindingIdentifiers();
      var specifiers = [];

      for (var name in bindingIdentifiers) {
        var localName = name === this.oldName ? this.newName : name;
        var exportedName = isDefault ? "default" : name;
        specifiers.push(t.exportSpecifier(t.identifier(localName), t.identifier(exportedName)));
      }

      var aliasDeclar = t.exportNamedDeclaration(null, specifiers);

      // hoist to the top if it's a function
      if (parentDeclar.isFunctionDeclaration()) {
        aliasDeclar._blockHoist = 3;
      }

      exportDeclar.insertAfter(aliasDeclar);
      exportDeclar.replaceWith(parentDeclar.node);
    };

    Renamer.prototype.maybeConvertFromClassFunctionDeclaration = function maybeConvertFromClassFunctionDeclaration(path) {
      return; // TODO

      // retain the `name` of a class/function declaration

      if (!path.isFunctionDeclaration() && !path.isClassDeclaration()) return;
      if (this.binding.kind !== "hoisted") return;

      path.node.id = t.identifier(this.oldName);
      path.node._blockHoist = 3;

      path.replaceWith(t.variableDeclaration("let", [t.variableDeclarator(t.identifier(this.newName), t.toExpression(path.node))]));
    };

    Renamer.prototype.maybeConvertFromClassFunctionExpression = function maybeConvertFromClassFunctionExpression(path) {
      return; // TODO

      // retain the `name` of a class/function expression

      if (!path.isFunctionExpression() && !path.isClassExpression()) return;
      if (this.binding.kind !== "local") return;

      path.node.id = t.identifier(this.oldName);

      this.binding.scope.parent.push({
        id: t.identifier(this.newName)
      });

      path.replaceWith(t.assignmentExpression("=", t.identifier(this.newName), path.node));
    };

    Renamer.prototype.rename = function rename(block) {
      /*istanbul ignore next*/var binding = this.binding;
      /*istanbul ignore next*/var oldName = this.oldName;
      /*istanbul ignore next*/var newName = this.newName;
      /*istanbul ignore next*/var scope = binding.scope;
      /*istanbul ignore next*/var path = binding.path;


      var parentDeclar = path.find(function (path) /*istanbul ignore next*/{
        return path.isDeclaration() || path.isFunctionExpression();
      });
      if (parentDeclar) {
        this.maybeConvertFromExportDeclaration(parentDeclar);
      }

      scope.traverse(block || scope.block, renameVisitor, this);

      if (!block) {
        scope.removeOwnBinding(oldName);
        scope.bindings[newName] = binding;
        this.binding.identifier.name = newName;
      }

      if (binding.type === "hoisted") {
        // https://github.com/babel/babel/issues/2435
        // todo: hoist and convert function to a let
      }

      if (parentDeclar) {
        this.maybeConvertFromClassFunctionDeclaration(parentDeclar);
        this.maybeConvertFromClassFunctionExpression(parentDeclar);
      }
    };

    return Renamer;
  }();

  /*istanbul ignore next*/exports.default = Renamer;
  /*istanbul ignore next*/module.exports = exports["default"];

/***/ },
/* 761 */
/***/ function(module, exports, __webpack_require__) {

  /*istanbul ignore next*/"use strict";

  exports.__esModule = true;

  var _typeof2 = __webpack_require__(127);

  var _typeof3 = _interopRequireDefault(_typeof2);

  var _keys = __webpack_require__(190);

  var _keys2 = _interopRequireDefault(_keys);

  var _getIterator2 = __webpack_require__(93);

  var _getIterator3 = _interopRequireDefault(_getIterator2);

  exports.explode = explode;
  /*istanbul ignore next*/exports.verify = verify;
  /*istanbul ignore next*/exports.merge = merge;

  var /*istanbul ignore next*/_virtualTypes = __webpack_require__(390);

  /*istanbul ignore next*/
  var virtualTypes = _interopRequireWildcard(_virtualTypes);

  var /*istanbul ignore next*/_babelMessages = __webpack_require__(157);

  /*istanbul ignore next*/
  var messages = _interopRequireWildcard(_babelMessages);

  var /*istanbul ignore next*/_babelTypes = __webpack_require__(90);

  /*istanbul ignore next*/
  var t = _interopRequireWildcard(_babelTypes);

  var /*istanbul ignore next*/_clone = __webpack_require__(264);

  /*istanbul ignore next*/
  var _clone2 = _interopRequireDefault(_clone);

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * explode() will take a visitor object with all of the various shorthands
   * that we support, and validates & normalizes it into a common format, ready
   * to be used in traversal
   *
   * The various shorthands are:
   * * `Identifier() { ... }` -> `Identifier: { enter() { ... } }`
   * * `"Identifier|NumericLiteral": { ... }` -> `Identifier: { ... }, NumericLiteral: { ... }`
   * * Aliases in `babel-types`: e.g. `Property: { ... }` -> `ObjectProperty: { ... }, ClassProperty: { ... }`
   *
   * Other normalizations are:
   * * Visitors of virtual types are wrapped, so that they are only visited when
   *   their dynamic check passes
   * * `enter` and `exit` functions are wrapped in arrays, to ease merging of
   *   visitors
   */
  function explode(visitor) {
    if (visitor._exploded) return visitor;
    visitor._exploded = true;

    // normalise pipes
    for (var nodeType in visitor) {
      if (shouldIgnoreKey(nodeType)) continue;

      var parts = nodeType.split("|");
      if (parts.length === 1) continue;

      var fns = visitor[nodeType];
      delete visitor[nodeType];

      for ( /*istanbul ignore next*/var _iterator = parts, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
        /*istanbul ignore next*/
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var part = _ref;

        visitor[part] = fns;
      }
    }

    // verify data structure
    verify(visitor);

    // make sure there's no __esModule type since this is because we're using loose mode
    // and it sets __esModule to be enumerable on all modules :(
    delete visitor.__esModule;

    // ensure visitors are objects
    ensureEntranceObjects(visitor);

    // ensure enter/exit callbacks are arrays
    ensureCallbackArrays(visitor);

    // add type wrappers
    for ( /*istanbul ignore next*/var _iterator2 = /*istanbul ignore next*/(0, _keys2.default)(visitor), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
      /*istanbul ignore next*/
      var _ref2;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref2 = _i2.value;
      }

      var _nodeType3 = _ref2;

      if (shouldIgnoreKey(_nodeType3)) continue;

      var wrapper = virtualTypes[_nodeType3];
      if (!wrapper) continue;

      // wrap all the functions
      var _fns2 = visitor[_nodeType3];
      for (var type in _fns2) {
        _fns2[type] = wrapCheck(wrapper, _fns2[type]);
      }

      // clear it from the visitor
      delete visitor[_nodeType3];

      if (wrapper.types) {
        for ( /*istanbul ignore next*/var _iterator4 = wrapper.types, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4);;) {
          /*istanbul ignore next*/
          var _ref4;

          if (_isArray4) {
            if (_i4 >= _iterator4.length) break;
            _ref4 = _iterator4[_i4++];
          } else {
            _i4 = _iterator4.next();
            if (_i4.done) break;
            _ref4 = _i4.value;
          }

          var _type = _ref4;

          // merge the visitor if necessary or just put it back in
          if (visitor[_type]) {
            mergePair(visitor[_type], _fns2);
          } else {
            visitor[_type] = _fns2;
          }
        }
      } else {
        mergePair(visitor, _fns2);
      }
    }

    // add aliases
    for (var _nodeType in visitor) {
      if (shouldIgnoreKey(_nodeType)) continue;

      var _fns = visitor[_nodeType];

      var aliases = t.FLIPPED_ALIAS_KEYS[_nodeType];

      var deprecratedKey = t.DEPRECATED_KEYS[_nodeType];
      if (deprecratedKey) {
        console.trace( /*istanbul ignore next*/"Visitor defined for " + _nodeType + " but it has been renamed to " + deprecratedKey);
        aliases = [deprecratedKey];
      }

      if (!aliases) continue;

      // clear it from the visitor
      delete visitor[_nodeType];

      for ( /*istanbul ignore next*/var _iterator3 = aliases, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);;) {
        /*istanbul ignore next*/
        var _ref3;

        if (_isArray3) {
          if (_i3 >= _iterator3.length) break;
          _ref3 = _iterator3[_i3++];
        } else {
          _i3 = _iterator3.next();
          if (_i3.done) break;
          _ref3 = _i3.value;
        }

        var alias = _ref3;

        var existing = visitor[alias];
        if (existing) {
          mergePair(existing, _fns);
        } else {
          visitor[alias] = /*istanbul ignore next*/(0, _clone2.default)(_fns);
        }
      }
    }

    for (var _nodeType2 in visitor) {
      if (shouldIgnoreKey(_nodeType2)) continue;

      ensureCallbackArrays(visitor[_nodeType2]);
    }

    return visitor;
  }

  function verify(visitor) {
    if (visitor._verified) return;

    if (typeof visitor === "function") {
      throw new Error(messages.get("traverseVerifyRootFunction"));
    }

    for (var nodeType in visitor) {
      if (nodeType === "enter" || nodeType === "exit") {
        validateVisitorMethods(nodeType, visitor[nodeType]);
      }

      if (shouldIgnoreKey(nodeType)) continue;

      if (t.TYPES.indexOf(nodeType) < 0) {
        throw new Error(messages.get("traverseVerifyNodeType", nodeType));
      }

      var visitors = visitor[nodeType];
      if ( /*istanbul ignore next*/(typeof visitors === "undefined" ? "undefined" : (0, _typeof3.default)(visitors)) === "object") {
        for (var visitorKey in visitors) {
          if (visitorKey === "enter" || visitorKey === "exit") {
            // verify that it just contains functions
            validateVisitorMethods( /*istanbul ignore next*/nodeType + "." + visitorKey, visitors[visitorKey]);
          } else {
            throw new Error(messages.get("traverseVerifyVisitorProperty", nodeType, visitorKey));
          }
        }
      }
    }

    visitor._verified = true;
  }

  function validateVisitorMethods(path, val) {
    var fns = [].concat(val);
    for ( /*istanbul ignore next*/var _iterator5 = fns, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : (0, _getIterator3.default)(_iterator5);;) {
      /*istanbul ignore next*/
      var _ref5;

      if (_isArray5) {
        if (_i5 >= _iterator5.length) break;
        _ref5 = _iterator5[_i5++];
      } else {
        _i5 = _iterator5.next();
        if (_i5.done) break;
        _ref5 = _i5.value;
      }

      var fn = _ref5;

      if (typeof fn !== "function") {
        throw new TypeError( /*istanbul ignore next*/"Non-function found defined in " + path + " with type " + (typeof fn === "undefined" ? "undefined" : (0, _typeof3.default)(fn)));
      }
    }
  }

  function merge(visitors) {
    /*istanbul ignore next*/var states = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

    var rootVisitor = {};

    for (var i = 0; i < visitors.length; i++) {
      var visitor = visitors[i];
      var state = states[i];

      explode(visitor);

      for (var type in visitor) {
        var visitorType = visitor[type];

        // if we have state then overload the callbacks to take it
        if (state) visitorType = wrapWithState(visitorType, state);

        var nodeVisitor = rootVisitor[type] = rootVisitor[type] || {};
        mergePair(nodeVisitor, visitorType);
      }
    }

    return rootVisitor;
  }

  function wrapWithState(oldVisitor, state) {
    var newVisitor = {};

    for (var key in oldVisitor) {
      var fns = oldVisitor[key];

      // not an enter/exit array of callbacks
      if (!Array.isArray(fns)) continue;

      fns = fns.map(function (fn) {
        var newFn = function newFn(path) {
          return fn.call(state, path, state);
        };
        newFn.toString = function () /*istanbul ignore next*/{
          return fn.toString();
        };
        return newFn;
      });

      newVisitor[key] = fns;
    }

    return newVisitor;
  }

  function ensureEntranceObjects(obj) {
    for (var key in obj) {
      if (shouldIgnoreKey(key)) continue;

      var fns = obj[key];
      if (typeof fns === "function") {
        obj[key] = { enter: fns };
      }
    }
  }

  function ensureCallbackArrays(obj) {
    if (obj.enter && !Array.isArray(obj.enter)) obj.enter = [obj.enter];
    if (obj.exit && !Array.isArray(obj.exit)) obj.exit = [obj.exit];
  }

  function wrapCheck(wrapper, fn) {
    var newFn = function newFn(path) {
      if (wrapper.checkPath(path)) {
        return fn.apply(this, arguments);
      }
    };
    newFn.toString = function () /*istanbul ignore next*/{
      return fn.toString();
    };
    return newFn;
  }

  function shouldIgnoreKey(key) {
    // internal/hidden key
    if (key[0] === "_") return true;

    // ignore function keys
    if (key === "enter" || key === "exit" || key === "shouldSkip") return true;

    // ignore other options
    if (key === "blacklist" || key === "noScope" || key === "skipKeys") return true;

    return false;
  }

  function mergePair(dest, src) {
    for (var key in src) {
      dest[key] = [].concat(dest[key] || [], src[key]);
    }
  }

/***/ },
/* 762 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  exports.__esModule = true;

  var _maxSafeInteger = __webpack_require__(736);

  var _maxSafeInteger2 = _interopRequireDefault(_maxSafeInteger);

  var _stringify = __webpack_require__(170);

  var _stringify2 = _interopRequireDefault(_stringify);

  var _getIterator2 = __webpack_require__(93);

  var _getIterator3 = _interopRequireDefault(_getIterator2);

  exports.toComputedKey = toComputedKey;
  exports.toSequenceExpression = toSequenceExpression;
  exports.toKeyAlias = toKeyAlias;
  exports.toIdentifier = toIdentifier;
  exports.toBindingIdentifierName = toBindingIdentifierName;
  exports.toStatement = toStatement;
  exports.toExpression = toExpression;
  exports.toBlock = toBlock;
  exports.valueToNode = valueToNode;

  var _isPlainObject = __webpack_require__(481);

  var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

  var _isNumber = __webpack_require__(480);

  var _isNumber2 = _interopRequireDefault(_isNumber);

  var _isRegExp = __webpack_require__(482);

  var _isRegExp2 = _interopRequireDefault(_isRegExp);

  var _isString = __webpack_require__(216);

  var _isString2 = _interopRequireDefault(_isString);

  var _index = __webpack_require__(90);

  var t = _interopRequireWildcard(_index);

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function toComputedKey(node) {
    var key = arguments.length <= 1 || arguments[1] === undefined ? node.key || node.property : arguments[1];

    if (!node.computed) {
      if (t.isIdentifier(key)) key = t.stringLiteral(key.name);
    }
    return key;
  }

  /**
   * Turn an array of statement `nodes` into a `SequenceExpression`.
   *
   * Variable declarations are turned into simple assignments and their
   * declarations hoisted to the top of the current scope.
   *
   * Expression statements are just resolved to their expression.
   */

  function toSequenceExpression(nodes, scope) {
    if (!nodes || !nodes.length) return;

    var declars = [];
    var bailed = false;

    var result = convert(nodes);
    if (bailed) return;

    for (var i = 0; i < declars.length; i++) {
      scope.push(declars[i]);
    }

    return result;

    function convert(nodes) {
      var ensureLastUndefined = false;
      var exprs = [];

      for (var _iterator = nodes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var node = _ref;

        if (t.isExpression(node)) {
          exprs.push(node);
        } else if (t.isExpressionStatement(node)) {
          exprs.push(node.expression);
        } else if (t.isVariableDeclaration(node)) {
          if (node.kind !== "var") return bailed = true; // bailed

          for (var _iterator2 = node.declarations, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
            var _ref2;

            if (_isArray2) {
              if (_i2 >= _iterator2.length) break;
              _ref2 = _iterator2[_i2++];
            } else {
              _i2 = _iterator2.next();
              if (_i2.done) break;
              _ref2 = _i2.value;
            }

            var declar = _ref2;

            var bindings = t.getBindingIdentifiers(declar);
            for (var key in bindings) {
              declars.push({
                kind: node.kind,
                id: bindings[key]
              });
            }

            if (declar.init) {
              exprs.push(t.assignmentExpression("=", declar.id, declar.init));
            }
          }

          ensureLastUndefined = true;
          continue;
        } else if (t.isIfStatement(node)) {
          var consequent = node.consequent ? convert([node.consequent]) : scope.buildUndefinedNode();
          var alternate = node.alternate ? convert([node.alternate]) : scope.buildUndefinedNode();
          if (!consequent || !alternate) return bailed = true;

          exprs.push(t.conditionalExpression(node.test, consequent, alternate));
        } else if (t.isBlockStatement(node)) {
          exprs.push(convert(node.body));
        } else if (t.isEmptyStatement(node)) {
          // empty statement so ensure the last item is undefined if we're last
          ensureLastUndefined = true;
          continue;
        } else {
          // bailed, we can't turn this statement into an expression
          return bailed = true;
        }

        ensureLastUndefined = false;
      }

      if (ensureLastUndefined || exprs.length === 0) {
        exprs.push(scope.buildUndefinedNode());
      }

      //

      if (exprs.length === 1) {
        return exprs[0];
      } else {
        return t.sequenceExpression(exprs);
      }
    }
  }

  // Can't use import because of cyclic dependency between babel-traverse
  // and this module (babel-types). This require needs to appear after
  // we export the TYPES constant, so we lazy-initialize it before use.
  var traverse = void 0;

  function toKeyAlias(node) {
    var key = arguments.length <= 1 || arguments[1] === undefined ? node.key : arguments[1];

    if (!traverse) traverse = __webpack_require__(128).default;

    var alias = void 0;

    if (node.kind === "method") {
      return toKeyAlias.increment() + "";
    } else if (t.isIdentifier(key)) {
      alias = key.name;
    } else if (t.isStringLiteral(key)) {
      alias = (0, _stringify2.default)(key.value);
    } else {
      alias = (0, _stringify2.default)(traverse.removeProperties(t.cloneDeep(key)));
    }

    if (node.computed) {
      alias = "[" + alias + "]";
    }

    if (node.static) {
      alias = "static:" + alias;
    }

    return alias;
  }

  toKeyAlias.uid = 0;

  toKeyAlias.increment = function () {
    if (toKeyAlias.uid >= _maxSafeInteger2.default) {
      return toKeyAlias.uid = 0;
    } else {
      return toKeyAlias.uid++;
    }
  };

  function toIdentifier(name) {
    name = name + "";

    // replace all non-valid identifiers with dashes
    name = name.replace(/[^a-zA-Z0-9$_]/g, "-");

    // remove all dashes and numbers from start of name
    name = name.replace(/^[-0-9]+/, "");

    // camel case
    name = name.replace(/[-\s]+(.)?/g, function (match, c) {
      return c ? c.toUpperCase() : "";
    });

    if (!t.isValidIdentifier(name)) {
      name = "_" + name;
    }

    return name || "_";
  }

  function toBindingIdentifierName(name) {
    name = toIdentifier(name);
    if (name === "eval" || name === "arguments") name = "_" + name;
    return name;
  }

  /**
   * [Please add a description.]
   * @returns {Object|Boolean}
   */

  function toStatement(node, ignore) {
    if (t.isStatement(node)) {
      return node;
    }

    var mustHaveId = false;
    var newType = void 0;

    if (t.isClass(node)) {
      mustHaveId = true;
      newType = "ClassDeclaration";
    } else if (t.isFunction(node)) {
      mustHaveId = true;
      newType = "FunctionDeclaration";
    } else if (t.isAssignmentExpression(node)) {
      return t.expressionStatement(node);
    }

    if (mustHaveId && !node.id) {
      newType = false;
    }

    if (!newType) {
      if (ignore) {
        return false;
      } else {
        throw new Error("cannot turn " + node.type + " to a statement");
      }
    }

    node.type = newType;

    return node;
  }

  function toExpression(node) {
    if (t.isExpressionStatement(node)) {
      node = node.expression;
    }

    if (t.isClass(node)) {
      node.type = "ClassExpression";
    } else if (t.isFunction(node)) {
      node.type = "FunctionExpression";
    }

    if (t.isExpression(node)) {
      return node;
    } else {
      throw new Error("cannot turn " + node.type + " to an expression");
    }
  }

  function toBlock(node, parent) {
    if (t.isBlockStatement(node)) {
      return node;
    }

    if (t.isEmptyStatement(node)) {
      node = [];
    }

    if (!Array.isArray(node)) {
      if (!t.isStatement(node)) {
        if (t.isFunction(parent)) {
          node = t.returnStatement(node);
        } else {
          node = t.expressionStatement(node);
        }
      }

      node = [node];
    }

    return t.blockStatement(node);
  }

  function valueToNode(value) {
    // undefined
    if (value === undefined) {
      return t.identifier("undefined");
    }

    // boolean
    if (value === true || value === false) {
      return t.booleanLiteral(value);
    }

    // null
    if (value === null) {
      return t.nullLiteral();
    }

    // strings
    if ((0, _isString2.default)(value)) {
      return t.stringLiteral(value);
    }

    // numbers
    if ((0, _isNumber2.default)(value)) {
      return t.numericLiteral(value);
    }

    // regexes
    if ((0, _isRegExp2.default)(value)) {
      var pattern = value.source;
      var flags = value.toString().match(/\/([a-z]+|)$/)[1];
      return t.regExpLiteral(pattern, flags);
    }

    // array
    if (Array.isArray(value)) {
      return t.arrayExpression(value.map(t.valueToNode));
    }

    // object
    if ((0, _isPlainObject2.default)(value)) {
      var props = [];
      for (var key in value) {
        var nodeKey = void 0;
        if (t.isValidIdentifier(key)) {
          nodeKey = t.identifier(key);
        } else {
          nodeKey = t.stringLiteral(key);
        }
        props.push(t.objectProperty(nodeKey, t.valueToNode(value[key])));
      }
      return t.objectExpression(props);
    }

    throw new Error("don't know how to turn this value into a node");
  }

/***/ },
/* 763 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  var _index = __webpack_require__(90);

  var t = _interopRequireWildcard(_index);

  var _constants = __webpack_require__(289);

  var _index2 = __webpack_require__(158);

  var _index3 = _interopRequireDefault(_index2);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  (0, _index3.default)("ArrayExpression", {
    fields: {
      elements: {
        validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeOrValueType)("null", "Expression", "SpreadElement"))),
        default: []
      }
    },
    visitor: ["elements"],
    aliases: ["Expression"]
  }); /* eslint max-len: 0 */

  (0, _index3.default)("AssignmentExpression", {
    fields: {
      operator: {
        validate: (0, _index2.assertValueType)("string")
      },
      left: {
        validate: (0, _index2.assertNodeType)("LVal")
      },
      right: {
        validate: (0, _index2.assertNodeType)("Expression")
      }
    },
    builder: ["operator", "left", "right"],
    visitor: ["left", "right"],
    aliases: ["Expression"]
  });

  (0, _index3.default)("BinaryExpression", {
    builder: ["operator", "left", "right"],
    fields: {
      operator: {
        validate: _index2.assertOneOf.apply(undefined, _constants.BINARY_OPERATORS)
      },
      left: {
        validate: (0, _index2.assertNodeType)("Expression")
      },
      right: {
        validate: (0, _index2.assertNodeType)("Expression")
      }
    },
    visitor: ["left", "right"],
    aliases: ["Binary", "Expression"]
  });

  (0, _index3.default)("Directive", {
    visitor: ["value"],
    fields: {
      value: {
        validate: (0, _index2.assertNodeType)("DirectiveLiteral")
      }
    }
  });

  (0, _index3.default)("DirectiveLiteral", {
    builder: ["value"],
    fields: {
      value: {
        validate: (0, _index2.assertValueType)("string")
      }
    }
  });

  (0, _index3.default)("BlockStatement", {
    builder: ["body", "directives"],
    visitor: ["directives", "body"],
    fields: {
      directives: {
        validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("Directive"))),
        default: []
      },
      body: {
        validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("Statement")))
      }
    },
    aliases: ["Scopable", "BlockParent", "Block", "Statement"]
  });

  (0, _index3.default)("BreakStatement", {
    visitor: ["label"],
    fields: {
      label: {
        validate: (0, _index2.assertNodeType)("Identifier"),
        optional: true
      }
    },
    aliases: ["Statement", "Terminatorless", "CompletionStatement"]
  });

  (0, _index3.default)("CallExpression", {
    visitor: ["callee", "arguments"],
    fields: {
      callee: {
        validate: (0, _index2.assertNodeType)("Expression")
      },
      arguments: {
        validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("Expression", "SpreadElement")))
      }
    },
    aliases: ["Expression"]
  });

  (0, _index3.default)("CatchClause", {
    visitor: ["param", "body"],
    fields: {
      param: {
        validate: (0, _index2.assertNodeType)("Identifier")
      },
      body: {
        validate: (0, _index2.assertNodeType)("BlockStatement")
      }
    },
    aliases: ["Scopable"]
  });

  (0, _index3.default)("ConditionalExpression", {
    visitor: ["test", "consequent", "alternate"],
    fields: {
      test: {
        validate: (0, _index2.assertNodeType)("Expression")
      },
      consequent: {
        validate: (0, _index2.assertNodeType)("Expression")
      },
      alternate: {
        validate: (0, _index2.assertNodeType)("Expression")
      }
    },
    aliases: ["Expression", "Conditional"]
  });

  (0, _index3.default)("ContinueStatement", {
    visitor: ["label"],
    fields: {
      label: {
        validate: (0, _index2.assertNodeType)("Identifier"),
        optional: true
      }
    },
    aliases: ["Statement", "Terminatorless", "CompletionStatement"]
  });

  (0, _index3.default)("DebuggerStatement", {
    aliases: ["Statement"]
  });

  (0, _index3.default)("DoWhileStatement", {
    visitor: ["test", "body"],
    fields: {
      test: {
        validate: (0, _index2.assertNodeType)("Expression")
      },
      body: {
        validate: (0, _index2.assertNodeType)("Statement")
      }
    },
    aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"]
  });

  (0, _index3.default)("EmptyStatement", {
    aliases: ["Statement"]
  });

  (0, _index3.default)("ExpressionStatement", {
    visitor: ["expression"],
    fields: {
      expression: {
        validate: (0, _index2.assertNodeType)("Expression")
      }
    },
    aliases: ["Statement", "ExpressionWrapper"]
  });

  (0, _index3.default)("File", {
    builder: ["program", "comments", "tokens"],
    visitor: ["program"],
    fields: {
      program: {
        validate: (0, _index2.assertNodeType)("Program")
      }
    }
  });

  (0, _index3.default)("ForInStatement", {
    visitor: ["left", "right", "body"],
    aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
    fields: {
      left: {
        validate: (0, _index2.assertNodeType)("VariableDeclaration", "LVal")
      },
      right: {
        validate: (0, _index2.assertNodeType)("Expression")
      },
      body: {
        validate: (0, _index2.assertNodeType)("Statement")
      }
    }
  });

  (0, _index3.default)("ForStatement", {
    visitor: ["init", "test", "update", "body"],
    aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop"],
    fields: {
      init: {
        validate: (0, _index2.assertNodeType)("VariableDeclaration", "Expression"),
        optional: true
      },
      test: {
        validate: (0, _index2.assertNodeType)("Expression"),
        optional: true
      },
      update: {
        validate: (0, _index2.assertNodeType)("Expression"),
        optional: true
      },
      body: {
        validate: (0, _index2.assertNodeType)("Statement")
      }
    }
  });

  (0, _index3.default)("FunctionDeclaration", {
    builder: ["id", "params", "body", "generator", "async"],
    visitor: ["id", "params", "body", "returnType", "typeParameters"],
    fields: {
      id: {
        validate: (0, _index2.assertNodeType)("Identifier")
      },
      params: {
        validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("LVal")))
      },
      body: {
        validate: (0, _index2.assertNodeType)("BlockStatement")
      },
      generator: {
        default: false,
        validate: (0, _index2.assertValueType)("boolean")
      },
      async: {
        default: false,
        validate: (0, _index2.assertValueType)("boolean")
      }
    },
    aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Statement", "Pureish", "Declaration"]
  });

  (0, _index3.default)("FunctionExpression", {
    inherits: "FunctionDeclaration",
    aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
    fields: {
      id: {
        validate: (0, _index2.assertNodeType)("Identifier"),
        optional: true
      },
      params: {
        validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("LVal")))
      },
      body: {
        validate: (0, _index2.assertNodeType)("BlockStatement")
      },
      generator: {
        default: false,
        validate: (0, _index2.assertValueType)("boolean")
      },
      async: {
        default: false,
        validate: (0, _index2.assertValueType)("boolean")
      }
    }
  });

  (0, _index3.default)("Identifier", {
    builder: ["name"],
    visitor: ["typeAnnotation"],
    aliases: ["Expression", "LVal"],
    fields: {
      name: {
        validate: function validate(node, key, val) {
          if (!t.isValidIdentifier(val)) {
            // todo
          }
        }
      },
      decorators: {
        validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("Decorator")))
      }
    }
  });

  (0, _index3.default)("IfStatement", {
    visitor: ["test", "consequent", "alternate"],
    aliases: ["Statement", "Conditional"],
    fields: {
      test: {
        validate: (0, _index2.assertNodeType)("Expression")
      },
      consequent: {
        validate: (0, _index2.assertNodeType)("Statement")
      },
      alternate: {
        optional: true,
        validate: (0, _index2.assertNodeType)("Statement")
      }
    }
  });

  (0, _index3.default)("LabeledStatement", {
    visitor: ["label", "body"],
    aliases: ["Statement"],
    fields: {
      label: {
        validate: (0, _index2.assertNodeType)("Identifier")
      },
      body: {
        validate: (0, _index2.assertNodeType)("Statement")
      }
    }
  });

  (0, _index3.default)("StringLiteral", {
    builder: ["value"],
    fields: {
      value: {
        validate: (0, _index2.assertValueType)("string")
      }
    },
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });

  (0, _index3.default)("NumericLiteral", {
    builder: ["value"],
    deprecatedAlias: "NumberLiteral",
    fields: {
      value: {
        validate: (0, _index2.assertValueType)("number")
      }
    },
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });

  (0, _index3.default)("NullLiteral", {
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });

  (0, _index3.default)("BooleanLiteral", {
    builder: ["value"],
    fields: {
      value: {
        validate: (0, _index2.assertValueType)("boolean")
      }
    },
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });

  (0, _index3.default)("RegExpLiteral", {
    builder: ["pattern", "flags"],
    deprecatedAlias: "RegexLiteral",
    aliases: ["Expression", "Literal"],
    fields: {
      pattern: {
        validate: (0, _index2.assertValueType)("string")
      },
      flags: {
        validate: (0, _index2.assertValueType)("string"),
        default: ""
      }
    }
  });

  (0, _index3.default)("LogicalExpression", {
    builder: ["operator", "left", "right"],
    visitor: ["left", "right"],
    aliases: ["Binary", "Expression"],
    fields: {
      operator: {
        validate: _index2.assertOneOf.apply(undefined, _constants.LOGICAL_OPERATORS)
      },
      left: {
        validate: (0, _index2.assertNodeType)("Expression")
      },
      right: {
        validate: (0, _index2.assertNodeType)("Expression")
      }
    }
  });

  (0, _index3.default)("MemberExpression", {
    builder: ["object", "property", "computed"],
    visitor: ["object", "property"],
    aliases: ["Expression", "LVal"],
    fields: {
      object: {
        validate: (0, _index2.assertNodeType)("Expression")
      },
      property: {
        validate: function validate(node, key, val) {
          var expectedType = node.computed ? "Expression" : "Identifier";
          (0, _index2.assertNodeType)(expectedType)(node, key, val);
        }
      },
      computed: {
        default: false
      }
    }
  });

  (0, _index3.default)("NewExpression", {
    visitor: ["callee", "arguments"],
    aliases: ["Expression"],
    fields: {
      callee: {
        validate: (0, _index2.assertNodeType)("Expression")
      },
      arguments: {
        validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("Expression", "SpreadElement")))
      }
    }
  });

  (0, _index3.default)("Program", {
    visitor: ["directives", "body"],
    builder: ["body", "directives"],
    fields: {
      directives: {
        validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("Directive"))),
        default: []
      },
      body: {
        validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("Statement")))
      }
    },
    aliases: ["Scopable", "BlockParent", "Block", "FunctionParent"]
  });

  (0, _index3.default)("ObjectExpression", {
    visitor: ["properties"],
    aliases: ["Expression"],
    fields: {
      properties: {
        validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("ObjectMethod", "ObjectProperty", "SpreadProperty")))
      }
    }
  });

  (0, _index3.default)("ObjectMethod", {
    builder: ["kind", "key", "params", "body", "computed"],
    fields: {
      kind: {
        validate: (0, _index2.chain)((0, _index2.assertValueType)("string"), (0, _index2.assertOneOf)("method", "get", "set")),
        default: "method"
      },
      computed: {
        validate: (0, _index2.assertValueType)("boolean"),
        default: false
      },
      key: {
        validate: function validate(node, key, val) {
          var expectedTypes = node.computed ? ["Expression"] : ["Identifier", "StringLiteral", "NumericLiteral"];
          _index2.assertNodeType.apply(undefined, expectedTypes)(node, key, val);
        }
      },
      decorators: {
        validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("Decorator")))
      },
      body: {
        validate: (0, _index2.assertNodeType)("BlockStatement")
      },
      generator: {
        default: false,
        validate: (0, _index2.assertValueType)("boolean")
      },
      async: {
        default: false,
        validate: (0, _index2.assertValueType)("boolean")
      }
    },
    visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
    aliases: ["UserWhitespacable", "Function", "Scopable", "BlockParent", "FunctionParent", "Method", "ObjectMember"]
  });

  (0, _index3.default)("ObjectProperty", {
    builder: ["key", "value", "computed", "shorthand", "decorators"],
    fields: {
      computed: {
        validate: (0, _index2.assertValueType)("boolean"),
        default: false
      },
      key: {
        validate: function validate(node, key, val) {
          var expectedTypes = node.computed ? ["Expression"] : ["Identifier", "StringLiteral", "NumericLiteral"];
          _index2.assertNodeType.apply(undefined, expectedTypes)(node, key, val);
        }
      },
      value: {
        validate: (0, _index2.assertNodeType)("Expression")
      },
      shorthand: {
        validate: (0, _index2.assertValueType)("boolean"),
        default: false
      },
      decorators: {
        validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("Decorator"))),
        optional: true
      }
    },
    visitor: ["key", "value", "decorators"],
    aliases: ["UserWhitespacable", "Property", "ObjectMember"]
  });

  (0, _index3.default)("RestElement", {
    visitor: ["argument", "typeAnnotation"],
    aliases: ["LVal"],
    fields: {
      argument: {
        validate: (0, _index2.assertNodeType)("LVal")
      },
      decorators: {
        validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("Decorator")))
      }
    }
  });

  (0, _index3.default)("ReturnStatement", {
    visitor: ["argument"],
    aliases: ["Statement", "Terminatorless", "CompletionStatement"],
    fields: {
      argument: {
        validate: (0, _index2.assertNodeType)("Expression"),
        optional: true
      }
    }
  });

  (0, _index3.default)("SequenceExpression", {
    visitor: ["expressions"],
    fields: {
      expressions: {
        validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("Expression")))
      }
    },
    aliases: ["Expression"]
  });

  (0, _index3.default)("SwitchCase", {
    visitor: ["test", "consequent"],
    fields: {
      test: {
        validate: (0, _index2.assertNodeType)("Expression"),
        optional: true
      },
      consequent: {
        validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("Statement")))
      }
    }
  });

  (0, _index3.default)("SwitchStatement", {
    visitor: ["discriminant", "cases"],
    aliases: ["Statement", "BlockParent", "Scopable"],
    fields: {
      discriminant: {
        validate: (0, _index2.assertNodeType)("Expression")
      },
      cases: {
        validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("SwitchCase")))
      }
    }
  });

  (0, _index3.default)("ThisExpression", {
    aliases: ["Expression"]
  });

  (0, _index3.default)("ThrowStatement", {
    visitor: ["argument"],
    aliases: ["Statement", "Terminatorless", "CompletionStatement"],
    fields: {
      argument: {
        validate: (0, _index2.assertNodeType)("Expression")
      }
    }
  });

  // todo: at least handler or finalizer should be set to be valid
  (0, _index3.default)("TryStatement", {
    visitor: ["block", "handler", "finalizer"],
    aliases: ["Statement"],
    fields: {
      body: {
        validate: (0, _index2.assertNodeType)("BlockStatement")
      },
      handler: {
        optional: true,
        handler: (0, _index2.assertNodeType)("BlockStatement")
      },
      finalizer: {
        optional: true,
        validate: (0, _index2.assertNodeType)("BlockStatement")
      }
    }
  });

  (0, _index3.default)("UnaryExpression", {
    builder: ["operator", "argument", "prefix"],
    fields: {
      prefix: {
        default: true
      },
      argument: {
        validate: (0, _index2.assertNodeType)("Expression")
      },
      operator: {
        validate: _index2.assertOneOf.apply(undefined, _constants.UNARY_OPERATORS)
      }
    },
    visitor: ["argument"],
    aliases: ["UnaryLike", "Expression"]
  });

  (0, _index3.default)("UpdateExpression", {
    builder: ["operator", "argument", "prefix"],
    fields: {
      prefix: {
        default: false
      },
      argument: {
        validate: (0, _index2.assertNodeType)("Expression")
      },
      operator: {
        validate: _index2.assertOneOf.apply(undefined, _constants.UPDATE_OPERATORS)
      }
    },
    visitor: ["argument"],
    aliases: ["Expression"]
  });

  (0, _index3.default)("VariableDeclaration", {
    builder: ["kind", "declarations"],
    visitor: ["declarations"],
    aliases: ["Statement", "Declaration"],
    fields: {
      kind: {
        validate: (0, _index2.chain)((0, _index2.assertValueType)("string"), (0, _index2.assertOneOf)("var", "let", "const"))
      },
      declarations: {
        validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("VariableDeclarator")))
      }
    }
  });

  (0, _index3.default)("VariableDeclarator", {
    visitor: ["id", "init"],
    fields: {
      id: {
        validate: (0, _index2.assertNodeType)("LVal")
      },
      init: {
        optional: true,
        validate: (0, _index2.assertNodeType)("Expression")
      }
    }
  });

  (0, _index3.default)("WhileStatement", {
    visitor: ["test", "body"],
    aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"],
    fields: {
      test: {
        validate: (0, _index2.assertNodeType)("Expression")
      },
      body: {
        validate: (0, _index2.assertNodeType)("BlockStatement", "Statement")
      }
    }
  });

  (0, _index3.default)("WithStatement", {
    visitor: ["object", "body"],
    aliases: ["Statement"],
    fields: {
      object: {
        object: (0, _index2.assertNodeType)("Expression")
      },
      body: {
        validate: (0, _index2.assertNodeType)("BlockStatement", "Statement")
      }
    }
  });

/***/ },
/* 764 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  var _index = __webpack_require__(158);

  var _index2 = _interopRequireDefault(_index);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  (0, _index2.default)("AssignmentPattern", {
    visitor: ["left", "right"],
    aliases: ["Pattern", "LVal"],
    fields: {
      left: {
        validate: (0, _index.assertNodeType)("Identifier")
      },
      right: {
        validate: (0, _index.assertNodeType)("Expression")
      },
      decorators: {
        validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("Decorator")))
      }
    }
  }); /* eslint max-len: 0 */

  (0, _index2.default)("ArrayPattern", {
    visitor: ["elements", "typeAnnotation"],
    aliases: ["Pattern", "LVal"],
    fields: {
      elements: {
        validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("Expression")))
      },
      decorators: {
        validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("Decorator")))
      }
    }
  });

  (0, _index2.default)("ArrowFunctionExpression", {
    builder: ["params", "body", "async"],
    visitor: ["params", "body", "returnType"],
    aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
    fields: {
      params: {
        validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("LVal")))
      },
      body: {
        validate: (0, _index.assertNodeType)("BlockStatement", "Expression")
      },
      async: {
        validate: (0, _index.assertValueType)("boolean"),
        default: false
      }
    }
  });

  (0, _index2.default)("ClassBody", {
    visitor: ["body"],
    fields: {
      body: {
        validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("ClassMethod", "ClassProperty")))
      }
    }
  });

  (0, _index2.default)("ClassDeclaration", {
    builder: ["id", "superClass", "body", "decorators"],
    visitor: ["id", "body", "superClass", "mixins", "typeParameters", "superTypeParameters", "implements", "decorators"],
    aliases: ["Scopable", "Class", "Statement", "Declaration", "Pureish"],
    fields: {
      id: {
        validate: (0, _index.assertNodeType)("Identifier")
      },
      body: {
        validate: (0, _index.assertNodeType)("ClassBody")
      },
      superClass: {
        optional: true,
        validate: (0, _index.assertNodeType)("Expression")
      },
      decorators: {
        validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("Decorator")))
      }
    }
  });

  (0, _index2.default)("ClassExpression", {
    inherits: "ClassDeclaration",
    aliases: ["Scopable", "Class", "Expression", "Pureish"],
    fields: {
      id: {
        optional: true,
        validate: (0, _index.assertNodeType)("Identifier")
      },
      body: {
        validate: (0, _index.assertNodeType)("ClassBody")
      },
      superClass: {
        optional: true,
        validate: (0, _index.assertNodeType)("Expression")
      },
      decorators: {
        validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("Decorator")))
      }
    }
  });

  (0, _index2.default)("ExportAllDeclaration", {
    visitor: ["source"],
    aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
    fields: {
      source: {
        validate: (0, _index.assertNodeType)("StringLiteral")
      }
    }
  });

  (0, _index2.default)("ExportDefaultDeclaration", {
    visitor: ["declaration"],
    aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
    fields: {
      declaration: {
        validate: (0, _index.assertNodeType)("FunctionDeclaration", "ClassDeclaration", "Expression")
      }
    }
  });

  (0, _index2.default)("ExportNamedDeclaration", {
    visitor: ["declaration", "specifiers", "source"],
    aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
    fields: {
      declaration: {
        validate: (0, _index.assertNodeType)("Declaration"),
        optional: true
      },
      specifiers: {
        validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("ExportSpecifier")))
      },
      source: {
        validate: (0, _index.assertNodeType)("StringLiteral"),
        optional: true
      }
    }
  });

  (0, _index2.default)("ExportSpecifier", {
    visitor: ["local", "exported"],
    aliases: ["ModuleSpecifier"],
    fields: {
      local: {
        validate: (0, _index.assertNodeType)("Identifier")
      },
      exported: {
        validate: (0, _index.assertNodeType)("Identifier")
      }
    }
  });

  (0, _index2.default)("ForOfStatement", {
    visitor: ["left", "right", "body"],
    aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
    fields: {
      left: {
        validate: (0, _index.assertNodeType)("VariableDeclaration", "LVal")
      },
      right: {
        validate: (0, _index.assertNodeType)("Expression")
      },
      body: {
        validate: (0, _index.assertNodeType)("Statement")
      }
    }
  });

  (0, _index2.default)("ImportDeclaration", {
    visitor: ["specifiers", "source"],
    aliases: ["Statement", "Declaration", "ModuleDeclaration"],
    fields: {
      specifiers: {
        validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier")))
      },
      source: {
        validate: (0, _index.assertNodeType)("StringLiteral")
      }
    }
  });

  (0, _index2.default)("ImportDefaultSpecifier", {
    visitor: ["local"],
    aliases: ["ModuleSpecifier"],
    fields: {
      local: {
        validate: (0, _index.assertNodeType)("Identifier")
      }
    }
  });

  (0, _index2.default)("ImportNamespaceSpecifier", {
    visitor: ["local"],
    aliases: ["ModuleSpecifier"],
    fields: {
      local: {
        validate: (0, _index.assertNodeType)("Identifier")
      }
    }
  });

  (0, _index2.default)("ImportSpecifier", {
    visitor: ["local", "imported"],
    aliases: ["ModuleSpecifier"],
    fields: {
      local: {
        validate: (0, _index.assertNodeType)("Identifier")
      },
      imported: {
        validate: (0, _index.assertNodeType)("Identifier")
      }
    }
  });

  (0, _index2.default)("MetaProperty", {
    visitor: ["meta", "property"],
    aliases: ["Expression"],
    fields: {
      // todo: limit to new.target
      meta: {
        validate: (0, _index.assertValueType)("string")
      },
      property: {
        validate: (0, _index.assertValueType)("string")
      }
    }
  });

  (0, _index2.default)("ClassMethod", {
    aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method"],
    builder: ["kind", "key", "params", "body", "computed", "static"],
    visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
    fields: {
      kind: {
        validate: (0, _index.chain)((0, _index.assertValueType)("string"), (0, _index.assertOneOf)("get", "set", "method", "constructor")),
        default: "method"
      },
      computed: {
        default: false,
        validate: (0, _index.assertValueType)("boolean")
      },
      static: {
        default: false,
        validate: (0, _index.assertValueType)("boolean")
      },
      key: {
        validate: function validate(node, key, val) {
          var expectedTypes = node.computed ? ["Expression"] : ["Identifier", "StringLiteral", "NumericLiteral"];
          _index.assertNodeType.apply(undefined, expectedTypes)(node, key, val);
        }
      },
      params: {
        validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("LVal")))
      },
      body: {
        validate: (0, _index.assertNodeType)("BlockStatement")
      },
      generator: {
        default: false,
        validate: (0, _index.assertValueType)("boolean")
      },
      async: {
        default: false,
        validate: (0, _index.assertValueType)("boolean")
      }
    }
  });

  (0, _index2.default)("ObjectPattern", {
    visitor: ["properties", "typeAnnotation"],
    aliases: ["Pattern", "LVal"],
    fields: {
      properties: {
        validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("RestProperty", "Property")))
      },
      decorators: {
        validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("Decorator")))
      }
    }
  });

  (0, _index2.default)("SpreadElement", {
    visitor: ["argument"],
    aliases: ["UnaryLike"],
    fields: {
      argument: {
        validate: (0, _index.assertNodeType)("Expression")
      }
    }
  });

  (0, _index2.default)("Super", {
    aliases: ["Expression"]
  });

  (0, _index2.default)("TaggedTemplateExpression", {
    visitor: ["tag", "quasi"],
    aliases: ["Expression"],
    fields: {
      tag: {
        validate: (0, _index.assertNodeType)("Expression")
      },
      quasi: {
        validate: (0, _index.assertNodeType)("TemplateLiteral")
      }
    }
  });

  (0, _index2.default)("TemplateElement", {
    builder: ["value", "tail"],
    fields: {
      value: {
        // todo: flatten `raw` into main node
      },
      tail: {
        validate: (0, _index.assertValueType)("boolean"),
        default: false
      }
    }
  });

  (0, _index2.default)("TemplateLiteral", {
    visitor: ["quasis", "expressions"],
    aliases: ["Expression", "Literal"],
    fields: {
      quasis: {
        validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("TemplateElement")))
      },
      expressions: {
        validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("Expression")))
      }
    }
  });

  (0, _index2.default)("YieldExpression", {
    builder: ["argument", "delegate"],
    visitor: ["argument"],
    aliases: ["Expression", "Terminatorless"],
    fields: {
      delegate: {
        validate: (0, _index.assertValueType)("boolean"),
        default: false
      },
      argument: {
        optional: true,
        validate: (0, _index.assertNodeType)("Expression")
      }
    }
  });

/***/ },
/* 765 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  var _index = __webpack_require__(158);

  var _index2 = _interopRequireDefault(_index);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  (0, _index2.default)("AwaitExpression", {
    builder: ["argument"],
    visitor: ["argument"],
    aliases: ["Expression", "Terminatorless"],
    fields: {
      argument: {
        validate: (0, _index.assertNodeType)("Expression")
      }
    }
  });

  (0, _index2.default)("BindExpression", {
    visitor: ["object", "callee"],
    aliases: ["Expression"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("Decorator", {
    visitor: ["expression"],
    fields: {
      expression: {
        validate: (0, _index.assertNodeType)("Expression")
      }
    }
  });

  (0, _index2.default)("DoExpression", {
    visitor: ["body"],
    aliases: ["Expression"],
    fields: {
      body: {
        validate: (0, _index.assertNodeType)("BlockStatement")
      }
    }
  });

  (0, _index2.default)("ExportDefaultSpecifier", {
    visitor: ["exported"],
    aliases: ["ModuleSpecifier"],
    fields: {
      exported: {
        validate: (0, _index.assertNodeType)("Identifier")
      }
    }
  });

  (0, _index2.default)("ExportNamespaceSpecifier", {
    visitor: ["exported"],
    aliases: ["ModuleSpecifier"],
    fields: {
      exported: {
        validate: (0, _index.assertNodeType)("Identifier")
      }
    }
  });

  (0, _index2.default)("RestProperty", {
    visitor: ["argument"],
    aliases: ["UnaryLike"],
    fields: {
      argument: {
        validate: (0, _index.assertNodeType)("LVal")
      }
    }
  });

  (0, _index2.default)("SpreadProperty", {
    visitor: ["argument"],
    aliases: ["UnaryLike"],
    fields: {
      argument: {
        validate: (0, _index.assertNodeType)("Expression")
      }
    }
  });

/***/ },
/* 766 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  var _index = __webpack_require__(158);

  var _index2 = _interopRequireDefault(_index);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  (0, _index2.default)("AnyTypeAnnotation", {
    aliases: ["Flow", "FlowBaseAnnotation"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("ArrayTypeAnnotation", {
    visitor: ["elementType"],
    aliases: ["Flow"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("BooleanTypeAnnotation", {
    aliases: ["Flow", "FlowBaseAnnotation"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("BooleanLiteralTypeAnnotation", {
    aliases: ["Flow"],
    fields: {}
  });

  (0, _index2.default)("NullLiteralTypeAnnotation", {
    aliases: ["Flow", "FlowBaseAnnotation"],
    fields: {}
  });

  (0, _index2.default)("ClassImplements", {
    visitor: ["id", "typeParameters"],
    aliases: ["Flow"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("ClassProperty", {
    visitor: ["key", "value", "typeAnnotation", "decorators"],
    aliases: ["Flow", "Property"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("DeclareClass", {
    visitor: ["id", "typeParameters", "extends", "body"],
    aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("DeclareFunction", {
    visitor: ["id"],
    aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("DeclareInterface", {
    visitor: ["id", "typeParameters", "extends", "body"],
    aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("DeclareModule", {
    visitor: ["id", "body"],
    aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("DeclareTypeAlias", {
    visitor: ["id", "typeParameters", "right"],
    aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("DeclareVariable", {
    visitor: ["id"],
    aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("ExistentialTypeParam", {
    aliases: ["Flow"]
  });

  (0, _index2.default)("FunctionTypeAnnotation", {
    visitor: ["typeParameters", "params", "rest", "returnType"],
    aliases: ["Flow"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("FunctionTypeParam", {
    visitor: ["name", "typeAnnotation"],
    aliases: ["Flow"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("GenericTypeAnnotation", {
    visitor: ["id", "typeParameters"],
    aliases: ["Flow"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("InterfaceExtends", {
    visitor: ["id", "typeParameters"],
    aliases: ["Flow"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("InterfaceDeclaration", {
    visitor: ["id", "typeParameters", "extends", "body"],
    aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("IntersectionTypeAnnotation", {
    visitor: ["types"],
    aliases: ["Flow"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("MixedTypeAnnotation", {
    aliases: ["Flow", "FlowBaseAnnotation"]
  });

  (0, _index2.default)("NullableTypeAnnotation", {
    visitor: ["typeAnnotation"],
    aliases: ["Flow"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("NumericLiteralTypeAnnotation", {
    aliases: ["Flow"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("NumberTypeAnnotation", {
    aliases: ["Flow", "FlowBaseAnnotation"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("StringLiteralTypeAnnotation", {
    aliases: ["Flow"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("StringTypeAnnotation", {
    aliases: ["Flow", "FlowBaseAnnotation"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("ThisTypeAnnotation", {
    aliases: ["Flow", "FlowBaseAnnotation"],
    fields: {}
  });

  (0, _index2.default)("TupleTypeAnnotation", {
    visitor: ["types"],
    aliases: ["Flow"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("TypeofTypeAnnotation", {
    visitor: ["argument"],
    aliases: ["Flow"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("TypeAlias", {
    visitor: ["id", "typeParameters", "right"],
    aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("TypeAnnotation", {
    visitor: ["typeAnnotation"],
    aliases: ["Flow"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("TypeCastExpression", {
    visitor: ["expression", "typeAnnotation"],
    aliases: ["Flow", "ExpressionWrapper", "Expression"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("TypeParameterDeclaration", {
    visitor: ["params"],
    aliases: ["Flow"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("TypeParameterInstantiation", {
    visitor: ["params"],
    aliases: ["Flow"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("ObjectTypeAnnotation", {
    visitor: ["properties", "indexers", "callProperties"],
    aliases: ["Flow"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("ObjectTypeCallProperty", {
    visitor: ["value"],
    aliases: ["Flow", "UserWhitespacable"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("ObjectTypeIndexer", {
    visitor: ["id", "key", "value"],
    aliases: ["Flow", "UserWhitespacable"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("ObjectTypeProperty", {
    visitor: ["key", "value"],
    aliases: ["Flow", "UserWhitespacable"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("QualifiedTypeIdentifier", {
    visitor: ["id", "qualification"],
    aliases: ["Flow"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("UnionTypeAnnotation", {
    visitor: ["types"],
    aliases: ["Flow"],
    fields: {
      // todo
    }
  });

  (0, _index2.default)("VoidTypeAnnotation", {
    aliases: ["Flow", "FlowBaseAnnotation"],
    fields: {
      // todo
    }
  });

/***/ },
/* 767 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  __webpack_require__(158);

  __webpack_require__(763);

  __webpack_require__(764);

  __webpack_require__(766);

  __webpack_require__(768);

  __webpack_require__(769);

  __webpack_require__(765);

/***/ },
/* 768 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  var _index = __webpack_require__(158);

  var _index2 = _interopRequireDefault(_index);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  (0, _index2.default)("JSXAttribute", {
    visitor: ["name", "value"],
    aliases: ["JSX", "Immutable"],
    fields: {
      name: {
        validate: (0, _index.assertNodeType)("JSXIdentifier", "JSXNamespacedName")
      },
      value: {
        optional: true,
        validate: (0, _index.assertNodeType)("JSXElement", "StringLiteral", "JSXExpressionContainer")
      }
    }
  });

  (0, _index2.default)("JSXClosingElement", {
    visitor: ["name"],
    aliases: ["JSX", "Immutable"],
    fields: {
      name: {
        validate: (0, _index.assertNodeType)("JSXIdentifier", "JSXMemberExpression")
      }
    }
  });

  (0, _index2.default)("JSXElement", {
    builder: ["openingElement", "closingElement", "children", "selfClosing"],
    visitor: ["openingElement", "children", "closingElement"],
    aliases: ["JSX", "Immutable", "Expression"],
    fields: {
      openingElement: {
        validate: (0, _index.assertNodeType)("JSXOpeningElement")
      },
      closingElement: {
        optional: true,
        validate: (0, _index.assertNodeType)("JSXClosingElement")
      },
      children: {
        validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("JSXText", "JSXExpressionContainer", "JSXElement")))
      }
    }
  });

  (0, _index2.default)("JSXEmptyExpression", {
    aliases: ["JSX", "Expression"]
  });

  (0, _index2.default)("JSXExpressionContainer", {
    visitor: ["expression"],
    aliases: ["JSX", "Immutable"],
    fields: {
      expression: {
        validate: (0, _index.assertNodeType)("Expression")
      }
    }
  });

  (0, _index2.default)("JSXIdentifier", {
    builder: ["name"],
    aliases: ["JSX", "Expression"],
    fields: {
      name: {
        validate: (0, _index.assertValueType)("string")
      }
    }
  });

  (0, _index2.default)("JSXMemberExpression", {
    visitor: ["object", "property"],
    aliases: ["JSX", "Expression"],
    fields: {
      object: {
        validate: (0, _index.assertNodeType)("JSXMemberExpression", "JSXIdentifier")
      },
      property: {
        validate: (0, _index.assertNodeType)("JSXIdentifier")
      }
    }
  });

  (0, _index2.default)("JSXNamespacedName", {
    visitor: ["namespace", "name"],
    aliases: ["JSX"],
    fields: {
      namespace: {
        validate: (0, _index.assertNodeType)("JSXIdentifier")
      },
      name: {
        validate: (0, _index.assertNodeType)("JSXIdentifier")
      }
    }
  });

  (0, _index2.default)("JSXOpeningElement", {
    builder: ["name", "attributes", "selfClosing"],
    visitor: ["name", "attributes"],
    aliases: ["JSX", "Immutable"],
    fields: {
      name: {
        validate: (0, _index.assertNodeType)("JSXIdentifier", "JSXMemberExpression")
      },
      selfClosing: {
        default: false,
        validate: (0, _index.assertValueType)("boolean")
      },
      attributes: {
        validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("JSXAttribute", "JSXSpreadAttribute")))
      }
    }
  });

  (0, _index2.default)("JSXSpreadAttribute", {
    visitor: ["argument"],
    aliases: ["JSX"],
    fields: {
      argument: {
        validate: (0, _index.assertNodeType)("Expression")
      }
    }
  });

  (0, _index2.default)("JSXText", {
    aliases: ["JSX", "Immutable"],
    builder: ["value"],
    fields: {
      value: {
        validate: (0, _index.assertValueType)("string")
      }
    }
  });

/***/ },
/* 769 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  var _index = __webpack_require__(158);

  var _index2 = _interopRequireDefault(_index);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  (0, _index2.default)("Noop", {
    visitor: []
  });

  (0, _index2.default)("ParenthesizedExpression", {
    visitor: ["expression"],
    aliases: ["Expression", "ExpressionWrapper"],
    fields: {
      expression: {
        validate: (0, _index.assertNodeType)("Expression")
      }
    }
  });

/***/ },
/* 770 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  exports.__esModule = true;
  exports.createUnionTypeAnnotation = createUnionTypeAnnotation;
  exports.removeTypeDuplicates = removeTypeDuplicates;
  exports.createTypeAnnotationBasedOnTypeof = createTypeAnnotationBasedOnTypeof;

  var _index = __webpack_require__(90);

  var t = _interopRequireWildcard(_index);

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  /**
   * Takes an array of `types` and flattens them, removing duplicates and
   * returns a `UnionTypeAnnotation` node containg them.
   */

  function createUnionTypeAnnotation(types) {
    var flattened = removeTypeDuplicates(types);

    if (flattened.length === 1) {
      return flattened[0];
    } else {
      return t.unionTypeAnnotation(flattened);
    }
  }

  /**
   * Dedupe type annotations.
   */

  function removeTypeDuplicates(nodes) {
    var generics = {};
    var bases = {};

    // store union type groups to circular references
    var typeGroups = [];

    var types = [];

    for (var i = 0; i < nodes.length; i++) {
      var node = nodes[i];
      if (!node) continue;

      // detect duplicates
      if (types.indexOf(node) >= 0) {
        continue;
      }

      // this type matches anything
      if (t.isAnyTypeAnnotation(node)) {
        return [node];
      }

      //
      if (t.isFlowBaseAnnotation(node)) {
        bases[node.type] = node;
        continue;
      }

      //
      if (t.isUnionTypeAnnotation(node)) {
        if (typeGroups.indexOf(node.types) < 0) {
          nodes = nodes.concat(node.types);
          typeGroups.push(node.types);
        }
        continue;
      }

      // find a matching generic type and merge and deduplicate the type parameters
      if (t.isGenericTypeAnnotation(node)) {
        var name = node.id.name;

        if (generics[name]) {
          var existing = generics[name];
          if (existing.typeParameters) {
            if (node.typeParameters) {
              existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params.concat(node.typeParameters.params));
            }
          } else {
            existing = node.typeParameters;
          }
        } else {
          generics[name] = node;
        }

        continue;
      }

      types.push(node);
    }

    // add back in bases
    for (var type in bases) {
      types.push(bases[type]);
    }

    // add back in generics
    for (var _name in generics) {
      types.push(generics[_name]);
    }

    return types;
  }

  /**
   * Create a type anotation based on typeof expression.
   */

  function createTypeAnnotationBasedOnTypeof(type) {
    if (type === "string") {
      return t.stringTypeAnnotation();
    } else if (type === "number") {
      return t.numberTypeAnnotation();
    } else if (type === "undefined") {
      return t.voidTypeAnnotation();
    } else if (type === "boolean") {
      return t.booleanTypeAnnotation();
    } else if (type === "function") {
      return t.genericTypeAnnotation(t.identifier("Function"));
    } else if (type === "object") {
      return t.genericTypeAnnotation(t.identifier("Object"));
    } else if (type === "symbol") {
      return t.genericTypeAnnotation(t.identifier("Symbol"));
    } else {
      throw new Error("Invalid typeof value");
    }
  }

/***/ },
/* 771 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  exports.__esModule = true;
  exports.isReactComponent = undefined;
  exports.isCompatTag = isCompatTag;
  exports.buildChildren = buildChildren;

  var _index = __webpack_require__(90);

  var t = _interopRequireWildcard(_index);

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  var isReactComponent = exports.isReactComponent = t.buildMatchMemberExpression("React.Component");

  function isCompatTag(tagName) {
    return !!tagName && /^[a-z]|\-/.test(tagName);
  }

  function cleanJSXElementLiteralChild(child, args) {
    var lines = child.value.split(/\r\n|\n|\r/);

    var lastNonEmptyLine = 0;

    for (var i = 0; i < lines.length; i++) {
      if (lines[i].match(/[^ \t]/)) {
        lastNonEmptyLine = i;
      }
    }

    var str = "";

    for (var _i = 0; _i < lines.length; _i++) {
      var line = lines[_i];

      var isFirstLine = _i === 0;
      var isLastLine = _i === lines.length - 1;
      var isLastNonEmptyLine = _i === lastNonEmptyLine;

      // replace rendered whitespace tabs with spaces
      var trimmedLine = line.replace(/\t/g, " ");

      // trim whitespace touching a newline
      if (!isFirstLine) {
        trimmedLine = trimmedLine.replace(/^[ ]+/, "");
      }

      // trim whitespace touching an endline
      if (!isLastLine) {
        trimmedLine = trimmedLine.replace(/[ ]+$/, "");
      }

      if (trimmedLine) {
        if (!isLastNonEmptyLine) {
          trimmedLine += " ";
        }

        str += trimmedLine;
      }
    }

    if (str) args.push(t.stringLiteral(str));
  }

  function buildChildren(node) {
    var elems = [];

    for (var i = 0; i < node.children.length; i++) {
      var child = node.children[i];

      if (t.isJSXText(child)) {
        cleanJSXElementLiteralChild(child, elems);
        continue;
      }

      if (t.isJSXExpressionContainer(child)) child = child.expression;
      if (t.isJSXEmptyExpression(child)) continue;

      elems.push(child);
    }

    return elems;
  }

/***/ },
/* 772 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  exports.__esModule = true;

  var _getIterator2 = __webpack_require__(93);

  var _getIterator3 = _interopRequireDefault(_getIterator2);

  exports.isBinding = isBinding;
  exports.isReferenced = isReferenced;
  exports.isValidIdentifier = isValidIdentifier;
  exports.isLet = isLet;
  exports.isBlockScoped = isBlockScoped;
  exports.isVar = isVar;
  exports.isSpecifierDefault = isSpecifierDefault;
  exports.isScope = isScope;
  exports.isImmutable = isImmutable;

  var _retrievers = __webpack_require__(392);

  var _esutils = __webpack_require__(437);

  var _esutils2 = _interopRequireDefault(_esutils);

  var _index = __webpack_require__(90);

  var t = _interopRequireWildcard(_index);

  var _constants = __webpack_require__(289);

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Check if the input `node` is a binding identifier.
   */

  /* eslint indent: 0 */

  function isBinding(node, parent) {
    var keys = _retrievers.getBindingIdentifiers.keys[parent.type];
    if (keys) {
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        var val = parent[key];
        if (Array.isArray(val)) {
          if (val.indexOf(node) >= 0) return true;
        } else {
          if (val === node) return true;
        }
      }
    }

    return false;
  }

  /**
   * Check if the input `node` is a reference to a bound variable.
   */

  function isReferenced(node, parent) {
    switch (parent.type) {
      // yes: object::NODE
      // yes: NODE::callee
      case "BindExpression":
        return parent.object === node || parent.callee === node;

      // yes: PARENT[NODE]
      // yes: NODE.child
      // no: parent.NODE
      case "MemberExpression":
      case "JSXMemberExpression":
        if (parent.property === node && parent.computed) {
          return true;
        } else if (parent.object === node) {
          return true;
        } else {
          return false;
        }

      // no: new.NODE
      // no: NODE.target
      case "MetaProperty":
        return false;

      // yes: { [NODE]: "" }
      // yes: { NODE }
      // no: { NODE: "" }
      case "ObjectProperty":
        if (parent.key === node) {
          return parent.computed;
        }

      // no: let NODE = init;
      // yes: let id = NODE;
      case "VariableDeclarator":
        return parent.id !== node;

      // no: function NODE() {}
      // no: function foo(NODE) {}
      case "ArrowFunctionExpression":
      case "FunctionDeclaration":
      case "FunctionExpression":
        for (var _iterator = parent.params, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
          var _ref;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
          }

          var param = _ref;

          if (param === node) return false;
        }

        return parent.id !== node;

      // no: export { foo as NODE };
      // yes: export { NODE as foo };
      // no: export { NODE as foo } from "foo";
      case "ExportSpecifier":
        if (parent.source) {
          return false;
        } else {
          return parent.local === node;
        }

      // no: export NODE from "foo";
      // no: export * as NODE from "foo";
      case "ExportNamespaceSpecifier":
      case "ExportDefaultSpecifier":
        return false;

      // no: <div NODE="foo" />
      case "JSXAttribute":
        return parent.name !== node;

      // no: class { NODE = value; }
      // yes: class { key = NODE; }
      case "ClassProperty":
        return parent.value === node;

      // no: import NODE from "foo";
      // no: import * as NODE from "foo";
      // no: import { NODE as foo } from "foo";
      // no: import { foo as NODE } from "foo";
      // no: import NODE from "bar";
      case "ImportDefaultSpecifier":
      case "ImportNamespaceSpecifier":
      case "ImportSpecifier":
        return false;

      // no: class NODE {}
      case "ClassDeclaration":
      case "ClassExpression":
        return parent.id !== node;

      // yes: class { [NODE]() {} }
      case "ClassMethod":
      case "ObjectMethod":
        return parent.key === node && parent.computed;

      // no: NODE: for (;;) {}
      case "LabeledStatement":
        return false;

      // no: try {} catch (NODE) {}
      case "CatchClause":
        return parent.param !== node;

      // no: function foo(...NODE) {}
      case "RestElement":
        return false;

      // yes: left = NODE;
      // no: NODE = right;
      case "AssignmentExpression":
        return parent.right === node;

      // no: [NODE = foo] = [];
      // yes: [foo = NODE] = [];
      case "AssignmentPattern":
        return parent.right === node;

      // no: [NODE] = [];
      // no: ({ NODE }) = [];
      case "ObjectPattern":
      case "ArrayPattern":
        return false;
    }

    return true;
  }

  /**
   * Check if the input `name` is a valid identifier name
   * and isn't a reserved word.
   */

  function isValidIdentifier(name) {
    if (typeof name !== "string" || _esutils2.default.keyword.isReservedWordES6(name, true)) {
      return false;
    } else {
      return _esutils2.default.keyword.isIdentifierNameES6(name);
    }
  }

  /**
   * Check if the input `node` is a `let` variable declaration.
   */

  function isLet(node) {
    return t.isVariableDeclaration(node) && (node.kind !== "var" || node[_constants.BLOCK_SCOPED_SYMBOL]);
  }

  /**
   * Check if the input `node` is block scoped.
   */

  function isBlockScoped(node) {
    return t.isFunctionDeclaration(node) || t.isClassDeclaration(node) || t.isLet(node);
  }

  /**
   * Check if the input `node` is a variable declaration.
   */

  function isVar(node) {
    return t.isVariableDeclaration(node, { kind: "var" }) && !node[_constants.BLOCK_SCOPED_SYMBOL];
  }

  /**
   * Check if the input `specifier` is a `default` import or export.
   */

  function isSpecifierDefault(specifier) {
    return t.isImportDefaultSpecifier(specifier) || t.isIdentifier(specifier.imported || specifier.exported, { name: "default" });
  }

  /**
   * Check if the input `node` is a scope.
   */

  function isScope(node, parent) {
    if (t.isBlockStatement(node) && t.isFunction(parent, { body: node })) {
      return false;
    }

    return t.isScopable(node);
  }

  /**
   * Check if the input `node` is definitely immutable.
   */

  function isImmutable(node) {
    if (t.isType(node.type, "Immutable")) return true;

    if (t.isIdentifier(node)) {
      if (node.name === "undefined") {
        // immutable!
        return true;
      } else {
        // no idea...
        return false;
      }
    }

    return false;
  }

/***/ },
/* 773 */
/***/ function(module, exports) {

  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getOptions = getOptions;
  // A second optional argument can be given to further configure
  var defaultOptions = exports.defaultOptions = {
    // Source type ("script" or "module") for different semantics
    sourceType: "script",
    // Source filename.
    sourceFilename: undefined,
    // When enabled, a return at the top level is not considered an
    // error.
    allowReturnOutsideFunction: false,
    // When enabled, import/export statements are not constrained to
    // appearing at the top of the program.
    allowImportExportEverywhere: false,
    // TODO
    allowSuperOutsideMethod: false,
    // An array of plugins to enable
    plugins: [],
    // TODO
    strictMode: null
  };

  // Interpret and default an options object

  function getOptions(opts) {
    var options = {};
    for (var key in defaultOptions) {
      options[key] = opts && key in opts ? opts[key] : defaultOptions[key];
    }
    return options;
  }

/***/ },
/* 774 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  var _index = __webpack_require__(136);

  var _index2 = _interopRequireDefault(_index);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function last(stack) {
    return stack[stack.length - 1];
  } /* eslint max-len: 0 */

  /**
   * Based on the comment attachment algorithm used in espree and estraverse.
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * * Redistributions of source code must retain the above copyright
   *   notice, this list of conditions and the following disclaimer.
   * * Redistributions in binary form must reproduce the above copyright
   *   notice, this list of conditions and the following disclaimer in the
   *   documentation and/or other materials provided with the distribution.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
   * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
   * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
   * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
   * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
   * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
   * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
   * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   */

  var pp = _index2.default.prototype;

  pp.addComment = function (comment) {
    this.state.trailingComments.push(comment);
    this.state.leadingComments.push(comment);
  };

  pp.processComment = function (node) {
    if (node.type === "Program" && node.body.length > 0) return;

    var stack = this.state.commentStack;

    var lastChild = void 0,
        trailingComments = void 0,
        i = void 0;

    if (this.state.trailingComments.length > 0) {
      // If the first comment in trailingComments comes after the
      // current node, then we're good - all comments in the array will
      // come after the node and so it's safe to add them as official
      // trailingComments.
      if (this.state.trailingComments[0].start >= node.end) {
        trailingComments = this.state.trailingComments;
        this.state.trailingComments = [];
      } else {
        // Otherwise, if the first comment doesn't come after the
        // current node, that means we have a mix of leading and trailing
        // comments in the array and that leadingComments contains the
        // same items as trailingComments. Reset trailingComments to
        // zero items and we'll handle this by evaluating leadingComments
        // later.
        this.state.trailingComments.length = 0;
      }
    } else {
      var lastInStack = last(stack);
      if (stack.length > 0 && lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {
        trailingComments = lastInStack.trailingComments;
        lastInStack.trailingComments = null;
      }
    }

    // Eating the stack.
    while (stack.length > 0 && last(stack).start >= node.start) {
      lastChild = stack.pop();
    }

    if (lastChild) {
      if (lastChild.leadingComments) {
        if (lastChild !== node && last(lastChild.leadingComments).end <= node.start) {
          node.leadingComments = lastChild.leadingComments;
          lastChild.leadingComments = null;
        } else {
          // A leading comment for an anonymous class had been stolen by its first ClassMethod,
          // so this takes back the leading comment.
          // See also: https://github.com/eslint/espree/issues/158
          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {
            if (lastChild.leadingComments[i].end <= node.start) {
              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);
              break;
            }
          }
        }
      }
    } else if (this.state.leadingComments.length > 0) {
      if (last(this.state.leadingComments).end <= node.start) {
        node.leadingComments = this.state.leadingComments;
        this.state.leadingComments = [];
      } else {
        // https://github.com/eslint/espree/issues/2
        //
        // In special cases, such as return (without a value) and
        // debugger, all comments will end up as leadingComments and
        // will otherwise be eliminated. This step runs when the
        // commentStack is empty and there are comments left
        // in leadingComments.
        //
        // This loop figures out the stopping point between the actual
        // leading and trailing comments by finding the location of the
        // first comment that comes after the given node.
        for (i = 0; i < this.state.leadingComments.length; i++) {
          if (this.state.leadingComments[i].end > node.start) {
            break;
          }
        }

        // Split the array based on the location of the first comment
        // that comes after the node. Keep in mind that this could
        // result in an empty array, and if so, the array must be
        // deleted.
        node.leadingComments = this.state.leadingComments.slice(0, i);
        if (node.leadingComments.length === 0) {
          node.leadingComments = null;
        }

        // Similarly, trailing comments are attached later. The variable
        // must be reset to null if there are no trailing comments.
        trailingComments = this.state.leadingComments.slice(i);
        if (trailingComments.length === 0) {
          trailingComments = null;
        }
      }
    }

    if (trailingComments) {
      if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {
        node.innerComments = trailingComments;
      } else {
        node.trailingComments = trailingComments;
      }
    }

    stack.push(node);
  };

/***/ },
/* 775 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  var _create = __webpack_require__(189);

  var _create2 = _interopRequireDefault(_create);

  var _getIterator2 = __webpack_require__(93);

  var _getIterator3 = _interopRequireDefault(_getIterator2);

  var _types = __webpack_require__(137);

  var _index = __webpack_require__(136);

  var _index2 = _interopRequireDefault(_index);

  var _identifier = __webpack_require__(204);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var pp = _index2.default.prototype;

  // Check if property name clashes with already added.
  // Object/class getters and setters are not allowed to clash —
  // either with each other or with an init property — and in
  // strict mode, init properties are also not allowed to be repeated.

  /* eslint indent: 0 */
  /* eslint max-len: 0 */

  // A recursive descent parser operates by defining functions for all
  // syntactic elements, and recursively calling those, each function
  // advancing the input stream and returning an AST node. Precedence
  // of constructs (for example, the fact that `!x[1]` means `!(x[1])`
  // instead of `(!x)[1]` is handled by the fact that the parser
  // function that parses unary prefix operators is called first, and
  // in turn calls the function that parses `[]` subscripts — that
  // way, it'll receive the node for `x[1]` already parsed, and wraps
  // *that* in the unary operator node.
  //
  // Acorn uses an [operator precedence parser][opp] to handle binary
  // operator precedence, because it is much more compact than using
  // the technique outlined above, which uses different, nesting
  // functions to specify precedence, for all of the ten binary
  // precedence levels that JavaScript defines.
  //
  // [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser

  pp.checkPropClash = function (prop, propHash) {
    if (prop.computed) return;

    var key = prop.key;
    var name = void 0;
    switch (key.type) {
      case "Identifier":
        name = key.name;
        break;

      case "StringLiteral":
      case "NumericLiteral":
        name = String(key.value);
        break;

      default:
        return;
    }

    if (name === "__proto__" && prop.kind === "init") {
      if (propHash.proto) this.raise(key.start, "Redefinition of __proto__ property");
      propHash.proto = true;
    }
  };

  // ### Expression parsing

  // These nest, from the most general expression type at the top to
  // 'atomic', nondivisible expression types at the bottom. Most of
  // the functions will simply let the function (s) below them parse,
  // and, *if* the syntactic construct they handle is present, wrap
  // the AST node that the inner parser gave them in another node.

  // Parse a full expression. The optional arguments are used to
  // forbid the `in` operator (in for loops initalization expressions)
  // and provide reference for storing '=' operator inside shorthand
  // property assignment in contexts where both object expression
  // and object pattern might appear (so it's possible to raise
  // delayed syntax error at correct position).

  pp.parseExpression = function (noIn, refShorthandDefaultPos) {
    var startPos = this.state.start,
        startLoc = this.state.startLoc;
    var expr = this.parseMaybeAssign(noIn, refShorthandDefaultPos);
    if (this.match(_types.types.comma)) {
      var node = this.startNodeAt(startPos, startLoc);
      node.expressions = [expr];
      while (this.eat(_types.types.comma)) {
        node.expressions.push(this.parseMaybeAssign(noIn, refShorthandDefaultPos));
      }
      this.toReferencedList(node.expressions);
      return this.finishNode(node, "SequenceExpression");
    }
    return expr;
  };

  // Parse an assignment expression. This includes applications of
  // operators like `+=`.

  pp.parseMaybeAssign = function (noIn, refShorthandDefaultPos, afterLeftParse) {
    if (this.match(_types.types._yield) && this.state.inGenerator) {
      return this.parseYield();
    }

    var failOnShorthandAssign = void 0;
    if (refShorthandDefaultPos) {
      failOnShorthandAssign = false;
    } else {
      refShorthandDefaultPos = { start: 0 };
      failOnShorthandAssign = true;
    }

    var startPos = this.state.start;
    var startLoc = this.state.startLoc;

    if (this.match(_types.types.parenL) || this.match(_types.types.name)) {
      this.state.potentialArrowAt = this.state.start;
    }

    var left = this.parseMaybeConditional(noIn, refShorthandDefaultPos);
    if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc);
    if (this.state.type.isAssign) {
      var node = this.startNodeAt(startPos, startLoc);
      node.operator = this.state.value;
      node.left = this.match(_types.types.eq) ? this.toAssignable(left) : left;
      refShorthandDefaultPos.start = 0; // reset because shorthand default was used correctly

      this.checkLVal(left);

      if (left.extra && left.extra.parenthesized) {
        var errorMsg = void 0;
        if (left.type === "ObjectPattern") {
          errorMsg = "`({a}) = 0` use `({a} = 0)`";
        } else if (left.type === "ArrayPattern") {
          errorMsg = "`([a]) = 0` use `([a] = 0)`";
        }
        if (errorMsg) {
          this.raise(left.start, "You're trying to assign to a parenthesized expression, eg. instead of " + errorMsg);
        }
      }

      this.next();
      node.right = this.parseMaybeAssign(noIn);
      return this.finishNode(node, "AssignmentExpression");
    } else if (failOnShorthandAssign && refShorthandDefaultPos.start) {
      this.unexpected(refShorthandDefaultPos.start);
    }

    return left;
  };

  // Parse a ternary conditional (`?:`) operator.

  pp.parseMaybeConditional = function (noIn, refShorthandDefaultPos) {
    var startPos = this.state.start,
        startLoc = this.state.startLoc;
    var expr = this.parseExprOps(noIn, refShorthandDefaultPos);
    if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;
    if (this.eat(_types.types.question)) {
      var node = this.startNodeAt(startPos, startLoc);
      node.test = expr;
      node.consequent = this.parseMaybeAssign();
      this.expect(_types.types.colon);
      node.alternate = this.parseMaybeAssign(noIn);
      return this.finishNode(node, "ConditionalExpression");
    }
    return expr;
  };

  // Start the precedence parser.

  pp.parseExprOps = function (noIn, refShorthandDefaultPos) {
    var startPos = this.state.start,
        startLoc = this.state.startLoc;
    var expr = this.parseMaybeUnary(refShorthandDefaultPos);
    if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
      return expr;
    } else {
      return this.parseExprOp(expr, startPos, startLoc, -1, noIn);
    }
  };

  // Parse binary operators with the operator precedence parsing
  // algorithm. `left` is the left-hand side of the operator.
  // `minPrec` provides context that allows the function to stop and
  // defer further parser to one of its callers when it encounters an
  // operator that has a lower precedence than the set it is parsing.

  pp.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {
    var prec = this.state.type.binop;
    if (prec != null && (!noIn || !this.match(_types.types._in))) {
      if (prec > minPrec) {
        var node = this.startNodeAt(leftStartPos, leftStartLoc);
        node.left = left;
        node.operator = this.state.value;

        if (node.operator === "**" && left.type === "UnaryExpression" && left.extra && !left.extra.parenthesizedArgument) {
          this.raise(left.argument.start, "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.");
        }

        var op = this.state.type;
        this.next();

        var startPos = this.state.start;
        var startLoc = this.state.startLoc;
        node.right = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec, noIn);

        this.finishNode(node, op === _types.types.logicalOR || op === _types.types.logicalAND ? "LogicalExpression" : "BinaryExpression");
        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);
      }
    }
    return left;
  };

  // Parse unary operators, both prefix and postfix.

  pp.parseMaybeUnary = function (refShorthandDefaultPos) {
    if (this.state.type.prefix) {
      var node = this.startNode();
      var update = this.match(_types.types.incDec);
      node.operator = this.state.value;
      node.prefix = true;
      this.next();

      var argType = this.state.type;
      this.addExtra(node, "parenthesizedArgument", argType === _types.types.parenL);
      node.argument = this.parseMaybeUnary();

      if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
        this.unexpected(refShorthandDefaultPos.start);
      }

      if (update) {
        this.checkLVal(node.argument);
      } else if (this.state.strict && node.operator === "delete" && node.argument.type === "Identifier") {
        this.raise(node.start, "Deleting local variable in strict mode");
      }

      return this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
    }

    var startPos = this.state.start,
        startLoc = this.state.startLoc;
    var expr = this.parseExprSubscripts(refShorthandDefaultPos);
    if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;
    while (this.state.type.postfix && !this.canInsertSemicolon()) {
      var _node = this.startNodeAt(startPos, startLoc);
      _node.operator = this.state.value;
      _node.prefix = false;
      _node.argument = expr;
      this.checkLVal(expr);
      this.next();
      expr = this.finishNode(_node, "UpdateExpression");
    }
    return expr;
  };

  // Parse call, dot, and `[]`-subscript expressions.

  pp.parseExprSubscripts = function (refShorthandDefaultPos) {
    var startPos = this.state.start,
        startLoc = this.state.startLoc;
    var potentialArrowAt = this.state.potentialArrowAt;
    var expr = this.parseExprAtom(refShorthandDefaultPos);

    if (expr.type === "ArrowFunctionExpression" && expr.start === potentialArrowAt) {
      return expr;
    }

    if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
      return expr;
    }

    return this.parseSubscripts(expr, startPos, startLoc);
  };

  pp.parseSubscripts = function (base, startPos, startLoc, noCalls) {
    for (;;) {
      if (!noCalls && this.eat(_types.types.doubleColon)) {
        var node = this.startNodeAt(startPos, startLoc);
        node.object = base;
        node.callee = this.parseNoCallExpr();
        return this.parseSubscripts(this.finishNode(node, "BindExpression"), startPos, startLoc, noCalls);
      } else if (this.eat(_types.types.dot)) {
        var _node2 = this.startNodeAt(startPos, startLoc);
        _node2.object = base;
        _node2.property = this.parseIdentifier(true);
        _node2.computed = false;
        base = this.finishNode(_node2, "MemberExpression");
      } else if (this.eat(_types.types.bracketL)) {
        var _node3 = this.startNodeAt(startPos, startLoc);
        _node3.object = base;
        _node3.property = this.parseExpression();
        _node3.computed = true;
        this.expect(_types.types.bracketR);
        base = this.finishNode(_node3, "MemberExpression");
      } else if (!noCalls && this.match(_types.types.parenL)) {
        var possibleAsync = this.state.potentialArrowAt === base.start && base.type === "Identifier" && base.name === "async" && !this.canInsertSemicolon();
        this.next();

        var _node4 = this.startNodeAt(startPos, startLoc);
        _node4.callee = base;
        _node4.arguments = this.parseCallExpressionArguments(_types.types.parenR, this.hasPlugin("trailingFunctionCommas"), possibleAsync);
        base = this.finishNode(_node4, "CallExpression");

        if (possibleAsync && this.shouldParseAsyncArrow()) {
          return this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), _node4);
        } else {
          this.toReferencedList(_node4.arguments);
        }
      } else if (this.match(_types.types.backQuote)) {
        var _node5 = this.startNodeAt(startPos, startLoc);
        _node5.tag = base;
        _node5.quasi = this.parseTemplate();
        base = this.finishNode(_node5, "TaggedTemplateExpression");
      } else {
        return base;
      }
    }
  };

  pp.parseCallExpressionArguments = function (close, allowTrailingComma, possibleAsyncArrow) {
    var innerParenStart = void 0;

    var elts = [],
        first = true;
    while (!this.eat(close)) {
      if (first) {
        first = false;
      } else {
        this.expect(_types.types.comma);
        if (allowTrailingComma && this.eat(close)) break;
      }

      // we need to make sure that if this is an async arrow functions, that we don't allow inner parens inside the params
      if (this.match(_types.types.parenL) && !innerParenStart) {
        innerParenStart = this.state.start;
      }

      elts.push(this.parseExprListItem());
    }

    // we found an async arrow function so let's not allow any inner parens
    if (possibleAsyncArrow && innerParenStart && this.shouldParseAsyncArrow()) {
      this.unexpected();
    }

    return elts;
  };

  pp.shouldParseAsyncArrow = function () {
    return this.match(_types.types.arrow);
  };

  pp.parseAsyncArrowFromCallExpression = function (node, call) {
    if (!this.hasPlugin("asyncFunctions")) this.unexpected();
    this.expect(_types.types.arrow);
    return this.parseArrowExpression(node, call.arguments, true);
  };

  // Parse a no-call expression (like argument of `new` or `::` operators).

  pp.parseNoCallExpr = function () {
    var startPos = this.state.start,
        startLoc = this.state.startLoc;
    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
  };

  // Parse an atomic expression — either a single token that is an
  // expression, an expression started by a keyword like `function` or
  // `new`, or an expression wrapped in punctuation like `()`, `[]`,
  // or `{}`.

  pp.parseExprAtom = function (refShorthandDefaultPos) {
    var node = void 0,
        canBeArrow = this.state.potentialArrowAt === this.state.start;
    switch (this.state.type) {
      case _types.types._super:
        if (!this.state.inMethod && !this.options.allowSuperOutsideMethod) {
          this.raise(this.state.start, "'super' outside of function or class");
        }

        node = this.startNode();
        this.next();
        if (!this.match(_types.types.parenL) && !this.match(_types.types.bracketL) && !this.match(_types.types.dot)) {
          this.unexpected();
        }
        if (this.match(_types.types.parenL) && this.state.inMethod !== "constructor" && !this.options.allowSuperOutsideMethod) {
          this.raise(node.start, "super() outside of class constructor");
        }
        return this.finishNode(node, "Super");

      case _types.types._this:
        node = this.startNode();
        this.next();
        return this.finishNode(node, "ThisExpression");

      case _types.types._yield:
        if (this.state.inGenerator) this.unexpected();

      case _types.types.name:
        node = this.startNode();
        var allowAwait = this.hasPlugin("asyncFunctions") && this.state.value === "await" && this.state.inAsync;
        var allowYield = this.shouldAllowYieldIdentifier();
        var id = this.parseIdentifier(allowAwait || allowYield);

        if (this.hasPlugin("asyncFunctions")) {
          if (id.name === "await") {
            if (this.state.inAsync || this.inModule) {
              return this.parseAwait(node);
            }
          } else if (id.name === "async" && this.match(_types.types._function) && !this.canInsertSemicolon()) {
            this.next();
            return this.parseFunction(node, false, false, true);
          } else if (canBeArrow && id.name === "async" && this.match(_types.types.name)) {
            var params = [this.parseIdentifier()];
            this.expect(_types.types.arrow);
            // let foo = bar => {};
            return this.parseArrowExpression(node, params, true);
          }
        }

        if (canBeArrow && !this.canInsertSemicolon() && this.eat(_types.types.arrow)) {
          return this.parseArrowExpression(node, [id]);
        }

        return id;

      case _types.types._do:
        if (this.hasPlugin("doExpressions")) {
          var _node6 = this.startNode();
          this.next();
          var oldInFunction = this.state.inFunction;
          var oldLabels = this.state.labels;
          this.state.labels = [];
          this.state.inFunction = false;
          _node6.body = this.parseBlock(false, true);
          this.state.inFunction = oldInFunction;
          this.state.labels = oldLabels;
          return this.finishNode(_node6, "DoExpression");
        }

      case _types.types.regexp:
        var value = this.state.value;
        node = this.parseLiteral(value.value, "RegExpLiteral");
        node.pattern = value.pattern;
        node.flags = value.flags;
        return node;

      case _types.types.num:
        return this.parseLiteral(this.state.value, "NumericLiteral");

      case _types.types.string:
        return this.parseLiteral(this.state.value, "StringLiteral");

      case _types.types._null:
        node = this.startNode();
        this.next();
        return this.finishNode(node, "NullLiteral");

      case _types.types._true:case _types.types._false:
        node = this.startNode();
        node.value = this.match(_types.types._true);
        this.next();
        return this.finishNode(node, "BooleanLiteral");

      case _types.types.parenL:
        return this.parseParenAndDistinguishExpression(null, null, canBeArrow);

      case _types.types.bracketL:
        node = this.startNode();
        this.next();
        node.elements = this.parseExprList(_types.types.bracketR, true, true, refShorthandDefaultPos);
        this.toReferencedList(node.elements);
        return this.finishNode(node, "ArrayExpression");

      case _types.types.braceL:
        return this.parseObj(false, refShorthandDefaultPos);

      case _types.types._function:
        return this.parseFunctionExpression();

      case _types.types.at:
        this.parseDecorators();

      case _types.types._class:
        node = this.startNode();
        this.takeDecorators(node);
        return this.parseClass(node, false);

      case _types.types._new:
        return this.parseNew();

      case _types.types.backQuote:
        return this.parseTemplate();

      case _types.types.doubleColon:
        node = this.startNode();
        this.next();
        node.object = null;
        var callee = node.callee = this.parseNoCallExpr();
        if (callee.type === "MemberExpression") {
          return this.finishNode(node, "BindExpression");
        } else {
          this.raise(callee.start, "Binding should be performed on object property.");
        }

      default:
        this.unexpected();
    }
  };

  pp.parseFunctionExpression = function () {
    var node = this.startNode();
    var meta = this.parseIdentifier(true);
    if (this.state.inGenerator && this.eat(_types.types.dot) && this.hasPlugin("functionSent")) {
      return this.parseMetaProperty(node, meta, "sent");
    } else {
      return this.parseFunction(node, false);
    }
  };

  pp.parseMetaProperty = function (node, meta, propertyName) {
    node.meta = meta;
    node.property = this.parseIdentifier(true);

    if (node.property.name !== propertyName) {
      this.raise(node.property.start, "The only valid meta property for new is " + meta.name + "." + propertyName);
    }

    return this.finishNode(node, "MetaProperty");
  };

  pp.parseLiteral = function (value, type) {
    var node = this.startNode();
    this.addExtra(node, "rawValue", value);
    this.addExtra(node, "raw", this.input.slice(this.state.start, this.state.end));
    node.value = value;
    this.next();
    return this.finishNode(node, type);
  };

  pp.parseParenExpression = function () {
    this.expect(_types.types.parenL);
    var val = this.parseExpression();
    this.expect(_types.types.parenR);
    return val;
  };

  pp.parseParenAndDistinguishExpression = function (startPos, startLoc, canBeArrow, isAsync, allowOptionalCommaStart) {
    startPos = startPos || this.state.start;
    startLoc = startLoc || this.state.startLoc;

    var val = void 0;
    this.next();

    var innerStartPos = this.state.start,
        innerStartLoc = this.state.startLoc;
    var exprList = [],
        first = true;
    var refShorthandDefaultPos = { start: 0 },
        spreadStart = void 0,
        optionalCommaStart = void 0;
    while (!this.match(_types.types.parenR)) {
      if (first) {
        first = false;
      } else {
        this.expect(_types.types.comma);
        if (this.match(_types.types.parenR) && this.hasPlugin("trailingFunctionCommas")) {
          optionalCommaStart = this.state.start;
          break;
        }
      }

      if (this.match(_types.types.ellipsis)) {
        var spreadNodeStartPos = this.state.start,
            spreadNodeStartLoc = this.state.startLoc;
        spreadStart = this.state.start;
        exprList.push(this.parseParenItem(this.parseRest(), spreadNodeStartLoc, spreadNodeStartPos));
        break;
      } else {
        exprList.push(this.parseMaybeAssign(false, refShorthandDefaultPos, this.parseParenItem));
      }
    }

    var innerEndPos = this.state.start;
    var innerEndLoc = this.state.startLoc;
    this.expect(_types.types.parenR);

    if (canBeArrow && !this.canInsertSemicolon() && this.eat(_types.types.arrow)) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = (0, _getIterator3.default)(exprList), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var param = _step.value;

          if (param.extra && param.extra.parenthesized) this.unexpected(param.extra.parenStart);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, isAsync);
    }

    if (!exprList.length) {
      if (isAsync) {
        return;
      } else {
        this.unexpected(this.state.lastTokStart);
      }
    }
    if (optionalCommaStart && !allowOptionalCommaStart) this.unexpected(optionalCommaStart);
    if (spreadStart) this.unexpected(spreadStart);
    if (refShorthandDefaultPos.start) this.unexpected(refShorthandDefaultPos.start);

    if (exprList.length > 1) {
      val = this.startNodeAt(innerStartPos, innerStartLoc);
      val.expressions = exprList;
      this.toReferencedList(val.expressions);
      this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
    } else {
      val = exprList[0];
    }

    this.addExtra(val, "parenthesized", true);
    this.addExtra(val, "parenStart", startPos);

    return val;
  };

  pp.parseParenItem = function (node) {
    return node;
  };

  // New's precedence is slightly tricky. It must allow its argument
  // to be a `[]` or dot subscript expression, but not a call — at
  // least, not without wrapping it in parentheses. Thus, it uses the

  pp.parseNew = function () {
    var node = this.startNode();
    var meta = this.parseIdentifier(true);

    if (this.eat(_types.types.dot)) {
      return this.parseMetaProperty(node, meta, "target");
    }

    node.callee = this.parseNoCallExpr();

    if (this.eat(_types.types.parenL)) {
      node.arguments = this.parseExprList(_types.types.parenR, this.hasPlugin("trailingFunctionCommas"));
      this.toReferencedList(node.arguments);
    } else {
      node.arguments = [];
    }

    return this.finishNode(node, "NewExpression");
  };

  // Parse template expression.

  pp.parseTemplateElement = function () {
    var elem = this.startNode();
    elem.value = {
      raw: this.input.slice(this.state.start, this.state.end).replace(/\r\n?/g, "\n"),
      cooked: this.state.value
    };
    this.next();
    elem.tail = this.match(_types.types.backQuote);
    return this.finishNode(elem, "TemplateElement");
  };

  pp.parseTemplate = function () {
    var node = this.startNode();
    this.next();
    node.expressions = [];
    var curElt = this.parseTemplateElement();
    node.quasis = [curElt];
    while (!curElt.tail) {
      this.expect(_types.types.dollarBraceL);
      node.expressions.push(this.parseExpression());
      this.expect(_types.types.braceR);
      node.quasis.push(curElt = this.parseTemplateElement());
    }
    this.next();
    return this.finishNode(node, "TemplateLiteral");
  };

  // Parse an object literal or binding pattern.

  pp.parseObj = function (isPattern, refShorthandDefaultPos) {
    var decorators = [];
    var propHash = (0, _create2.default)(null);
    var first = true;
    var node = this.startNode();

    node.properties = [];
    this.next();

    while (!this.eat(_types.types.braceR)) {
      if (first) {
        first = false;
      } else {
        this.expect(_types.types.comma);
        if (this.eat(_types.types.braceR)) break;
      }

      while (this.match(_types.types.at)) {
        decorators.push(this.parseDecorator());
      }

      var prop = this.startNode(),
          isGenerator = false,
          isAsync = false,
          startPos = void 0,
          startLoc = void 0;
      if (decorators.length) {
        prop.decorators = decorators;
        decorators = [];
      }

      if (this.hasPlugin("objectRestSpread") && this.match(_types.types.ellipsis)) {
        prop = this.parseSpread();
        prop.type = isPattern ? "RestProperty" : "SpreadProperty";
        node.properties.push(prop);
        continue;
      }

      prop.method = false;
      prop.shorthand = false;

      if (isPattern || refShorthandDefaultPos) {
        startPos = this.state.start;
        startLoc = this.state.startLoc;
      }

      if (!isPattern) {
        isGenerator = this.eat(_types.types.star);
      }

      if (!isPattern && this.hasPlugin("asyncFunctions") && this.isContextual("async")) {
        if (isGenerator) this.unexpected();

        var asyncId = this.parseIdentifier();
        if (this.match(_types.types.colon) || this.match(_types.types.parenL) || this.match(_types.types.braceR)) {
          prop.key = asyncId;
        } else {
          isAsync = true;
          if (this.hasPlugin("asyncGenerators")) isGenerator = this.eat(_types.types.star);
          this.parsePropertyName(prop);
        }
      } else {
        this.parsePropertyName(prop);
      }

      this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos);
      this.checkPropClash(prop, propHash);

      if (prop.shorthand) {
        this.addExtra(prop, "shorthand", true);
      }

      node.properties.push(prop);
    }

    if (decorators.length) {
      this.raise(this.state.start, "You have trailing decorators with no property");
    }

    return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
  };

  pp.parseObjPropValue = function (prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos) {
    if (isAsync || isGenerator || this.match(_types.types.parenL)) {
      if (isPattern) this.unexpected();
      prop.kind = "method";
      prop.method = true;
      this.parseMethod(prop, isGenerator, isAsync);
      return this.finishNode(prop, "ObjectMethod");
    }

    if (this.eat(_types.types.colon)) {
      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssign(false, refShorthandDefaultPos);
      return this.finishNode(prop, "ObjectProperty");
    }

    if (!prop.computed && prop.key.type === "Identifier" && (prop.key.name === "get" || prop.key.name === "set") && !this.match(_types.types.comma) && !this.match(_types.types.braceR)) {
      if (isGenerator || isAsync || isPattern) this.unexpected();
      prop.kind = prop.key.name;
      this.parsePropertyName(prop);
      this.parseMethod(prop, false);
      var paramCount = prop.kind === "get" ? 0 : 1;
      if (prop.params.length !== paramCount) {
        var start = prop.start;
        if (prop.kind === "get") {
          this.raise(start, "getter should have no params");
        } else {
          this.raise(start, "setter should have exactly one param");
        }
      }
      return this.finishNode(prop, "ObjectMethod");
    }

    if (!prop.computed && prop.key.type === "Identifier") {
      if (isPattern) {
        var illegalBinding = this.isKeyword(prop.key.name);
        if (!illegalBinding && this.state.strict) {
          illegalBinding = _identifier.reservedWords.strictBind(prop.key.name) || _identifier.reservedWords.strict(prop.key.name);
        }
        if (illegalBinding) {
          this.raise(prop.key.start, "Binding " + prop.key.name);
        }
        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());
      } else if (this.match(_types.types.eq) && refShorthandDefaultPos) {
        if (!refShorthandDefaultPos.start) {
          refShorthandDefaultPos.start = this.state.start;
        }
        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());
      } else {
        prop.value = prop.key.__clone();
      }
      prop.shorthand = true;
      return this.finishNode(prop, "ObjectProperty");
    }

    this.unexpected();
  };

  pp.parsePropertyName = function (prop) {
    if (this.eat(_types.types.bracketL)) {
      prop.computed = true;
      prop.key = this.parseMaybeAssign();
      this.expect(_types.types.bracketR);
      return prop.key;
    } else {
      prop.computed = false;
      return prop.key = this.match(_types.types.num) || this.match(_types.types.string) ? this.parseExprAtom() : this.parseIdentifier(true);
    }
  };

  // Initialize empty function node.

  pp.initFunction = function (node, isAsync) {
    node.id = null;
    node.generator = false;
    node.expression = false;
    if (this.hasPlugin("asyncFunctions")) {
      node.async = !!isAsync;
    }
  };

  // Parse object or class method.

  pp.parseMethod = function (node, isGenerator, isAsync) {
    var oldInMethod = this.state.inMethod;
    this.state.inMethod = node.kind || true;
    this.initFunction(node, isAsync);
    this.expect(_types.types.parenL);
    node.params = this.parseBindingList(_types.types.parenR, false, this.hasPlugin("trailingFunctionCommas"));
    node.generator = isGenerator;
    this.parseFunctionBody(node);
    this.state.inMethod = oldInMethod;
    return node;
  };

  // Parse arrow function expression with given parameters.

  pp.parseArrowExpression = function (node, params, isAsync) {
    this.initFunction(node, isAsync);
    node.params = this.toAssignableList(params, true);
    this.parseFunctionBody(node, true);
    return this.finishNode(node, "ArrowFunctionExpression");
  };

  // Parse function body and check parameters.

  pp.parseFunctionBody = function (node, allowExpression) {
    var isExpression = allowExpression && !this.match(_types.types.braceL);

    var oldInAsync = this.state.inAsync;
    this.state.inAsync = node.async;
    if (isExpression) {
      node.body = this.parseMaybeAssign();
      node.expression = true;
    } else {
      // Start a new scope with regard to labels and the `inFunction`
      // flag (restore them to their old value afterwards).
      var oldInFunc = this.state.inFunction,
          oldInGen = this.state.inGenerator,
          oldLabels = this.state.labels;
      this.state.inFunction = true;this.state.inGenerator = node.generator;this.state.labels = [];
      node.body = this.parseBlock(true);
      node.expression = false;
      this.state.inFunction = oldInFunc;this.state.inGenerator = oldInGen;this.state.labels = oldLabels;
    }
    this.state.inAsync = oldInAsync;

    // If this is a strict mode function, verify that argument names
    // are not repeated, and it does not try to bind the words `eval`
    // or `arguments`.
    var checkLVal = this.state.strict;
    var checkLValStrict = false;
    var isStrict = false;

    // arrow function
    if (allowExpression) checkLVal = true;

    // normal function
    if (!isExpression && node.body.directives.length) {
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = (0, _getIterator3.default)(node.body.directives), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var directive = _step2.value;

          if (directive.value.value === "use strict") {
            isStrict = true;
            checkLVal = true;
            checkLValStrict = true;
            break;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }

    //
    if (isStrict && node.id && node.id.type === "Identifier" && node.id.name === "yield") {
      this.raise(node.id.start, "Binding yield in strict mode");
    }

    if (checkLVal) {
      var nameHash = (0, _create2.default)(null);
      var oldStrict = this.state.strict;
      if (checkLValStrict) this.state.strict = true;
      if (node.id) {
        this.checkLVal(node.id, true);
      }
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = (0, _getIterator3.default)(node.params), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var param = _step3.value;

          this.checkLVal(param, true, nameHash);
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      this.state.strict = oldStrict;
    }
  };

  // Parses a comma-separated list of expressions, and returns them as
  // an array. `close` is the token type that ends the list, and
  // `allowEmpty` can be turned on to allow subsequent commas with
  // nothing in between them to be parsed as `null` (which is needed
  // for array literals).

  pp.parseExprList = function (close, allowTrailingComma, allowEmpty, refShorthandDefaultPos) {
    var elts = [],
        first = true;
    while (!this.eat(close)) {
      if (first) {
        first = false;
      } else {
        this.expect(_types.types.comma);
        if (allowTrailingComma && this.eat(close)) break;
      }

      elts.push(this.parseExprListItem(allowEmpty, refShorthandDefaultPos));
    }
    return elts;
  };

  pp.parseExprListItem = function (allowEmpty, refShorthandDefaultPos) {
    var elt = void 0;
    if (allowEmpty && this.match(_types.types.comma)) {
      elt = null;
    } else if (this.match(_types.types.ellipsis)) {
      elt = this.parseSpread(refShorthandDefaultPos);
    } else {
      elt = this.parseMaybeAssign(false, refShorthandDefaultPos);
    }
    return elt;
  };

  // Parse the next token as an identifier. If `liberal` is true (used
  // when parsing properties), it will also convert keywords into
  // identifiers.

  pp.parseIdentifier = function (liberal) {
    var node = this.startNode();

    if (this.match(_types.types.name)) {
      if (!liberal && this.state.strict && _identifier.reservedWords.strict(this.state.value)) {
        this.raise(this.state.start, "The keyword '" + this.state.value + "' is reserved");
      }

      node.name = this.state.value;
    } else if (liberal && this.state.type.keyword) {
      node.name = this.state.type.keyword;
    } else {
      this.unexpected();
    }

    if (!liberal && node.name === "await" && this.state.inAsync) {
      this.raise(node.start, "invalid use of await inside of an async function");
    }

    this.next();
    return this.finishNode(node, "Identifier");
  };

  // Parses await expression inside async function.

  pp.parseAwait = function (node) {
    if (!this.state.inAsync) {
      this.unexpected();
    }
    if (this.isLineTerminator()) {
      this.unexpected();
    }
    if (this.match(_types.types.star)) {
      this.raise(node.start, "await* has been removed from the async functions proposal. Use Promise.all() instead.");
    }
    node.argument = this.parseMaybeUnary();
    return this.finishNode(node, "AwaitExpression");
  };

  // Parses yield expression inside generator.

  pp.parseYield = function () {
    var node = this.startNode();
    this.next();
    if (this.match(_types.types.semi) || this.canInsertSemicolon() || !this.match(_types.types.star) && !this.state.type.startsExpr) {
      node.delegate = false;
      node.argument = null;
    } else {
      node.delegate = this.eat(_types.types.star);
      node.argument = this.parseMaybeAssign();
    }
    return this.finishNode(node, "YieldExpression");
  };

/***/ },
/* 776 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  var _location = __webpack_require__(228);

  var _index = __webpack_require__(136);

  var _index2 = _interopRequireDefault(_index);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var pp = _index2.default.prototype;

  // This function is used to raise exceptions on parse errors. It
  // takes an offset integer (into the current `input`) to indicate
  // the location of the error, attaches the position to the end
  // of the error message, and then raises a `SyntaxError` with that
  // message.

  pp.raise = function (pos, message) {
    var loc = (0, _location.getLineInfo)(this.input, pos);
    message += " (" + loc.line + ":" + loc.column + ")";
    var err = new SyntaxError(message);
    err.pos = pos;
    err.loc = loc;
    throw err;
  };

/***/ },
/* 777 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  var _getIterator2 = __webpack_require__(93);

  var _getIterator3 = _interopRequireDefault(_getIterator2);

  var _types = __webpack_require__(137);

  var _index = __webpack_require__(136);

  var _index2 = _interopRequireDefault(_index);

  var _identifier = __webpack_require__(204);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var pp = _index2.default.prototype;

  // Convert existing expression atom to assignable pattern
  // if possible.

  /* eslint indent: 0 */

  pp.toAssignable = function (node, isBinding) {
    if (node) {
      switch (node.type) {
        case "Identifier":
        case "ObjectPattern":
        case "ArrayPattern":
        case "AssignmentPattern":
          break;

        case "ObjectExpression":
          node.type = "ObjectPattern";
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = (0, _getIterator3.default)(node.properties), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var prop = _step.value;

              if (prop.type === "ObjectMethod") {
                if (prop.kind === "get" || prop.kind === "set") {
                  this.raise(prop.key.start, "Object pattern can't contain getter or setter");
                } else {
                  this.raise(prop.key.start, "Object pattern can't contain methods");
                }
              } else {
                this.toAssignable(prop, isBinding);
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          break;

        case "ObjectProperty":
          this.toAssignable(node.value, isBinding);
          break;

        case "SpreadProperty":
          node.type = "RestProperty";
          break;

        case "ArrayExpression":
          node.type = "ArrayPattern";
          this.toAssignableList(node.elements, isBinding);
          break;

        case "AssignmentExpression":
          if (node.operator === "=") {
            node.type = "AssignmentPattern";
            delete node.operator;
          } else {
            this.raise(node.left.end, "Only '=' operator can be used for specifying default value.");
          }
          break;

        case "MemberExpression":
          if (!isBinding) break;

        default:
          this.raise(node.start, "Assigning to rvalue");
      }
    }
    return node;
  };

  // Convert list of expression atoms to binding list.

  pp.toAssignableList = function (exprList, isBinding) {
    var end = exprList.length;
    if (end) {
      var last = exprList[end - 1];
      if (last && last.type === "RestElement") {
        --end;
      } else if (last && last.type === "SpreadElement") {
        last.type = "RestElement";
        var arg = last.argument;
        this.toAssignable(arg, isBinding);
        if (arg.type !== "Identifier" && arg.type !== "MemberExpression" && arg.type !== "ArrayPattern") {
          this.unexpected(arg.start);
        }
        --end;
      }
    }
    for (var i = 0; i < end; i++) {
      var elt = exprList[i];
      if (elt) this.toAssignable(elt, isBinding);
    }
    return exprList;
  };

  // Convert list of expression atoms to a list of

  pp.toReferencedList = function (exprList) {
    return exprList;
  };

  // Parses spread element.

  pp.parseSpread = function (refShorthandDefaultPos) {
    var node = this.startNode();
    this.next();
    node.argument = this.parseMaybeAssign(refShorthandDefaultPos);
    return this.finishNode(node, "SpreadElement");
  };

  pp.parseRest = function () {
    var node = this.startNode();
    this.next();
    node.argument = this.parseBindingIdentifier();
    return this.finishNode(node, "RestElement");
  };

  pp.shouldAllowYieldIdentifier = function () {
    return this.match(_types.types._yield) && !this.state.strict && !this.state.inGenerator;
  };

  pp.parseBindingIdentifier = function () {
    return this.parseIdentifier(this.shouldAllowYieldIdentifier());
  };

  // Parses lvalue (assignable) atom.

  pp.parseBindingAtom = function () {
    switch (this.state.type) {
      case _types.types._yield:
        if (this.state.strict || this.state.inGenerator) this.unexpected();

      case _types.types.name:
        return this.parseIdentifier(true);

      case _types.types.bracketL:
        var node = this.startNode();
        this.next();
        node.elements = this.parseBindingList(_types.types.bracketR, true, true);
        return this.finishNode(node, "ArrayPattern");

      case _types.types.braceL:
        return this.parseObj(true);

      default:
        this.unexpected();
    }
  };

  pp.parseBindingList = function (close, allowEmpty, allowTrailingComma) {
    var elts = [];
    var first = true;
    while (!this.eat(close)) {
      if (first) {
        first = false;
      } else {
        this.expect(_types.types.comma);
      }
      if (allowEmpty && this.match(_types.types.comma)) {
        elts.push(null);
      } else if (allowTrailingComma && this.eat(close)) {
        break;
      } else if (this.match(_types.types.ellipsis)) {
        elts.push(this.parseAssignableListItemTypes(this.parseRest()));
        this.expect(close);
        break;
      } else {
        var decorators = [];
        while (this.match(_types.types.at)) {
          decorators.push(this.parseDecorator());
        }
        var left = this.parseMaybeDefault();
        if (decorators.length) {
          left.decorators = decorators;
        }
        this.parseAssignableListItemTypes(left);
        elts.push(this.parseMaybeDefault(null, null, left));
      }
    }
    return elts;
  };

  pp.parseAssignableListItemTypes = function (param) {
    return param;
  };

  // Parses assignment pattern around given atom if possible.

  pp.parseMaybeDefault = function (startPos, startLoc, left) {
    startLoc = startLoc || this.state.startLoc;
    startPos = startPos || this.state.start;
    left = left || this.parseBindingAtom();
    if (!this.eat(_types.types.eq)) return left;

    var node = this.startNodeAt(startPos, startLoc);
    node.left = left;
    node.right = this.parseMaybeAssign();
    return this.finishNode(node, "AssignmentPattern");
  };

  // Verify that a node is an lval — something that can be assigned
  // to.

  pp.checkLVal = function (expr, isBinding, checkClashes) {
    switch (expr.type) {
      case "Identifier":
        if (this.state.strict && (_identifier.reservedWords.strictBind(expr.name) || _identifier.reservedWords.strict(expr.name))) {
          this.raise(expr.start, (isBinding ? "Binding " : "Assigning to ") + expr.name + " in strict mode");
        }

        if (checkClashes) {
          // we need to prefix this with an underscore for the cases where we have a key of
          // `__proto__`. there's a bug in old V8 where the following wouldn't work:
          //
          //   > var obj = Object.create(null);
          //   undefined
          //   > obj.__proto__
          //   null
          //   > obj.__proto__ = true;
          //   true
          //   > obj.__proto__
          //   null
          var key = "_" + expr.name;

          if (checkClashes[key]) {
            this.raise(expr.start, "Argument name clash in strict mode");
          } else {
            checkClashes[key] = true;
          }
        }
        break;

      case "MemberExpression":
        if (isBinding) this.raise(expr.start, (isBinding ? "Binding" : "Assigning to") + " member expression");
        break;

      case "ObjectPattern":
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = (0, _getIterator3.default)(expr.properties), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var prop = _step2.value;

            if (prop.type === "ObjectProperty") prop = prop.value;
            this.checkLVal(prop, isBinding, checkClashes);
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        break;

      case "ArrayPattern":
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = (0, _getIterator3.default)(expr.elements), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var elem = _step3.value;

            if (elem) this.checkLVal(elem, isBinding, checkClashes);
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        break;

      case "AssignmentPattern":
        this.checkLVal(expr.left, isBinding, checkClashes);
        break;

      case "RestProperty":
      case "RestElement":
        this.checkLVal(expr.argument, isBinding, checkClashes);
        break;

      default:
        this.raise(expr.start, (isBinding ? "Binding" : "Assigning to") + " rvalue");
    }
  };

/***/ },
/* 778 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  var _classCallCheck2 = __webpack_require__(97);

  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

  var _createClass2 = __webpack_require__(225);

  var _createClass3 = _interopRequireDefault(_createClass2);

  var _index = __webpack_require__(136);

  var _index2 = _interopRequireDefault(_index);

  var _location = __webpack_require__(228);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  // Start an AST node, attaching a start offset.

  var pp = _index2.default.prototype;

  var Node = function () {
    function Node(pos, loc, filename) {
      (0, _classCallCheck3.default)(this, Node);

      this.type = "";
      this.start = pos;
      this.end = 0;
      this.loc = new _location.SourceLocation(loc);
      if (filename) this.loc.filename = filename;
    }

    (0, _createClass3.default)(Node, [{
      key: "__clone",
      value: function __clone() {
        var node2 = new Node();
        for (var key in this) {
          node2[key] = this[key];
        }return node2;
      }
    }]);
    return Node;
  }();

  pp.startNode = function () {
    return new Node(this.state.start, this.state.startLoc, this.filename);
  };

  pp.startNodeAt = function (pos, loc) {
    return new Node(pos, loc, this.filename);
  };

  function finishNodeAt(node, type, pos, loc) {
    node.type = type;
    node.end = pos;
    node.loc.end = loc;
    this.processComment(node);
    return node;
  }

  // Finish an AST node, adding `type` and `end` properties.

  pp.finishNode = function (node, type) {
    return finishNodeAt.call(this, node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);
  };

  // Finish node at given position

  pp.finishNodeAt = function (node, type, pos, loc) {
    return finishNodeAt.call(this, node, type, pos, loc);
  };

/***/ },
/* 779 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  var _getIterator2 = __webpack_require__(93);

  var _getIterator3 = _interopRequireDefault(_getIterator2);

  var _create = __webpack_require__(189);

  var _create2 = _interopRequireDefault(_create);

  var _types = __webpack_require__(137);

  var _index = __webpack_require__(136);

  var _index2 = _interopRequireDefault(_index);

  var _whitespace = __webpack_require__(191);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var pp = _index2.default.prototype;

  // ### Statement parsing

  // Parse a program. Initializes the parser, reads any number of
  // statements, and wraps them in a Program node.  Optionally takes a
  // `program` argument.  If present, the statements will be appended
  // to its body instead of creating a new node.

  /* eslint indent: 0 */
  /* eslint max-len: 0 */

  pp.parseTopLevel = function (file, program) {
    program.sourceType = this.options.sourceType;

    this.parseBlockBody(program, true, true, _types.types.eof);

    file.program = this.finishNode(program, "Program");
    file.comments = this.state.comments;
    file.tokens = this.state.tokens;

    return this.finishNode(file, "File");
  };

  var loopLabel = { kind: "loop" },
      switchLabel = { kind: "switch" };

  // TODO

  pp.stmtToDirective = function (stmt) {
    var expr = stmt.expression;

    var directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);
    var directive = this.startNodeAt(stmt.start, stmt.loc.start);

    var raw = this.input.slice(expr.start, expr.end);
    var val = directiveLiteral.value = raw.slice(1, -1); // remove quotes

    this.addExtra(directiveLiteral, "raw", raw);
    this.addExtra(directiveLiteral, "rawValue", val);

    directive.value = this.finishNodeAt(directiveLiteral, "DirectiveLiteral", expr.end, expr.loc.end);

    return this.finishNodeAt(directive, "Directive", stmt.end, stmt.loc.end);
  };

  // Parse a single statement.
  //
  // If expecting a statement and finding a slash operator, parse a
  // regular expression literal. This is to handle cases like
  // `if (foo) /blah/.exec(foo)`, where looking at the previous token
  // does not help.

  pp.parseStatement = function (declaration, topLevel) {
    if (this.match(_types.types.at)) {
      this.parseDecorators(true);
    }

    var starttype = this.state.type,
        node = this.startNode();

    // Most types of statements are recognized by the keyword they
    // start with. Many are trivial to parse, some require a bit of
    // complexity.

    switch (starttype) {
      case _types.types._break:case _types.types._continue:
        return this.parseBreakContinueStatement(node, starttype.keyword);
      case _types.types._debugger:
        return this.parseDebuggerStatement(node);
      case _types.types._do:
        return this.parseDoStatement(node);
      case _types.types._for:
        return this.parseForStatement(node);
      case _types.types._function:
        if (!declaration) this.unexpected();
        return this.parseFunctionStatement(node);

      case _types.types._class:
        if (!declaration) this.unexpected();
        this.takeDecorators(node);
        return this.parseClass(node, true);

      case _types.types._if:
        return this.parseIfStatement(node);
      case _types.types._return:
        return this.parseReturnStatement(node);
      case _types.types._switch:
        return this.parseSwitchStatement(node);
      case _types.types._throw:
        return this.parseThrowStatement(node);
      case _types.types._try:
        return this.parseTryStatement(node);

      case _types.types._let:
      case _types.types._const:
        if (!declaration) this.unexpected(); // NOTE: falls through to _var

      case _types.types._var:
        return this.parseVarStatement(node, starttype);

      case _types.types._while:
        return this.parseWhileStatement(node);
      case _types.types._with:
        return this.parseWithStatement(node);
      case _types.types.braceL:
        return this.parseBlock();
      case _types.types.semi:
        return this.parseEmptyStatement(node);
      case _types.types._export:
      case _types.types._import:
        if (!this.options.allowImportExportEverywhere) {
          if (!topLevel) {
            this.raise(this.state.start, "'import' and 'export' may only appear at the top level");
          }

          if (!this.inModule) {
            this.raise(this.state.start, "'import' and 'export' may appear only with 'sourceType: module'");
          }
        }
        return starttype === _types.types._import ? this.parseImport(node) : this.parseExport(node);

      case _types.types.name:
        if (this.hasPlugin("asyncFunctions") && this.state.value === "async") {
          // peek ahead and see if next token is a function
          var state = this.state.clone();
          this.next();
          if (this.match(_types.types._function) && !this.canInsertSemicolon()) {
            this.expect(_types.types._function);
            return this.parseFunction(node, true, false, true);
          } else {
            this.state = state;
          }
        }
    }

    // If the statement does not start with a statement keyword or a
    // brace, it's an ExpressionStatement or LabeledStatement. We
    // simply start parsing an expression, and afterwards, if the
    // next token is a colon and the expression was a simple
    // Identifier node, we switch to interpreting it as a label.
    var maybeName = this.state.value;
    var expr = this.parseExpression();

    if (starttype === _types.types.name && expr.type === "Identifier" && this.eat(_types.types.colon)) {
      return this.parseLabeledStatement(node, maybeName, expr);
    } else {
      return this.parseExpressionStatement(node, expr);
    }
  };

  pp.takeDecorators = function (node) {
    if (this.state.decorators.length) {
      node.decorators = this.state.decorators;
      this.state.decorators = [];
    }
  };

  pp.parseDecorators = function (allowExport) {
    while (this.match(_types.types.at)) {
      this.state.decorators.push(this.parseDecorator());
    }

    if (allowExport && this.match(_types.types._export)) {
      return;
    }

    if (!this.match(_types.types._class)) {
      this.raise(this.state.start, "Leading decorators must be attached to a class declaration");
    }
  };

  pp.parseDecorator = function () {
    if (!this.hasPlugin("decorators")) {
      this.unexpected();
    }
    var node = this.startNode();
    this.next();
    node.expression = this.parseMaybeAssign();
    return this.finishNode(node, "Decorator");
  };

  pp.parseBreakContinueStatement = function (node, keyword) {
    var isBreak = keyword === "break";
    this.next();

    if (this.isLineTerminator()) {
      node.label = null;
    } else if (!this.match(_types.types.name)) {
      this.unexpected();
    } else {
      node.label = this.parseIdentifier();
      this.semicolon();
    }

    // Verify that there is an actual destination to break or
    // continue to.
    var i = void 0;
    for (i = 0; i < this.state.labels.length; ++i) {
      var lab = this.state.labels[i];
      if (node.label == null || lab.name === node.label.name) {
        if (lab.kind != null && (isBreak || lab.kind === "loop")) break;
        if (node.label && isBreak) break;
      }
    }
    if (i === this.state.labels.length) this.raise(node.start, "Unsyntactic " + keyword);
    return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
  };

  pp.parseDebuggerStatement = function (node) {
    this.next();
    this.semicolon();
    return this.finishNode(node, "DebuggerStatement");
  };

  pp.parseDoStatement = function (node) {
    this.next();
    this.state.labels.push(loopLabel);
    node.body = this.parseStatement(false);
    this.state.labels.pop();
    this.expect(_types.types._while);
    node.test = this.parseParenExpression();
    this.eat(_types.types.semi);
    return this.finishNode(node, "DoWhileStatement");
  };

  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`
  // loop is non-trivial. Basically, we have to parse the init `var`
  // statement or expression, disallowing the `in` operator (see
  // the second parameter to `parseExpression`), and then check
  // whether the next token is `in` or `of`. When there is no init
  // part (semicolon immediately after the opening parenthesis), it
  // is a regular `for` loop.

  pp.parseForStatement = function (node) {
    this.next();
    this.state.labels.push(loopLabel);

    var forAwait = false;
    if (this.hasPlugin("asyncGenerators") && this.state.inAsync && this.isContextual("await")) {
      forAwait = true;
      this.next();
    }
    this.expect(_types.types.parenL);

    if (this.match(_types.types.semi)) {
      if (forAwait) {
        this.unexpected();
      }
      return this.parseFor(node, null);
    }

    if (this.match(_types.types._var) || this.match(_types.types._let) || this.match(_types.types._const)) {
      var _init = this.startNode(),
          varKind = this.state.type;
      this.next();
      this.parseVar(_init, true, varKind);
      this.finishNode(_init, "VariableDeclaration");

      if (this.match(_types.types._in) || this.isContextual("of")) {
        if (_init.declarations.length === 1 && !_init.declarations[0].init) {
          return this.parseForIn(node, _init, forAwait);
        }
      }
      if (forAwait) {
        this.unexpected();
      }
      return this.parseFor(node, _init);
    }

    var refShorthandDefaultPos = { start: 0 };
    var init = this.parseExpression(true, refShorthandDefaultPos);
    if (this.match(_types.types._in) || this.isContextual("of")) {
      this.toAssignable(init);
      this.checkLVal(init);
      return this.parseForIn(node, init, forAwait);
    } else if (refShorthandDefaultPos.start) {
      this.unexpected(refShorthandDefaultPos.start);
    }
    if (forAwait) {
      this.unexpected();
    }
    return this.parseFor(node, init);
  };

  pp.parseFunctionStatement = function (node) {
    this.next();
    return this.parseFunction(node, true);
  };

  pp.parseIfStatement = function (node) {
    this.next();
    node.test = this.parseParenExpression();
    node.consequent = this.parseStatement(false);
    node.alternate = this.eat(_types.types._else) ? this.parseStatement(false) : null;
    return this.finishNode(node, "IfStatement");
  };

  pp.parseReturnStatement = function (node) {
    if (!this.state.inFunction && !this.options.allowReturnOutsideFunction) {
      this.raise(this.state.start, "'return' outside of function");
    }

    this.next();

    // In `return` (and `break`/`continue`), the keywords with
    // optional arguments, we eagerly look for a semicolon or the
    // possibility to insert one.

    if (this.isLineTerminator()) {
      node.argument = null;
    } else {
      node.argument = this.parseExpression();
      this.semicolon();
    }

    return this.finishNode(node, "ReturnStatement");
  };

  pp.parseSwitchStatement = function (node) {
    this.next();
    node.discriminant = this.parseParenExpression();
    node.cases = [];
    this.expect(_types.types.braceL);
    this.state.labels.push(switchLabel);

    // Statements under must be grouped (by label) in SwitchCase
    // nodes. `cur` is used to keep the node that we are currently
    // adding statements to.

    var cur = void 0;
    for (var sawDefault; !this.match(_types.types.braceR);) {
      if (this.match(_types.types._case) || this.match(_types.types._default)) {
        var isCase = this.match(_types.types._case);
        if (cur) this.finishNode(cur, "SwitchCase");
        node.cases.push(cur = this.startNode());
        cur.consequent = [];
        this.next();
        if (isCase) {
          cur.test = this.parseExpression();
        } else {
          if (sawDefault) this.raise(this.state.lastTokStart, "Multiple default clauses");
          sawDefault = true;
          cur.test = null;
        }
        this.expect(_types.types.colon);
      } else {
        if (cur) {
          cur.consequent.push(this.parseStatement(true));
        } else {
          this.unexpected();
        }
      }
    }
    if (cur) this.finishNode(cur, "SwitchCase");
    this.next(); // Closing brace
    this.state.labels.pop();
    return this.finishNode(node, "SwitchStatement");
  };

  pp.parseThrowStatement = function (node) {
    this.next();
    if (_whitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))) this.raise(this.state.lastTokEnd, "Illegal newline after throw");
    node.argument = this.parseExpression();
    this.semicolon();
    return this.finishNode(node, "ThrowStatement");
  };

  // Reused empty array added for node fields that are always empty.

  var empty = [];

  pp.parseTryStatement = function (node) {
    this.next();

    node.block = this.parseBlock();
    node.handler = null;

    if (this.match(_types.types._catch)) {
      var clause = this.startNode();
      this.next();

      this.expect(_types.types.parenL);
      clause.param = this.parseBindingAtom();
      this.checkLVal(clause.param, true, (0, _create2.default)(null));
      this.expect(_types.types.parenR);

      clause.body = this.parseBlock();
      node.handler = this.finishNode(clause, "CatchClause");
    }

    node.guardedHandlers = empty;
    node.finalizer = this.eat(_types.types._finally) ? this.parseBlock() : null;

    if (!node.handler && !node.finalizer) {
      this.raise(node.start, "Missing catch or finally clause");
    }

    return this.finishNode(node, "TryStatement");
  };

  pp.parseVarStatement = function (node, kind) {
    this.next();
    this.parseVar(node, false, kind);
    this.semicolon();
    return this.finishNode(node, "VariableDeclaration");
  };

  pp.parseWhileStatement = function (node) {
    this.next();
    node.test = this.parseParenExpression();
    this.state.labels.push(loopLabel);
    node.body = this.parseStatement(false);
    this.state.labels.pop();
    return this.finishNode(node, "WhileStatement");
  };

  pp.parseWithStatement = function (node) {
    if (this.state.strict) this.raise(this.state.start, "'with' in strict mode");
    this.next();
    node.object = this.parseParenExpression();
    node.body = this.parseStatement(false);
    return this.finishNode(node, "WithStatement");
  };

  pp.parseEmptyStatement = function (node) {
    this.next();
    return this.finishNode(node, "EmptyStatement");
  };

  pp.parseLabeledStatement = function (node, maybeName, expr) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = (0, _getIterator3.default)(this.state.labels), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var _label = _step.value;

        if (_label.name === maybeName) {
          this.raise(expr.start, "Label '" + maybeName + "' is already declared");
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    var kind = this.state.type.isLoop ? "loop" : this.match(_types.types._switch) ? "switch" : null;
    for (var i = this.state.labels.length - 1; i >= 0; i--) {
      var label = this.state.labels[i];
      if (label.statementStart === node.start) {
        label.statementStart = this.state.start;
        label.kind = kind;
      } else {
        break;
      }
    }

    this.state.labels.push({ name: maybeName, kind: kind, statementStart: this.state.start });
    node.body = this.parseStatement(true);
    this.state.labels.pop();
    node.label = expr;
    return this.finishNode(node, "LabeledStatement");
  };

  pp.parseExpressionStatement = function (node, expr) {
    node.expression = expr;
    this.semicolon();
    return this.finishNode(node, "ExpressionStatement");
  };

  // Parse a semicolon-enclosed block of statements, handling `"use
  // strict"` declarations when `allowStrict` is true (used for
  // function bodies).

  pp.parseBlock = function (allowDirectives) {
    var node = this.startNode();
    this.expect(_types.types.braceL);
    this.parseBlockBody(node, allowDirectives, false, _types.types.braceR);
    return this.finishNode(node, "BlockStatement");
  };

  // TODO

  pp.parseBlockBody = function (node, allowDirectives, topLevel, end) {
    node.body = [];
    node.directives = [];

    var parsedNonDirective = false;
    var oldStrict = void 0;
    var octalPosition = void 0;

    while (!this.eat(end)) {
      if (!parsedNonDirective && this.state.containsOctal && !octalPosition) {
        octalPosition = this.state.octalPosition;
      }

      var stmt = this.parseStatement(true, topLevel);

      if (allowDirectives && !parsedNonDirective && stmt.type === "ExpressionStatement" && stmt.expression.type === "StringLiteral" && !stmt.expression.extra.parenthesized) {
        var directive = this.stmtToDirective(stmt);
        node.directives.push(directive);

        if (oldStrict === undefined && directive.value.value === "use strict") {
          oldStrict = this.state.strict;
          this.setStrict(true);

          if (octalPosition) {
            this.raise(octalPosition, "Octal literal in strict mode");
          }
        }

        continue;
      }

      parsedNonDirective = true;
      node.body.push(stmt);
    }

    if (oldStrict === false) {
      this.setStrict(false);
    }
  };

  // Parse a regular `for` loop. The disambiguation code in
  // `parseStatement` will already have parsed the init statement or
  // expression.

  pp.parseFor = function (node, init) {
    node.init = init;
    this.expect(_types.types.semi);
    node.test = this.match(_types.types.semi) ? null : this.parseExpression();
    this.expect(_types.types.semi);
    node.update = this.match(_types.types.parenR) ? null : this.parseExpression();
    this.expect(_types.types.parenR);
    node.body = this.parseStatement(false);
    this.state.labels.pop();
    return this.finishNode(node, "ForStatement");
  };

  // Parse a `for`/`in` and `for`/`of` loop, which are almost
  // same from parser's perspective.

  pp.parseForIn = function (node, init, forAwait) {
    var type = void 0;
    if (forAwait) {
      this.eatContextual("of");
      type = "ForAwaitStatement";
    } else {
      type = this.match(_types.types._in) ? "ForInStatement" : "ForOfStatement";
      this.next();
    }
    node.left = init;
    node.right = this.parseExpression();
    this.expect(_types.types.parenR);
    node.body = this.parseStatement(false);
    this.state.labels.pop();
    return this.finishNode(node, type);
  };

  // Parse a list of variable declarations.

  pp.parseVar = function (node, isFor, kind) {
    node.declarations = [];
    node.kind = kind.keyword;
    for (;;) {
      var decl = this.startNode();
      this.parseVarHead(decl);
      if (this.eat(_types.types.eq)) {
        decl.init = this.parseMaybeAssign(isFor);
      } else if (kind === _types.types._const && !(this.match(_types.types._in) || this.isContextual("of"))) {
        this.unexpected();
      } else if (decl.id.type !== "Identifier" && !(isFor && (this.match(_types.types._in) || this.isContextual("of")))) {
        this.raise(this.state.lastTokEnd, "Complex binding patterns require an initialization value");
      } else {
        decl.init = null;
      }
      node.declarations.push(this.finishNode(decl, "VariableDeclarator"));
      if (!this.eat(_types.types.comma)) break;
    }
    return node;
  };

  pp.parseVarHead = function (decl) {
    decl.id = this.parseBindingAtom();
    this.checkLVal(decl.id, true);
  };

  // Parse a function declaration or literal (depending on the
  // `isStatement` parameter).

  pp.parseFunction = function (node, isStatement, allowExpressionBody, isAsync, optionalId) {
    var oldInMethod = this.state.inMethod;
    this.state.inMethod = false;

    this.initFunction(node, isAsync);

    if (this.match(_types.types.star)) {
      if (node.async && !this.hasPlugin("asyncGenerators")) {
        this.unexpected();
      } else {
        node.generator = true;
        this.next();
      }
    }

    if (isStatement && !optionalId && !this.match(_types.types.name) && !this.match(_types.types._yield)) {
      this.unexpected();
    }

    if (this.match(_types.types.name) || this.match(_types.types._yield)) {
      node.id = this.parseBindingIdentifier();
    }

    this.parseFunctionParams(node);
    this.parseFunctionBody(node, allowExpressionBody);

    this.state.inMethod = oldInMethod;

    return this.finishNode(node, isStatement ? "FunctionDeclaration" : "FunctionExpression");
  };

  pp.parseFunctionParams = function (node) {
    this.expect(_types.types.parenL);
    node.params = this.parseBindingList(_types.types.parenR, false, this.hasPlugin("trailingFunctionCommas"));
  };

  // Parse a class declaration or literal (depending on the
  // `isStatement` parameter).

  pp.parseClass = function (node, isStatement, optionalId) {
    this.next();
    this.parseClassId(node, isStatement, optionalId);
    this.parseClassSuper(node);
    this.parseClassBody(node);
    return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
  };

  pp.isClassProperty = function () {
    return this.match(_types.types.eq) || this.isLineTerminator();
  };

  pp.parseClassBody = function (node) {
    // class bodies are implicitly strict
    var oldStrict = this.state.strict;
    this.state.strict = true;

    var hadConstructorCall = false;
    var hadConstructor = false;
    var decorators = [];
    var classBody = this.startNode();

    classBody.body = [];

    this.expect(_types.types.braceL);

    while (!this.eat(_types.types.braceR)) {
      if (this.eat(_types.types.semi)) {
        continue;
      }

      if (this.match(_types.types.at)) {
        decorators.push(this.parseDecorator());
        continue;
      }

      var method = this.startNode();

      // steal the decorators if there are any
      if (decorators.length) {
        method.decorators = decorators;
        decorators = [];
      }

      var isConstructorCall = false;
      var isMaybeStatic = this.match(_types.types.name) && this.state.value === "static";
      var isGenerator = this.eat(_types.types.star);
      var isGetSet = false;
      var isAsync = false;

      this.parsePropertyName(method);

      method.static = isMaybeStatic && !this.match(_types.types.parenL);
      if (method.static) {
        if (isGenerator) this.unexpected();
        isGenerator = this.eat(_types.types.star);
        this.parsePropertyName(method);
      }

      if (!isGenerator && method.key.type === "Identifier" && !method.computed) {
        if (this.isClassProperty()) {
          classBody.body.push(this.parseClassProperty(method));
          continue;
        }

        if (this.hasPlugin("classConstructorCall") && method.key.name === "call" && this.match(_types.types.name) && this.state.value === "constructor") {
          isConstructorCall = true;
          this.parsePropertyName(method);
        }
      }

      var isAsyncMethod = this.hasPlugin("asyncFunctions") && !this.match(_types.types.parenL) && !method.computed && method.key.type === "Identifier" && method.key.name === "async";
      if (isAsyncMethod) {
        if (this.hasPlugin("asyncGenerators") && this.eat(_types.types.star)) isGenerator = true;
        isAsync = true;
        this.parsePropertyName(method);
      }

      method.kind = "method";

      if (!method.computed) {
        var key = method.key;

        // handle get/set methods
        // eg. class Foo { get bar() {} set bar() {} }

        if (!isAsync && !isGenerator && key.type === "Identifier" && !this.match(_types.types.parenL) && (key.name === "get" || key.name === "set")) {
          isGetSet = true;
          method.kind = key.name;
          key = this.parsePropertyName(method);
        }

        // disallow invalid constructors
        var isConstructor = !isConstructorCall && !method.static && (key.type === "Identifier" && key.name === "constructor" || key.type === "StringLiteral" && key.value === "constructor");
        if (isConstructor) {
          if (hadConstructor) this.raise(key.start, "Duplicate constructor in the same class");
          if (isGetSet) this.raise(key.start, "Constructor can't have get/set modifier");
          if (isGenerator) this.raise(key.start, "Constructor can't be a generator");
          if (isAsync) this.raise(key.start, "Constructor can't be an async function");
          method.kind = "constructor";
          hadConstructor = true;
        }

        // disallow static prototype method
        var isStaticPrototype = method.static && (key.type === "Identifier" && key.name === "prototype" || key.type === "StringLiteral" && key.value === "prototype");
        if (isStaticPrototype) {
          this.raise(key.start, "Classes may not have static property named prototype");
        }
      }

      // convert constructor to a constructor call
      if (isConstructorCall) {
        if (hadConstructorCall) this.raise(method.start, "Duplicate constructor call in the same class");
        method.kind = "constructorCall";
        hadConstructorCall = true;
      }

      // disallow decorators on class constructors
      if ((method.kind === "constructor" || method.kind === "constructorCall") && method.decorators) {
        this.raise(method.start, "You can't attach decorators to a class constructor");
      }

      this.parseClassMethod(classBody, method, isGenerator, isAsync);

      // get methods aren't allowed to have any parameters
      // set methods must have exactly 1 parameter
      if (isGetSet) {
        var paramCount = method.kind === "get" ? 0 : 1;
        if (method.params.length !== paramCount) {
          var start = method.start;
          if (method.kind === "get") {
            this.raise(start, "getter should have no params");
          } else {
            this.raise(start, "setter should have exactly one param");
          }
        }
      }
    }

    if (decorators.length) {
      this.raise(this.state.start, "You have trailing decorators with no method");
    }

    node.body = this.finishNode(classBody, "ClassBody");

    this.state.strict = oldStrict;
  };

  pp.parseClassProperty = function (node) {
    if (this.match(_types.types.eq)) {
      if (!this.hasPlugin("classProperties")) this.unexpected();
      this.next();
      node.value = this.parseMaybeAssign();
    } else {
      node.value = null;
    }
    this.semicolon();
    return this.finishNode(node, "ClassProperty");
  };

  pp.parseClassMethod = function (classBody, method, isGenerator, isAsync) {
    this.parseMethod(method, isGenerator, isAsync);
    classBody.body.push(this.finishNode(method, "ClassMethod"));
  };

  pp.parseClassId = function (node, isStatement, optionalId) {
    if (this.match(_types.types.name)) {
      node.id = this.parseIdentifier();
    } else {
      if (optionalId || !isStatement) {
        node.id = null;
      } else {
        this.unexpected();
      }
    }
  };

  pp.parseClassSuper = function (node) {
    node.superClass = this.eat(_types.types._extends) ? this.parseExprSubscripts() : null;
  };

  // Parses module export declaration.

  pp.parseExport = function (node) {
    this.next();
    // export * from '...'
    if (this.match(_types.types.star)) {
      var specifier = this.startNode();
      this.next();
      if (this.hasPlugin("exportExtensions") && this.eatContextual("as")) {
        specifier.exported = this.parseIdentifier();
        node.specifiers = [this.finishNode(specifier, "ExportNamespaceSpecifier")];
        this.parseExportSpecifiersMaybe(node);
        this.parseExportFrom(node, true);
      } else {
        this.parseExportFrom(node, true);
        return this.finishNode(node, "ExportAllDeclaration");
      }
    } else if (this.hasPlugin("exportExtensions") && this.isExportDefaultSpecifier()) {
      var _specifier = this.startNode();
      _specifier.exported = this.parseIdentifier(true);
      node.specifiers = [this.finishNode(_specifier, "ExportDefaultSpecifier")];
      if (this.match(_types.types.comma) && this.lookahead().type === _types.types.star) {
        this.expect(_types.types.comma);
        var _specifier2 = this.startNode();
        this.expect(_types.types.star);
        this.expectContextual("as");
        _specifier2.exported = this.parseIdentifier();
        node.specifiers.push(this.finishNode(_specifier2, "ExportNamespaceSpecifier"));
      } else {
        this.parseExportSpecifiersMaybe(node);
      }
      this.parseExportFrom(node, true);
    } else if (this.eat(_types.types._default)) {
      // export default ...
      var expr = this.startNode();
      var needsSemi = false;
      if (this.eat(_types.types._function)) {
        expr = this.parseFunction(expr, true, false, false, true);
      } else if (this.match(_types.types._class)) {
        expr = this.parseClass(expr, true, true);
      } else {
        needsSemi = true;
        expr = this.parseMaybeAssign();
      }
      node.declaration = expr;
      if (needsSemi) this.semicolon();
      this.checkExport(node);
      return this.finishNode(node, "ExportDefaultDeclaration");
    } else if (this.state.type.keyword || this.shouldParseExportDeclaration()) {
      node.specifiers = [];
      node.source = null;
      node.declaration = this.parseExportDeclaration(node);
    } else {
      // export { x, y as z } [from '...']
      node.declaration = null;
      node.specifiers = this.parseExportSpecifiers();
      this.parseExportFrom(node);
    }
    this.checkExport(node);
    return this.finishNode(node, "ExportNamedDeclaration");
  };

  pp.parseExportDeclaration = function () {
    return this.parseStatement(true);
  };

  pp.isExportDefaultSpecifier = function () {
    if (this.match(_types.types.name)) {
      return this.state.value !== "type" && this.state.value !== "async" && this.state.value !== "interface";
    }

    if (!this.match(_types.types._default)) {
      return false;
    }

    var lookahead = this.lookahead();
    return lookahead.type === _types.types.comma || lookahead.type === _types.types.name && lookahead.value === "from";
  };

  pp.parseExportSpecifiersMaybe = function (node) {
    if (this.eat(_types.types.comma)) {
      node.specifiers = node.specifiers.concat(this.parseExportSpecifiers());
    }
  };

  pp.parseExportFrom = function (node, expect) {
    if (this.eatContextual("from")) {
      node.source = this.match(_types.types.string) ? this.parseExprAtom() : this.unexpected();
      this.checkExport(node);
    } else {
      if (expect) {
        this.unexpected();
      } else {
        node.source = null;
      }
    }

    this.semicolon();
  };

  pp.shouldParseExportDeclaration = function () {
    return this.hasPlugin("asyncFunctions") && this.isContextual("async");
  };

  pp.checkExport = function (node) {
    if (this.state.decorators.length) {
      var isClass = node.declaration && (node.declaration.type === "ClassDeclaration" || node.declaration.type === "ClassExpression");
      if (!node.declaration || !isClass) {
        this.raise(node.start, "You can only use decorators on an export when exporting a class");
      }
      this.takeDecorators(node.declaration);
    }
  };

  // Parses a comma-separated list of module exports.

  pp.parseExportSpecifiers = function () {
    var nodes = [];
    var first = true;
    var needsFrom = void 0;

    // export { x, y as z } [from '...']
    this.expect(_types.types.braceL);

    while (!this.eat(_types.types.braceR)) {
      if (first) {
        first = false;
      } else {
        this.expect(_types.types.comma);
        if (this.eat(_types.types.braceR)) break;
      }

      var isDefault = this.match(_types.types._default);
      if (isDefault && !needsFrom) needsFrom = true;

      var node = this.startNode();
      node.local = this.parseIdentifier(isDefault);
      node.exported = this.eatContextual("as") ? this.parseIdentifier(true) : node.local.__clone();
      nodes.push(this.finishNode(node, "ExportSpecifier"));
    }

    // https://github.com/ember-cli/ember-cli/pull/3739
    if (needsFrom && !this.isContextual("from")) {
      this.unexpected();
    }

    return nodes;
  };

  // Parses import declaration.

  pp.parseImport = function (node) {
    this.next();

    // import '...'
    if (this.match(_types.types.string)) {
      node.specifiers = [];
      node.source = this.parseExprAtom();
    } else {
      node.specifiers = [];
      this.parseImportSpecifiers(node);
      this.expectContextual("from");
      node.source = this.match(_types.types.string) ? this.parseExprAtom() : this.unexpected();
    }
    this.semicolon();
    return this.finishNode(node, "ImportDeclaration");
  };

  // Parses a comma-separated list of module imports.

  pp.parseImportSpecifiers = function (node) {
    var first = true;
    if (this.match(_types.types.name)) {
      // import defaultObj, { x, y as z } from '...'
      var startPos = this.state.start,
          startLoc = this.state.startLoc;
      node.specifiers.push(this.parseImportSpecifierDefault(this.parseIdentifier(), startPos, startLoc));
      if (!this.eat(_types.types.comma)) return;
    }

    if (this.match(_types.types.star)) {
      var specifier = this.startNode();
      this.next();
      this.expectContextual("as");
      specifier.local = this.parseIdentifier();
      this.checkLVal(specifier.local, true);
      node.specifiers.push(this.finishNode(specifier, "ImportNamespaceSpecifier"));
      return;
    }

    this.expect(_types.types.braceL);
    while (!this.eat(_types.types.braceR)) {
      if (first) {
        first = false;
      } else {
        this.expect(_types.types.comma);
        if (this.eat(_types.types.braceR)) break;
      }

      var _specifier3 = this.startNode();
      _specifier3.imported = this.parseIdentifier(true);
      _specifier3.local = this.eatContextual("as") ? this.parseIdentifier() : _specifier3.imported.__clone();
      this.checkLVal(_specifier3.local, true);
      node.specifiers.push(this.finishNode(_specifier3, "ImportSpecifier"));
    }
  };

  pp.parseImportSpecifierDefault = function (id, startPos, startLoc) {
    var node = this.startNodeAt(startPos, startLoc);
    node.local = id;
    this.checkLVal(node.local, true);
    return this.finishNode(node, "ImportDefaultSpecifier");
  };

/***/ },
/* 780 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  var _types = __webpack_require__(137);

  var _index = __webpack_require__(136);

  var _index2 = _interopRequireDefault(_index);

  var _whitespace = __webpack_require__(191);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var pp = _index2.default.prototype;

  // ## Parser utilities

  // TODO

  pp.addExtra = function (node, key, val) {
    if (!node) return;

    var extra = node.extra = node.extra || {};
    extra[key] = val;
  };

  // TODO

  pp.isRelational = function (op) {
    return this.match(_types.types.relational) && this.state.value === op;
  };

  // TODO

  pp.expectRelational = function (op) {
    if (this.isRelational(op)) {
      this.next();
    } else {
      this.unexpected();
    }
  };

  // Tests whether parsed token is a contextual keyword.

  pp.isContextual = function (name) {
    return this.match(_types.types.name) && this.state.value === name;
  };

  // Consumes contextual keyword if possible.

  pp.eatContextual = function (name) {
    return this.state.value === name && this.eat(_types.types.name);
  };

  // Asserts that following token is given contextual keyword.

  pp.expectContextual = function (name) {
    if (!this.eatContextual(name)) this.unexpected();
  };

  // Test whether a semicolon can be inserted at the current position.

  pp.canInsertSemicolon = function () {
    return this.match(_types.types.eof) || this.match(_types.types.braceR) || _whitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));
  };

  // TODO

  pp.isLineTerminator = function () {
    return this.eat(_types.types.semi) || this.canInsertSemicolon();
  };

  // Consume a semicolon, or, failing that, see if we are allowed to
  // pretend that there is a semicolon at this position.

  pp.semicolon = function () {
    if (!this.isLineTerminator()) this.unexpected();
  };

  // Expect a token of a given type. If found, consume it, otherwise,
  // raise an unexpected token error.

  pp.expect = function (type) {
    return this.eat(type) || this.unexpected();
  };

  // Raise an unexpected token error.

  pp.unexpected = function (pos) {
    this.raise(pos != null ? pos : this.state.start, "Unexpected token");
  };

/***/ },
/* 781 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function (instance) {
    // plain function return types: function name(): string {}
    instance.extend("parseFunctionBody", function (inner) {
      return function (node, allowExpression) {
        if (this.match(_types.types.colon) && !allowExpression) {
          // if allowExpression is true then we're parsing an arrow function and if
          // there's a return type then it's been handled elsewhere
          node.returnType = this.flowParseTypeAnnotation();
        }

        return inner.call(this, node, allowExpression);
      };
    });

    // interfaces
    instance.extend("parseStatement", function (inner) {
      return function (declaration, topLevel) {
        // strict mode handling of `interface` since it's a reserved word
        if (this.state.strict && this.match(_types.types.name) && this.state.value === "interface") {
          var node = this.startNode();
          this.next();
          return this.flowParseInterface(node);
        } else {
          return inner.call(this, declaration, topLevel);
        }
      };
    });

    // declares, interfaces and type aliases
    instance.extend("parseExpressionStatement", function (inner) {
      return function (node, expr) {
        if (expr.type === "Identifier") {
          if (expr.name === "declare") {
            if (this.match(_types.types._class) || this.match(_types.types.name) || this.match(_types.types._function) || this.match(_types.types._var)) {
              return this.flowParseDeclare(node);
            }
          } else if (this.match(_types.types.name)) {
            if (expr.name === "interface") {
              return this.flowParseInterface(node);
            } else if (expr.name === "type") {
              return this.flowParseTypeAlias(node);
            }
          }
        }

        return inner.call(this, node, expr);
      };
    });

    // export type
    instance.extend("shouldParseExportDeclaration", function (inner) {
      return function () {
        return this.isContextual("type") || this.isContextual("interface") || inner.call(this);
      };
    });

    instance.extend("parseParenItem", function () {
      return function (node, startLoc, startPos, forceArrow) {
        var canBeArrow = this.state.potentialArrowAt = startPos;
        if (this.match(_types.types.colon)) {
          var typeCastNode = this.startNodeAt(startLoc, startPos);
          typeCastNode.expression = node;
          typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();

          if (forceArrow && !this.match(_types.types.arrow)) {
            this.unexpected();
          }

          if (canBeArrow && this.eat(_types.types.arrow)) {
            // ((lol): number => {});
            var params = node.type === "SequenceExpression" ? node.expressions : [node];
            var func = this.parseArrowExpression(this.startNodeAt(startLoc, startPos), params);
            func.returnType = typeCastNode.typeAnnotation;
            return func;
          } else {
            return this.finishNode(typeCastNode, "TypeCastExpression");
          }
        } else {
          return node;
        }
      };
    });

    instance.extend("parseExport", function (inner) {
      return function (node) {
        node = inner.call(this, node);
        if (node.type === "ExportNamedDeclaration") {
          node.exportKind = node.exportKind || "value";
        }
        return node;
      };
    });

    instance.extend("parseExportDeclaration", function (inner) {
      return function (node) {
        if (this.isContextual("type")) {
          node.exportKind = "type";

          var declarationNode = this.startNode();
          this.next();

          if (this.match(_types.types.braceL)) {
            // export type { foo, bar };
            node.specifiers = this.parseExportSpecifiers();
            this.parseExportFrom(node);
            return null;
          } else {
            // export type Foo = Bar;
            return this.flowParseTypeAlias(declarationNode);
          }
        } else if (this.isContextual("interface")) {
          node.exportKind = "type";
          var _declarationNode = this.startNode();
          this.next();
          return this.flowParseInterface(_declarationNode);
        } else {
          return inner.call(this, node);
        }
      };
    });

    instance.extend("parseClassId", function (inner) {
      return function (node) {
        inner.apply(this, arguments);
        if (this.isRelational("<")) {
          node.typeParameters = this.flowParseTypeParameterDeclaration();
        }
      };
    });

    // don't consider `void` to be a keyword as then it'll use the void token type
    // and set startExpr
    instance.extend("isKeyword", function (inner) {
      return function (name) {
        if (this.state.inType && name === "void") {
          return false;
        } else {
          return inner.call(this, name);
        }
      };
    });

    // ensure that inside flow types, we bypass the jsx parser plugin
    instance.extend("readToken", function (inner) {
      return function (code) {
        if (this.state.inType && (code === 62 || code === 60)) {
          return this.finishOp(_types.types.relational, 1);
        } else {
          return inner.call(this, code);
        }
      };
    });

    // don't lex any token as a jsx one inside a flow type
    instance.extend("jsx_readToken", function (inner) {
      return function () {
        if (!this.state.inType) return inner.call(this);
      };
    });

    function typeCastToParameter(node) {
      node.expression.typeAnnotation = node.typeAnnotation;
      return node.expression;
    }

    instance.extend("toAssignable", function (inner) {
      return function (node) {
        if (node.type === "TypeCastExpression") {
          return typeCastToParameter(node);
        } else {
          return inner.apply(this, arguments);
        }
      };
    });

    // turn type casts that we found in function parameter head into type annotated params
    instance.extend("toAssignableList", function (inner) {
      return function (exprList, isBinding) {
        for (var i = 0; i < exprList.length; i++) {
          var expr = exprList[i];
          if (expr && expr.type === "TypeCastExpression") {
            exprList[i] = typeCastToParameter(expr);
          }
        }
        return inner.call(this, exprList, isBinding);
      };
    });

    // this is a list of nodes, from something like a call expression, we need to filter the
    // type casts that we've found that are illegal in this context
    instance.extend("toReferencedList", function () {
      return function (exprList) {
        for (var i = 0; i < exprList.length; i++) {
          var expr = exprList[i];
          if (expr && expr._exprListItem && expr.type === "TypeCastExpression") {
            this.raise(expr.start, "Unexpected type cast");
          }
        }

        return exprList;
      };
    });

    // parse an item inside a expression list eg. `(NODE, NODE)` where NODE represents
    // the position where this function is cal;ed
    instance.extend("parseExprListItem", function (inner) {
      return function (allowEmpty, refShorthandDefaultPos) {
        var container = this.startNode();
        var node = inner.call(this, allowEmpty, refShorthandDefaultPos);
        if (this.match(_types.types.colon)) {
          container._exprListItem = true;
          container.expression = node;
          container.typeAnnotation = this.flowParseTypeAnnotation();
          return this.finishNode(container, "TypeCastExpression");
        } else {
          return node;
        }
      };
    });

    instance.extend("checkLVal", function (inner) {
      return function (node) {
        if (node.type !== "TypeCastExpression") {
          return inner.apply(this, arguments);
        }
      };
    });

    // parse class property type annotations
    instance.extend("parseClassProperty", function (inner) {
      return function (node) {
        if (this.match(_types.types.colon)) {
          node.typeAnnotation = this.flowParseTypeAnnotation();
        }
        return inner.call(this, node);
      };
    });

    // determine whether or not we're currently in the position where a class property would appear
    instance.extend("isClassProperty", function (inner) {
      return function () {
        return this.match(_types.types.colon) || inner.call(this);
      };
    });

    // parse type parameters for class methods
    instance.extend("parseClassMethod", function () {
      return function (classBody, method, isGenerator, isAsync) {
        if (this.isRelational("<")) {
          method.typeParameters = this.flowParseTypeParameterDeclaration();
        }
        this.parseMethod(method, isGenerator, isAsync);
        classBody.body.push(this.finishNode(method, "ClassMethod"));
      };
    });

    // parse a the super class type parameters and implements
    instance.extend("parseClassSuper", function (inner) {
      return function (node, isStatement) {
        inner.call(this, node, isStatement);
        if (node.superClass && this.isRelational("<")) {
          node.superTypeParameters = this.flowParseTypeParameterInstantiation();
        }
        if (this.isContextual("implements")) {
          this.next();
          var implemented = node.implements = [];
          do {
            var _node = this.startNode();
            _node.id = this.parseIdentifier();
            if (this.isRelational("<")) {
              _node.typeParameters = this.flowParseTypeParameterInstantiation();
            } else {
              _node.typeParameters = null;
            }
            implemented.push(this.finishNode(_node, "ClassImplements"));
          } while (this.eat(_types.types.comma));
        }
      };
    });

    // parse type parameters for object method shorthand
    instance.extend("parseObjPropValue", function (inner) {
      return function (prop) {
        var typeParameters = void 0;

        // method shorthand
        if (this.isRelational("<")) {
          typeParameters = this.flowParseTypeParameterDeclaration();
          if (!this.match(_types.types.parenL)) this.unexpected();
        }

        inner.apply(this, arguments);

        // add typeParameters if we found them
        if (typeParameters) {
          (prop.value || prop).typeParameters = typeParameters;
        }
      };
    });

    instance.extend("parseAssignableListItemTypes", function () {
      return function (param) {
        if (this.eat(_types.types.question)) {
          param.optional = true;
        }
        if (this.match(_types.types.colon)) {
          param.typeAnnotation = this.flowParseTypeAnnotation();
        }
        this.finishNode(param, param.type);
        return param;
      };
    });

    // parse typeof and type imports
    instance.extend("parseImportSpecifiers", function (inner) {
      return function (node) {
        node.importKind = "value";

        var kind = null;
        if (this.match(_types.types._typeof)) {
          kind = "typeof";
        } else if (this.isContextual("type")) {
          kind = "type";
        }
        if (kind) {
          var lh = this.lookahead();
          if (lh.type === _types.types.name && lh.value !== "from" || lh.type === _types.types.braceL || lh.type === _types.types.star) {
            this.next();
            node.importKind = kind;
          }
        }

        inner.call(this, node);
      };
    });

    // parse function type parameters - function foo<T>() {}
    instance.extend("parseFunctionParams", function (inner) {
      return function (node) {
        if (this.isRelational("<")) {
          node.typeParameters = this.flowParseTypeParameterDeclaration();
        }
        inner.call(this, node);
      };
    });

    // parse flow type annotations on variable declarator heads - let foo: string = bar
    instance.extend("parseVarHead", function (inner) {
      return function (decl) {
        inner.call(this, decl);
        if (this.match(_types.types.colon)) {
          decl.id.typeAnnotation = this.flowParseTypeAnnotation();
          this.finishNode(decl.id, decl.id.type);
        }
      };
    });

    // parse the return type of an async arrow function - let foo = (async (): number => {});
    instance.extend("parseAsyncArrowFromCallExpression", function (inner) {
      return function (node, call) {
        if (this.match(_types.types.colon)) {
          node.returnType = this.flowParseTypeAnnotation();
        }

        return inner.call(this, node, call);
      };
    });

    // todo description
    instance.extend("shouldParseAsyncArrow", function (inner) {
      return function () {
        return this.match(_types.types.colon) || inner.call(this);
      };
    });

    // handle return types for arrow functions
    instance.extend("parseParenAndDistinguishExpression", function (inner) {
      return function (startPos, startLoc, canBeArrow, isAsync) {
        startPos = startPos || this.state.start;
        startLoc = startLoc || this.state.startLoc;

        if (canBeArrow && this.lookahead().type === _types.types.parenR) {
          // let foo = (): number => {};
          this.expect(_types.types.parenL);
          this.expect(_types.types.parenR);

          var node = this.startNodeAt(startPos, startLoc);
          if (this.match(_types.types.colon)) node.returnType = this.flowParseTypeAnnotation();
          this.expect(_types.types.arrow);
          return this.parseArrowExpression(node, [], isAsync);
        } else {
          // let foo = (foo): number => {};
          var _node2 = inner.call(this, startPos, startLoc, canBeArrow, isAsync, this.hasPlugin("trailingFunctionCommas"));

          if (this.match(_types.types.colon)) {
            var state = this.state.clone();
            try {
              return this.parseParenItem(_node2, startPos, startLoc, true);
            } catch (err) {
              if (err instanceof SyntaxError) {
                this.state = state;
                return _node2;
              } else {
                throw err;
              }
            }
          } else {
            return _node2;
          }
        }
      };
    });
  };

  var _types = __webpack_require__(137);

  var _parser = __webpack_require__(136);

  var _parser2 = _interopRequireDefault(_parser);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /* eslint indent: 0 */
  /* eslint max-len: 0 */

  var pp = _parser2.default.prototype;

  pp.flowParseTypeInitialiser = function (tok, allowLeadingPipeOrAnd) {
    var oldInType = this.state.inType;
    this.state.inType = true;
    this.expect(tok || _types.types.colon);
    if (allowLeadingPipeOrAnd) {
      if (this.match(_types.types.bitwiseAND) || this.match(_types.types.bitwiseOR)) {
        this.next();
      }
    }
    var type = this.flowParseType();
    this.state.inType = oldInType;
    return type;
  };

  pp.flowParseDeclareClass = function (node) {
    this.next();
    this.flowParseInterfaceish(node, true);
    return this.finishNode(node, "DeclareClass");
  };

  pp.flowParseDeclareFunction = function (node) {
    this.next();

    var id = node.id = this.parseIdentifier();

    var typeNode = this.startNode();
    var typeContainer = this.startNode();

    if (this.isRelational("<")) {
      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();
    } else {
      typeNode.typeParameters = null;
    }

    this.expect(_types.types.parenL);
    var tmp = this.flowParseFunctionTypeParams();
    typeNode.params = tmp.params;
    typeNode.rest = tmp.rest;
    this.expect(_types.types.parenR);
    typeNode.returnType = this.flowParseTypeInitialiser();

    typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation");
    id.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation");

    this.finishNode(id, id.type);

    this.semicolon();

    return this.finishNode(node, "DeclareFunction");
  };

  pp.flowParseDeclare = function (node) {
    if (this.match(_types.types._class)) {
      return this.flowParseDeclareClass(node);
    } else if (this.match(_types.types._function)) {
      return this.flowParseDeclareFunction(node);
    } else if (this.match(_types.types._var)) {
      return this.flowParseDeclareVariable(node);
    } else if (this.isContextual("module")) {
      return this.flowParseDeclareModule(node);
    } else if (this.isContextual("type")) {
      return this.flowParseDeclareTypeAlias(node);
    } else if (this.isContextual("interface")) {
      return this.flowParseDeclareInterface(node);
    } else {
      this.unexpected();
    }
  };

  pp.flowParseDeclareVariable = function (node) {
    this.next();
    node.id = this.flowParseTypeAnnotatableIdentifier();
    this.semicolon();
    return this.finishNode(node, "DeclareVariable");
  };

  pp.flowParseDeclareModule = function (node) {
    this.next();

    if (this.match(_types.types.string)) {
      node.id = this.parseExprAtom();
    } else {
      node.id = this.parseIdentifier();
    }

    var bodyNode = node.body = this.startNode();
    var body = bodyNode.body = [];
    this.expect(_types.types.braceL);
    while (!this.match(_types.types.braceR)) {
      var node2 = this.startNode();

      // todo: declare check
      this.next();

      body.push(this.flowParseDeclare(node2));
    }
    this.expect(_types.types.braceR);

    this.finishNode(bodyNode, "BlockStatement");
    return this.finishNode(node, "DeclareModule");
  };

  pp.flowParseDeclareTypeAlias = function (node) {
    this.next();
    this.flowParseTypeAlias(node);
    return this.finishNode(node, "DeclareTypeAlias");
  };

  pp.flowParseDeclareInterface = function (node) {
    this.next();
    this.flowParseInterfaceish(node);
    return this.finishNode(node, "DeclareInterface");
  };

  // Interfaces

  pp.flowParseInterfaceish = function (node, allowStatic) {
    node.id = this.parseIdentifier();

    if (this.isRelational("<")) {
      node.typeParameters = this.flowParseTypeParameterDeclaration();
    } else {
      node.typeParameters = null;
    }

    node.extends = [];
    node.mixins = [];

    if (this.eat(_types.types._extends)) {
      do {
        node.extends.push(this.flowParseInterfaceExtends());
      } while (this.eat(_types.types.comma));
    }

    if (this.isContextual("mixins")) {
      this.next();
      do {
        node.mixins.push(this.flowParseInterfaceExtends());
      } while (this.eat(_types.types.comma));
    }

    node.body = this.flowParseObjectType(allowStatic);
  };

  pp.flowParseInterfaceExtends = function () {
    var node = this.startNode();

    node.id = this.parseIdentifier();
    if (this.isRelational("<")) {
      node.typeParameters = this.flowParseTypeParameterInstantiation();
    } else {
      node.typeParameters = null;
    }

    return this.finishNode(node, "InterfaceExtends");
  };

  pp.flowParseInterface = function (node) {
    this.flowParseInterfaceish(node, false);
    return this.finishNode(node, "InterfaceDeclaration");
  };

  // Type aliases

  pp.flowParseTypeAlias = function (node) {
    node.id = this.parseIdentifier();

    if (this.isRelational("<")) {
      node.typeParameters = this.flowParseTypeParameterDeclaration();
    } else {
      node.typeParameters = null;
    }

    node.right = this.flowParseTypeInitialiser(_types.types.eq,
    /*allowLeadingPipeOrAnd*/true);
    this.semicolon();

    return this.finishNode(node, "TypeAlias");
  };

  // Type annotations

  pp.flowParseTypeParameterDeclaration = function () {
    var node = this.startNode();
    node.params = [];

    this.expectRelational("<");
    while (!this.isRelational(">")) {
      node.params.push(this.flowParseExistentialTypeParam() || this.flowParseTypeAnnotatableIdentifier());
      if (!this.isRelational(">")) {
        this.expect(_types.types.comma);
      }
    }
    this.expectRelational(">");

    return this.finishNode(node, "TypeParameterDeclaration");
  };

  pp.flowParseExistentialTypeParam = function () {
    if (this.match(_types.types.star)) {
      var node = this.startNode();
      this.next();
      return this.finishNode(node, "ExistentialTypeParam");
    }
  };

  pp.flowParseTypeParameterInstantiation = function () {
    var node = this.startNode(),
        oldInType = this.state.inType;
    node.params = [];

    this.state.inType = true;

    this.expectRelational("<");
    while (!this.isRelational(">")) {
      node.params.push(this.flowParseExistentialTypeParam() || this.flowParseType());
      if (!this.isRelational(">")) {
        this.expect(_types.types.comma);
      }
    }
    this.expectRelational(">");

    this.state.inType = oldInType;

    return this.finishNode(node, "TypeParameterInstantiation");
  };

  pp.flowParseObjectPropertyKey = function () {
    return this.match(_types.types.num) || this.match(_types.types.string) ? this.parseExprAtom() : this.parseIdentifier(true);
  };

  pp.flowParseObjectTypeIndexer = function (node, isStatic) {
    node.static = isStatic;

    this.expect(_types.types.bracketL);
    node.id = this.flowParseObjectPropertyKey();
    node.key = this.flowParseTypeInitialiser();
    this.expect(_types.types.bracketR);
    node.value = this.flowParseTypeInitialiser();

    this.flowObjectTypeSemicolon();
    return this.finishNode(node, "ObjectTypeIndexer");
  };

  pp.flowParseObjectTypeMethodish = function (node) {
    node.params = [];
    node.rest = null;
    node.typeParameters = null;

    if (this.isRelational("<")) {
      node.typeParameters = this.flowParseTypeParameterDeclaration();
    }

    this.expect(_types.types.parenL);
    while (this.match(_types.types.name)) {
      node.params.push(this.flowParseFunctionTypeParam());
      if (!this.match(_types.types.parenR)) {
        this.expect(_types.types.comma);
      }
    }

    if (this.eat(_types.types.ellipsis)) {
      node.rest = this.flowParseFunctionTypeParam();
    }
    this.expect(_types.types.parenR);
    node.returnType = this.flowParseTypeInitialiser();

    return this.finishNode(node, "FunctionTypeAnnotation");
  };

  pp.flowParseObjectTypeMethod = function (startPos, startLoc, isStatic, key) {
    var node = this.startNodeAt(startPos, startLoc);
    node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(startPos, startLoc));
    node.static = isStatic;
    node.key = key;
    node.optional = false;
    this.flowObjectTypeSemicolon();
    return this.finishNode(node, "ObjectTypeProperty");
  };

  pp.flowParseObjectTypeCallProperty = function (node, isStatic) {
    var valueNode = this.startNode();
    node.static = isStatic;
    node.value = this.flowParseObjectTypeMethodish(valueNode);
    this.flowObjectTypeSemicolon();
    return this.finishNode(node, "ObjectTypeCallProperty");
  };

  pp.flowParseObjectType = function (allowStatic) {
    var nodeStart = this.startNode();
    var node = void 0;
    var propertyKey = void 0;
    var isStatic = void 0;

    nodeStart.callProperties = [];
    nodeStart.properties = [];
    nodeStart.indexers = [];

    this.expect(_types.types.braceL);

    while (!this.match(_types.types.braceR)) {
      var optional = false;
      var startPos = this.state.start,
          startLoc = this.state.startLoc;
      node = this.startNode();
      if (allowStatic && this.isContextual("static")) {
        this.next();
        isStatic = true;
      }

      if (this.match(_types.types.bracketL)) {
        nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic));
      } else if (this.match(_types.types.parenL) || this.isRelational("<")) {
        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, allowStatic));
      } else {
        if (isStatic && this.match(_types.types.colon)) {
          propertyKey = this.parseIdentifier();
        } else {
          propertyKey = this.flowParseObjectPropertyKey();
        }
        if (this.isRelational("<") || this.match(_types.types.parenL)) {
          // This is a method property
          nodeStart.properties.push(this.flowParseObjectTypeMethod(startPos, startLoc, isStatic, propertyKey));
        } else {
          if (this.eat(_types.types.question)) {
            optional = true;
          }
          node.key = propertyKey;
          node.value = this.flowParseTypeInitialiser();
          node.optional = optional;
          node.static = isStatic;
          this.flowObjectTypeSemicolon();
          nodeStart.properties.push(this.finishNode(node, "ObjectTypeProperty"));
        }
      }
    }

    this.expect(_types.types.braceR);

    return this.finishNode(nodeStart, "ObjectTypeAnnotation");
  };

  pp.flowObjectTypeSemicolon = function () {
    if (!this.eat(_types.types.semi) && !this.eat(_types.types.comma) && !this.match(_types.types.braceR)) {
      this.unexpected();
    }
  };

  pp.flowParseGenericType = function (startPos, startLoc, id) {
    var node = this.startNodeAt(startPos, startLoc);

    node.typeParameters = null;
    node.id = id;

    while (this.eat(_types.types.dot)) {
      var node2 = this.startNodeAt(startPos, startLoc);
      node2.qualification = node.id;
      node2.id = this.parseIdentifier();
      node.id = this.finishNode(node2, "QualifiedTypeIdentifier");
    }

    if (this.isRelational("<")) {
      node.typeParameters = this.flowParseTypeParameterInstantiation();
    }

    return this.finishNode(node, "GenericTypeAnnotation");
  };

  pp.flowParseTypeofType = function () {
    var node = this.startNode();
    this.expect(_types.types._typeof);
    node.argument = this.flowParsePrimaryType();
    return this.finishNode(node, "TypeofTypeAnnotation");
  };

  pp.flowParseTupleType = function () {
    var node = this.startNode();
    node.types = [];
    this.expect(_types.types.bracketL);
    // We allow trailing commas
    while (this.state.pos < this.input.length && !this.match(_types.types.bracketR)) {
      node.types.push(this.flowParseType());
      if (this.match(_types.types.bracketR)) break;
      this.expect(_types.types.comma);
    }
    this.expect(_types.types.bracketR);
    return this.finishNode(node, "TupleTypeAnnotation");
  };

  pp.flowParseFunctionTypeParam = function () {
    var optional = false;
    var node = this.startNode();
    node.name = this.parseIdentifier();
    if (this.eat(_types.types.question)) {
      optional = true;
    }
    node.optional = optional;
    node.typeAnnotation = this.flowParseTypeInitialiser();
    return this.finishNode(node, "FunctionTypeParam");
  };

  pp.flowParseFunctionTypeParams = function () {
    var ret = { params: [], rest: null };
    while (this.match(_types.types.name)) {
      ret.params.push(this.flowParseFunctionTypeParam());
      if (!this.match(_types.types.parenR)) {
        this.expect(_types.types.comma);
      }
    }
    if (this.eat(_types.types.ellipsis)) {
      ret.rest = this.flowParseFunctionTypeParam();
    }
    return ret;
  };

  pp.flowIdentToTypeAnnotation = function (startPos, startLoc, node, id) {
    switch (id.name) {
      case "any":
        return this.finishNode(node, "AnyTypeAnnotation");

      case "void":
        return this.finishNode(node, "VoidTypeAnnotation");

      case "bool":
      case "boolean":
        return this.finishNode(node, "BooleanTypeAnnotation");

      case "mixed":
        return this.finishNode(node, "MixedTypeAnnotation");

      case "number":
        return this.finishNode(node, "NumberTypeAnnotation");

      case "string":
        return this.finishNode(node, "StringTypeAnnotation");

      default:
        return this.flowParseGenericType(startPos, startLoc, id);
    }
  };

  // The parsing of types roughly parallels the parsing of expressions, and
  // primary types are kind of like primary expressions...they're the
  // primitives with which other types are constructed.
  pp.flowParsePrimaryType = function () {
    var startPos = this.state.start,
        startLoc = this.state.startLoc;
    var node = this.startNode();
    var tmp = void 0;
    var type = void 0;
    var isGroupedType = false;

    switch (this.state.type) {
      case _types.types.name:
        return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());

      case _types.types.braceL:
        return this.flowParseObjectType();

      case _types.types.bracketL:
        return this.flowParseTupleType();

      case _types.types.relational:
        if (this.state.value === "<") {
          node.typeParameters = this.flowParseTypeParameterDeclaration();
          this.expect(_types.types.parenL);
          tmp = this.flowParseFunctionTypeParams();
          node.params = tmp.params;
          node.rest = tmp.rest;
          this.expect(_types.types.parenR);

          this.expect(_types.types.arrow);

          node.returnType = this.flowParseType();

          return this.finishNode(node, "FunctionTypeAnnotation");
        }

      case _types.types.parenL:
        this.next();

        // Check to see if this is actually a grouped type
        if (!this.match(_types.types.parenR) && !this.match(_types.types.ellipsis)) {
          if (this.match(_types.types.name)) {
            var token = this.lookahead().type;
            isGroupedType = token !== _types.types.question && token !== _types.types.colon;
          } else {
            isGroupedType = true;
          }
        }

        if (isGroupedType) {
          type = this.flowParseType();
          this.expect(_types.types.parenR);

          // If we see a => next then someone was probably confused about
          // function types, so we can provide a better error message
          if (this.eat(_types.types.arrow)) {
            this.raise(node, "Unexpected token =>. It looks like " + "you are trying to write a function type, but you ended up " + "writing a grouped type followed by an =>, which is a syntax " + "error. Remember, function type parameters are named so function " + "types look like (name1: type1, name2: type2) => returnType. You " + "probably wrote (type1) => returnType");
          }

          return type;
        }

        tmp = this.flowParseFunctionTypeParams();
        node.params = tmp.params;
        node.rest = tmp.rest;

        this.expect(_types.types.parenR);

        this.expect(_types.types.arrow);

        node.returnType = this.flowParseType();
        node.typeParameters = null;

        return this.finishNode(node, "FunctionTypeAnnotation");

      case _types.types.string:
        node.value = this.state.value;
        this.addExtra(node, "rawValue", node.value);
        this.addExtra(node, "raw", this.input.slice(this.state.start, this.state.end));
        this.next();
        return this.finishNode(node, "StringLiteralTypeAnnotation");

      case _types.types._true:case _types.types._false:
        node.value = this.match(_types.types._true);
        this.next();
        return this.finishNode(node, "BooleanLiteralTypeAnnotation");

      case _types.types.num:
        node.value = this.state.value;
        this.addExtra(node, "rawValue", node.value);
        this.addExtra(node, "raw", this.input.slice(this.state.start, this.state.end));
        this.next();
        return this.finishNode(node, "NumericLiteralTypeAnnotation");

      case _types.types._null:
        node.value = this.match(_types.types._null);
        this.next();
        return this.finishNode(node, "NullLiteralTypeAnnotation");

      case _types.types._this:
        node.value = this.match(_types.types._this);
        this.next();
        return this.finishNode(node, "ThisTypeAnnotation");

      default:
        if (this.state.type.keyword === "typeof") {
          return this.flowParseTypeofType();
        }
    }

    this.unexpected();
  };

  pp.flowParsePostfixType = function () {
    var node = this.startNode();
    var type = node.elementType = this.flowParsePrimaryType();
    if (this.match(_types.types.bracketL)) {
      this.expect(_types.types.bracketL);
      this.expect(_types.types.bracketR);
      return this.finishNode(node, "ArrayTypeAnnotation");
    } else {
      return type;
    }
  };

  pp.flowParsePrefixType = function () {
    var node = this.startNode();
    if (this.eat(_types.types.question)) {
      node.typeAnnotation = this.flowParsePrefixType();
      return this.finishNode(node, "NullableTypeAnnotation");
    } else {
      return this.flowParsePostfixType();
    }
  };

  pp.flowParseIntersectionType = function () {
    var node = this.startNode();
    var type = this.flowParsePrefixType();
    node.types = [type];
    while (this.eat(_types.types.bitwiseAND)) {
      node.types.push(this.flowParsePrefixType());
    }
    return node.types.length === 1 ? type : this.finishNode(node, "IntersectionTypeAnnotation");
  };

  pp.flowParseUnionType = function () {
    var node = this.startNode();
    var type = this.flowParseIntersectionType();
    node.types = [type];
    while (this.eat(_types.types.bitwiseOR)) {
      node.types.push(this.flowParseIntersectionType());
    }
    return node.types.length === 1 ? type : this.finishNode(node, "UnionTypeAnnotation");
  };

  pp.flowParseType = function () {
    var oldInType = this.state.inType;
    this.state.inType = true;
    var type = this.flowParseUnionType();
    this.state.inType = oldInType;
    return type;
  };

  pp.flowParseTypeAnnotation = function () {
    var node = this.startNode();
    node.typeAnnotation = this.flowParseTypeInitialiser();
    return this.finishNode(node, "TypeAnnotation");
  };

  pp.flowParseTypeAnnotatableIdentifier = function (requireTypeAnnotation, canBeOptionalParam) {
    var variance = void 0;
    if (this.match(_types.types.plusMin)) {
      if (this.state.value === "+") {
        variance = "plus";
      } else if (this.state.value === "-") {
        variance = "minus";
      }
      this.eat(_types.types.plusMin);
    }

    var ident = this.parseIdentifier();
    var isOptionalParam = false;

    if (variance) {
      ident.variance = variance;
    }

    if (canBeOptionalParam && this.eat(_types.types.question)) {
      this.expect(_types.types.question);
      isOptionalParam = true;
    }

    if (requireTypeAnnotation || this.match(_types.types.colon)) {
      ident.typeAnnotation = this.flowParseTypeAnnotation();
      this.finishNode(ident, ident.type);
    }

    if (isOptionalParam) {
      ident.optional = true;
      this.finishNode(ident, ident.type);
    }

    return ident;
  };

/***/ },
/* 782 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function (instance) {
    instance.extend("parseExprAtom", function (inner) {
      return function (refShortHandDefaultPos) {
        if (this.match(_types.types.jsxText)) {
          var node = this.parseLiteral(this.state.value, "JSXText");
          // https://github.com/babel/babel/issues/2078
          node.extra = null;
          return node;
        } else if (this.match(_types.types.jsxTagStart)) {
          return this.jsxParseElement();
        } else {
          return inner.call(this, refShortHandDefaultPos);
        }
      };
    });

    instance.extend("readToken", function (inner) {
      return function (code) {
        var context = this.curContext();

        if (context === _context.types.j_expr) {
          return this.jsxReadToken();
        }

        if (context === _context.types.j_oTag || context === _context.types.j_cTag) {
          if ((0, _identifier.isIdentifierStart)(code)) {
            return this.jsxReadWord();
          }

          if (code === 62) {
            ++this.state.pos;
            return this.finishToken(_types.types.jsxTagEnd);
          }

          if ((code === 34 || code === 39) && context === _context.types.j_oTag) {
            return this.jsxReadString(code);
          }
        }

        if (code === 60 && this.state.exprAllowed) {
          ++this.state.pos;
          return this.finishToken(_types.types.jsxTagStart);
        }

        return inner.call(this, code);
      };
    });

    instance.extend("updateContext", function (inner) {
      return function (prevType) {
        if (this.match(_types.types.braceL)) {
          var curContext = this.curContext();
          if (curContext === _context.types.j_oTag) {
            this.state.context.push(_context.types.b_expr);
          } else if (curContext === _context.types.j_expr) {
            this.state.context.push(_context.types.b_tmpl);
          } else {
            inner.call(this, prevType);
          }
          this.state.exprAllowed = true;
        } else if (this.match(_types.types.slash) && prevType === _types.types.jsxTagStart) {
          this.state.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore
          this.state.context.push(_context.types.j_cTag); // reconsider as closing tag context
          this.state.exprAllowed = false;
        } else {
          return inner.call(this, prevType);
        }
      };
    });
  };

  var _xhtml = __webpack_require__(783);

  var _xhtml2 = _interopRequireDefault(_xhtml);

  var _types = __webpack_require__(137);

  var _context = __webpack_require__(227);

  var _parser = __webpack_require__(136);

  var _parser2 = _interopRequireDefault(_parser);

  var _identifier = __webpack_require__(204);

  var _whitespace = __webpack_require__(191);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /* eslint indent: 0 */

  var HEX_NUMBER = /^[\da-fA-F]+$/;
  var DECIMAL_NUMBER = /^\d+$/;

  _context.types.j_oTag = new _context.TokContext("<tag", false);
  _context.types.j_cTag = new _context.TokContext("</tag", false);
  _context.types.j_expr = new _context.TokContext("<tag>...</tag>", true, true);

  _types.types.jsxName = new _types.TokenType("jsxName");
  _types.types.jsxText = new _types.TokenType("jsxText", { beforeExpr: true });
  _types.types.jsxTagStart = new _types.TokenType("jsxTagStart");
  _types.types.jsxTagEnd = new _types.TokenType("jsxTagEnd");

  _types.types.jsxTagStart.updateContext = function () {
    this.state.context.push(_context.types.j_expr); // treat as beginning of JSX expression
    this.state.context.push(_context.types.j_oTag); // start opening tag context
    this.state.exprAllowed = false;
  };

  _types.types.jsxTagEnd.updateContext = function (prevType) {
    var out = this.state.context.pop();
    if (out === _context.types.j_oTag && prevType === _types.types.slash || out === _context.types.j_cTag) {
      this.state.context.pop();
      this.state.exprAllowed = this.curContext() === _context.types.j_expr;
    } else {
      this.state.exprAllowed = true;
    }
  };

  var pp = _parser2.default.prototype;

  // Reads inline JSX contents token.

  pp.jsxReadToken = function () {
    var out = "";
    var chunkStart = this.state.pos;
    for (;;) {
      if (this.state.pos >= this.input.length) {
        this.raise(this.state.start, "Unterminated JSX contents");
      }

      var ch = this.input.charCodeAt(this.state.pos);

      switch (ch) {
        case 60: // "<"
        case 123:
          // "{"
          if (this.state.pos === this.state.start) {
            if (ch === 60 && this.state.exprAllowed) {
              ++this.state.pos;
              return this.finishToken(_types.types.jsxTagStart);
            }
            return this.getTokenFromCode(ch);
          }
          out += this.input.slice(chunkStart, this.state.pos);
          return this.finishToken(_types.types.jsxText, out);

        case 38:
          // "&"
          out += this.input.slice(chunkStart, this.state.pos);
          out += this.jsxReadEntity();
          chunkStart = this.state.pos;
          break;

        default:
          if ((0, _whitespace.isNewLine)(ch)) {
            out += this.input.slice(chunkStart, this.state.pos);
            out += this.jsxReadNewLine(true);
            chunkStart = this.state.pos;
          } else {
            ++this.state.pos;
          }
      }
    }
  };

  pp.jsxReadNewLine = function (normalizeCRLF) {
    var ch = this.input.charCodeAt(this.state.pos);
    var out = void 0;
    ++this.state.pos;
    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {
      ++this.state.pos;
      out = normalizeCRLF ? "\n" : "\r\n";
    } else {
      out = String.fromCharCode(ch);
    }
    ++this.state.curLine;
    this.state.lineStart = this.state.pos;

    return out;
  };

  pp.jsxReadString = function (quote) {
    var out = "";
    var chunkStart = ++this.state.pos;
    for (;;) {
      if (this.state.pos >= this.input.length) {
        this.raise(this.state.start, "Unterminated string constant");
      }

      var ch = this.input.charCodeAt(this.state.pos);
      if (ch === quote) break;
      if (ch === 38) {
        // "&"
        out += this.input.slice(chunkStart, this.state.pos);
        out += this.jsxReadEntity();
        chunkStart = this.state.pos;
      } else if ((0, _whitespace.isNewLine)(ch)) {
        out += this.input.slice(chunkStart, this.state.pos);
        out += this.jsxReadNewLine(false);
        chunkStart = this.state.pos;
      } else {
        ++this.state.pos;
      }
    }
    out += this.input.slice(chunkStart, this.state.pos++);
    return this.finishToken(_types.types.string, out);
  };

  pp.jsxReadEntity = function () {
    var str = "";
    var count = 0;
    var entity = void 0;
    var ch = this.input[this.state.pos];

    var startPos = ++this.state.pos;
    while (this.state.pos < this.input.length && count++ < 10) {
      ch = this.input[this.state.pos++];
      if (ch === ";") {
        if (str[0] === "#") {
          if (str[1] === "x") {
            str = str.substr(2);
            if (HEX_NUMBER.test(str)) entity = String.fromCharCode(parseInt(str, 16));
          } else {
            str = str.substr(1);
            if (DECIMAL_NUMBER.test(str)) entity = String.fromCharCode(parseInt(str, 10));
          }
        } else {
          entity = _xhtml2.default[str];
        }
        break;
      }
      str += ch;
    }
    if (!entity) {
      this.state.pos = startPos;
      return "&";
    }
    return entity;
  };

  // Read a JSX identifier (valid tag or attribute name).
  //
  // Optimized version since JSX identifiers can"t contain
  // escape characters and so can be read as single slice.
  // Also assumes that first character was already checked
  // by isIdentifierStart in readToken.

  pp.jsxReadWord = function () {
    var ch = void 0;
    var start = this.state.pos;
    do {
      ch = this.input.charCodeAt(++this.state.pos);
    } while ((0, _identifier.isIdentifierChar)(ch) || ch === 45); // "-"
    return this.finishToken(_types.types.jsxName, this.input.slice(start, this.state.pos));
  };

  // Transforms JSX element name to string.

  function getQualifiedJSXName(object) {
    if (object.type === "JSXIdentifier") {
      return object.name;
    }

    if (object.type === "JSXNamespacedName") {
      return object.namespace.name + ":" + object.name.name;
    }

    if (object.type === "JSXMemberExpression") {
      return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
    }
  }

  // Parse next token as JSX identifier

  pp.jsxParseIdentifier = function () {
    var node = this.startNode();
    if (this.match(_types.types.jsxName)) {
      node.name = this.state.value;
    } else if (this.state.type.keyword) {
      node.name = this.state.type.keyword;
    } else {
      this.unexpected();
    }
    this.next();
    return this.finishNode(node, "JSXIdentifier");
  };

  // Parse namespaced identifier.

  pp.jsxParseNamespacedName = function () {
    var startPos = this.state.start,
        startLoc = this.state.startLoc;
    var name = this.jsxParseIdentifier();
    if (!this.eat(_types.types.colon)) return name;

    var node = this.startNodeAt(startPos, startLoc);
    node.namespace = name;
    node.name = this.jsxParseIdentifier();
    return this.finishNode(node, "JSXNamespacedName");
  };

  // Parses element name in any form - namespaced, member
  // or single identifier.

  pp.jsxParseElementName = function () {
    var startPos = this.state.start,
        startLoc = this.state.startLoc;
    var node = this.jsxParseNamespacedName();
    while (this.eat(_types.types.dot)) {
      var newNode = this.startNodeAt(startPos, startLoc);
      newNode.object = node;
      newNode.property = this.jsxParseIdentifier();
      node = this.finishNode(newNode, "JSXMemberExpression");
    }
    return node;
  };

  // Parses any type of JSX attribute value.

  pp.jsxParseAttributeValue = function () {
    var node = void 0;
    switch (this.state.type) {
      case _types.types.braceL:
        node = this.jsxParseExpressionContainer();
        if (node.expression.type === "JSXEmptyExpression") {
          this.raise(node.start, "JSX attributes must only be assigned a non-empty expression");
        } else {
          return node;
        }

      case _types.types.jsxTagStart:
      case _types.types.string:
        node = this.parseExprAtom();
        node.extra = null;
        return node;

      default:
        this.raise(this.state.start, "JSX value should be either an expression or a quoted JSX text");
    }
  };

  // JSXEmptyExpression is unique type since it doesn't actually parse anything,
  // and so it should start at the end of last read token (left brace) and finish
  // at the beginning of the next one (right brace).

  pp.jsxParseEmptyExpression = function () {
    var node = this.startNodeAt(this.lastTokEnd, this.lastTokEndLoc);
    return this.finishNodeAt(node, "JSXEmptyExpression", this.start, this.startLoc);
  };

  // Parses JSX expression enclosed into curly brackets.

  pp.jsxParseExpressionContainer = function () {
    var node = this.startNode();
    this.next();
    if (this.match(_types.types.braceR)) {
      node.expression = this.jsxParseEmptyExpression();
    } else {
      node.expression = this.parseExpression();
    }
    this.expect(_types.types.braceR);
    return this.finishNode(node, "JSXExpressionContainer");
  };

  // Parses following JSX attribute name-value pair.

  pp.jsxParseAttribute = function () {
    var node = this.startNode();
    if (this.eat(_types.types.braceL)) {
      this.expect(_types.types.ellipsis);
      node.argument = this.parseMaybeAssign();
      this.expect(_types.types.braceR);
      return this.finishNode(node, "JSXSpreadAttribute");
    }
    node.name = this.jsxParseNamespacedName();
    node.value = this.eat(_types.types.eq) ? this.jsxParseAttributeValue() : null;
    return this.finishNode(node, "JSXAttribute");
  };

  // Parses JSX opening tag starting after "<".

  pp.jsxParseOpeningElementAt = function (startPos, startLoc) {
    var node = this.startNodeAt(startPos, startLoc);
    node.attributes = [];
    node.name = this.jsxParseElementName();
    while (!this.match(_types.types.slash) && !this.match(_types.types.jsxTagEnd)) {
      node.attributes.push(this.jsxParseAttribute());
    }
    node.selfClosing = this.eat(_types.types.slash);
    this.expect(_types.types.jsxTagEnd);
    return this.finishNode(node, "JSXOpeningElement");
  };

  // Parses JSX closing tag starting after "</".

  pp.jsxParseClosingElementAt = function (startPos, startLoc) {
    var node = this.startNodeAt(startPos, startLoc);
    node.name = this.jsxParseElementName();
    this.expect(_types.types.jsxTagEnd);
    return this.finishNode(node, "JSXClosingElement");
  };

  // Parses entire JSX element, including it"s opening tag
  // (starting after "<"), attributes, contents and closing tag.

  pp.jsxParseElementAt = function (startPos, startLoc) {
    var node = this.startNodeAt(startPos, startLoc);
    var children = [];
    var openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);
    var closingElement = null;

    if (!openingElement.selfClosing) {
      contents: for (;;) {
        switch (this.state.type) {
          case _types.types.jsxTagStart:
            startPos = this.state.start;startLoc = this.state.startLoc;
            this.next();
            if (this.eat(_types.types.slash)) {
              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);
              break contents;
            }
            children.push(this.jsxParseElementAt(startPos, startLoc));
            break;

          case _types.types.jsxText:
            children.push(this.parseExprAtom());
            break;

          case _types.types.braceL:
            children.push(this.jsxParseExpressionContainer());
            break;

          default:
            this.unexpected();
        }
      }

      if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {
        this.raise(closingElement.start, "Expected corresponding JSX closing tag for <" + getQualifiedJSXName(openingElement.name) + ">");
      }
    }

    node.openingElement = openingElement;
    node.closingElement = closingElement;
    node.children = children;
    if (this.match(_types.types.relational) && this.state.value === "<") {
      this.raise(this.state.start, "Adjacent JSX elements must be wrapped in an enclosing tag");
    }
    return this.finishNode(node, "JSXElement");
  };

  // Parses entire JSX element from current position.

  pp.jsxParseElement = function () {
    var startPos = this.state.start,
        startLoc = this.state.startLoc;
    this.next();
    return this.jsxParseElementAt(startPos, startLoc);
  };

/***/ },
/* 783 */
/***/ function(module, exports) {

  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    quot: "\"",
    amp: "&",
    apos: "'",
    lt: "<",
    gt: ">",
    nbsp: " ",
    iexcl: "¡",
    cent: "¢",
    pound: "£",
    curren: "¤",
    yen: "¥",
    brvbar: "¦",
    sect: "§",
    uml: "¨",
    copy: "©",
    ordf: "ª",
    laquo: "«",
    not: "¬",
    shy: "­",
    reg: "®",
    macr: "¯",
    deg: "°",
    plusmn: "±",
    sup2: "²",
    sup3: "³",
    acute: "´",
    micro: "µ",
    para: "¶",
    middot: "·",
    cedil: "¸",
    sup1: "¹",
    ordm: "º",
    raquo: "»",
    frac14: "¼",
    frac12: "½",
    frac34: "¾",
    iquest: "¿",
    Agrave: "À",
    Aacute: "Á",
    Acirc: "Â",
    Atilde: "Ã",
    Auml: "Ä",
    Aring: "Å",
    AElig: "Æ",
    Ccedil: "Ç",
    Egrave: "È",
    Eacute: "É",
    Ecirc: "Ê",
    Euml: "Ë",
    Igrave: "Ì",
    Iacute: "Í",
    Icirc: "Î",
    Iuml: "Ï",
    ETH: "Ð",
    Ntilde: "Ñ",
    Ograve: "Ò",
    Oacute: "Ó",
    Ocirc: "Ô",
    Otilde: "Õ",
    Ouml: "Ö",
    times: "×",
    Oslash: "Ø",
    Ugrave: "Ù",
    Uacute: "Ú",
    Ucirc: "Û",
    Uuml: "Ü",
    Yacute: "Ý",
    THORN: "Þ",
    szlig: "ß",
    agrave: "à",
    aacute: "á",
    acirc: "â",
    atilde: "ã",
    auml: "ä",
    aring: "å",
    aelig: "æ",
    ccedil: "ç",
    egrave: "è",
    eacute: "é",
    ecirc: "ê",
    euml: "ë",
    igrave: "ì",
    iacute: "í",
    icirc: "î",
    iuml: "ï",
    eth: "ð",
    ntilde: "ñ",
    ograve: "ò",
    oacute: "ó",
    ocirc: "ô",
    otilde: "õ",
    ouml: "ö",
    divide: "÷",
    oslash: "ø",
    ugrave: "ù",
    uacute: "ú",
    ucirc: "û",
    uuml: "ü",
    yacute: "ý",
    thorn: "þ",
    yuml: "ÿ",
    OElig: "Œ",
    oelig: "œ",
    Scaron: "Š",
    scaron: "š",
    Yuml: "Ÿ",
    fnof: "ƒ",
    circ: "ˆ",
    tilde: "˜",
    Alpha: "Α",
    Beta: "Β",
    Gamma: "Γ",
    Delta: "Δ",
    Epsilon: "Ε",
    Zeta: "Ζ",
    Eta: "Η",
    Theta: "Θ",
    Iota: "Ι",
    Kappa: "Κ",
    Lambda: "Λ",
    Mu: "Μ",
    Nu: "Ν",
    Xi: "Ξ",
    Omicron: "Ο",
    Pi: "Π",
    Rho: "Ρ",
    Sigma: "Σ",
    Tau: "Τ",
    Upsilon: "Υ",
    Phi: "Φ",
    Chi: "Χ",
    Psi: "Ψ",
    Omega: "Ω",
    alpha: "α",
    beta: "β",
    gamma: "γ",
    delta: "δ",
    epsilon: "ε",
    zeta: "ζ",
    eta: "η",
    theta: "θ",
    iota: "ι",
    kappa: "κ",
    lambda: "λ",
    mu: "μ",
    nu: "ν",
    xi: "ξ",
    omicron: "ο",
    pi: "π",
    rho: "ρ",
    sigmaf: "ς",
    sigma: "σ",
    tau: "τ",
    upsilon: "υ",
    phi: "φ",
    chi: "χ",
    psi: "ψ",
    omega: "ω",
    thetasym: "ϑ",
    upsih: "ϒ",
    piv: "ϖ",
    ensp: " ",
    emsp: " ",
    thinsp: " ",
    zwnj: "‌",
    zwj: "‍",
    lrm: "‎",
    rlm: "‏",
    ndash: "–",
    mdash: "—",
    lsquo: "‘",
    rsquo: "’",
    sbquo: "‚",
    ldquo: "“",
    rdquo: "”",
    bdquo: "„",
    dagger: "†",
    Dagger: "‡",
    bull: "•",
    hellip: "…",
    permil: "‰",
    prime: "′",
    Prime: "″",
    lsaquo: "‹",
    rsaquo: "›",
    oline: "‾",
    frasl: "⁄",
    euro: "€",
    image: "ℑ",
    weierp: "℘",
    real: "ℜ",
    trade: "™",
    alefsym: "ℵ",
    larr: "←",
    uarr: "↑",
    rarr: "→",
    darr: "↓",
    harr: "↔",
    crarr: "↵",
    lArr: "⇐",
    uArr: "⇑",
    rArr: "⇒",
    dArr: "⇓",
    hArr: "⇔",
    forall: "∀",
    part: "∂",
    exist: "∃",
    empty: "∅",
    nabla: "∇",
    isin: "∈",
    notin: "∉",
    ni: "∋",
    prod: "∏",
    sum: "∑",
    minus: "−",
    lowast: "∗",
    radic: "√",
    prop: "∝",
    infin: "∞",
    ang: "∠",
    and: "∧",
    or: "∨",
    cap: "∩",
    cup: "∪",
    "int": "∫",
    there4: "∴",
    sim: "∼",
    cong: "≅",
    asymp: "≈",
    ne: "≠",
    equiv: "≡",
    le: "≤",
    ge: "≥",
    sub: "⊂",
    sup: "⊃",
    nsub: "⊄",
    sube: "⊆",
    supe: "⊇",
    oplus: "⊕",
    otimes: "⊗",
    perp: "⊥",
    sdot: "⋅",
    lceil: "⌈",
    rceil: "⌉",
    lfloor: "⌊",
    rfloor: "⌋",
    lang: "〈",
    rang: "〉",
    loz: "◊",
    spades: "♠",
    clubs: "♣",
    hearts: "♥",
    diams: "♦"
  };

/***/ },
/* 784 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _classCallCheck2 = __webpack_require__(97);

  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

  var _createClass2 = __webpack_require__(225);

  var _createClass3 = _interopRequireDefault(_createClass2);

  var _location = __webpack_require__(228);

  var _context = __webpack_require__(227);

  var _types = __webpack_require__(137);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var State = function () {
    function State() {
      (0, _classCallCheck3.default)(this, State);
    }

    (0, _createClass3.default)(State, [{
      key: "init",
      value: function init(options, input) {
        this.strict = options.strictMode === false ? false : options.sourceType === "module";

        this.input = input;

        this.potentialArrowAt = -1;

        this.inMethod = this.inFunction = this.inGenerator = this.inAsync = false;

        this.labels = [];

        this.decorators = [];

        this.tokens = [];

        this.comments = [];

        this.trailingComments = [];
        this.leadingComments = [];
        this.commentStack = [];

        this.pos = this.lineStart = 0;
        this.curLine = 1;

        this.type = _types.types.eof;
        this.value = null;
        this.start = this.end = this.pos;
        this.startLoc = this.endLoc = this.curPosition();

        this.lastTokEndLoc = this.lastTokStartLoc = null;
        this.lastTokStart = this.lastTokEnd = this.pos;

        this.context = [_context.types.b_stat];
        this.exprAllowed = true;

        this.containsEsc = this.containsOctal = false;
        this.octalPosition = null;

        return this;
      }

      // TODO


      // TODO


      // Used to signify the start of a potential arrow function


      // Flags to track whether we are in a function, a generator.


      // Labels in scope.


      // Leading decorators.


      // Token store.


      // Comment store.


      // Comment attachment store


      // The current position of the tokenizer in the input.


      // Properties of the current token:
      // Its type


      // For tokens that include more information than their type, the value


      // Its start and end offset


      // And, if locations are used, the {line, column} object
      // corresponding to those offsets


      // Position information for the previous token


      // The context stack is used to superficially track syntactic
      // context to predict whether a regular expression is allowed in a
      // given position.


      // Used to signal to callers of `readWord1` whether the word
      // contained any escape sequences. This is needed because words with
      // escape sequences must not be interpreted as keywords.


      // TODO

    }, {
      key: "curPosition",
      value: function curPosition() {
        return new _location.Position(this.curLine, this.pos - this.lineStart);
      }
    }, {
      key: "clone",
      value: function clone(skipArrays) {
        var state = new State();
        for (var key in this) {
          var val = this[key];

          if ((!skipArrays || key === "context") && Array.isArray(val)) {
            val = val.slice();
          }

          state[key] = val;
        }
        return state;
      }
    }]);
    return State;
  }();

  exports.default = State;

/***/ },
/* 785 */
/***/ function(module, exports) {

  module.exports = balanced;
  function balanced(a, b, str) {
    if (a instanceof RegExp) a = maybeMatch(a, str);
    if (b instanceof RegExp) b = maybeMatch(b, str);

    var r = range(a, b, str);

    return r && {
      start: r[0],
      end: r[1],
      pre: str.slice(0, r[0]),
      body: str.slice(r[0] + a.length, r[1]),
      post: str.slice(r[1] + b.length)
    };
  }

  function maybeMatch(reg, str) {
    var m = str.match(reg);
    return m ? m[0] : null;
  }

  balanced.range = range;
  function range(a, b, str) {
    var begs, beg, left, right, result;
    var ai = str.indexOf(a);
    var bi = str.indexOf(b, ai + 1);
    var i = ai;

    if (ai >= 0 && bi > 0) {
      begs = [];
      left = str.length;

      while (i < str.length && i >= 0 && ! result) {
        if (i == ai) {
          begs.push(i);
          ai = str.indexOf(a, i + 1);
        } else if (begs.length == 1) {
          result = [ begs.pop(), bi ];
        } else {
          beg = begs.pop();
          if (beg < left) {
            left = beg;
            right = bi;
          }

          bi = str.indexOf(b, i + 1);
        }

        i = ai < bi && ai >= 0 ? ai : bi;
      }

      if (begs.length) {
        result = [ left, right ];
      }
    }

    return result;
  }


/***/ },
/* 786 */
/***/ function(module, exports) {

  'use strict'

  exports.toByteArray = toByteArray
  exports.fromByteArray = fromByteArray

  var lookup = []
  var revLookup = []
  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

  function init () {
    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i]
      revLookup[code.charCodeAt(i)] = i
    }

    revLookup['-'.charCodeAt(0)] = 62
    revLookup['_'.charCodeAt(0)] = 63
  }

  init()

  function toByteArray (b64) {
    var i, j, l, tmp, placeHolders, arr
    var len = b64.length

    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4')
    }

    // the number of equal signs (place holders)
    // if there are two placeholders, than the two characters before it
    // represent one byte
    // if there is only one, then the three characters before it represent 2 bytes
    // this is just a cheap hack to not do indexOf twice
    placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0

    // base64 is 4/3 + up to two characters of the original data
    arr = new Arr(len * 3 / 4 - placeHolders)

    // if there are placeholders, only get up to the last complete 4 chars
    l = placeHolders > 0 ? len - 4 : len

    var L = 0

    for (i = 0, j = 0; i < l; i += 4, j += 3) {
      tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
      arr[L++] = (tmp >> 16) & 0xFF
      arr[L++] = (tmp >> 8) & 0xFF
      arr[L++] = tmp & 0xFF
    }

    if (placeHolders === 2) {
      tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
      arr[L++] = tmp & 0xFF
    } else if (placeHolders === 1) {
      tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
      arr[L++] = (tmp >> 8) & 0xFF
      arr[L++] = tmp & 0xFF
    }

    return arr
  }

  function tripletToBase64 (num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
  }

  function encodeChunk (uint8, start, end) {
    var tmp
    var output = []
    for (var i = start; i < end; i += 3) {
      tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
      output.push(tripletToBase64(tmp))
    }
    return output.join('')
  }

  function fromByteArray (uint8) {
    var tmp
    var len = uint8.length
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    var output = ''
    var parts = []
    var maxChunkLength = 16383 // must be multiple of 3

    // go through the array every three bytes, we'll deal with trailing stuff later
    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
    }

    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
      tmp = uint8[len - 1]
      output += lookup[tmp >> 2]
      output += lookup[(tmp << 4) & 0x3F]
      output += '=='
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
      output += lookup[tmp >> 10]
      output += lookup[(tmp >> 4) & 0x3F]
      output += lookup[(tmp << 2) & 0x3F]
      output += '='
    }

    parts.push(output)

    return parts.join('')
  }


/***/ },
/* 787 */
/***/ function(module, exports, __webpack_require__) {

  var __WEBPACK_AMD_DEFINE_RESULT__;/* big.js v3.1.3 https://github.com/MikeMcl/big.js/LICENCE */
  ;(function (global) {
      'use strict';

  /*
    big.js v3.1.3
    A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.
    https://github.com/MikeMcl/big.js/
    Copyright (c) 2014 Michael Mclaughlin <M8ch88l@gmail.com>
    MIT Expat Licence
  */

  /***************************** EDITABLE DEFAULTS ******************************/

      // The default values below must be integers within the stated ranges.

      /*
       * The maximum number of decimal places of the results of operations
       * involving division: div and sqrt, and pow with negative exponents.
       */
      var DP = 20,                           // 0 to MAX_DP

          /*
           * The rounding mode used when rounding to the above decimal places.
           *
           * 0 Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)
           * 1 To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)
           * 2 To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)
           * 3 Away from zero.                                  (ROUND_UP)
           */
          RM = 1,                            // 0, 1, 2 or 3

          // The maximum value of DP and Big.DP.
          MAX_DP = 1E6,                      // 0 to 1000000

          // The maximum magnitude of the exponent argument to the pow method.
          MAX_POWER = 1E6,                   // 1 to 1000000

          /*
           * The exponent value at and beneath which toString returns exponential
           * notation.
           * JavaScript's Number type: -7
           * -1000000 is the minimum recommended exponent value of a Big.
           */
          E_NEG = -7,                   // 0 to -1000000

          /*
           * The exponent value at and above which toString returns exponential
           * notation.
           * JavaScript's Number type: 21
           * 1000000 is the maximum recommended exponent value of a Big.
           * (This limit is not enforced or checked.)
           */
          E_POS = 21,                   // 0 to 1000000

  /******************************************************************************/

          // The shared prototype object.
          P = {},
          isValid = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
          Big;


      /*
       * Create and return a Big constructor.
       *
       */
      function bigFactory() {

          /*
           * The Big constructor and exported function.
           * Create and return a new instance of a Big number object.
           *
           * n {number|string|Big} A numeric value.
           */
          function Big(n) {
              var x = this;

              // Enable constructor usage without new.
              if (!(x instanceof Big)) {
                  return n === void 0 ? bigFactory() : new Big(n);
              }

              // Duplicate.
              if (n instanceof Big) {
                  x.s = n.s;
                  x.e = n.e;
                  x.c = n.c.slice();
              } else {
                  parse(x, n);
              }

              /*
               * Retain a reference to this Big constructor, and shadow
               * Big.prototype.constructor which points to Object.
               */
              x.constructor = Big;
          }

          Big.prototype = P;
          Big.DP = DP;
          Big.RM = RM;
          Big.E_NEG = E_NEG;
          Big.E_POS = E_POS;

          return Big;
      }


      // Private functions


      /*
       * Return a string representing the value of Big x in normal or exponential
       * notation to dp fixed decimal places or significant digits.
       *
       * x {Big} The Big to format.
       * dp {number} Integer, 0 to MAX_DP inclusive.
       * toE {number} 1 (toExponential), 2 (toPrecision) or undefined (toFixed).
       */
      function format(x, dp, toE) {
          var Big = x.constructor,

              // The index (normal notation) of the digit that may be rounded up.
              i = dp - (x = new Big(x)).e,
              c = x.c;

          // Round?
          if (c.length > ++dp) {
              rnd(x, i, Big.RM);
          }

          if (!c[0]) {
              ++i;
          } else if (toE) {
              i = dp;

          // toFixed
          } else {
              c = x.c;

              // Recalculate i as x.e may have changed if value rounded up.
              i = x.e + i + 1;
          }

          // Append zeros?
          for (; c.length < i; c.push(0)) {
          }
          i = x.e;

          /*
           * toPrecision returns exponential notation if the number of
           * significant digits specified is less than the number of digits
           * necessary to represent the integer part of the value in normal
           * notation.
           */
          return toE === 1 || toE && (dp <= i || i <= Big.E_NEG) ?

            // Exponential notation.
            (x.s < 0 && c[0] ? '-' : '') +
              (c.length > 1 ? c[0] + '.' + c.join('').slice(1) : c[0]) +
                (i < 0 ? 'e' : 'e+') + i

            // Normal notation.
            : x.toString();
      }


      /*
       * Parse the number or string value passed to a Big constructor.
       *
       * x {Big} A Big number instance.
       * n {number|string} A numeric value.
       */
      function parse(x, n) {
          var e, i, nL;

          // Minus zero?
          if (n === 0 && 1 / n < 0) {
              n = '-0';

          // Ensure n is string and check validity.
          } else if (!isValid.test(n += '')) {
              throwErr(NaN);
          }

          // Determine sign.
          x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;

          // Decimal point?
          if ((e = n.indexOf('.')) > -1) {
              n = n.replace('.', '');
          }

          // Exponential form?
          if ((i = n.search(/e/i)) > 0) {

              // Determine exponent.
              if (e < 0) {
                  e = i;
              }
              e += +n.slice(i + 1);
              n = n.substring(0, i);

          } else if (e < 0) {

              // Integer.
              e = n.length;
          }

          // Determine leading zeros.
          for (i = 0; n.charAt(i) == '0'; i++) {
          }

          if (i == (nL = n.length)) {

              // Zero.
              x.c = [ x.e = 0 ];
          } else {

              // Determine trailing zeros.
              for (; n.charAt(--nL) == '0';) {
              }

              x.e = e - i - 1;
              x.c = [];

              // Convert string to array of digits without leading/trailing zeros.
              for (e = 0; i <= nL; x.c[e++] = +n.charAt(i++)) {
              }
          }

          return x;
      }


      /*
       * Round Big x to a maximum of dp decimal places using rounding mode rm.
       * Called by div, sqrt and round.
       *
       * x {Big} The Big to round.
       * dp {number} Integer, 0 to MAX_DP inclusive.
       * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)
       * [more] {boolean} Whether the result of division was truncated.
       */
      function rnd(x, dp, rm, more) {
          var u,
              xc = x.c,
              i = x.e + dp + 1;

          if (rm === 1) {

              // xc[i] is the digit after the digit that may be rounded up.
              more = xc[i] >= 5;
          } else if (rm === 2) {
              more = xc[i] > 5 || xc[i] == 5 &&
                (more || i < 0 || xc[i + 1] !== u || xc[i - 1] & 1);
          } else if (rm === 3) {
              more = more || xc[i] !== u || i < 0;
          } else {
              more = false;

              if (rm !== 0) {
                  throwErr('!Big.RM!');
              }
          }

          if (i < 1 || !xc[0]) {

              if (more) {

                  // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                  x.e = -dp;
                  x.c = [1];
              } else {

                  // Zero.
                  x.c = [x.e = 0];
              }
          } else {

              // Remove any digits after the required decimal places.
              xc.length = i--;

              // Round up?
              if (more) {

                  // Rounding up may mean the previous digit has to be rounded up.
                  for (; ++xc[i] > 9;) {
                      xc[i] = 0;

                      if (!i--) {
                          ++x.e;
                          xc.unshift(1);
                      }
                  }
              }

              // Remove trailing zeros.
              for (i = xc.length; !xc[--i]; xc.pop()) {
              }
          }

          return x;
      }


      /*
       * Throw a BigError.
       *
       * message {string} The error message.
       */
      function throwErr(message) {
          var err = new Error(message);
          err.name = 'BigError';

          throw err;
      }


      // Prototype/instance methods


      /*
       * Return a new Big whose value is the absolute value of this Big.
       */
      P.abs = function () {
          var x = new this.constructor(this);
          x.s = 1;

          return x;
      };


      /*
       * Return
       * 1 if the value of this Big is greater than the value of Big y,
       * -1 if the value of this Big is less than the value of Big y, or
       * 0 if they have the same value.
      */
      P.cmp = function (y) {
          var xNeg,
              x = this,
              xc = x.c,
              yc = (y = new x.constructor(y)).c,
              i = x.s,
              j = y.s,
              k = x.e,
              l = y.e;

          // Either zero?
          if (!xc[0] || !yc[0]) {
              return !xc[0] ? !yc[0] ? 0 : -j : i;
          }

          // Signs differ?
          if (i != j) {
              return i;
          }
          xNeg = i < 0;

          // Compare exponents.
          if (k != l) {
              return k > l ^ xNeg ? 1 : -1;
          }

          i = -1;
          j = (k = xc.length) < (l = yc.length) ? k : l;

          // Compare digit by digit.
          for (; ++i < j;) {

              if (xc[i] != yc[i]) {
                  return xc[i] > yc[i] ^ xNeg ? 1 : -1;
              }
          }

          // Compare lengths.
          return k == l ? 0 : k > l ^ xNeg ? 1 : -1;
      };


      /*
       * Return a new Big whose value is the value of this Big divided by the
       * value of Big y, rounded, if necessary, to a maximum of Big.DP decimal
       * places using rounding mode Big.RM.
       */
      P.div = function (y) {
          var x = this,
              Big = x.constructor,
              // dividend
              dvd = x.c,
              //divisor
              dvs = (y = new Big(y)).c,
              s = x.s == y.s ? 1 : -1,
              dp = Big.DP;

          if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
              throwErr('!Big.DP!');
          }

          // Either 0?
          if (!dvd[0] || !dvs[0]) {

              // If both are 0, throw NaN
              if (dvd[0] == dvs[0]) {
                  throwErr(NaN);
              }

              // If dvs is 0, throw +-Infinity.
              if (!dvs[0]) {
                  throwErr(s / 0);
              }

              // dvd is 0, return +-0.
              return new Big(s * 0);
          }

          var dvsL, dvsT, next, cmp, remI, u,
              dvsZ = dvs.slice(),
              dvdI = dvsL = dvs.length,
              dvdL = dvd.length,
              // remainder
              rem = dvd.slice(0, dvsL),
              remL = rem.length,
              // quotient
              q = y,
              qc = q.c = [],
              qi = 0,
              digits = dp + (q.e = x.e - y.e) + 1;

          q.s = s;
          s = digits < 0 ? 0 : digits;

          // Create version of divisor with leading zero.
          dvsZ.unshift(0);

          // Add zeros to make remainder as long as divisor.
          for (; remL++ < dvsL; rem.push(0)) {
          }

          do {

              // 'next' is how many times the divisor goes into current remainder.
              for (next = 0; next < 10; next++) {

                  // Compare divisor and remainder.
                  if (dvsL != (remL = rem.length)) {
                      cmp = dvsL > remL ? 1 : -1;
                  } else {

                      for (remI = -1, cmp = 0; ++remI < dvsL;) {

                          if (dvs[remI] != rem[remI]) {
                              cmp = dvs[remI] > rem[remI] ? 1 : -1;
                              break;
                          }
                      }
                  }

                  // If divisor < remainder, subtract divisor from remainder.
                  if (cmp < 0) {

                      // Remainder can't be more than 1 digit longer than divisor.
                      // Equalise lengths using divisor with extra leading zero?
                      for (dvsT = remL == dvsL ? dvs : dvsZ; remL;) {

                          if (rem[--remL] < dvsT[remL]) {
                              remI = remL;

                              for (; remI && !rem[--remI]; rem[remI] = 9) {
                              }
                              --rem[remI];
                              rem[remL] += 10;
                          }
                          rem[remL] -= dvsT[remL];
                      }
                      for (; !rem[0]; rem.shift()) {
                      }
                  } else {
                      break;
                  }
              }

              // Add the 'next' digit to the result array.
              qc[qi++] = cmp ? next : ++next;

              // Update the remainder.
              if (rem[0] && cmp) {
                  rem[remL] = dvd[dvdI] || 0;
              } else {
                  rem = [ dvd[dvdI] ];
              }

          } while ((dvdI++ < dvdL || rem[0] !== u) && s--);

          // Leading zero? Do not remove if result is simply zero (qi == 1).
          if (!qc[0] && qi != 1) {

              // There can't be more than one zero.
              qc.shift();
              q.e--;
          }

          // Round?
          if (qi > digits) {
              rnd(q, dp, Big.RM, rem[0] !== u);
          }

          return q;
      };


      /*
       * Return true if the value of this Big is equal to the value of Big y,
       * otherwise returns false.
       */
      P.eq = function (y) {
          return !this.cmp(y);
      };


      /*
       * Return true if the value of this Big is greater than the value of Big y,
       * otherwise returns false.
       */
      P.gt = function (y) {
          return this.cmp(y) > 0;
      };


      /*
       * Return true if the value of this Big is greater than or equal to the
       * value of Big y, otherwise returns false.
       */
      P.gte = function (y) {
          return this.cmp(y) > -1;
      };


      /*
       * Return true if the value of this Big is less than the value of Big y,
       * otherwise returns false.
       */
      P.lt = function (y) {
          return this.cmp(y) < 0;
      };


      /*
       * Return true if the value of this Big is less than or equal to the value
       * of Big y, otherwise returns false.
       */
      P.lte = function (y) {
           return this.cmp(y) < 1;
      };


      /*
       * Return a new Big whose value is the value of this Big minus the value
       * of Big y.
       */
      P.sub = P.minus = function (y) {
          var i, j, t, xLTy,
              x = this,
              Big = x.constructor,
              a = x.s,
              b = (y = new Big(y)).s;

          // Signs differ?
          if (a != b) {
              y.s = -b;
              return x.plus(y);
          }

          var xc = x.c.slice(),
              xe = x.e,
              yc = y.c,
              ye = y.e;

          // Either zero?
          if (!xc[0] || !yc[0]) {

              // y is non-zero? x is non-zero? Or both are zero.
              return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);
          }

          // Determine which is the bigger number.
          // Prepend zeros to equalise exponents.
          if (a = xe - ye) {

              if (xLTy = a < 0) {
                  a = -a;
                  t = xc;
              } else {
                  ye = xe;
                  t = yc;
              }

              t.reverse();
              for (b = a; b--; t.push(0)) {
              }
              t.reverse();
          } else {

              // Exponents equal. Check digit by digit.
              j = ((xLTy = xc.length < yc.length) ? xc : yc).length;

              for (a = b = 0; b < j; b++) {

                  if (xc[b] != yc[b]) {
                      xLTy = xc[b] < yc[b];
                      break;
                  }
              }
          }

          // x < y? Point xc to the array of the bigger number.
          if (xLTy) {
              t = xc;
              xc = yc;
              yc = t;
              y.s = -y.s;
          }

          /*
           * Append zeros to xc if shorter. No need to add zeros to yc if shorter
           * as subtraction only needs to start at yc.length.
           */
          if (( b = (j = yc.length) - (i = xc.length) ) > 0) {

              for (; b--; xc[i++] = 0) {
              }
          }

          // Subtract yc from xc.
          for (b = i; j > a;){

              if (xc[--j] < yc[j]) {

                  for (i = j; i && !xc[--i]; xc[i] = 9) {
                  }
                  --xc[i];
                  xc[j] += 10;
              }
              xc[j] -= yc[j];
          }

          // Remove trailing zeros.
          for (; xc[--b] === 0; xc.pop()) {
          }

          // Remove leading zeros and adjust exponent accordingly.
          for (; xc[0] === 0;) {
              xc.shift();
              --ye;
          }

          if (!xc[0]) {

              // n - n = +0
              y.s = 1;

              // Result must be zero.
              xc = [ye = 0];
          }

          y.c = xc;
          y.e = ye;

          return y;
      };


      /*
       * Return a new Big whose value is the value of this Big modulo the
       * value of Big y.
       */
      P.mod = function (y) {
          var yGTx,
              x = this,
              Big = x.constructor,
              a = x.s,
              b = (y = new Big(y)).s;

          if (!y.c[0]) {
              throwErr(NaN);
          }

          x.s = y.s = 1;
          yGTx = y.cmp(x) == 1;
          x.s = a;
          y.s = b;

          if (yGTx) {
              return new Big(x);
          }

          a = Big.DP;
          b = Big.RM;
          Big.DP = Big.RM = 0;
          x = x.div(y);
          Big.DP = a;
          Big.RM = b;

          return this.minus( x.times(y) );
      };


      /*
       * Return a new Big whose value is the value of this Big plus the value
       * of Big y.
       */
      P.add = P.plus = function (y) {
          var t,
              x = this,
              Big = x.constructor,
              a = x.s,
              b = (y = new Big(y)).s;

          // Signs differ?
          if (a != b) {
              y.s = -b;
              return x.minus(y);
          }

          var xe = x.e,
              xc = x.c,
              ye = y.e,
              yc = y.c;

          // Either zero?
          if (!xc[0] || !yc[0]) {

              // y is non-zero? x is non-zero? Or both are zero.
              return yc[0] ? y : new Big(xc[0] ? x : a * 0);
          }
          xc = xc.slice();

          // Prepend zeros to equalise exponents.
          // Note: Faster to use reverse then do unshifts.
          if (a = xe - ye) {

              if (a > 0) {
                  ye = xe;
                  t = yc;
              } else {
                  a = -a;
                  t = xc;
              }

              t.reverse();
              for (; a--; t.push(0)) {
              }
              t.reverse();
          }

          // Point xc to the longer array.
          if (xc.length - yc.length < 0) {
              t = yc;
              yc = xc;
              xc = t;
          }
          a = yc.length;

          /*
           * Only start adding at yc.length - 1 as the further digits of xc can be
           * left as they are.
           */
          for (b = 0; a;) {
              b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;
              xc[a] %= 10;
          }

          // No need to check for zero, as +x + +y != 0 && -x + -y != 0

          if (b) {
              xc.unshift(b);
              ++ye;
          }

           // Remove trailing zeros.
          for (a = xc.length; xc[--a] === 0; xc.pop()) {
          }

          y.c = xc;
          y.e = ye;

          return y;
      };


      /*
       * Return a Big whose value is the value of this Big raised to the power n.
       * If n is negative, round, if necessary, to a maximum of Big.DP decimal
       * places using rounding mode Big.RM.
       *
       * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.
       */
      P.pow = function (n) {
          var x = this,
              one = new x.constructor(1),
              y = one,
              isNeg = n < 0;

          if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {
              throwErr('!pow!');
          }

          n = isNeg ? -n : n;

          for (;;) {

              if (n & 1) {
                  y = y.times(x);
              }
              n >>= 1;

              if (!n) {
                  break;
              }
              x = x.times(x);
          }

          return isNeg ? one.div(y) : y;
      };


      /*
       * Return a new Big whose value is the value of this Big rounded to a
       * maximum of dp decimal places using rounding mode rm.
       * If dp is not specified, round to 0 decimal places.
       * If rm is not specified, use Big.RM.
       *
       * [dp] {number} Integer, 0 to MAX_DP inclusive.
       * [rm] 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)
       */
      P.round = function (dp, rm) {
          var x = this,
              Big = x.constructor;

          if (dp == null) {
              dp = 0;
          } else if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
              throwErr('!round!');
          }
          rnd(x = new Big(x), dp, rm == null ? Big.RM : rm);

          return x;
      };


      /*
       * Return a new Big whose value is the square root of the value of this Big,
       * rounded, if necessary, to a maximum of Big.DP decimal places using
       * rounding mode Big.RM.
       */
      P.sqrt = function () {
          var estimate, r, approx,
              x = this,
              Big = x.constructor,
              xc = x.c,
              i = x.s,
              e = x.e,
              half = new Big('0.5');

          // Zero?
          if (!xc[0]) {
              return new Big(x);
          }

          // If negative, throw NaN.
          if (i < 0) {
              throwErr(NaN);
          }

          // Estimate.
          i = Math.sqrt(x.toString());

          // Math.sqrt underflow/overflow?
          // Pass x to Math.sqrt as integer, then adjust the result exponent.
          if (i === 0 || i === 1 / 0) {
              estimate = xc.join('');

              if (!(estimate.length + e & 1)) {
                  estimate += '0';
              }

              r = new Big( Math.sqrt(estimate).toString() );
              r.e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);
          } else {
              r = new Big(i.toString());
          }

          i = r.e + (Big.DP += 4);

          // Newton-Raphson iteration.
          do {
              approx = r;
              r = half.times( approx.plus( x.div(approx) ) );
          } while ( approx.c.slice(0, i).join('') !==
                         r.c.slice(0, i).join('') );

          rnd(r, Big.DP -= 4, Big.RM);

          return r;
      };


      /*
       * Return a new Big whose value is the value of this Big times the value of
       * Big y.
       */
      P.mul = P.times = function (y) {
          var c,
              x = this,
              Big = x.constructor,
              xc = x.c,
              yc = (y = new Big(y)).c,
              a = xc.length,
              b = yc.length,
              i = x.e,
              j = y.e;

          // Determine sign of result.
          y.s = x.s == y.s ? 1 : -1;

          // Return signed 0 if either 0.
          if (!xc[0] || !yc[0]) {
              return new Big(y.s * 0);
          }

          // Initialise exponent of result as x.e + y.e.
          y.e = i + j;

          // If array xc has fewer digits than yc, swap xc and yc, and lengths.
          if (a < b) {
              c = xc;
              xc = yc;
              yc = c;
              j = a;
              a = b;
              b = j;
          }

          // Initialise coefficient array of result with zeros.
          for (c = new Array(j = a + b); j--; c[j] = 0) {
          }

          // Multiply.

          // i is initially xc.length.
          for (i = b; i--;) {
              b = 0;

              // a is yc.length.
              for (j = a + i; j > i;) {

                  // Current sum of products at this digit position, plus carry.
                  b = c[j] + yc[i] * xc[j - i - 1] + b;
                  c[j--] = b % 10;

                  // carry
                  b = b / 10 | 0;
              }
              c[j] = (c[j] + b) % 10;
          }

          // Increment result exponent if there is a final carry.
          if (b) {
              ++y.e;
          }

          // Remove any leading zero.
          if (!c[0]) {
              c.shift();
          }

          // Remove trailing zeros.
          for (i = c.length; !c[--i]; c.pop()) {
          }
          y.c = c;

          return y;
      };


      /*
       * Return a string representing the value of this Big.
       * Return exponential notation if this Big has a positive exponent equal to
       * or greater than Big.E_POS, or a negative exponent equal to or less than
       * Big.E_NEG.
       */
      P.toString = P.valueOf = P.toJSON = function () {
          var x = this,
              Big = x.constructor,
              e = x.e,
              str = x.c.join(''),
              strL = str.length;

          // Exponential notation?
          if (e <= Big.E_NEG || e >= Big.E_POS) {
              str = str.charAt(0) + (strL > 1 ? '.' + str.slice(1) : '') +
                (e < 0 ? 'e' : 'e+') + e;

          // Negative exponent?
          } else if (e < 0) {

              // Prepend zeros.
              for (; ++e; str = '0' + str) {
              }
              str = '0.' + str;

          // Positive exponent?
          } else if (e > 0) {

              if (++e > strL) {

                  // Append zeros.
                  for (e -= strL; e-- ; str += '0') {
                  }
              } else if (e < strL) {
                  str = str.slice(0, e) + '.' + str.slice(e);
              }

          // Exponent zero.
          } else if (strL > 1) {
              str = str.charAt(0) + '.' + str.slice(1);
          }

          // Avoid '-0'
          return x.s < 0 && x.c[0] ? '-' + str : str;
      };


      /*
       ***************************************************************************
       * If toExponential, toFixed, toPrecision and format are not required they
       * can safely be commented-out or deleted. No redundant code will be left.
       * format is used only by toExponential, toFixed and toPrecision.
       ***************************************************************************
       */


      /*
       * Return a string representing the value of this Big in exponential
       * notation to dp fixed decimal places and rounded, if necessary, using
       * Big.RM.
       *
       * [dp] {number} Integer, 0 to MAX_DP inclusive.
       */
      P.toExponential = function (dp) {

          if (dp == null) {
              dp = this.c.length - 1;
          } else if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
              throwErr('!toExp!');
          }

          return format(this, dp, 1);
      };


      /*
       * Return a string representing the value of this Big in normal notation
       * to dp fixed decimal places and rounded, if necessary, using Big.RM.
       *
       * [dp] {number} Integer, 0 to MAX_DP inclusive.
       */
      P.toFixed = function (dp) {
          var str,
              x = this,
              Big = x.constructor,
              neg = Big.E_NEG,
              pos = Big.E_POS;

          // Prevent the possibility of exponential notation.
          Big.E_NEG = -(Big.E_POS = 1 / 0);

          if (dp == null) {
              str = x.toString();
          } else if (dp === ~~dp && dp >= 0 && dp <= MAX_DP) {
              str = format(x, x.e + dp);

              // (-0).toFixed() is '0', but (-0.1).toFixed() is '-0'.
              // (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
              if (x.s < 0 && x.c[0] && str.indexOf('-') < 0) {
          //E.g. -0.5 if rounded to -0 will cause toString to omit the minus sign.
                  str = '-' + str;
              }
          }
          Big.E_NEG = neg;
          Big.E_POS = pos;

          if (!str) {
              throwErr('!toFix!');
          }

          return str;
      };


      /*
       * Return a string representing the value of this Big rounded to sd
       * significant digits using Big.RM. Use exponential notation if sd is less
       * than the number of digits necessary to represent the integer part of the
       * value in normal notation.
       *
       * sd {number} Integer, 1 to MAX_DP inclusive.
       */
      P.toPrecision = function (sd) {

          if (sd == null) {
              return this.toString();
          } else if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
              throwErr('!toPre!');
          }

          return format(this, sd - 1, 2);
      };


      // Export


      Big = bigFactory();

      //AMD.
      if (true) {
          !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
              return Big;
          }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

      // Node and other CommonJS-like environments that support module.exports.
      } else if (typeof module !== 'undefined' && module.exports) {
          module.exports = Big;

      //Browser.
      } else {
          global.Big = Big;
      }
  })(this);


/***/ },
/* 788 */
/***/ function(module, exports, __webpack_require__) {

  var concatMap = __webpack_require__(794);
  var balanced = __webpack_require__(785);

  module.exports = expandTop;

  var escSlash = '\0SLASH'+Math.random()+'\0';
  var escOpen = '\0OPEN'+Math.random()+'\0';
  var escClose = '\0CLOSE'+Math.random()+'\0';
  var escComma = '\0COMMA'+Math.random()+'\0';
  var escPeriod = '\0PERIOD'+Math.random()+'\0';

  function numeric(str) {
    return parseInt(str, 10) == str
      ? parseInt(str, 10)
      : str.charCodeAt(0);
  }

  function escapeBraces(str) {
    return str.split('\\\\').join(escSlash)
              .split('\\{').join(escOpen)
              .split('\\}').join(escClose)
              .split('\\,').join(escComma)
              .split('\\.').join(escPeriod);
  }

  function unescapeBraces(str) {
    return str.split(escSlash).join('\\')
              .split(escOpen).join('{')
              .split(escClose).join('}')
              .split(escComma).join(',')
              .split(escPeriod).join('.');
  }


  // Basically just str.split(","), but handling cases
  // where we have nested braced sections, which should be
  // treated as individual members, like {a,{b,c},d}
  function parseCommaParts(str) {
    if (!str)
      return [''];

    var parts = [];
    var m = balanced('{', '}', str);

    if (!m)
      return str.split(',');

    var pre = m.pre;
    var body = m.body;
    var post = m.post;
    var p = pre.split(',');

    p[p.length-1] += '{' + body + '}';
    var postParts = parseCommaParts(post);
    if (post.length) {
      p[p.length-1] += postParts.shift();
      p.push.apply(p, postParts);
    }

    parts.push.apply(parts, p);

    return parts;
  }

  function expandTop(str) {
    if (!str)
      return [];

    return expand(escapeBraces(str), true).map(unescapeBraces);
  }

  function identity(e) {
    return e;
  }

  function embrace(str) {
    return '{' + str + '}';
  }
  function isPadded(el) {
    return /^-?0\d/.test(el);
  }

  function lte(i, y) {
    return i <= y;
  }
  function gte(i, y) {
    return i >= y;
  }

  function expand(str, isTop) {
    var expansions = [];

    var m = balanced('{', '}', str);
    if (!m || /\$$/.test(m.pre)) return [str];

    var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
    var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
    var isSequence = isNumericSequence || isAlphaSequence;
    var isOptions = /^(.*,)+(.+)?$/.test(m.body);
    if (!isSequence && !isOptions) {
      // {a},b}
      if (m.post.match(/,.*\}/)) {
        str = m.pre + '{' + m.body + escClose + m.post;
        return expand(str);
      }
      return [str];
    }

    var n;
    if (isSequence) {
      n = m.body.split(/\.\./);
    } else {
      n = parseCommaParts(m.body);
      if (n.length === 1) {
        // x{{a,b}}y ==> x{a}y x{b}y
        n = expand(n[0], false).map(embrace);
        if (n.length === 1) {
          var post = m.post.length
            ? expand(m.post, false)
            : [''];
          return post.map(function(p) {
            return m.pre + n[0] + p;
          });
        }
      }
    }

    // at this point, n is the parts, and we know it's not a comma set
    // with a single entry.

    // no need to expand pre, since it is guaranteed to be free of brace-sets
    var pre = m.pre;
    var post = m.post.length
      ? expand(m.post, false)
      : [''];

    var N;

    if (isSequence) {
      var x = numeric(n[0]);
      var y = numeric(n[1]);
      var width = Math.max(n[0].length, n[1].length)
      var incr = n.length == 3
        ? Math.abs(numeric(n[2]))
        : 1;
      var test = lte;
      var reverse = y < x;
      if (reverse) {
        incr *= -1;
        test = gte;
      }
      var pad = n.some(isPadded);

      N = [];

      for (var i = x; test(i, y); i += incr) {
        var c;
        if (isAlphaSequence) {
          c = String.fromCharCode(i);
          if (c === '\\')
            c = '';
        } else {
          c = String(i);
          if (pad) {
            var need = width - c.length;
            if (need > 0) {
              var z = new Array(need + 1).join('0');
              if (i < 0)
                c = '-' + z + c.slice(1);
              else
                c = z + c;
            }
          }
        }
        N.push(c);
      }
    } else {
      N = concatMap(n, function(el) { return expand(el, false) });
    }

    for (var j = 0; j < N.length; j++) {
      for (var k = 0; k < post.length; k++) {
        var expansion = pre + N[j] + post[k];
        if (!isTop || isSequence || expansion)
          expansions.push(expansion);
      }
    }

    return expansions;
  }



/***/ },
/* 789 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(process, Buffer) {var msg = __webpack_require__(485);
  var zstream = __webpack_require__(1209);
  var zlib_deflate = __webpack_require__(1204);
  var zlib_inflate = __webpack_require__(1206);
  var constants = __webpack_require__(1203);

  for (var key in constants) {
    exports[key] = constants[key];
  }

  // zlib modes
  exports.NONE = 0;
  exports.DEFLATE = 1;
  exports.INFLATE = 2;
  exports.GZIP = 3;
  exports.GUNZIP = 4;
  exports.DEFLATERAW = 5;
  exports.INFLATERAW = 6;
  exports.UNZIP = 7;

  /**
   * Emulate Node's zlib C++ layer for use by the JS layer in index.js
   */
  function Zlib(mode) {
    if (mode < exports.DEFLATE || mode > exports.UNZIP)
      throw new TypeError("Bad argument");
      
    this.mode = mode;
    this.init_done = false;
    this.write_in_progress = false;
    this.pending_close = false;
    this.windowBits = 0;
    this.level = 0;
    this.memLevel = 0;
    this.strategy = 0;
    this.dictionary = null;
  }

  Zlib.prototype.init = function(windowBits, level, memLevel, strategy, dictionary) {
    this.windowBits = windowBits;
    this.level = level;
    this.memLevel = memLevel;
    this.strategy = strategy;
    // dictionary not supported.
    
    if (this.mode === exports.GZIP || this.mode === exports.GUNZIP)
      this.windowBits += 16;
      
    if (this.mode === exports.UNZIP)
      this.windowBits += 32;
      
    if (this.mode === exports.DEFLATERAW || this.mode === exports.INFLATERAW)
      this.windowBits = -this.windowBits;
      
    this.strm = new zstream();
    
    switch (this.mode) {
      case exports.DEFLATE:
      case exports.GZIP:
      case exports.DEFLATERAW:
        var status = zlib_deflate.deflateInit2(
          this.strm,
          this.level,
          exports.Z_DEFLATED,
          this.windowBits,
          this.memLevel,
          this.strategy
        );
        break;
      case exports.INFLATE:
      case exports.GUNZIP:
      case exports.INFLATERAW:
      case exports.UNZIP:
        var status  = zlib_inflate.inflateInit2(
          this.strm,
          this.windowBits
        );
        break;
      default:
        throw new Error("Unknown mode " + this.mode);
    }
    
    if (status !== exports.Z_OK) {
      this._error(status);
      return;
    }
    
    this.write_in_progress = false;
    this.init_done = true;
  };

  Zlib.prototype.params = function() {
    throw new Error("deflateParams Not supported");
  };

  Zlib.prototype._writeCheck = function() {
    if (!this.init_done)
      throw new Error("write before init");
      
    if (this.mode === exports.NONE)
      throw new Error("already finalized");
      
    if (this.write_in_progress)
      throw new Error("write already in progress");
      
    if (this.pending_close)
      throw new Error("close is pending");
  };

  Zlib.prototype.write = function(flush, input, in_off, in_len, out, out_off, out_len) {    
    this._writeCheck();
    this.write_in_progress = true;
    
    var self = this;
    process.nextTick(function() {
      self.write_in_progress = false;
      var res = self._write(flush, input, in_off, in_len, out, out_off, out_len);
      self.callback(res[0], res[1]);
      
      if (self.pending_close)
        self.close();
    });
    
    return this;
  };

  // set method for Node buffers, used by pako
  function bufferSet(data, offset) {
    for (var i = 0; i < data.length; i++) {
      this[offset + i] = data[i];
    }
  }

  Zlib.prototype.writeSync = function(flush, input, in_off, in_len, out, out_off, out_len) {
    this._writeCheck();
    return this._write(flush, input, in_off, in_len, out, out_off, out_len);
  };

  Zlib.prototype._write = function(flush, input, in_off, in_len, out, out_off, out_len) {
    this.write_in_progress = true;
    
    if (flush !== exports.Z_NO_FLUSH &&
        flush !== exports.Z_PARTIAL_FLUSH &&
        flush !== exports.Z_SYNC_FLUSH &&
        flush !== exports.Z_FULL_FLUSH &&
        flush !== exports.Z_FINISH &&
        flush !== exports.Z_BLOCK) {
      throw new Error("Invalid flush value");
    }
    
    if (input == null) {
      input = new Buffer(0);
      in_len = 0;
      in_off = 0;
    }
    
    if (out._set)
      out.set = out._set;
    else
      out.set = bufferSet;
    
    var strm = this.strm;
    strm.avail_in = in_len;
    strm.input = input;
    strm.next_in = in_off;
    strm.avail_out = out_len;
    strm.output = out;
    strm.next_out = out_off;
    
    switch (this.mode) {
      case exports.DEFLATE:
      case exports.GZIP:
      case exports.DEFLATERAW:
        var status = zlib_deflate.deflate(strm, flush);
        break;
      case exports.UNZIP:
      case exports.INFLATE:
      case exports.GUNZIP:
      case exports.INFLATERAW:
        var status = zlib_inflate.inflate(strm, flush);
        break;
      default:
        throw new Error("Unknown mode " + this.mode);
    }
    
    if (status !== exports.Z_STREAM_END && status !== exports.Z_OK) {
      this._error(status);
    }
    
    this.write_in_progress = false;
    return [strm.avail_in, strm.avail_out];
  };

  Zlib.prototype.close = function() {
    if (this.write_in_progress) {
      this.pending_close = true;
      return;
    }
    
    this.pending_close = false;
    
    if (this.mode === exports.DEFLATE || this.mode === exports.GZIP || this.mode === exports.DEFLATERAW) {
      zlib_deflate.deflateEnd(this.strm);
    } else {
      zlib_inflate.inflateEnd(this.strm);
    }
    
    this.mode = exports.NONE;
  };

  Zlib.prototype.reset = function() {
    switch (this.mode) {
      case exports.DEFLATE:
      case exports.DEFLATERAW:
        var status = zlib_deflate.deflateReset(this.strm);
        break;
      case exports.INFLATE:
      case exports.INFLATERAW:
        var status = zlib_inflate.inflateReset(this.strm);
        break;
    }
    
    if (status !== exports.Z_OK) {
      this._error(status);
    }
  };

  Zlib.prototype._error = function(status) {
    this.onerror(msg[status] + ': ' + this.strm.msg, status);
    
    this.write_in_progress = false;
    if (this.pending_close)
      this.close();
  };

  exports.Zlib = Zlib;

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(111), __webpack_require__(115).Buffer))

/***/ },
/* 790 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer, process) {// Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  var Transform = __webpack_require__(526);

  var binding = __webpack_require__(789);
  var util = __webpack_require__(168);
  var assert = __webpack_require__(528).ok;

  // zlib doesn't provide these, so kludge them in following the same
  // const naming scheme zlib uses.
  binding.Z_MIN_WINDOWBITS = 8;
  binding.Z_MAX_WINDOWBITS = 15;
  binding.Z_DEFAULT_WINDOWBITS = 15;

  // fewer than 64 bytes per chunk is stupid.
  // technically it could work with as few as 8, but even 64 bytes
  // is absurdly low.  Usually a MB or more is best.
  binding.Z_MIN_CHUNK = 64;
  binding.Z_MAX_CHUNK = Infinity;
  binding.Z_DEFAULT_CHUNK = (16 * 1024);

  binding.Z_MIN_MEMLEVEL = 1;
  binding.Z_MAX_MEMLEVEL = 9;
  binding.Z_DEFAULT_MEMLEVEL = 8;

  binding.Z_MIN_LEVEL = -1;
  binding.Z_MAX_LEVEL = 9;
  binding.Z_DEFAULT_LEVEL = binding.Z_DEFAULT_COMPRESSION;

  // expose all the zlib constants
  Object.keys(binding).forEach(function(k) {
    if (k.match(/^Z/)) exports[k] = binding[k];
  });

  // translation table for return codes.
  exports.codes = {
    Z_OK: binding.Z_OK,
    Z_STREAM_END: binding.Z_STREAM_END,
    Z_NEED_DICT: binding.Z_NEED_DICT,
    Z_ERRNO: binding.Z_ERRNO,
    Z_STREAM_ERROR: binding.Z_STREAM_ERROR,
    Z_DATA_ERROR: binding.Z_DATA_ERROR,
    Z_MEM_ERROR: binding.Z_MEM_ERROR,
    Z_BUF_ERROR: binding.Z_BUF_ERROR,
    Z_VERSION_ERROR: binding.Z_VERSION_ERROR
  };

  Object.keys(exports.codes).forEach(function(k) {
    exports.codes[exports.codes[k]] = k;
  });

  exports.Deflate = Deflate;
  exports.Inflate = Inflate;
  exports.Gzip = Gzip;
  exports.Gunzip = Gunzip;
  exports.DeflateRaw = DeflateRaw;
  exports.InflateRaw = InflateRaw;
  exports.Unzip = Unzip;

  exports.createDeflate = function(o) {
    return new Deflate(o);
  };

  exports.createInflate = function(o) {
    return new Inflate(o);
  };

  exports.createDeflateRaw = function(o) {
    return new DeflateRaw(o);
  };

  exports.createInflateRaw = function(o) {
    return new InflateRaw(o);
  };

  exports.createGzip = function(o) {
    return new Gzip(o);
  };

  exports.createGunzip = function(o) {
    return new Gunzip(o);
  };

  exports.createUnzip = function(o) {
    return new Unzip(o);
  };


  // Convenience methods.
  // compress/decompress a string or buffer in one step.
  exports.deflate = function(buffer, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new Deflate(opts), buffer, callback);
  };

  exports.deflateSync = function(buffer, opts) {
    return zlibBufferSync(new Deflate(opts), buffer);
  };

  exports.gzip = function(buffer, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new Gzip(opts), buffer, callback);
  };

  exports.gzipSync = function(buffer, opts) {
    return zlibBufferSync(new Gzip(opts), buffer);
  };

  exports.deflateRaw = function(buffer, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new DeflateRaw(opts), buffer, callback);
  };

  exports.deflateRawSync = function(buffer, opts) {
    return zlibBufferSync(new DeflateRaw(opts), buffer);
  };

  exports.unzip = function(buffer, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new Unzip(opts), buffer, callback);
  };

  exports.unzipSync = function(buffer, opts) {
    return zlibBufferSync(new Unzip(opts), buffer);
  };

  exports.inflate = function(buffer, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new Inflate(opts), buffer, callback);
  };

  exports.inflateSync = function(buffer, opts) {
    return zlibBufferSync(new Inflate(opts), buffer);
  };

  exports.gunzip = function(buffer, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new Gunzip(opts), buffer, callback);
  };

  exports.gunzipSync = function(buffer, opts) {
    return zlibBufferSync(new Gunzip(opts), buffer);
  };

  exports.inflateRaw = function(buffer, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new InflateRaw(opts), buffer, callback);
  };

  exports.inflateRawSync = function(buffer, opts) {
    return zlibBufferSync(new InflateRaw(opts), buffer);
  };

  function zlibBuffer(engine, buffer, callback) {
    var buffers = [];
    var nread = 0;

    engine.on('error', onError);
    engine.on('end', onEnd);

    engine.end(buffer);
    flow();

    function flow() {
      var chunk;
      while (null !== (chunk = engine.read())) {
        buffers.push(chunk);
        nread += chunk.length;
      }
      engine.once('readable', flow);
    }

    function onError(err) {
      engine.removeListener('end', onEnd);
      engine.removeListener('readable', flow);
      callback(err);
    }

    function onEnd() {
      var buf = Buffer.concat(buffers, nread);
      buffers = [];
      callback(null, buf);
      engine.close();
    }
  }

  function zlibBufferSync(engine, buffer) {
    if (typeof buffer === 'string')
      buffer = new Buffer(buffer);
    if (!Buffer.isBuffer(buffer))
      throw new TypeError('Not a string or buffer');

    var flushFlag = binding.Z_FINISH;

    return engine._processChunk(buffer, flushFlag);
  }

  // generic zlib
  // minimal 2-byte header
  function Deflate(opts) {
    if (!(this instanceof Deflate)) return new Deflate(opts);
    Zlib.call(this, opts, binding.DEFLATE);
  }

  function Inflate(opts) {
    if (!(this instanceof Inflate)) return new Inflate(opts);
    Zlib.call(this, opts, binding.INFLATE);
  }



  // gzip - bigger header, same deflate compression
  function Gzip(opts) {
    if (!(this instanceof Gzip)) return new Gzip(opts);
    Zlib.call(this, opts, binding.GZIP);
  }

  function Gunzip(opts) {
    if (!(this instanceof Gunzip)) return new Gunzip(opts);
    Zlib.call(this, opts, binding.GUNZIP);
  }



  // raw - no header
  function DeflateRaw(opts) {
    if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
    Zlib.call(this, opts, binding.DEFLATERAW);
  }

  function InflateRaw(opts) {
    if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
    Zlib.call(this, opts, binding.INFLATERAW);
  }


  // auto-detect header.
  function Unzip(opts) {
    if (!(this instanceof Unzip)) return new Unzip(opts);
    Zlib.call(this, opts, binding.UNZIP);
  }


  // the Zlib class they all inherit from
  // This thing manages the queue of requests, and returns
  // true or false if there is anything in the queue when
  // you call the .write() method.

  function Zlib(opts, mode) {
    this._opts = opts = opts || {};
    this._chunkSize = opts.chunkSize || exports.Z_DEFAULT_CHUNK;

    Transform.call(this, opts);

    if (opts.flush) {
      if (opts.flush !== binding.Z_NO_FLUSH &&
          opts.flush !== binding.Z_PARTIAL_FLUSH &&
          opts.flush !== binding.Z_SYNC_FLUSH &&
          opts.flush !== binding.Z_FULL_FLUSH &&
          opts.flush !== binding.Z_FINISH &&
          opts.flush !== binding.Z_BLOCK) {
        throw new Error('Invalid flush flag: ' + opts.flush);
      }
    }
    this._flushFlag = opts.flush || binding.Z_NO_FLUSH;

    if (opts.chunkSize) {
      if (opts.chunkSize < exports.Z_MIN_CHUNK ||
          opts.chunkSize > exports.Z_MAX_CHUNK) {
        throw new Error('Invalid chunk size: ' + opts.chunkSize);
      }
    }

    if (opts.windowBits) {
      if (opts.windowBits < exports.Z_MIN_WINDOWBITS ||
          opts.windowBits > exports.Z_MAX_WINDOWBITS) {
        throw new Error('Invalid windowBits: ' + opts.windowBits);
      }
    }

    if (opts.level) {
      if (opts.level < exports.Z_MIN_LEVEL ||
          opts.level > exports.Z_MAX_LEVEL) {
        throw new Error('Invalid compression level: ' + opts.level);
      }
    }

    if (opts.memLevel) {
      if (opts.memLevel < exports.Z_MIN_MEMLEVEL ||
          opts.memLevel > exports.Z_MAX_MEMLEVEL) {
        throw new Error('Invalid memLevel: ' + opts.memLevel);
      }
    }

    if (opts.strategy) {
      if (opts.strategy != exports.Z_FILTERED &&
          opts.strategy != exports.Z_HUFFMAN_ONLY &&
          opts.strategy != exports.Z_RLE &&
          opts.strategy != exports.Z_FIXED &&
          opts.strategy != exports.Z_DEFAULT_STRATEGY) {
        throw new Error('Invalid strategy: ' + opts.strategy);
      }
    }

    if (opts.dictionary) {
      if (!Buffer.isBuffer(opts.dictionary)) {
        throw new Error('Invalid dictionary: it should be a Buffer instance');
      }
    }

    this._binding = new binding.Zlib(mode);

    var self = this;
    this._hadError = false;
    this._binding.onerror = function(message, errno) {
      // there is no way to cleanly recover.
      // continuing only obscures problems.
      self._binding = null;
      self._hadError = true;

      var error = new Error(message);
      error.errno = errno;
      error.code = exports.codes[errno];
      self.emit('error', error);
    };

    var level = exports.Z_DEFAULT_COMPRESSION;
    if (typeof opts.level === 'number') level = opts.level;

    var strategy = exports.Z_DEFAULT_STRATEGY;
    if (typeof opts.strategy === 'number') strategy = opts.strategy;

    this._binding.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS,
                       level,
                       opts.memLevel || exports.Z_DEFAULT_MEMLEVEL,
                       strategy,
                       opts.dictionary);

    this._buffer = new Buffer(this._chunkSize);
    this._offset = 0;
    this._closed = false;
    this._level = level;
    this._strategy = strategy;

    this.once('end', this.close);
  }

  util.inherits(Zlib, Transform);

  Zlib.prototype.params = function(level, strategy, callback) {
    if (level < exports.Z_MIN_LEVEL ||
        level > exports.Z_MAX_LEVEL) {
      throw new RangeError('Invalid compression level: ' + level);
    }
    if (strategy != exports.Z_FILTERED &&
        strategy != exports.Z_HUFFMAN_ONLY &&
        strategy != exports.Z_RLE &&
        strategy != exports.Z_FIXED &&
        strategy != exports.Z_DEFAULT_STRATEGY) {
      throw new TypeError('Invalid strategy: ' + strategy);
    }

    if (this._level !== level || this._strategy !== strategy) {
      var self = this;
      this.flush(binding.Z_SYNC_FLUSH, function() {
        self._binding.params(level, strategy);
        if (!self._hadError) {
          self._level = level;
          self._strategy = strategy;
          if (callback) callback();
        }
      });
    } else {
      process.nextTick(callback);
    }
  };

  Zlib.prototype.reset = function() {
    return this._binding.reset();
  };

  // This is the _flush function called by the transform class,
  // internally, when the last chunk has been written.
  Zlib.prototype._flush = function(callback) {
    this._transform(new Buffer(0), '', callback);
  };

  Zlib.prototype.flush = function(kind, callback) {
    var ws = this._writableState;

    if (typeof kind === 'function' || (kind === void 0 && !callback)) {
      callback = kind;
      kind = binding.Z_FULL_FLUSH;
    }

    if (ws.ended) {
      if (callback)
        process.nextTick(callback);
    } else if (ws.ending) {
      if (callback)
        this.once('end', callback);
    } else if (ws.needDrain) {
      var self = this;
      this.once('drain', function() {
        self.flush(callback);
      });
    } else {
      this._flushFlag = kind;
      this.write(new Buffer(0), '', callback);
    }
  };

  Zlib.prototype.close = function(callback) {
    if (callback)
      process.nextTick(callback);

    if (this._closed)
      return;

    this._closed = true;

    this._binding.close();

    var self = this;
    process.nextTick(function() {
      self.emit('close');
    });
  };

  Zlib.prototype._transform = function(chunk, encoding, cb) {
    var flushFlag;
    var ws = this._writableState;
    var ending = ws.ending || ws.ended;
    var last = ending && (!chunk || ws.length === chunk.length);

    if (!chunk === null && !Buffer.isBuffer(chunk))
      return cb(new Error('invalid input'));

    // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag.
    // If it's explicitly flushing at some other time, then we use
    // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
    // goodness.
    if (last)
      flushFlag = binding.Z_FINISH;
    else {
      flushFlag = this._flushFlag;
      // once we've flushed the last of the queue, stop flushing and
      // go back to the normal behavior.
      if (chunk.length >= ws.length) {
        this._flushFlag = this._opts.flush || binding.Z_NO_FLUSH;
      }
    }

    var self = this;
    this._processChunk(chunk, flushFlag, cb);
  };

  Zlib.prototype._processChunk = function(chunk, flushFlag, cb) {
    var availInBefore = chunk && chunk.length;
    var availOutBefore = this._chunkSize - this._offset;
    var inOff = 0;

    var self = this;

    var async = typeof cb === 'function';

    if (!async) {
      var buffers = [];
      var nread = 0;

      var error;
      this.on('error', function(er) {
        error = er;
      });

      do {
        var res = this._binding.writeSync(flushFlag,
                                          chunk, // in
                                          inOff, // in_off
                                          availInBefore, // in_len
                                          this._buffer, // out
                                          this._offset, //out_off
                                          availOutBefore); // out_len
      } while (!this._hadError && callback(res[0], res[1]));

      if (this._hadError) {
        throw error;
      }

      var buf = Buffer.concat(buffers, nread);
      this.close();

      return buf;
    }

    var req = this._binding.write(flushFlag,
                                  chunk, // in
                                  inOff, // in_off
                                  availInBefore, // in_len
                                  this._buffer, // out
                                  this._offset, //out_off
                                  availOutBefore); // out_len

    req.buffer = chunk;
    req.callback = callback;

    function callback(availInAfter, availOutAfter) {
      if (self._hadError)
        return;

      var have = availOutBefore - availOutAfter;
      assert(have >= 0, 'have should not go down');

      if (have > 0) {
        var out = self._buffer.slice(self._offset, self._offset + have);
        self._offset += have;
        // serve some output to the consumer.
        if (async) {
          self.push(out);
        } else {
          buffers.push(out);
          nread += out.length;
        }
      }

      // exhausted the output buffer, or used all the input create a new one.
      if (availOutAfter === 0 || self._offset >= self._chunkSize) {
        availOutBefore = self._chunkSize;
        self._offset = 0;
        self._buffer = new Buffer(self._chunkSize);
      }

      if (availOutAfter === 0) {
        // Not actually done.  Need to reprocess.
        // Also, update the availInBefore to the availInAfter value,
        // so that if we have to hit it a third (fourth, etc.) time,
        // it'll have the correct byte counts.
        inOff += (availInBefore - availInAfter);
        availInBefore = availInAfter;

        if (!async)
          return true;

        var newReq = self._binding.write(flushFlag,
                                         chunk,
                                         inOff,
                                         availInBefore,
                                         self._buffer,
                                         self._offset,
                                         self._chunkSize);
        newReq.callback = callback; // this same function
        newReq.buffer = chunk;
        return;
      }

      if (!async)
        return false;

      // finished with the chunk.
      cb();
    }
  };

  util.inherits(Deflate, Zlib);
  util.inherits(Inflate, Zlib);
  util.inherits(Gzip, Zlib);
  util.inherits(Gunzip, Zlib);
  util.inherits(DeflateRaw, Zlib);
  util.inherits(InflateRaw, Zlib);
  util.inherits(Unzip, Zlib);

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(115).Buffer, __webpack_require__(111)))

/***/ },
/* 791 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(global) {'use strict';

  var buffer = __webpack_require__(291);
  var Buffer = buffer.Buffer;
  var SlowBuffer = buffer.SlowBuffer;
  var MAX_LEN = buffer.kMaxLength || 2147483647;
  exports.alloc = function alloc(size, fill, encoding) {
    if (typeof Buffer.alloc === 'function') {
      return Buffer.alloc(size, fill, encoding);
    }
    if (typeof encoding === 'number') {
      throw new TypeError('encoding must not be number');
    }
    if (typeof size !== 'number') {
      throw new TypeError('size must be a number');
    }
    if (size > MAX_LEN) {
      throw new RangeError('size is too large');
    }
    var enc = encoding;
    var _fill = fill;
    if (_fill === undefined) {
      enc = undefined;
      _fill = 0;
    }
    var buf = new Buffer(size);
    if (typeof _fill === 'string') {
      var fillBuf = new Buffer(_fill, enc);
      var flen = fillBuf.length;
      var i = -1;
      while (++i < size) {
        buf[i] = fillBuf[i % flen];
      }
    } else {
      buf.fill(_fill);
    }
    return buf;
  }
  exports.allocUnsafe = function allocUnsafe(size) {
    if (typeof Buffer.allocUnsafe === 'function') {
      return Buffer.allocUnsafe(size);
    }
    if (typeof size !== 'number') {
      throw new TypeError('size must be a number');
    }
    if (size > MAX_LEN) {
      throw new RangeError('size is too large');
    }
    return new Buffer(size);
  }
  exports.from = function from(value, encodingOrOffset, length) {
    if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {
      return Buffer.from(value, encodingOrOffset, length);
    }
    if (typeof value === 'number') {
      throw new TypeError('"value" argument must not be a number');
    }
    if (typeof value === 'string') {
      return new Buffer(value, encodingOrOffset);
    }
    if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
      var offset = encodingOrOffset;
      if (arguments.length === 1) {
        return new Buffer(value);
      }
      if (typeof offset === 'undefined') {
        offset = 0;
      }
      var len = length;
      if (typeof len === 'undefined') {
        len = value.byteLength - offset;
      }
      if (offset >= value.byteLength) {
        throw new RangeError('\'offset\' is out of bounds');
      }
      if (len > value.byteLength - offset) {
        throw new RangeError('\'length\' is out of bounds');
      }
      return new Buffer(value.slice(offset, offset + len));
    }
    if (Buffer.isBuffer(value)) {
      var out = new Buffer(value.length);
      value.copy(out, 0, 0, value.length);
      return out;
    }
    if (value) {
      if (Array.isArray(value) || (typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer) || 'length' in value) {
        return new Buffer(value);
      }
      if (value.type === 'Buffer' && Array.isArray(value.data)) {
        return new Buffer(value.data);
      }
    }

    throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');
  }
  exports.allocUnsafeSlow = function allocUnsafeSlow(size) {
    if (typeof Buffer.allocUnsafeSlow === 'function') {
      return Buffer.allocUnsafeSlow(size);
    }
    if (typeof size !== 'number') {
      throw new TypeError('size must be a number');
    }
    if (size >= MAX_LEN) {
      throw new RangeError('size is too large');
    }
    return new SlowBuffer(size);
  }

  /* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 792 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(process) {'use strict';
  var escapeStringRegexp = __webpack_require__(1040);
  var ansiStyles = __webpack_require__(527);
  var stripAnsi = __webpack_require__(1293);
  var hasAnsi = __webpack_require__(1063);
  var supportsColor = __webpack_require__(793);
  var defineProps = Object.defineProperties;
  var isSimpleWindowsTerm = process.platform === 'win32' && !/^xterm/i.test(process.env.TERM);

  function Chalk(options) {
  	// detect mode if not set manually
  	this.enabled = !options || options.enabled === undefined ? supportsColor : options.enabled;
  }

  // use bright blue on Windows as the normal blue color is illegible
  if (isSimpleWindowsTerm) {
  	ansiStyles.blue.open = '\u001b[94m';
  }

  var styles = (function () {
  	var ret = {};

  	Object.keys(ansiStyles).forEach(function (key) {
  		ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');

  		ret[key] = {
  			get: function () {
  				return build.call(this, this._styles.concat(key));
  			}
  		};
  	});

  	return ret;
  })();

  var proto = defineProps(function chalk() {}, styles);

  function build(_styles) {
  	var builder = function () {
  		return applyStyle.apply(builder, arguments);
  	};

  	builder._styles = _styles;
  	builder.enabled = this.enabled;
  	// __proto__ is used because we must return a function, but there is
  	// no way to create a function with a different prototype.
  	/* eslint-disable no-proto */
  	builder.__proto__ = proto;

  	return builder;
  }

  function applyStyle() {
  	// support varags, but simply cast to string in case there's only one arg
  	var args = arguments;
  	var argsLen = args.length;
  	var str = argsLen !== 0 && String(arguments[0]);

  	if (argsLen > 1) {
  		// don't slice `arguments`, it prevents v8 optimizations
  		for (var a = 1; a < argsLen; a++) {
  			str += ' ' + args[a];
  		}
  	}

  	if (!this.enabled || !str) {
  		return str;
  	}

  	var nestedStyles = this._styles;
  	var i = nestedStyles.length;

  	// Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,
  	// see https://github.com/chalk/chalk/issues/58
  	// If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.
  	var originalDim = ansiStyles.dim.open;
  	if (isSimpleWindowsTerm && (nestedStyles.indexOf('gray') !== -1 || nestedStyles.indexOf('grey') !== -1)) {
  		ansiStyles.dim.open = '';
  	}

  	while (i--) {
  		var code = ansiStyles[nestedStyles[i]];

  		// Replace any instances already present with a re-opening code
  		// otherwise only the part of the string until said closing code
  		// will be colored, and the rest will simply be 'plain'.
  		str = code.open + str.replace(code.closeRe, code.open) + code.close;
  	}

  	// Reset the original 'dim' if we changed it to work around the Windows dimmed gray issue.
  	ansiStyles.dim.open = originalDim;

  	return str;
  }

  function init() {
  	var ret = {};

  	Object.keys(styles).forEach(function (name) {
  		ret[name] = {
  			get: function () {
  				return build.call(this, [name]);
  			}
  		};
  	});

  	return ret;
  }

  defineProps(Chalk.prototype, init());

  module.exports = new Chalk();
  module.exports.styles = ansiStyles;
  module.exports.hasColor = hasAnsi;
  module.exports.stripColor = stripAnsi;
  module.exports.supportsColor = supportsColor;

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(111)))

/***/ },
/* 793 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(process) {'use strict';
  var argv = process.argv;

  var terminator = argv.indexOf('--');
  var hasFlag = function (flag) {
  	flag = '--' + flag;
  	var pos = argv.indexOf(flag);
  	return pos !== -1 && (terminator !== -1 ? pos < terminator : true);
  };

  module.exports = (function () {
  	if ('FORCE_COLOR' in process.env) {
  		return true;
  	}

  	if (hasFlag('no-color') ||
  		hasFlag('no-colors') ||
  		hasFlag('color=false')) {
  		return false;
  	}

  	if (hasFlag('color') ||
  		hasFlag('colors') ||
  		hasFlag('color=true') ||
  		hasFlag('color=always')) {
  		return true;
  	}

  	if (process.stdout && !process.stdout.isTTY) {
  		return false;
  	}

  	if (process.platform === 'win32') {
  		return true;
  	}

  	if ('COLORTERM' in process.env) {
  		return true;
  	}

  	if (process.env.TERM === 'dumb') {
  		return false;
  	}

  	if (/^screen|^xterm|^vt100|color|ansi|cygwin|linux/i.test(process.env.TERM)) {
  		return true;
  	}

  	return false;
  })();

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(111)))

/***/ },
/* 794 */
/***/ function(module, exports) {

  module.exports = function (xs, fn) {
      var res = [];
      for (var i = 0; i < xs.length; i++) {
          var x = fn(xs[i], i);
          if (isArray(x)) res.push.apply(res, x);
          else res.push(x);
      }
      return res;
  };

  var isArray = Array.isArray || function (xs) {
      return Object.prototype.toString.call(xs) === '[object Array]';
  };


/***/ },
/* 795 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
  var fs = __webpack_require__(126);
  var path = __webpack_require__(134);

  var commentRx = /^\s*\/(?:\/|\*)[@#]\s+sourceMappingURL=data:(?:application|text)\/json;(?:charset[:=]\S+;)?base64,(.*)$/mg;
  var mapFileCommentRx =
    //Example (Extra space between slashes added to solve Safari bug. Exclude space in production):
    //     / /# sourceMappingURL=foo.js.map           /*# sourceMappingURL=foo.js.map */
    /(?:\/\/[@#][ \t]+sourceMappingURL=([^\s'"]+?)[ \t]*$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^\*]+?)[ \t]*(?:\*\/){1}[ \t]*$)/mg

  function decodeBase64(base64) {
    return new Buffer(base64, 'base64').toString();
  }

  function stripComment(sm) {
    return sm.split(',').pop();
  }

  function readFromFileMap(sm, dir) {
    // NOTE: this will only work on the server since it attempts to read the map file

    var r = mapFileCommentRx.exec(sm);
    mapFileCommentRx.lastIndex = 0;

    // for some odd reason //# .. captures in 1 and /* .. */ in 2
    var filename = r[1] || r[2];
    var filepath = path.join(dir, filename);

    try {
      return fs.readFileSync(filepath, 'utf8');
    } catch (e) {
      throw new Error('An error occurred while trying to read the map file at ' + filepath + '\n' + e);
    }
  }

  function Converter (sm, opts) {
    opts = opts || {};

    if (opts.isFileComment) sm = readFromFileMap(sm, opts.commentFileDir);
    if (opts.hasComment) sm = stripComment(sm);
    if (opts.isEncoded) sm = decodeBase64(sm);
    if (opts.isJSON || opts.isEncoded) sm = JSON.parse(sm);

    this.sourcemap = sm;
  }

  function convertFromLargeSource(content){
    var lines = content.split('\n');
    var line;
    // find first line which contains a source map starting at end of content
    for (var i = lines.length - 1; i > 0; i--) {
      line = lines[i]
      if (~line.indexOf('sourceMappingURL=data:')) return exports.fromComment(line);
    }
  }

  Converter.prototype.toJSON = function (space) {
    return JSON.stringify(this.sourcemap, null, space);
  };

  Converter.prototype.toBase64 = function () {
    var json = this.toJSON();
    return new Buffer(json).toString('base64');
  };

  Converter.prototype.toComment = function (options) {
    var base64 = this.toBase64();
    var data = 'sourceMappingURL=data:application/json;base64,' + base64;
    return options && options.multiline ? '/*# ' + data + ' */' : '//# ' + data;
  };

  // returns copy instead of original
  Converter.prototype.toObject = function () {
    return JSON.parse(this.toJSON());
  };

  Converter.prototype.addProperty = function (key, value) {
    if (this.sourcemap.hasOwnProperty(key)) throw new Error('property %s already exists on the sourcemap, use set property instead');
    return this.setProperty(key, value);
  };

  Converter.prototype.setProperty = function (key, value) {
    this.sourcemap[key] = value;
    return this;
  };

  Converter.prototype.getProperty = function (key) {
    return this.sourcemap[key];
  };

  exports.fromObject = function (obj) {
    return new Converter(obj);
  };

  exports.fromJSON = function (json) {
    return new Converter(json, { isJSON: true });
  };

  exports.fromBase64 = function (base64) {
    return new Converter(base64, { isEncoded: true });
  };

  exports.fromComment = function (comment) {
    comment = comment
      .replace(/^\/\*/g, '//')
      .replace(/\*\/$/g, '');

    return new Converter(comment, { isEncoded: true, hasComment: true });
  };

  exports.fromMapFileComment = function (comment, dir) {
    return new Converter(comment, { commentFileDir: dir, isFileComment: true, isJSON: true });
  };

  // Finds last sourcemap comment in file or returns null if none was found
  exports.fromSource = function (content, largeSource) {
    if (largeSource) {
      var res = convertFromLargeSource(content);
      return res ? res : null;
    }

    var m = content.match(commentRx);
    commentRx.lastIndex = 0;
    return m ? exports.fromComment(m.pop()) : null;
  };

  // Finds last sourcemap comment in file or returns null if none was found
  exports.fromMapFileSource = function (content, dir) {
    var m = content.match(mapFileCommentRx);
    mapFileCommentRx.lastIndex = 0;
    return m ? exports.fromMapFileComment(m.pop(), dir) : null;
  };

  exports.removeComments = function (src) {
    commentRx.lastIndex = 0;
    return src.replace(commentRx, '');
  };

  exports.removeMapFileComments = function (src) {
    mapFileCommentRx.lastIndex = 0;
    return src.replace(mapFileCommentRx, '');
  };

  exports.generateMapFileComment = function (file, options) {
    var data = 'sourceMappingURL=' + file;
    return options && options.multiline ? '/*# ' + data + ' */' : '//# ' + data;
  };

  Object.defineProperty(exports, 'commentRegex', {
    get: function getCommentRegex () {
      commentRx.lastIndex = 0;
      return commentRx;
    }
  });

  Object.defineProperty(exports, 'mapFileCommentRegex', {
    get: function getMapFileCommentRegex () {
      mapFileCommentRx.lastIndex = 0;
      return mapFileCommentRx;
    }
  });

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(115).Buffer))

/***/ },
/* 796 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(856);
  module.exports = __webpack_require__(143).RegExp.escape;

/***/ },
/* 797 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(236);
  __webpack_require__(310);
  module.exports = __webpack_require__(833);

/***/ },
/* 798 */
/***/ function(module, exports, __webpack_require__) {

  var core  = __webpack_require__(110)
    , $JSON = core.JSON || (core.JSON = {stringify: JSON.stringify});
  module.exports = function stringify(it){ // eslint-disable-line no-unused-vars
    return $JSON.stringify.apply($JSON, arguments);
  };

/***/ },
/* 799 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(309);
  __webpack_require__(310);
  __webpack_require__(236);
  __webpack_require__(835);
  __webpack_require__(844);
  module.exports = __webpack_require__(110).Map;

/***/ },
/* 800 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(836);
  module.exports = 0x1fffffffffffff;

/***/ },
/* 801 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(837);
  module.exports = __webpack_require__(110).Object.assign;

/***/ },
/* 802 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(838);
  var $Object = __webpack_require__(110).Object;
  module.exports = function create(P, D){
    return $Object.create(P, D);
  };

/***/ },
/* 803 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(839);
  var $Object = __webpack_require__(110).Object;
  module.exports = function defineProperty(it, key, desc){
    return $Object.defineProperty(it, key, desc);
  };

/***/ },
/* 804 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(311);
  module.exports = __webpack_require__(110).Object.getOwnPropertySymbols;

/***/ },
/* 805 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(840);
  module.exports = __webpack_require__(110).Object.getPrototypeOf;

/***/ },
/* 806 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(841);
  module.exports = __webpack_require__(110).Object.keys;

/***/ },
/* 807 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(842);
  module.exports = __webpack_require__(110).Object.setPrototypeOf;

/***/ },
/* 808 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(311);
  module.exports = __webpack_require__(110).Symbol['for'];

/***/ },
/* 809 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(311);
  __webpack_require__(309);
  __webpack_require__(845);
  __webpack_require__(846);
  module.exports = __webpack_require__(110).Symbol;

/***/ },
/* 810 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(310);
  __webpack_require__(236);
  module.exports = __webpack_require__(308).f('iterator');

/***/ },
/* 811 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(309);
  __webpack_require__(236);
  __webpack_require__(843);
  module.exports = __webpack_require__(110).WeakMap;

/***/ },
/* 812 */
/***/ function(module, exports) {

  module.exports = function(it){
    if(typeof it != 'function')throw TypeError(it + ' is not a function!');
    return it;
  };

/***/ },
/* 813 */
/***/ function(module, exports) {

  module.exports = function(){ /* empty */ };

/***/ },
/* 814 */
/***/ function(module, exports, __webpack_require__) {

  var forOf = __webpack_require__(230);

  module.exports = function(iter, ITERATOR){
    var result = [];
    forOf(iter, false, result.push, result, ITERATOR);
    return result;
  };


/***/ },
/* 815 */
/***/ function(module, exports, __webpack_require__) {

  // false -> Array#indexOf
  // true  -> Array#includes
  var toIObject = __webpack_require__(175)
    , toLength  = __webpack_require__(305)
    , toIndex   = __webpack_require__(832);
  module.exports = function(IS_INCLUDES){
    return function($this, el, fromIndex){
      var O      = toIObject($this)
        , length = toLength(O.length)
        , index  = toIndex(fromIndex, length)
        , value;
      // Array#includes uses SameValueZero equality algorithm
      if(IS_INCLUDES && el != el)while(length > index){
        value = O[index++];
        if(value != value)return true;
      // Array#toIndex ignores holes, Array#includes - not
      } else for(;length > index; index++)if(IS_INCLUDES || index in O){
        if(O[index] === el)return IS_INCLUDES || index || 0;
      } return !IS_INCLUDES && -1;
    };
  };

/***/ },
/* 816 */
/***/ function(module, exports, __webpack_require__) {

  var isObject = __webpack_require__(151)
    , isArray  = __webpack_require__(398)
    , SPECIES  = __webpack_require__(129)('species');

  module.exports = function(original){
    var C;
    if(isArray(original)){
      C = original.constructor;
      // cross-realm fallback
      if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
      if(isObject(C)){
        C = C[SPECIES];
        if(C === null)C = undefined;
      }
    } return C === undefined ? Array : C;
  };

/***/ },
/* 817 */
/***/ function(module, exports, __webpack_require__) {

  // 9.4.2.3 ArraySpeciesCreate(originalArray, length)
  var speciesConstructor = __webpack_require__(816);

  module.exports = function(original, length){
    return new (speciesConstructor(original))(length);
  };

/***/ },
/* 818 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var dP          = __webpack_require__(141).f
    , create      = __webpack_require__(231)
    , hide        = __webpack_require__(150)
    , redefineAll = __webpack_require__(300)
    , ctx         = __webpack_require__(205)
    , anInstance  = __webpack_require__(292)
    , defined     = __webpack_require__(229)
    , forOf       = __webpack_require__(230)
    , $iterDefine = __webpack_require__(297)
    , step        = __webpack_require__(399)
    , setSpecies  = __webpack_require__(830)
    , DESCRIPTORS = __webpack_require__(138)
    , fastKey     = __webpack_require__(207).fastKey
    , SIZE        = DESCRIPTORS ? '_s' : 'size';

  var getEntry = function(that, key){
    // fast case
    var index = fastKey(key), entry;
    if(index !== 'F')return that._i[index];
    // frozen object case
    for(entry = that._f; entry; entry = entry.n){
      if(entry.k == key)return entry;
    }
  };

  module.exports = {
    getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
      var C = wrapper(function(that, iterable){
        anInstance(that, C, NAME, '_i');
        that._i = create(null); // index
        that._f = undefined;    // first entry
        that._l = undefined;    // last entry
        that[SIZE] = 0;         // size
        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
      });
      redefineAll(C.prototype, {
        // 23.1.3.1 Map.prototype.clear()
        // 23.2.3.2 Set.prototype.clear()
        clear: function clear(){
          for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
            entry.r = true;
            if(entry.p)entry.p = entry.p.n = undefined;
            delete data[entry.i];
          }
          that._f = that._l = undefined;
          that[SIZE] = 0;
        },
        // 23.1.3.3 Map.prototype.delete(key)
        // 23.2.3.4 Set.prototype.delete(value)
        'delete': function(key){
          var that  = this
            , entry = getEntry(that, key);
          if(entry){
            var next = entry.n
              , prev = entry.p;
            delete that._i[entry.i];
            entry.r = true;
            if(prev)prev.n = next;
            if(next)next.p = prev;
            if(that._f == entry)that._f = next;
            if(that._l == entry)that._l = prev;
            that[SIZE]--;
          } return !!entry;
        },
        // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
        // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
        forEach: function forEach(callbackfn /*, that = undefined */){
          anInstance(this, C, 'forEach');
          var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
            , entry;
          while(entry = entry ? entry.n : this._f){
            f(entry.v, entry.k, this);
            // revert to the last existing entry
            while(entry && entry.r)entry = entry.p;
          }
        },
        // 23.1.3.7 Map.prototype.has(key)
        // 23.2.3.7 Set.prototype.has(value)
        has: function has(key){
          return !!getEntry(this, key);
        }
      });
      if(DESCRIPTORS)dP(C.prototype, 'size', {
        get: function(){
          return defined(this[SIZE]);
        }
      });
      return C;
    },
    def: function(that, key, value){
      var entry = getEntry(that, key)
        , prev, index;
      // change existing entry
      if(entry){
        entry.v = value;
      // create new entry
      } else {
        that._l = entry = {
          i: index = fastKey(key, true), // <- index
          k: key,                        // <- key
          v: value,                      // <- value
          p: prev = that._l,             // <- previous entry
          n: undefined,                  // <- next entry
          r: false                       // <- removed
        };
        if(!that._f)that._f = entry;
        if(prev)prev.n = entry;
        that[SIZE]++;
        // add to index
        if(index !== 'F')that._i[index] = entry;
      } return that;
    },
    getEntry: getEntry,
    setStrong: function(C, NAME, IS_MAP){
      // add .keys, .values, .entries, [@@iterator]
      // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
      $iterDefine(C, NAME, function(iterated, kind){
        this._t = iterated;  // target
        this._k = kind;      // kind
        this._l = undefined; // previous
      }, function(){
        var that  = this
          , kind  = that._k
          , entry = that._l;
        // revert to the last existing entry
        while(entry && entry.r)entry = entry.p;
        // get next entry
        if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
          // or finish the iteration
          that._t = undefined;
          return step(1);
        }
        // return step by kind
        if(kind == 'keys'  )return step(0, entry.k);
        if(kind == 'values')return step(0, entry.v);
        return step(0, [entry.k, entry.v]);
      }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);

      // add [@@species], 23.1.2.2, 23.2.2.2
      setSpecies(NAME);
    }
  };

/***/ },
/* 819 */
/***/ function(module, exports, __webpack_require__) {

  // https://github.com/DavidBruant/Map-Set.prototype.toJSON
  var classof = __webpack_require__(394)
    , from    = __webpack_require__(814);
  module.exports = function(NAME){
    return function toJSON(){
      if(classof(this) != NAME)throw TypeError(NAME + "#toJSON isn't generic");
      return from(this);
    };
  };

/***/ },
/* 820 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var redefineAll       = __webpack_require__(300)
    , getWeak           = __webpack_require__(207).getWeak
    , anObject          = __webpack_require__(148)
    , isObject          = __webpack_require__(151)
    , anInstance        = __webpack_require__(292)
    , forOf             = __webpack_require__(230)
    , createArrayMethod = __webpack_require__(293)
    , $has              = __webpack_require__(149)
    , arrayFind         = createArrayMethod(5)
    , arrayFindIndex    = createArrayMethod(6)
    , id                = 0;

  // fallback for uncaught frozen keys
  var uncaughtFrozenStore = function(that){
    return that._l || (that._l = new UncaughtFrozenStore);
  };
  var UncaughtFrozenStore = function(){
    this.a = [];
  };
  var findUncaughtFrozen = function(store, key){
    return arrayFind(store.a, function(it){
      return it[0] === key;
    });
  };
  UncaughtFrozenStore.prototype = {
    get: function(key){
      var entry = findUncaughtFrozen(this, key);
      if(entry)return entry[1];
    },
    has: function(key){
      return !!findUncaughtFrozen(this, key);
    },
    set: function(key, value){
      var entry = findUncaughtFrozen(this, key);
      if(entry)entry[1] = value;
      else this.a.push([key, value]);
    },
    'delete': function(key){
      var index = arrayFindIndex(this.a, function(it){
        return it[0] === key;
      });
      if(~index)this.a.splice(index, 1);
      return !!~index;
    }
  };

  module.exports = {
    getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
      var C = wrapper(function(that, iterable){
        anInstance(that, C, NAME, '_i');
        that._i = id++;      // collection id
        that._l = undefined; // leak store for uncaught frozen objects
        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
      });
      redefineAll(C.prototype, {
        // 23.3.3.2 WeakMap.prototype.delete(key)
        // 23.4.3.3 WeakSet.prototype.delete(value)
        'delete': function(key){
          if(!isObject(key))return false;
          var data = getWeak(key);
          if(data === true)return uncaughtFrozenStore(this)['delete'](key);
          return data && $has(data, this._i) && delete data[this._i];
        },
        // 23.3.3.4 WeakMap.prototype.has(key)
        // 23.4.3.4 WeakSet.prototype.has(value)
        has: function has(key){
          if(!isObject(key))return false;
          var data = getWeak(key);
          if(data === true)return uncaughtFrozenStore(this).has(key);
          return data && $has(data, this._i);
        }
      });
      return C;
    },
    def: function(that, key, value){
      var data = getWeak(anObject(key), true);
      if(data === true)uncaughtFrozenStore(that).set(key, value);
      else data[that._i] = value;
      return that;
    },
    ufstore: uncaughtFrozenStore
  };

/***/ },
/* 821 */
/***/ function(module, exports, __webpack_require__) {

  // all enumerable object keys, includes symbols
  var getKeys = __webpack_require__(192)
    , gOPS    = __webpack_require__(299)
    , pIE     = __webpack_require__(232);
  module.exports = function(it){
    var result     = getKeys(it)
      , getSymbols = gOPS.f;
    if(getSymbols){
      var symbols = getSymbols(it)
        , isEnum  = pIE.f
        , i       = 0
        , key;
      while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
    } return result;
  };

/***/ },
/* 822 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = __webpack_require__(140).document && document.documentElement;

/***/ },
/* 823 */
/***/ function(module, exports, __webpack_require__) {

  // check on default Array iterator
  var Iterators  = __webpack_require__(206)
    , ITERATOR   = __webpack_require__(129)('iterator')
    , ArrayProto = Array.prototype;

  module.exports = function(it){
    return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
  };

/***/ },
/* 824 */
/***/ function(module, exports, __webpack_require__) {

  // call something on iterator step with safe closing on error
  var anObject = __webpack_require__(148);
  module.exports = function(iterator, fn, value, entries){
    try {
      return entries ? fn(anObject(value)[0], value[1]) : fn(value);
    // 7.4.6 IteratorClose(iterator, completion)
    } catch(e){
      var ret = iterator['return'];
      if(ret !== undefined)anObject(ret.call(iterator));
      throw e;
    }
  };

/***/ },
/* 825 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var create         = __webpack_require__(231)
    , descriptor     = __webpack_require__(233)
    , setToStringTag = __webpack_require__(234)
    , IteratorPrototype = {};

  // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
  __webpack_require__(150)(IteratorPrototype, __webpack_require__(129)('iterator'), function(){ return this; });

  module.exports = function(Constructor, NAME, next){
    Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
    setToStringTag(Constructor, NAME + ' Iterator');
  };

/***/ },
/* 826 */
/***/ function(module, exports, __webpack_require__) {

  var getKeys   = __webpack_require__(192)
    , toIObject = __webpack_require__(175);
  module.exports = function(object, el){
    var O      = toIObject(object)
      , keys   = getKeys(O)
      , length = keys.length
      , index  = 0
      , key;
    while(length > index)if(O[key = keys[index++]] === el)return key;
  };

/***/ },
/* 827 */
/***/ function(module, exports, __webpack_require__) {

  var dP       = __webpack_require__(141)
    , anObject = __webpack_require__(148)
    , getKeys  = __webpack_require__(192);

  module.exports = __webpack_require__(138) ? Object.defineProperties : function defineProperties(O, Properties){
    anObject(O);
    var keys   = getKeys(Properties)
      , length = keys.length
      , i = 0
      , P;
    while(length > i)dP.f(O, P = keys[i++], Properties[P]);
    return O;
  };

/***/ },
/* 828 */
/***/ function(module, exports, __webpack_require__) {

  // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
  var toIObject = __webpack_require__(175)
    , gOPN      = __webpack_require__(402).f
    , toString  = {}.toString;

  var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
    ? Object.getOwnPropertyNames(window) : [];

  var getWindowNames = function(it){
    try {
      return gOPN(it);
    } catch(e){
      return windowNames.slice();
    }
  };

  module.exports.f = function getOwnPropertyNames(it){
    return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
  };


/***/ },
/* 829 */
/***/ function(module, exports, __webpack_require__) {

  // Works with __proto__ only. Old v8 can't work with null proto objects.
  /* eslint-disable no-proto */
  var isObject = __webpack_require__(151)
    , anObject = __webpack_require__(148);
  var check = function(O, proto){
    anObject(O);
    if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
  };
  module.exports = {
    set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
      function(test, buggy, set){
        try {
          set = __webpack_require__(205)(Function.call, __webpack_require__(401).f(Object.prototype, '__proto__').set, 2);
          set(test, []);
          buggy = !(test instanceof Array);
        } catch(e){ buggy = true; }
        return function setPrototypeOf(O, proto){
          check(O, proto);
          if(buggy)O.__proto__ = proto;
          else set(O, proto);
          return O;
        };
      }({}, false) : undefined),
    check: check
  };

/***/ },
/* 830 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var global      = __webpack_require__(140)
    , core        = __webpack_require__(110)
    , dP          = __webpack_require__(141)
    , DESCRIPTORS = __webpack_require__(138)
    , SPECIES     = __webpack_require__(129)('species');

  module.exports = function(KEY){
    var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
    if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
      configurable: true,
      get: function(){ return this; }
    });
  };

/***/ },
/* 831 */
/***/ function(module, exports, __webpack_require__) {

  var toInteger = __webpack_require__(304)
    , defined   = __webpack_require__(229);
  // true  -> String#at
  // false -> String#codePointAt
  module.exports = function(TO_STRING){
    return function(that, pos){
      var s = String(defined(that))
        , i = toInteger(pos)
        , l = s.length
        , a, b;
      if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
      a = s.charCodeAt(i);
      return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
        ? TO_STRING ? s.charAt(i) : a
        : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
    };
  };

/***/ },
/* 832 */
/***/ function(module, exports, __webpack_require__) {

  var toInteger = __webpack_require__(304)
    , max       = Math.max
    , min       = Math.min;
  module.exports = function(index, length){
    index = toInteger(index);
    return index < 0 ? max(index + length, 0) : min(index, length);
  };

/***/ },
/* 833 */
/***/ function(module, exports, __webpack_require__) {

  var anObject = __webpack_require__(148)
    , get      = __webpack_require__(406);
  module.exports = __webpack_require__(110).getIterator = function(it){
    var iterFn = get(it);
    if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');
    return anObject(iterFn.call(it));
  };

/***/ },
/* 834 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var addToUnscopables = __webpack_require__(813)
    , step             = __webpack_require__(399)
    , Iterators        = __webpack_require__(206)
    , toIObject        = __webpack_require__(175);

  // 22.1.3.4 Array.prototype.entries()
  // 22.1.3.13 Array.prototype.keys()
  // 22.1.3.29 Array.prototype.values()
  // 22.1.3.30 Array.prototype[@@iterator]()
  module.exports = __webpack_require__(297)(Array, 'Array', function(iterated, kind){
    this._t = toIObject(iterated); // target
    this._i = 0;                   // next index
    this._k = kind;                // kind
  // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
  }, function(){
    var O     = this._t
      , kind  = this._k
      , index = this._i++;
    if(!O || index >= O.length){
      this._t = undefined;
      return step(1);
    }
    if(kind == 'keys'  )return step(0, index);
    if(kind == 'values')return step(0, O[index]);
    return step(0, [index, O[index]]);
  }, 'values');

  // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
  Iterators.Arguments = Iterators.Array;

  addToUnscopables('keys');
  addToUnscopables('values');
  addToUnscopables('entries');

/***/ },
/* 835 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var strong = __webpack_require__(818);

  // 23.1 Map Objects
  module.exports = __webpack_require__(395)('Map', function(get){
    return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
  }, {
    // 23.1.3.6 Map.prototype.get(key)
    get: function get(key){
      var entry = strong.getEntry(this, key);
      return entry && entry.v;
    },
    // 23.1.3.9 Map.prototype.set(key, value)
    set: function set(key, value){
      return strong.def(this, key === 0 ? 0 : key, value);
    }
  }, strong, true);

/***/ },
/* 836 */
/***/ function(module, exports, __webpack_require__) {

  // 20.1.2.6 Number.MAX_SAFE_INTEGER
  var $export = __webpack_require__(139);

  $export($export.S, 'Number', {MAX_SAFE_INTEGER: 0x1fffffffffffff});

/***/ },
/* 837 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.3.1 Object.assign(target, source)
  var $export = __webpack_require__(139);

  $export($export.S + $export.F, 'Object', {assign: __webpack_require__(400)});

/***/ },
/* 838 */
/***/ function(module, exports, __webpack_require__) {

  var $export = __webpack_require__(139)
  // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
  $export($export.S, 'Object', {create: __webpack_require__(231)});

/***/ },
/* 839 */
/***/ function(module, exports, __webpack_require__) {

  var $export = __webpack_require__(139);
  // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
  $export($export.S + $export.F * !__webpack_require__(138), 'Object', {defineProperty: __webpack_require__(141).f});

/***/ },
/* 840 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.2.9 Object.getPrototypeOf(O)
  var toObject        = __webpack_require__(208)
    , $getPrototypeOf = __webpack_require__(403);

  __webpack_require__(405)('getPrototypeOf', function(){
    return function getPrototypeOf(it){
      return $getPrototypeOf(toObject(it));
    };
  });

/***/ },
/* 841 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.2.14 Object.keys(O)
  var toObject = __webpack_require__(208)
    , $keys    = __webpack_require__(192);

  __webpack_require__(405)('keys', function(){
    return function keys(it){
      return $keys(toObject(it));
    };
  });

/***/ },
/* 842 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.3.19 Object.setPrototypeOf(O, proto)
  var $export = __webpack_require__(139);
  $export($export.S, 'Object', {setPrototypeOf: __webpack_require__(829).set});

/***/ },
/* 843 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var each         = __webpack_require__(293)(0)
    , redefine     = __webpack_require__(301)
    , meta         = __webpack_require__(207)
    , assign       = __webpack_require__(400)
    , weak         = __webpack_require__(820)
    , isObject     = __webpack_require__(151)
    , has          = __webpack_require__(149)
    , getWeak      = meta.getWeak
    , isExtensible = Object.isExtensible
    , uncaughtFrozenStore = weak.ufstore
    , tmp          = {}
    , InternalMap;

  var wrapper = function(get){
    return function WeakMap(){
      return get(this, arguments.length > 0 ? arguments[0] : undefined);
    };
  };

  var methods = {
    // 23.3.3.3 WeakMap.prototype.get(key)
    get: function get(key){
      if(isObject(key)){
        var data = getWeak(key);
        if(data === true)return uncaughtFrozenStore(this).get(key);
        return data ? data[this._i] : undefined;
      }
    },
    // 23.3.3.5 WeakMap.prototype.set(key, value)
    set: function set(key, value){
      return weak.def(this, key, value);
    }
  };

  // 23.3 WeakMap Objects
  var $WeakMap = module.exports = __webpack_require__(395)('WeakMap', wrapper, methods, weak, true, true);

  // IE11 WeakMap frozen keys fix
  if(new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){
    InternalMap = weak.getConstructor(wrapper);
    assign(InternalMap.prototype, methods);
    meta.NEED = true;
    each(['delete', 'has', 'get', 'set'], function(key){
      var proto  = $WeakMap.prototype
        , method = proto[key];
      redefine(proto, key, function(a, b){
        // store frozen objects on internal weakmap shim
        if(isObject(a) && !isExtensible(a)){
          if(!this._f)this._f = new InternalMap;
          var result = this._f[key](a, b);
          return key == 'set' ? this : result;
        // store all the rest on native weakmap
        } return method.call(this, a, b);
      });
    });
  }

/***/ },
/* 844 */
/***/ function(module, exports, __webpack_require__) {

  // https://github.com/DavidBruant/Map-Set.prototype.toJSON
  var $export  = __webpack_require__(139);

  $export($export.P + $export.R, 'Map', {toJSON: __webpack_require__(819)('Map')});

/***/ },
/* 845 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(307)('asyncIterator');

/***/ },
/* 846 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(307)('observable');

/***/ },
/* 847 */
/***/ function(module, exports, __webpack_require__) {

  var isObject = __webpack_require__(98)
    , isArray  = __webpack_require__(320)
    , SPECIES  = __webpack_require__(99)('species');

  module.exports = function(original){
    var C;
    if(isArray(original)){
      C = original.constructor;
      // cross-realm fallback
      if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
      if(isObject(C)){
        C = C[SPECIES];
        if(C === null)C = undefined;
      }
    } return C === undefined ? Array : C;
  };

/***/ },
/* 848 */
/***/ function(module, exports, __webpack_require__) {

  // 9.4.2.3 ArraySpeciesCreate(originalArray, length)
  var speciesConstructor = __webpack_require__(847);

  module.exports = function(original, length){
    return new (speciesConstructor(original))(length);
  };

/***/ },
/* 849 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var anObject    = __webpack_require__(92)
    , toPrimitive = __webpack_require__(145)
    , NUMBER      = 'number';

  module.exports = function(hint){
    if(hint !== 'string' && hint !== NUMBER && hint !== 'default')throw TypeError('Incorrect hint');
    return toPrimitive(anObject(this), hint != NUMBER);
  };

/***/ },
/* 850 */
/***/ function(module, exports, __webpack_require__) {

  // all enumerable object keys, includes symbols
  var getKeys = __webpack_require__(180)
    , gOPS    = __webpack_require__(245)
    , pIE     = __webpack_require__(210);
  module.exports = function(it){
    var result     = getKeys(it)
      , getSymbols = gOPS.f;
    if(getSymbols){
      var symbols = getSymbols(it)
        , isEnum  = pIE.f
        , i       = 0
        , key;
      while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
    } return result;
  };

/***/ },
/* 851 */
/***/ function(module, exports, __webpack_require__) {

  var getKeys   = __webpack_require__(180)
    , toIObject = __webpack_require__(121);
  module.exports = function(object, el){
    var O      = toIObject(object)
      , keys   = getKeys(O)
      , length = keys.length
      , index  = 0
      , key;
    while(length > index)if(O[key = keys[index++]] === el)return key;
  };

/***/ },
/* 852 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var path      = __webpack_require__(853)
    , invoke    = __webpack_require__(241)
    , aFunction = __webpack_require__(118);
  module.exports = function(/* ...pargs */){
    var fn     = aFunction(this)
      , length = arguments.length
      , pargs  = Array(length)
      , i      = 0
      , _      = path._
      , holder = false;
    while(length > i)if((pargs[i] = arguments[i++]) === _)holder = true;
    return function(/* ...args */){
      var that = this
        , aLen = arguments.length
        , j = 0, k = 0, args;
      if(!holder && !aLen)return invoke(fn, pargs, that);
      args = pargs.slice();
      if(holder)for(;length > j; j++)if(args[j] === _)args[j] = arguments[k++];
      while(aLen > k)args.push(arguments[k++]);
      return invoke(fn, args, that);
    };
  };

/***/ },
/* 853 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = __webpack_require__(95);

/***/ },
/* 854 */
/***/ function(module, exports) {

  module.exports = function(regExp, replace){
    var replacer = replace === Object(replace) ? function(part){
      return replace[part];
    } : replace;
    return function(it){
      return String(it).replace(regExp, replacer);
    };
  };

/***/ },
/* 855 */
/***/ function(module, exports, __webpack_require__) {

  var classof   = __webpack_require__(194)
    , ITERATOR  = __webpack_require__(99)('iterator')
    , Iterators = __webpack_require__(176);
  module.exports = __webpack_require__(143).isIterable = function(it){
    var O = Object(it);
    return O[ITERATOR] !== undefined
      || '@@iterator' in O
      || Iterators.hasOwnProperty(classof(O));
  };

/***/ },
/* 856 */
/***/ function(module, exports, __webpack_require__) {

  // https://github.com/benjamingr/RexExp.escape
  var $export = __webpack_require__(89)
    , $re     = __webpack_require__(854)(/[\\^$*+?.()|[\]{}]/g, '\\$&');

  $export($export.S, 'RegExp', {escape: function escape(it){ return $re(it); }});


/***/ },
/* 857 */
/***/ function(module, exports, __webpack_require__) {

  // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
  var $export = __webpack_require__(89);

  $export($export.P, 'Array', {copyWithin: __webpack_require__(408)});

  __webpack_require__(193)('copyWithin');

/***/ },
/* 858 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $export = __webpack_require__(89)
    , $every  = __webpack_require__(142)(4);

  $export($export.P + $export.F * !__webpack_require__(132)([].every, true), 'Array', {
    // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
    every: function every(callbackfn /* , thisArg */){
      return $every(this, callbackfn, arguments[1]);
    }
  });

/***/ },
/* 859 */
/***/ function(module, exports, __webpack_require__) {

  // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
  var $export = __webpack_require__(89);

  $export($export.P, 'Array', {fill: __webpack_require__(312)});

  __webpack_require__(193)('fill');

/***/ },
/* 860 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $export = __webpack_require__(89)
    , $filter = __webpack_require__(142)(2);

  $export($export.P + $export.F * !__webpack_require__(132)([].filter, true), 'Array', {
    // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
    filter: function filter(callbackfn /* , thisArg */){
      return $filter(this, callbackfn, arguments[1]);
    }
  });

/***/ },
/* 861 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
  var $export = __webpack_require__(89)
    , $find   = __webpack_require__(142)(6)
    , KEY     = 'findIndex'
    , forced  = true;
  // Shouldn't skip holes
  if(KEY in [])Array(1)[KEY](function(){ forced = false; });
  $export($export.P + $export.F * forced, 'Array', {
    findIndex: function findIndex(callbackfn/*, that = undefined */){
      return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
  });
  __webpack_require__(193)(KEY);

/***/ },
/* 862 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
  var $export = __webpack_require__(89)
    , $find   = __webpack_require__(142)(5)
    , KEY     = 'find'
    , forced  = true;
  // Shouldn't skip holes
  if(KEY in [])Array(1)[KEY](function(){ forced = false; });
  $export($export.P + $export.F * forced, 'Array', {
    find: function find(callbackfn/*, that = undefined */){
      return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
  });
  __webpack_require__(193)(KEY);

/***/ },
/* 863 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $export  = __webpack_require__(89)
    , $forEach = __webpack_require__(142)(0)
    , STRICT   = __webpack_require__(132)([].forEach, true);

  $export($export.P + $export.F * !STRICT, 'Array', {
    // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
    forEach: function forEach(callbackfn /* , thisArg */){
      return $forEach(this, callbackfn, arguments[1]);
    }
  });

/***/ },
/* 864 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var ctx            = __webpack_require__(152)
    , $export        = __webpack_require__(89)
    , toObject       = __webpack_require__(113)
    , call           = __webpack_require__(416)
    , isArrayIter    = __webpack_require__(319)
    , toLength       = __webpack_require__(112)
    , createProperty = __webpack_require__(313)
    , getIterFn      = __webpack_require__(336);

  $export($export.S + $export.F * !__webpack_require__(243)(function(iter){ Array.from(iter); }), 'Array', {
    // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
    from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
      var O       = toObject(arrayLike)
        , C       = typeof this == 'function' ? this : Array
        , aLen    = arguments.length
        , mapfn   = aLen > 1 ? arguments[1] : undefined
        , mapping = mapfn !== undefined
        , index   = 0
        , iterFn  = getIterFn(O)
        , length, result, step, iterator;
      if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
      // if object isn't iterable or it's array with default iterator - use simple case
      if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
        for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
          createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
        }
      } else {
        length = toLength(O.length);
        for(result = new C(length); length > index; index++){
          createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
        }
      }
      result.length = index;
      return result;
    }
  });


/***/ },
/* 865 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $export       = __webpack_require__(89)
    , $indexOf      = __webpack_require__(237)(false)
    , $native       = [].indexOf
    , NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

  $export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(132)($native)), 'Array', {
    // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
    indexOf: function indexOf(searchElement /*, fromIndex = 0 */){
      return NEGATIVE_ZERO
        // convert -0 to +0
        ? $native.apply(this, arguments) || 0
        : $indexOf(this, searchElement, arguments[1]);
    }
  });

/***/ },
/* 866 */
/***/ function(module, exports, __webpack_require__) {

  // 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
  var $export = __webpack_require__(89);

  $export($export.S, 'Array', {isArray: __webpack_require__(320)});

/***/ },
/* 867 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // 22.1.3.13 Array.prototype.join(separator)
  var $export   = __webpack_require__(89)
    , toIObject = __webpack_require__(121)
    , arrayJoin = [].join;

  // fallback for not array-like strings
  $export($export.P + $export.F * (__webpack_require__(209) != Object || !__webpack_require__(132)(arrayJoin)), 'Array', {
    join: function join(separator){
      return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
    }
  });

/***/ },
/* 868 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $export       = __webpack_require__(89)
    , toIObject     = __webpack_require__(121)
    , toInteger     = __webpack_require__(162)
    , toLength      = __webpack_require__(112)
    , $native       = [].lastIndexOf
    , NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

  $export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(132)($native)), 'Array', {
    // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
    lastIndexOf: function lastIndexOf(searchElement /*, fromIndex = @[*-1] */){
      // convert -0 to +0
      if(NEGATIVE_ZERO)return $native.apply(this, arguments) || 0;
      var O      = toIObject(this)
        , length = toLength(O.length)
        , index  = length - 1;
      if(arguments.length > 1)index = Math.min(index, toInteger(arguments[1]));
      if(index < 0)index = length + index;
      for(;index >= 0; index--)if(index in O)if(O[index] === searchElement)return index || 0;
      return -1;
    }
  });

/***/ },
/* 869 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $export = __webpack_require__(89)
    , $map    = __webpack_require__(142)(1);

  $export($export.P + $export.F * !__webpack_require__(132)([].map, true), 'Array', {
    // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
    map: function map(callbackfn /* , thisArg */){
      return $map(this, callbackfn, arguments[1]);
    }
  });

/***/ },
/* 870 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $export        = __webpack_require__(89)
    , createProperty = __webpack_require__(313);

  // WebKit Array.of isn't generic
  $export($export.S + $export.F * __webpack_require__(96)(function(){
    function F(){}
    return !(Array.of.call(F) instanceof F);
  }), 'Array', {
    // 22.1.2.3 Array.of( ...items)
    of: function of(/* ...args */){
      var index  = 0
        , aLen   = arguments.length
        , result = new (typeof this == 'function' ? this : Array)(aLen);
      while(aLen > index)createProperty(result, index, arguments[index++]);
      result.length = aLen;
      return result;
    }
  });

/***/ },
/* 871 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $export = __webpack_require__(89)
    , $reduce = __webpack_require__(410);

  $export($export.P + $export.F * !__webpack_require__(132)([].reduceRight, true), 'Array', {
    // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
    reduceRight: function reduceRight(callbackfn /* , initialValue */){
      return $reduce(this, callbackfn, arguments.length, arguments[1], true);
    }
  });

/***/ },
/* 872 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $export = __webpack_require__(89)
    , $reduce = __webpack_require__(410);

  $export($export.P + $export.F * !__webpack_require__(132)([].reduce, true), 'Array', {
    // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
    reduce: function reduce(callbackfn /* , initialValue */){
      return $reduce(this, callbackfn, arguments.length, arguments[1], false);
    }
  });

/***/ },
/* 873 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $export    = __webpack_require__(89)
    , html       = __webpack_require__(317)
    , cof        = __webpack_require__(130)
    , toIndex    = __webpack_require__(183)
    , toLength   = __webpack_require__(112)
    , arraySlice = [].slice;

  // fallback for not array-like ES3 strings and DOM objects
  $export($export.P + $export.F * __webpack_require__(96)(function(){
    if(html)arraySlice.call(html);
  }), 'Array', {
    slice: function slice(begin, end){
      var len   = toLength(this.length)
        , klass = cof(this);
      end = end === undefined ? len : end;
      if(klass == 'Array')return arraySlice.call(this, begin, end);
      var start  = toIndex(begin, len)
        , upTo   = toIndex(end, len)
        , size   = toLength(upTo - start)
        , cloned = Array(size)
        , i      = 0;
      for(; i < size; i++)cloned[i] = klass == 'String'
        ? this.charAt(start + i)
        : this[start + i];
      return cloned;
    }
  });

/***/ },
/* 874 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $export = __webpack_require__(89)
    , $some   = __webpack_require__(142)(3);

  $export($export.P + $export.F * !__webpack_require__(132)([].some, true), 'Array', {
    // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
    some: function some(callbackfn /* , thisArg */){
      return $some(this, callbackfn, arguments[1]);
    }
  });

/***/ },
/* 875 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $export   = __webpack_require__(89)
    , aFunction = __webpack_require__(118)
    , toObject  = __webpack_require__(113)
    , fails     = __webpack_require__(96)
    , $sort     = [].sort
    , test      = [1, 2, 3];

  $export($export.P + $export.F * (fails(function(){
    // IE8-
    test.sort(undefined);
  }) || !fails(function(){
    // V8 bug
    test.sort(null);
    // Old WebKit
  }) || !__webpack_require__(132)($sort)), 'Array', {
    // 22.1.3.25 Array.prototype.sort(comparefn)
    sort: function sort(comparefn){
      return comparefn === undefined
        ? $sort.call(toObject(this))
        : $sort.call(toObject(this), aFunction(comparefn));
    }
  });

/***/ },
/* 876 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(182)('Array');

/***/ },
/* 877 */
/***/ function(module, exports, __webpack_require__) {

  // 20.3.3.1 / 15.9.4.4 Date.now()
  var $export = __webpack_require__(89);

  $export($export.S, 'Date', {now: function(){ return new Date().getTime(); }});

/***/ },
/* 878 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
  var $export = __webpack_require__(89)
    , fails   = __webpack_require__(96)
    , getTime = Date.prototype.getTime;

  var lz = function(num){
    return num > 9 ? num : '0' + num;
  };

  // PhantomJS / old WebKit has a broken implementations
  $export($export.P + $export.F * (fails(function(){
    return new Date(-5e13 - 1).toISOString() != '0385-07-25T07:06:39.999Z';
  }) || !fails(function(){
    new Date(NaN).toISOString();
  })), 'Date', {
    toISOString: function toISOString(){
      if(!isFinite(getTime.call(this)))throw RangeError('Invalid time value');
      var d = this
        , y = d.getUTCFullYear()
        , m = d.getUTCMilliseconds()
        , s = y < 0 ? '-' : y > 9999 ? '+' : '';
      return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
        '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
        'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
        ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
    }
  });

/***/ },
/* 879 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $export     = __webpack_require__(89)
    , toObject    = __webpack_require__(113)
    , toPrimitive = __webpack_require__(145);

  $export($export.P + $export.F * __webpack_require__(96)(function(){
    return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({toISOString: function(){ return 1; }}) !== 1;
  }), 'Date', {
    toJSON: function toJSON(key){
      var O  = toObject(this)
        , pv = toPrimitive(O);
      return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
    }
  });

/***/ },
/* 880 */
/***/ function(module, exports, __webpack_require__) {

  var TO_PRIMITIVE = __webpack_require__(99)('toPrimitive')
    , proto        = Date.prototype;

  if(!(TO_PRIMITIVE in proto))__webpack_require__(117)(proto, TO_PRIMITIVE, __webpack_require__(849));

/***/ },
/* 881 */
/***/ function(module, exports, __webpack_require__) {

  var DateProto    = Date.prototype
    , INVALID_DATE = 'Invalid Date'
    , TO_STRING    = 'toString'
    , $toString    = DateProto[TO_STRING]
    , getTime      = DateProto.getTime;
  if(new Date(NaN) + '' != INVALID_DATE){
    __webpack_require__(119)(DateProto, TO_STRING, function toString(){
      var value = getTime.call(this);
      return value === value ? $toString.call(this) : INVALID_DATE;
    });
  }

/***/ },
/* 882 */
/***/ function(module, exports, __webpack_require__) {

  // 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
  var $export = __webpack_require__(89);

  $export($export.P, 'Function', {bind: __webpack_require__(411)});

/***/ },
/* 883 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var isObject       = __webpack_require__(98)
    , getPrototypeOf = __webpack_require__(123)
    , HAS_INSTANCE   = __webpack_require__(99)('hasInstance')
    , FunctionProto  = Function.prototype;
  // 19.2.3.6 Function.prototype[@@hasInstance](V)
  if(!(HAS_INSTANCE in FunctionProto))__webpack_require__(107).f(FunctionProto, HAS_INSTANCE, {value: function(O){
    if(typeof this != 'function' || !isObject(O))return false;
    if(!isObject(this.prototype))return O instanceof this;
    // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
    while(O = getPrototypeOf(O))if(this.prototype === O)return true;
    return false;
  }});

/***/ },
/* 884 */
/***/ function(module, exports, __webpack_require__) {

  var dP         = __webpack_require__(107).f
    , createDesc = __webpack_require__(161)
    , has        = __webpack_require__(116)
    , FProto     = Function.prototype
    , nameRE     = /^\s*function ([^ (]*)/
    , NAME       = 'name';

  var isExtensible = Object.isExtensible || function(){
    return true;
  };

  // 19.2.4.2 name
  NAME in FProto || __webpack_require__(106) && dP(FProto, NAME, {
    configurable: true,
    get: function(){
      try {
        var that = this
          , name = ('' + that).match(nameRE)[1];
        has(that, NAME) || !isExtensible(that) || dP(that, NAME, createDesc(5, name));
        return name;
      } catch(e){
        return '';
      }
    }
  });

/***/ },
/* 885 */
/***/ function(module, exports, __webpack_require__) {

  // 20.2.2.3 Math.acosh(x)
  var $export = __webpack_require__(89)
    , log1p   = __webpack_require__(418)
    , sqrt    = Math.sqrt
    , $acosh  = Math.acosh;

  $export($export.S + $export.F * !($acosh
    // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
    && Math.floor($acosh(Number.MAX_VALUE)) == 710
    // Tor Browser bug: Math.acosh(Infinity) -> NaN 
    && $acosh(Infinity) == Infinity
  ), 'Math', {
    acosh: function acosh(x){
      return (x = +x) < 1 ? NaN : x > 94906265.62425156
        ? Math.log(x) + Math.LN2
        : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
    }
  });

/***/ },
/* 886 */
/***/ function(module, exports, __webpack_require__) {

  // 20.2.2.5 Math.asinh(x)
  var $export = __webpack_require__(89)
    , $asinh  = Math.asinh;

  function asinh(x){
    return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
  }

  // Tor Browser bug: Math.asinh(0) -> -0 
  $export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', {asinh: asinh});

/***/ },
/* 887 */
/***/ function(module, exports, __webpack_require__) {

  // 20.2.2.7 Math.atanh(x)
  var $export = __webpack_require__(89)
    , $atanh  = Math.atanh;

  // Tor Browser bug: Math.atanh(-0) -> 0 
  $export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
    atanh: function atanh(x){
      return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
    }
  });

/***/ },
/* 888 */
/***/ function(module, exports, __webpack_require__) {

  // 20.2.2.9 Math.cbrt(x)
  var $export = __webpack_require__(89)
    , sign    = __webpack_require__(325);

  $export($export.S, 'Math', {
    cbrt: function cbrt(x){
      return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
    }
  });

/***/ },
/* 889 */
/***/ function(module, exports, __webpack_require__) {

  // 20.2.2.11 Math.clz32(x)
  var $export = __webpack_require__(89);

  $export($export.S, 'Math', {
    clz32: function clz32(x){
      return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
    }
  });

/***/ },
/* 890 */
/***/ function(module, exports, __webpack_require__) {

  // 20.2.2.12 Math.cosh(x)
  var $export = __webpack_require__(89)
    , exp     = Math.exp;

  $export($export.S, 'Math', {
    cosh: function cosh(x){
      return (exp(x = +x) + exp(-x)) / 2;
    }
  });

/***/ },
/* 891 */
/***/ function(module, exports, __webpack_require__) {

  // 20.2.2.14 Math.expm1(x)
  var $export = __webpack_require__(89)
    , $expm1  = __webpack_require__(324);

  $export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', {expm1: $expm1});

/***/ },
/* 892 */
/***/ function(module, exports, __webpack_require__) {

  // 20.2.2.16 Math.fround(x)
  var $export   = __webpack_require__(89)
    , sign      = __webpack_require__(325)
    , pow       = Math.pow
    , EPSILON   = pow(2, -52)
    , EPSILON32 = pow(2, -23)
    , MAX32     = pow(2, 127) * (2 - EPSILON32)
    , MIN32     = pow(2, -126);

  var roundTiesToEven = function(n){
    return n + 1 / EPSILON - 1 / EPSILON;
  };


  $export($export.S, 'Math', {
    fround: function fround(x){
      var $abs  = Math.abs(x)
        , $sign = sign(x)
        , a, result;
      if($abs < MIN32)return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
      a = (1 + EPSILON32 / EPSILON) * $abs;
      result = a - (a - $abs);
      if(result > MAX32 || result != result)return $sign * Infinity;
      return $sign * result;
    }
  });

/***/ },
/* 893 */
/***/ function(module, exports, __webpack_require__) {

  // 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
  var $export = __webpack_require__(89)
    , abs     = Math.abs;

  $export($export.S, 'Math', {
    hypot: function hypot(value1, value2){ // eslint-disable-line no-unused-vars
      var sum  = 0
        , i    = 0
        , aLen = arguments.length
        , larg = 0
        , arg, div;
      while(i < aLen){
        arg = abs(arguments[i++]);
        if(larg < arg){
          div  = larg / arg;
          sum  = sum * div * div + 1;
          larg = arg;
        } else if(arg > 0){
          div  = arg / larg;
          sum += div * div;
        } else sum += arg;
      }
      return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
    }
  });

/***/ },
/* 894 */
/***/ function(module, exports, __webpack_require__) {

  // 20.2.2.18 Math.imul(x, y)
  var $export = __webpack_require__(89)
    , $imul   = Math.imul;

  // some WebKit versions fails with big numbers, some has wrong arity
  $export($export.S + $export.F * __webpack_require__(96)(function(){
    return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
  }), 'Math', {
    imul: function imul(x, y){
      var UINT16 = 0xffff
        , xn = +x
        , yn = +y
        , xl = UINT16 & xn
        , yl = UINT16 & yn;
      return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
    }
  });

/***/ },
/* 895 */
/***/ function(module, exports, __webpack_require__) {

  // 20.2.2.21 Math.log10(x)
  var $export = __webpack_require__(89);

  $export($export.S, 'Math', {
    log10: function log10(x){
      return Math.log(x) / Math.LN10;
    }
  });

/***/ },
/* 896 */
/***/ function(module, exports, __webpack_require__) {

  // 20.2.2.20 Math.log1p(x)
  var $export = __webpack_require__(89);

  $export($export.S, 'Math', {log1p: __webpack_require__(418)});

/***/ },
/* 897 */
/***/ function(module, exports, __webpack_require__) {

  // 20.2.2.22 Math.log2(x)
  var $export = __webpack_require__(89);

  $export($export.S, 'Math', {
    log2: function log2(x){
      return Math.log(x) / Math.LN2;
    }
  });

/***/ },
/* 898 */
/***/ function(module, exports, __webpack_require__) {

  // 20.2.2.28 Math.sign(x)
  var $export = __webpack_require__(89);

  $export($export.S, 'Math', {sign: __webpack_require__(325)});

/***/ },
/* 899 */
/***/ function(module, exports, __webpack_require__) {

  // 20.2.2.30 Math.sinh(x)
  var $export = __webpack_require__(89)
    , expm1   = __webpack_require__(324)
    , exp     = Math.exp;

  // V8 near Chromium 38 has a problem with very small numbers
  $export($export.S + $export.F * __webpack_require__(96)(function(){
    return !Math.sinh(-2e-17) != -2e-17;
  }), 'Math', {
    sinh: function sinh(x){
      return Math.abs(x = +x) < 1
        ? (expm1(x) - expm1(-x)) / 2
        : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
    }
  });

/***/ },
/* 900 */
/***/ function(module, exports, __webpack_require__) {

  // 20.2.2.33 Math.tanh(x)
  var $export = __webpack_require__(89)
    , expm1   = __webpack_require__(324)
    , exp     = Math.exp;

  $export($export.S, 'Math', {
    tanh: function tanh(x){
      var a = expm1(x = +x)
        , b = expm1(-x);
      return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
    }
  });

/***/ },
/* 901 */
/***/ function(module, exports, __webpack_require__) {

  // 20.2.2.34 Math.trunc(x)
  var $export = __webpack_require__(89);

  $export($export.S, 'Math', {
    trunc: function trunc(it){
      return (it > 0 ? Math.floor : Math.ceil)(it);
    }
  });

/***/ },
/* 902 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var global            = __webpack_require__(95)
    , has               = __webpack_require__(116)
    , cof               = __webpack_require__(130)
    , inheritIfRequired = __webpack_require__(318)
    , toPrimitive       = __webpack_require__(145)
    , fails             = __webpack_require__(96)
    , gOPN              = __webpack_require__(179).f
    , gOPD              = __webpack_require__(122).f
    , dP                = __webpack_require__(107).f
    , $trim             = __webpack_require__(197).trim
    , NUMBER            = 'Number'
    , $Number           = global[NUMBER]
    , Base              = $Number
    , proto             = $Number.prototype
    // Opera ~12 has broken Object#toString
    , BROKEN_COF        = cof(__webpack_require__(178)(proto)) == NUMBER
    , TRIM              = 'trim' in String.prototype;

  // 7.1.3 ToNumber(argument)
  var toNumber = function(argument){
    var it = toPrimitive(argument, false);
    if(typeof it == 'string' && it.length > 2){
      it = TRIM ? it.trim() : $trim(it, 3);
      var first = it.charCodeAt(0)
        , third, radix, maxCode;
      if(first === 43 || first === 45){
        third = it.charCodeAt(2);
        if(third === 88 || third === 120)return NaN; // Number('+0x1') should be NaN, old V8 fix
      } else if(first === 48){
        switch(it.charCodeAt(1)){
          case 66 : case 98  : radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
          case 79 : case 111 : radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
          default : return +it;
        }
        for(var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++){
          code = digits.charCodeAt(i);
          // parseInt parses a string to a first unavailable symbol
          // but ToNumber should return NaN if a string contains unavailable symbols
          if(code < 48 || code > maxCode)return NaN;
        } return parseInt(digits, radix);
      }
    } return +it;
  };

  if(!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')){
    $Number = function Number(value){
      var it = arguments.length < 1 ? 0 : value
        , that = this;
      return that instanceof $Number
        // check on 1..constructor(foo) case
        && (BROKEN_COF ? fails(function(){ proto.valueOf.call(that); }) : cof(that) != NUMBER)
          ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
    };
    for(var keys = __webpack_require__(106) ? gOPN(Base) : (
      // ES3:
      'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
      // ES6 (in case, if modules with ES6 Number statics required before):
      'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
      'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
    ).split(','), j = 0, key; keys.length > j; j++){
      if(has(Base, key = keys[j]) && !has($Number, key)){
        dP($Number, key, gOPD(Base, key));
      }
    }
    $Number.prototype = proto;
    proto.constructor = $Number;
    __webpack_require__(119)(global, NUMBER, $Number);
  }

/***/ },
/* 903 */
/***/ function(module, exports, __webpack_require__) {

  // 20.1.2.1 Number.EPSILON
  var $export = __webpack_require__(89);

  $export($export.S, 'Number', {EPSILON: Math.pow(2, -52)});

/***/ },
/* 904 */
/***/ function(module, exports, __webpack_require__) {

  // 20.1.2.2 Number.isFinite(number)
  var $export   = __webpack_require__(89)
    , _isFinite = __webpack_require__(95).isFinite;

  $export($export.S, 'Number', {
    isFinite: function isFinite(it){
      return typeof it == 'number' && _isFinite(it);
    }
  });

/***/ },
/* 905 */
/***/ function(module, exports, __webpack_require__) {

  // 20.1.2.3 Number.isInteger(number)
  var $export = __webpack_require__(89);

  $export($export.S, 'Number', {isInteger: __webpack_require__(321)});

/***/ },
/* 906 */
/***/ function(module, exports, __webpack_require__) {

  // 20.1.2.4 Number.isNaN(number)
  var $export = __webpack_require__(89);

  $export($export.S, 'Number', {
    isNaN: function isNaN(number){
      return number != number;
    }
  });

/***/ },
/* 907 */
/***/ function(module, exports, __webpack_require__) {

  // 20.1.2.5 Number.isSafeInteger(number)
  var $export   = __webpack_require__(89)
    , isInteger = __webpack_require__(321)
    , abs       = Math.abs;

  $export($export.S, 'Number', {
    isSafeInteger: function isSafeInteger(number){
      return isInteger(number) && abs(number) <= 0x1fffffffffffff;
    }
  });

/***/ },
/* 908 */
/***/ function(module, exports, __webpack_require__) {

  // 20.1.2.6 Number.MAX_SAFE_INTEGER
  var $export = __webpack_require__(89);

  $export($export.S, 'Number', {MAX_SAFE_INTEGER: 0x1fffffffffffff});

/***/ },
/* 909 */
/***/ function(module, exports, __webpack_require__) {

  // 20.1.2.10 Number.MIN_SAFE_INTEGER
  var $export = __webpack_require__(89);

  $export($export.S, 'Number', {MIN_SAFE_INTEGER: -0x1fffffffffffff});

/***/ },
/* 910 */
/***/ function(module, exports, __webpack_require__) {

  var $export     = __webpack_require__(89)
    , $parseFloat = __webpack_require__(425);
  // 20.1.2.12 Number.parseFloat(string)
  $export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', {parseFloat: $parseFloat});

/***/ },
/* 911 */
/***/ function(module, exports, __webpack_require__) {

  var $export   = __webpack_require__(89)
    , $parseInt = __webpack_require__(426);
  // 20.1.2.13 Number.parseInt(string, radix)
  $export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', {parseInt: $parseInt});

/***/ },
/* 912 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $export      = __webpack_require__(89)
    , anInstance   = __webpack_require__(159)
    , toInteger    = __webpack_require__(162)
    , aNumberValue = __webpack_require__(407)
    , repeat       = __webpack_require__(331)
    , $toFixed     = 1..toFixed
    , floor        = Math.floor
    , data         = [0, 0, 0, 0, 0, 0]
    , ERROR        = 'Number.toFixed: incorrect invocation!'
    , ZERO         = '0';

  var multiply = function(n, c){
    var i  = -1
      , c2 = c;
    while(++i < 6){
      c2 += n * data[i];
      data[i] = c2 % 1e7;
      c2 = floor(c2 / 1e7);
    }
  };
  var divide = function(n){
    var i = 6
      , c = 0;
    while(--i >= 0){
      c += data[i];
      data[i] = floor(c / n);
      c = (c % n) * 1e7;
    }
  };
  var numToString = function(){
    var i = 6
      , s = '';
    while(--i >= 0){
      if(s !== '' || i === 0 || data[i] !== 0){
        var t = String(data[i]);
        s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
      }
    } return s;
  };
  var pow = function(x, n, acc){
    return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
  };
  var log = function(x){
    var n  = 0
      , x2 = x;
    while(x2 >= 4096){
      n += 12;
      x2 /= 4096;
    }
    while(x2 >= 2){
      n  += 1;
      x2 /= 2;
    } return n;
  };

  $export($export.P + $export.F * (!!$toFixed && (
    0.00008.toFixed(3) !== '0.000' ||
    0.9.toFixed(0) !== '1' ||
    1.255.toFixed(2) !== '1.25' ||
    1000000000000000128..toFixed(0) !== '1000000000000000128'
  ) || !__webpack_require__(96)(function(){
    // V8 ~ Android 4.3-
    $toFixed.call({});
  })), 'Number', {
    toFixed: function toFixed(fractionDigits){
      var x = aNumberValue(this, ERROR)
        , f = toInteger(fractionDigits)
        , s = ''
        , m = ZERO
        , e, z, j, k;
      if(f < 0 || f > 20)throw RangeError(ERROR);
      if(x != x)return 'NaN';
      if(x <= -1e21 || x >= 1e21)return String(x);
      if(x < 0){
        s = '-';
        x = -x;
      }
      if(x > 1e-21){
        e = log(x * pow(2, 69, 1)) - 69;
        z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
        z *= 0x10000000000000;
        e = 52 - e;
        if(e > 0){
          multiply(0, z);
          j = f;
          while(j >= 7){
            multiply(1e7, 0);
            j -= 7;
          }
          multiply(pow(10, j, 1), 0);
          j = e - 1;
          while(j >= 23){
            divide(1 << 23);
            j -= 23;
          }
          divide(1 << j);
          multiply(1, 1);
          divide(2);
          m = numToString();
        } else {
          multiply(0, z);
          multiply(1 << -e, 0);
          m = numToString() + repeat.call(ZERO, f);
        }
      }
      if(f > 0){
        k = m.length;
        m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
      } else {
        m = s + m;
      } return m;
    }
  });

/***/ },
/* 913 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $export      = __webpack_require__(89)
    , $fails       = __webpack_require__(96)
    , aNumberValue = __webpack_require__(407)
    , $toPrecision = 1..toPrecision;

  $export($export.P + $export.F * ($fails(function(){
    // IE7-
    return $toPrecision.call(1, undefined) !== '1';
  }) || !$fails(function(){
    // V8 ~ Android 4.3-
    $toPrecision.call({});
  })), 'Number', {
    toPrecision: function toPrecision(precision){
      var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
      return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision); 
    }
  });

/***/ },
/* 914 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.3.1 Object.assign(target, source)
  var $export = __webpack_require__(89);

  $export($export.S + $export.F, 'Object', {assign: __webpack_require__(419)});

/***/ },
/* 915 */
/***/ function(module, exports, __webpack_require__) {

  var $export = __webpack_require__(89)
  // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
  $export($export.S, 'Object', {create: __webpack_require__(178)});

/***/ },
/* 916 */
/***/ function(module, exports, __webpack_require__) {

  var $export = __webpack_require__(89);
  // 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
  $export($export.S + $export.F * !__webpack_require__(106), 'Object', {defineProperties: __webpack_require__(420)});

/***/ },
/* 917 */
/***/ function(module, exports, __webpack_require__) {

  var $export = __webpack_require__(89);
  // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
  $export($export.S + $export.F * !__webpack_require__(106), 'Object', {defineProperty: __webpack_require__(107).f});

/***/ },
/* 918 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.2.5 Object.freeze(O)
  var isObject = __webpack_require__(98)
    , meta     = __webpack_require__(160).onFreeze;

  __webpack_require__(144)('freeze', function($freeze){
    return function freeze(it){
      return $freeze && isObject(it) ? $freeze(meta(it)) : it;
    };
  });

/***/ },
/* 919 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  var toIObject                 = __webpack_require__(121)
    , $getOwnPropertyDescriptor = __webpack_require__(122).f;

  __webpack_require__(144)('getOwnPropertyDescriptor', function(){
    return function getOwnPropertyDescriptor(it, key){
      return $getOwnPropertyDescriptor(toIObject(it), key);
    };
  });

/***/ },
/* 920 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.2.7 Object.getOwnPropertyNames(O)
  __webpack_require__(144)('getOwnPropertyNames', function(){
    return __webpack_require__(421).f;
  });

/***/ },
/* 921 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.2.9 Object.getPrototypeOf(O)
  var toObject        = __webpack_require__(113)
    , $getPrototypeOf = __webpack_require__(123);

  __webpack_require__(144)('getPrototypeOf', function(){
    return function getPrototypeOf(it){
      return $getPrototypeOf(toObject(it));
    };
  });

/***/ },
/* 922 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.2.11 Object.isExtensible(O)
  var isObject = __webpack_require__(98);

  __webpack_require__(144)('isExtensible', function($isExtensible){
    return function isExtensible(it){
      return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
    };
  });

/***/ },
/* 923 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.2.12 Object.isFrozen(O)
  var isObject = __webpack_require__(98);

  __webpack_require__(144)('isFrozen', function($isFrozen){
    return function isFrozen(it){
      return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
    };
  });

/***/ },
/* 924 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.2.13 Object.isSealed(O)
  var isObject = __webpack_require__(98);

  __webpack_require__(144)('isSealed', function($isSealed){
    return function isSealed(it){
      return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
    };
  });

/***/ },
/* 925 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.3.10 Object.is(value1, value2)
  var $export = __webpack_require__(89);
  $export($export.S, 'Object', {is: __webpack_require__(427)});

/***/ },
/* 926 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.2.14 Object.keys(O)
  var toObject = __webpack_require__(113)
    , $keys    = __webpack_require__(180);

  __webpack_require__(144)('keys', function(){
    return function keys(it){
      return $keys(toObject(it));
    };
  });

/***/ },
/* 927 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.2.15 Object.preventExtensions(O)
  var isObject = __webpack_require__(98)
    , meta     = __webpack_require__(160).onFreeze;

  __webpack_require__(144)('preventExtensions', function($preventExtensions){
    return function preventExtensions(it){
      return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
    };
  });

/***/ },
/* 928 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.2.17 Object.seal(O)
  var isObject = __webpack_require__(98)
    , meta     = __webpack_require__(160).onFreeze;

  __webpack_require__(144)('seal', function($seal){
    return function seal(it){
      return $seal && isObject(it) ? $seal(meta(it)) : it;
    };
  });

/***/ },
/* 929 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.3.19 Object.setPrototypeOf(O, proto)
  var $export = __webpack_require__(89);
  $export($export.S, 'Object', {setPrototypeOf: __webpack_require__(246).set});

/***/ },
/* 930 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // 19.1.3.6 Object.prototype.toString()
  var classof = __webpack_require__(194)
    , test    = {};
  test[__webpack_require__(99)('toStringTag')] = 'z';
  if(test + '' != '[object z]'){
    __webpack_require__(119)(Object.prototype, 'toString', function toString(){
      return '[object ' + classof(this) + ']';
    }, true);
  }

/***/ },
/* 931 */
/***/ function(module, exports, __webpack_require__) {

  var $export     = __webpack_require__(89)
    , $parseFloat = __webpack_require__(425);
  // 18.2.4 parseFloat(string)
  $export($export.G + $export.F * (parseFloat != $parseFloat), {parseFloat: $parseFloat});

/***/ },
/* 932 */
/***/ function(module, exports, __webpack_require__) {

  var $export   = __webpack_require__(89)
    , $parseInt = __webpack_require__(426);
  // 18.2.5 parseInt(string, radix)
  $export($export.G + $export.F * (parseInt != $parseInt), {parseInt: $parseInt});

/***/ },
/* 933 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var LIBRARY            = __webpack_require__(177)
    , global             = __webpack_require__(95)
    , ctx                = __webpack_require__(152)
    , classof            = __webpack_require__(194)
    , $export            = __webpack_require__(89)
    , isObject           = __webpack_require__(98)
    , anObject           = __webpack_require__(92)
    , aFunction          = __webpack_require__(118)
    , anInstance         = __webpack_require__(159)
    , forOf              = __webpack_require__(195)
    , setProto           = __webpack_require__(246).set
    , speciesConstructor = __webpack_require__(328)
    , task               = __webpack_require__(333).set
    , microtask          = __webpack_require__(326)()
    , PROMISE            = 'Promise'
    , TypeError          = global.TypeError
    , process            = global.process
    , $Promise           = global[PROMISE]
    , process            = global.process
    , isNode             = classof(process) == 'process'
    , empty              = function(){ /* empty */ }
    , Internal, GenericPromiseCapability, Wrapper;

  var USE_NATIVE = !!function(){
    try {
      // correct subclassing with @@species support
      var promise     = $Promise.resolve(1)
        , FakePromise = (promise.constructor = {})[__webpack_require__(99)('species')] = function(exec){ exec(empty, empty); };
      // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
      return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
    } catch(e){ /* empty */ }
  }();

  // helpers
  var sameConstructor = function(a, b){
    // with library wrapper special case
    return a === b || a === $Promise && b === Wrapper;
  };
  var isThenable = function(it){
    var then;
    return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
  };
  var newPromiseCapability = function(C){
    return sameConstructor($Promise, C)
      ? new PromiseCapability(C)
      : new GenericPromiseCapability(C);
  };
  var PromiseCapability = GenericPromiseCapability = function(C){
    var resolve, reject;
    this.promise = new C(function($$resolve, $$reject){
      if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
      resolve = $$resolve;
      reject  = $$reject;
    });
    this.resolve = aFunction(resolve);
    this.reject  = aFunction(reject);
  };
  var perform = function(exec){
    try {
      exec();
    } catch(e){
      return {error: e};
    }
  };
  var notify = function(promise, isReject){
    if(promise._n)return;
    promise._n = true;
    var chain = promise._c;
    microtask(function(){
      var value = promise._v
        , ok    = promise._s == 1
        , i     = 0;
      var run = function(reaction){
        var handler = ok ? reaction.ok : reaction.fail
          , resolve = reaction.resolve
          , reject  = reaction.reject
          , domain  = reaction.domain
          , result, then;
        try {
          if(handler){
            if(!ok){
              if(promise._h == 2)onHandleUnhandled(promise);
              promise._h = 1;
            }
            if(handler === true)result = value;
            else {
              if(domain)domain.enter();
              result = handler(value);
              if(domain)domain.exit();
            }
            if(result === reaction.promise){
              reject(TypeError('Promise-chain cycle'));
            } else if(then = isThenable(result)){
              then.call(result, resolve, reject);
            } else resolve(result);
          } else reject(value);
        } catch(e){
          reject(e);
        }
      };
      while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
      promise._c = [];
      promise._n = false;
      if(isReject && !promise._h)onUnhandled(promise);
    });
  };
  var onUnhandled = function(promise){
    task.call(global, function(){
      var value = promise._v
        , abrupt, handler, console;
      if(isUnhandled(promise)){
        abrupt = perform(function(){
          if(isNode){
            process.emit('unhandledRejection', value, promise);
          } else if(handler = global.onunhandledrejection){
            handler({promise: promise, reason: value});
          } else if((console = global.console) && console.error){
            console.error('Unhandled promise rejection', value);
          }
        });
        // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
        promise._h = isNode || isUnhandled(promise) ? 2 : 1;
      } promise._a = undefined;
      if(abrupt)throw abrupt.error;
    });
  };
  var isUnhandled = function(promise){
    if(promise._h == 1)return false;
    var chain = promise._a || promise._c
      , i     = 0
      , reaction;
    while(chain.length > i){
      reaction = chain[i++];
      if(reaction.fail || !isUnhandled(reaction.promise))return false;
    } return true;
  };
  var onHandleUnhandled = function(promise){
    task.call(global, function(){
      var handler;
      if(isNode){
        process.emit('rejectionHandled', promise);
      } else if(handler = global.onrejectionhandled){
        handler({promise: promise, reason: promise._v});
      }
    });
  };
  var $reject = function(value){
    var promise = this;
    if(promise._d)return;
    promise._d = true;
    promise = promise._w || promise; // unwrap
    promise._v = value;
    promise._s = 2;
    if(!promise._a)promise._a = promise._c.slice();
    notify(promise, true);
  };
  var $resolve = function(value){
    var promise = this
      , then;
    if(promise._d)return;
    promise._d = true;
    promise = promise._w || promise; // unwrap
    try {
      if(promise === value)throw TypeError("Promise can't be resolved itself");
      if(then = isThenable(value)){
        microtask(function(){
          var wrapper = {_w: promise, _d: false}; // wrap
          try {
            then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
          } catch(e){
            $reject.call(wrapper, e);
          }
        });
      } else {
        promise._v = value;
        promise._s = 1;
        notify(promise, false);
      }
    } catch(e){
      $reject.call({_w: promise, _d: false}, e); // wrap
    }
  };

  // constructor polyfill
  if(!USE_NATIVE){
    // 25.4.3.1 Promise(executor)
    $Promise = function Promise(executor){
      anInstance(this, $Promise, PROMISE, '_h');
      aFunction(executor);
      Internal.call(this);
      try {
        executor(ctx($resolve, this, 1), ctx($reject, this, 1));
      } catch(err){
        $reject.call(this, err);
      }
    };
    Internal = function Promise(executor){
      this._c = [];             // <- awaiting reactions
      this._a = undefined;      // <- checked in isUnhandled reactions
      this._s = 0;              // <- state
      this._d = false;          // <- done
      this._v = undefined;      // <- value
      this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
      this._n = false;          // <- notify
    };
    Internal.prototype = __webpack_require__(181)($Promise.prototype, {
      // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
      then: function then(onFulfilled, onRejected){
        var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
        reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
        reaction.fail   = typeof onRejected == 'function' && onRejected;
        reaction.domain = isNode ? process.domain : undefined;
        this._c.push(reaction);
        if(this._a)this._a.push(reaction);
        if(this._s)notify(this, false);
        return reaction.promise;
      },
      // 25.4.5.1 Promise.prototype.catch(onRejected)
      'catch': function(onRejected){
        return this.then(undefined, onRejected);
      }
    });
    PromiseCapability = function(){
      var promise  = new Internal;
      this.promise = promise;
      this.resolve = ctx($resolve, promise, 1);
      this.reject  = ctx($reject, promise, 1);
    };
  }

  $export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
  __webpack_require__(196)($Promise, PROMISE);
  __webpack_require__(182)(PROMISE);
  Wrapper = __webpack_require__(143)[PROMISE];

  // statics
  $export($export.S + $export.F * !USE_NATIVE, PROMISE, {
    // 25.4.4.5 Promise.reject(r)
    reject: function reject(r){
      var capability = newPromiseCapability(this)
        , $$reject   = capability.reject;
      $$reject(r);
      return capability.promise;
    }
  });
  $export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
    // 25.4.4.6 Promise.resolve(x)
    resolve: function resolve(x){
      // instanceof instead of internal slot check because we should fix it without replacement native Promise core
      if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
      var capability = newPromiseCapability(this)
        , $$resolve  = capability.resolve;
      $$resolve(x);
      return capability.promise;
    }
  });
  $export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(243)(function(iter){
    $Promise.all(iter)['catch'](empty);
  })), PROMISE, {
    // 25.4.4.1 Promise.all(iterable)
    all: function all(iterable){
      var C          = this
        , capability = newPromiseCapability(C)
        , resolve    = capability.resolve
        , reject     = capability.reject;
      var abrupt = perform(function(){
        var values    = []
          , index     = 0
          , remaining = 1;
        forOf(iterable, false, function(promise){
          var $index        = index++
            , alreadyCalled = false;
          values.push(undefined);
          remaining++;
          C.resolve(promise).then(function(value){
            if(alreadyCalled)return;
            alreadyCalled  = true;
            values[$index] = value;
            --remaining || resolve(values);
          }, reject);
        });
        --remaining || resolve(values);
      });
      if(abrupt)reject(abrupt.error);
      return capability.promise;
    },
    // 25.4.4.4 Promise.race(iterable)
    race: function race(iterable){
      var C          = this
        , capability = newPromiseCapability(C)
        , reject     = capability.reject;
      var abrupt = perform(function(){
        forOf(iterable, false, function(promise){
          C.resolve(promise).then(capability.resolve, reject);
        });
      });
      if(abrupt)reject(abrupt.error);
      return capability.promise;
    }
  });

/***/ },
/* 934 */
/***/ function(module, exports, __webpack_require__) {

  // 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
  var $export   = __webpack_require__(89)
    , aFunction = __webpack_require__(118)
    , anObject  = __webpack_require__(92)
    , _apply    = Function.apply;

  $export($export.S, 'Reflect', {
    apply: function apply(target, thisArgument, argumentsList){
      return _apply.call(aFunction(target), thisArgument, anObject(argumentsList));
    }
  });

/***/ },
/* 935 */
/***/ function(module, exports, __webpack_require__) {

  // 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
  var $export   = __webpack_require__(89)
    , create    = __webpack_require__(178)
    , aFunction = __webpack_require__(118)
    , anObject  = __webpack_require__(92)
    , isObject  = __webpack_require__(98)
    , bind      = __webpack_require__(411);

  // MS Edge supports only 2 arguments
  // FF Nightly sets third argument as `new.target`, but does not create `this` from it
  $export($export.S + $export.F * __webpack_require__(96)(function(){
    function F(){}
    return !(Reflect.construct(function(){}, [], F) instanceof F);
  }), 'Reflect', {
    construct: function construct(Target, args /*, newTarget*/){
      aFunction(Target);
      anObject(args);
      var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
      if(Target == newTarget){
        // w/o altered newTarget, optimization for 0-4 arguments
        switch(args.length){
          case 0: return new Target;
          case 1: return new Target(args[0]);
          case 2: return new Target(args[0], args[1]);
          case 3: return new Target(args[0], args[1], args[2]);
          case 4: return new Target(args[0], args[1], args[2], args[3]);
        }
        // w/o altered newTarget, lot of arguments case
        var $args = [null];
        $args.push.apply($args, args);
        return new (bind.apply(Target, $args));
      }
      // with altered newTarget, not support built-in constructors
      var proto    = newTarget.prototype
        , instance = create(isObject(proto) ? proto : Object.prototype)
        , result   = Function.apply.call(Target, instance, args);
      return isObject(result) ? result : instance;
    }
  });

/***/ },
/* 936 */
/***/ function(module, exports, __webpack_require__) {

  // 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
  var dP          = __webpack_require__(107)
    , $export     = __webpack_require__(89)
    , anObject    = __webpack_require__(92)
    , toPrimitive = __webpack_require__(145);

  // MS Edge has broken Reflect.defineProperty - throwing instead of returning false
  $export($export.S + $export.F * __webpack_require__(96)(function(){
    Reflect.defineProperty(dP.f({}, 1, {value: 1}), 1, {value: 2});
  }), 'Reflect', {
    defineProperty: function defineProperty(target, propertyKey, attributes){
      anObject(target);
      propertyKey = toPrimitive(propertyKey, true);
      anObject(attributes);
      try {
        dP.f(target, propertyKey, attributes);
        return true;
      } catch(e){
        return false;
      }
    }
  });

/***/ },
/* 937 */
/***/ function(module, exports, __webpack_require__) {

  // 26.1.4 Reflect.deleteProperty(target, propertyKey)
  var $export  = __webpack_require__(89)
    , gOPD     = __webpack_require__(122).f
    , anObject = __webpack_require__(92);

  $export($export.S, 'Reflect', {
    deleteProperty: function deleteProperty(target, propertyKey){
      var desc = gOPD(anObject(target), propertyKey);
      return desc && !desc.configurable ? false : delete target[propertyKey];
    }
  });

/***/ },
/* 938 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // 26.1.5 Reflect.enumerate(target)
  var $export  = __webpack_require__(89)
    , anObject = __webpack_require__(92);
  var Enumerate = function(iterated){
    this._t = anObject(iterated); // target
    this._i = 0;                  // next index
    var keys = this._k = []       // keys
      , key;
    for(key in iterated)keys.push(key);
  };
  __webpack_require__(322)(Enumerate, 'Object', function(){
    var that = this
      , keys = that._k
      , key;
    do {
      if(that._i >= keys.length)return {value: undefined, done: true};
    } while(!((key = keys[that._i++]) in that._t));
    return {value: key, done: false};
  });

  $export($export.S, 'Reflect', {
    enumerate: function enumerate(target){
      return new Enumerate(target);
    }
  });

/***/ },
/* 939 */
/***/ function(module, exports, __webpack_require__) {

  // 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
  var gOPD     = __webpack_require__(122)
    , $export  = __webpack_require__(89)
    , anObject = __webpack_require__(92);

  $export($export.S, 'Reflect', {
    getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey){
      return gOPD.f(anObject(target), propertyKey);
    }
  });

/***/ },
/* 940 */
/***/ function(module, exports, __webpack_require__) {

  // 26.1.8 Reflect.getPrototypeOf(target)
  var $export  = __webpack_require__(89)
    , getProto = __webpack_require__(123)
    , anObject = __webpack_require__(92);

  $export($export.S, 'Reflect', {
    getPrototypeOf: function getPrototypeOf(target){
      return getProto(anObject(target));
    }
  });

/***/ },
/* 941 */
/***/ function(module, exports, __webpack_require__) {

  // 26.1.6 Reflect.get(target, propertyKey [, receiver])
  var gOPD           = __webpack_require__(122)
    , getPrototypeOf = __webpack_require__(123)
    , has            = __webpack_require__(116)
    , $export        = __webpack_require__(89)
    , isObject       = __webpack_require__(98)
    , anObject       = __webpack_require__(92);

  function get(target, propertyKey/*, receiver*/){
    var receiver = arguments.length < 3 ? target : arguments[2]
      , desc, proto;
    if(anObject(target) === receiver)return target[propertyKey];
    if(desc = gOPD.f(target, propertyKey))return has(desc, 'value')
      ? desc.value
      : desc.get !== undefined
        ? desc.get.call(receiver)
        : undefined;
    if(isObject(proto = getPrototypeOf(target)))return get(proto, propertyKey, receiver);
  }

  $export($export.S, 'Reflect', {get: get});

/***/ },
/* 942 */
/***/ function(module, exports, __webpack_require__) {

  // 26.1.9 Reflect.has(target, propertyKey)
  var $export = __webpack_require__(89);

  $export($export.S, 'Reflect', {
    has: function has(target, propertyKey){
      return propertyKey in target;
    }
  });

/***/ },
/* 943 */
/***/ function(module, exports, __webpack_require__) {

  // 26.1.10 Reflect.isExtensible(target)
  var $export       = __webpack_require__(89)
    , anObject      = __webpack_require__(92)
    , $isExtensible = Object.isExtensible;

  $export($export.S, 'Reflect', {
    isExtensible: function isExtensible(target){
      anObject(target);
      return $isExtensible ? $isExtensible(target) : true;
    }
  });

/***/ },
/* 944 */
/***/ function(module, exports, __webpack_require__) {

  // 26.1.11 Reflect.ownKeys(target)
  var $export = __webpack_require__(89);

  $export($export.S, 'Reflect', {ownKeys: __webpack_require__(424)});

/***/ },
/* 945 */
/***/ function(module, exports, __webpack_require__) {

  // 26.1.12 Reflect.preventExtensions(target)
  var $export            = __webpack_require__(89)
    , anObject           = __webpack_require__(92)
    , $preventExtensions = Object.preventExtensions;

  $export($export.S, 'Reflect', {
    preventExtensions: function preventExtensions(target){
      anObject(target);
      try {
        if($preventExtensions)$preventExtensions(target);
        return true;
      } catch(e){
        return false;
      }
    }
  });

/***/ },
/* 946 */
/***/ function(module, exports, __webpack_require__) {

  // 26.1.14 Reflect.setPrototypeOf(target, proto)
  var $export  = __webpack_require__(89)
    , setProto = __webpack_require__(246);

  if(setProto)$export($export.S, 'Reflect', {
    setPrototypeOf: function setPrototypeOf(target, proto){
      setProto.check(target, proto);
      try {
        setProto.set(target, proto);
        return true;
      } catch(e){
        return false;
      }
    }
  });

/***/ },
/* 947 */
/***/ function(module, exports, __webpack_require__) {

  // 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
  var dP             = __webpack_require__(107)
    , gOPD           = __webpack_require__(122)
    , getPrototypeOf = __webpack_require__(123)
    , has            = __webpack_require__(116)
    , $export        = __webpack_require__(89)
    , createDesc     = __webpack_require__(161)
    , anObject       = __webpack_require__(92)
    , isObject       = __webpack_require__(98);

  function set(target, propertyKey, V/*, receiver*/){
    var receiver = arguments.length < 4 ? target : arguments[3]
      , ownDesc  = gOPD.f(anObject(target), propertyKey)
      , existingDescriptor, proto;
    if(!ownDesc){
      if(isObject(proto = getPrototypeOf(target))){
        return set(proto, propertyKey, V, receiver);
      }
      ownDesc = createDesc(0);
    }
    if(has(ownDesc, 'value')){
      if(ownDesc.writable === false || !isObject(receiver))return false;
      existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);
      existingDescriptor.value = V;
      dP.f(receiver, propertyKey, existingDescriptor);
      return true;
    }
    return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
  }

  $export($export.S, 'Reflect', {set: set});

/***/ },
/* 948 */
/***/ function(module, exports, __webpack_require__) {

  var global            = __webpack_require__(95)
    , inheritIfRequired = __webpack_require__(318)
    , dP                = __webpack_require__(107).f
    , gOPN              = __webpack_require__(179).f
    , isRegExp          = __webpack_require__(242)
    , $flags            = __webpack_require__(240)
    , $RegExp           = global.RegExp
    , Base              = $RegExp
    , proto             = $RegExp.prototype
    , re1               = /a/g
    , re2               = /a/g
    // "new" creates a new object, old webkit buggy here
    , CORRECT_NEW       = new $RegExp(re1) !== re1;

  if(__webpack_require__(106) && (!CORRECT_NEW || __webpack_require__(96)(function(){
    re2[__webpack_require__(99)('match')] = false;
    // RegExp constructor can alter flags and IsRegExp works correct with @@match
    return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
  }))){
    $RegExp = function RegExp(p, f){
      var tiRE = this instanceof $RegExp
        , piRE = isRegExp(p)
        , fiU  = f === undefined;
      return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
        : inheritIfRequired(CORRECT_NEW
          ? new Base(piRE && !fiU ? p.source : p, f)
          : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
        , tiRE ? this : proto, $RegExp);
    };
    var proxy = function(key){
      key in $RegExp || dP($RegExp, key, {
        configurable: true,
        get: function(){ return Base[key]; },
        set: function(it){ Base[key] = it; }
      });
    };
    for(var keys = gOPN(Base), i = 0; keys.length > i; )proxy(keys[i++]);
    proto.constructor = $RegExp;
    $RegExp.prototype = proto;
    __webpack_require__(119)(global, 'RegExp', $RegExp);
  }

  __webpack_require__(182)('RegExp');

/***/ },
/* 949 */
/***/ function(module, exports, __webpack_require__) {

  // @@match logic
  __webpack_require__(239)('match', 1, function(defined, MATCH, $match){
    // 21.1.3.11 String.prototype.match(regexp)
    return [function match(regexp){
      'use strict';
      var O  = defined(this)
        , fn = regexp == undefined ? undefined : regexp[MATCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
    }, $match];
  });

/***/ },
/* 950 */
/***/ function(module, exports, __webpack_require__) {

  // @@replace logic
  __webpack_require__(239)('replace', 2, function(defined, REPLACE, $replace){
    // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
    return [function replace(searchValue, replaceValue){
      'use strict';
      var O  = defined(this)
        , fn = searchValue == undefined ? undefined : searchValue[REPLACE];
      return fn !== undefined
        ? fn.call(searchValue, O, replaceValue)
        : $replace.call(String(O), searchValue, replaceValue);
    }, $replace];
  });

/***/ },
/* 951 */
/***/ function(module, exports, __webpack_require__) {

  // @@search logic
  __webpack_require__(239)('search', 1, function(defined, SEARCH, $search){
    // 21.1.3.15 String.prototype.search(regexp)
    return [function search(regexp){
      'use strict';
      var O  = defined(this)
        , fn = regexp == undefined ? undefined : regexp[SEARCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
    }, $search];
  });

/***/ },
/* 952 */
/***/ function(module, exports, __webpack_require__) {

  // @@split logic
  __webpack_require__(239)('split', 2, function(defined, SPLIT, $split){
    'use strict';
    var isRegExp   = __webpack_require__(242)
      , _split     = $split
      , $push      = [].push
      , $SPLIT     = 'split'
      , LENGTH     = 'length'
      , LAST_INDEX = 'lastIndex';
    if(
      'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
      'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
      'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
      '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
      '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
      ''[$SPLIT](/.?/)[LENGTH]
    ){
      var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
      // based on es5-shim implementation, need to rework it
      $split = function(separator, limit){
        var string = String(this);
        if(separator === undefined && limit === 0)return [];
        // If `separator` is not a regex, use native split
        if(!isRegExp(separator))return _split.call(string, separator, limit);
        var output = [];
        var flags = (separator.ignoreCase ? 'i' : '') +
                    (separator.multiline ? 'm' : '') +
                    (separator.unicode ? 'u' : '') +
                    (separator.sticky ? 'y' : '');
        var lastLastIndex = 0;
        var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
        // Make `global` and avoid `lastIndex` issues by working with a copy
        var separatorCopy = new RegExp(separator.source, flags + 'g');
        var separator2, match, lastIndex, lastLength, i;
        // Doesn't need flags gy, but they don't hurt
        if(!NPCG)separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
        while(match = separatorCopy.exec(string)){
          // `separatorCopy.lastIndex` is not reliable cross-browser
          lastIndex = match.index + match[0][LENGTH];
          if(lastIndex > lastLastIndex){
            output.push(string.slice(lastLastIndex, match.index));
            // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
            if(!NPCG && match[LENGTH] > 1)match[0].replace(separator2, function(){
              for(i = 1; i < arguments[LENGTH] - 2; i++)if(arguments[i] === undefined)match[i] = undefined;
            });
            if(match[LENGTH] > 1 && match.index < string[LENGTH])$push.apply(output, match.slice(1));
            lastLength = match[0][LENGTH];
            lastLastIndex = lastIndex;
            if(output[LENGTH] >= splitLimit)break;
          }
          if(separatorCopy[LAST_INDEX] === match.index)separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
        }
        if(lastLastIndex === string[LENGTH]){
          if(lastLength || !separatorCopy.test(''))output.push('');
        } else output.push(string.slice(lastLastIndex));
        return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
      };
    // Chakra, V8
    } else if('0'[$SPLIT](undefined, 0)[LENGTH]){
      $split = function(separator, limit){
        return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
      };
    }
    // 21.1.3.17 String.prototype.split(separator, limit)
    return [function split(separator, limit){
      var O  = defined(this)
        , fn = separator == undefined ? undefined : separator[SPLIT];
      return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
    }, $split];
  });

/***/ },
/* 953 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  __webpack_require__(431);
  var anObject    = __webpack_require__(92)
    , $flags      = __webpack_require__(240)
    , DESCRIPTORS = __webpack_require__(106)
    , TO_STRING   = 'toString'
    , $toString   = /./[TO_STRING];

  var define = function(fn){
    __webpack_require__(119)(RegExp.prototype, TO_STRING, fn, true);
  };

  // 21.2.5.14 RegExp.prototype.toString()
  if(__webpack_require__(96)(function(){ return $toString.call({source: 'a', flags: 'b'}) != '/a/b'; })){
    define(function toString(){
      var R = anObject(this);
      return '/'.concat(R.source, '/',
        'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
    });
  // FF44- RegExp#toString has a wrong name
  } else if($toString.name != TO_STRING){
    define(function toString(){
      return $toString.call(this);
    });
  }

/***/ },
/* 954 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // B.2.3.2 String.prototype.anchor(name)
  __webpack_require__(120)('anchor', function(createHTML){
    return function anchor(name){
      return createHTML(this, 'a', 'name', name);
    }
  });

/***/ },
/* 955 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // B.2.3.3 String.prototype.big()
  __webpack_require__(120)('big', function(createHTML){
    return function big(){
      return createHTML(this, 'big', '', '');
    }
  });

/***/ },
/* 956 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // B.2.3.4 String.prototype.blink()
  __webpack_require__(120)('blink', function(createHTML){
    return function blink(){
      return createHTML(this, 'blink', '', '');
    }
  });

/***/ },
/* 957 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // B.2.3.5 String.prototype.bold()
  __webpack_require__(120)('bold', function(createHTML){
    return function bold(){
      return createHTML(this, 'b', '', '');
    }
  });

/***/ },
/* 958 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $export = __webpack_require__(89)
    , $at     = __webpack_require__(329)(false);
  $export($export.P, 'String', {
    // 21.1.3.3 String.prototype.codePointAt(pos)
    codePointAt: function codePointAt(pos){
      return $at(this, pos);
    }
  });

/***/ },
/* 959 */
/***/ function(module, exports, __webpack_require__) {

  // 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
  'use strict';
  var $export   = __webpack_require__(89)
    , toLength  = __webpack_require__(112)
    , context   = __webpack_require__(330)
    , ENDS_WITH = 'endsWith'
    , $endsWith = ''[ENDS_WITH];

  $export($export.P + $export.F * __webpack_require__(316)(ENDS_WITH), 'String', {
    endsWith: function endsWith(searchString /*, endPosition = @length */){
      var that = context(this, searchString, ENDS_WITH)
        , endPosition = arguments.length > 1 ? arguments[1] : undefined
        , len    = toLength(that.length)
        , end    = endPosition === undefined ? len : Math.min(toLength(endPosition), len)
        , search = String(searchString);
      return $endsWith
        ? $endsWith.call(that, search, end)
        : that.slice(end - search.length, end) === search;
    }
  });

/***/ },
/* 960 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // B.2.3.6 String.prototype.fixed()
  __webpack_require__(120)('fixed', function(createHTML){
    return function fixed(){
      return createHTML(this, 'tt', '', '');
    }
  });

/***/ },
/* 961 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // B.2.3.7 String.prototype.fontcolor(color)
  __webpack_require__(120)('fontcolor', function(createHTML){
    return function fontcolor(color){
      return createHTML(this, 'font', 'color', color);
    }
  });

/***/ },
/* 962 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // B.2.3.8 String.prototype.fontsize(size)
  __webpack_require__(120)('fontsize', function(createHTML){
    return function fontsize(size){
      return createHTML(this, 'font', 'size', size);
    }
  });

/***/ },
/* 963 */
/***/ function(module, exports, __webpack_require__) {

  var $export        = __webpack_require__(89)
    , toIndex        = __webpack_require__(183)
    , fromCharCode   = String.fromCharCode
    , $fromCodePoint = String.fromCodePoint;

  // length should be 1, old FF problem
  $export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
    // 21.1.2.2 String.fromCodePoint(...codePoints)
    fromCodePoint: function fromCodePoint(x){ // eslint-disable-line no-unused-vars
      var res  = []
        , aLen = arguments.length
        , i    = 0
        , code;
      while(aLen > i){
        code = +arguments[i++];
        if(toIndex(code, 0x10ffff) !== code)throw RangeError(code + ' is not a valid code point');
        res.push(code < 0x10000
          ? fromCharCode(code)
          : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
        );
      } return res.join('');
    }
  });

/***/ },
/* 964 */
/***/ function(module, exports, __webpack_require__) {

  // 21.1.3.7 String.prototype.includes(searchString, position = 0)
  'use strict';
  var $export  = __webpack_require__(89)
    , context  = __webpack_require__(330)
    , INCLUDES = 'includes';

  $export($export.P + $export.F * __webpack_require__(316)(INCLUDES), 'String', {
    includes: function includes(searchString /*, position = 0 */){
      return !!~context(this, searchString, INCLUDES)
        .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
    }
  });

/***/ },
/* 965 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // B.2.3.9 String.prototype.italics()
  __webpack_require__(120)('italics', function(createHTML){
    return function italics(){
      return createHTML(this, 'i', '', '');
    }
  });

/***/ },
/* 966 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $at  = __webpack_require__(329)(true);

  // 21.1.3.27 String.prototype[@@iterator]()
  __webpack_require__(323)(String, 'String', function(iterated){
    this._t = String(iterated); // target
    this._i = 0;                // next index
  // 21.1.5.2.1 %StringIteratorPrototype%.next()
  }, function(){
    var O     = this._t
      , index = this._i
      , point;
    if(index >= O.length)return {value: undefined, done: true};
    point = $at(O, index);
    this._i += point.length;
    return {value: point, done: false};
  });

/***/ },
/* 967 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // B.2.3.10 String.prototype.link(url)
  __webpack_require__(120)('link', function(createHTML){
    return function link(url){
      return createHTML(this, 'a', 'href', url);
    }
  });

/***/ },
/* 968 */
/***/ function(module, exports, __webpack_require__) {

  var $export   = __webpack_require__(89)
    , toIObject = __webpack_require__(121)
    , toLength  = __webpack_require__(112);

  $export($export.S, 'String', {
    // 21.1.2.4 String.raw(callSite, ...substitutions)
    raw: function raw(callSite){
      var tpl  = toIObject(callSite.raw)
        , len  = toLength(tpl.length)
        , aLen = arguments.length
        , res  = []
        , i    = 0;
      while(len > i){
        res.push(String(tpl[i++]));
        if(i < aLen)res.push(String(arguments[i]));
      } return res.join('');
    }
  });

/***/ },
/* 969 */
/***/ function(module, exports, __webpack_require__) {

  var $export = __webpack_require__(89);

  $export($export.P, 'String', {
    // 21.1.3.13 String.prototype.repeat(count)
    repeat: __webpack_require__(331)
  });

/***/ },
/* 970 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // B.2.3.11 String.prototype.small()
  __webpack_require__(120)('small', function(createHTML){
    return function small(){
      return createHTML(this, 'small', '', '');
    }
  });

/***/ },
/* 971 */
/***/ function(module, exports, __webpack_require__) {

  // 21.1.3.18 String.prototype.startsWith(searchString [, position ])
  'use strict';
  var $export     = __webpack_require__(89)
    , toLength    = __webpack_require__(112)
    , context     = __webpack_require__(330)
    , STARTS_WITH = 'startsWith'
    , $startsWith = ''[STARTS_WITH];

  $export($export.P + $export.F * __webpack_require__(316)(STARTS_WITH), 'String', {
    startsWith: function startsWith(searchString /*, position = 0 */){
      var that   = context(this, searchString, STARTS_WITH)
        , index  = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length))
        , search = String(searchString);
      return $startsWith
        ? $startsWith.call(that, search, index)
        : that.slice(index, index + search.length) === search;
    }
  });

/***/ },
/* 972 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // B.2.3.12 String.prototype.strike()
  __webpack_require__(120)('strike', function(createHTML){
    return function strike(){
      return createHTML(this, 'strike', '', '');
    }
  });

/***/ },
/* 973 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // B.2.3.13 String.prototype.sub()
  __webpack_require__(120)('sub', function(createHTML){
    return function sub(){
      return createHTML(this, 'sub', '', '');
    }
  });

/***/ },
/* 974 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // B.2.3.14 String.prototype.sup()
  __webpack_require__(120)('sup', function(createHTML){
    return function sup(){
      return createHTML(this, 'sup', '', '');
    }
  });

/***/ },
/* 975 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // 21.1.3.25 String.prototype.trim()
  __webpack_require__(197)('trim', function($trim){
    return function trim(){
      return $trim(this, 3);
    };
  });

/***/ },
/* 976 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // ECMAScript 6 symbols shim
  var global         = __webpack_require__(95)
    , has            = __webpack_require__(116)
    , DESCRIPTORS    = __webpack_require__(106)
    , $export        = __webpack_require__(89)
    , redefine       = __webpack_require__(119)
    , META           = __webpack_require__(160).KEY
    , $fails         = __webpack_require__(96)
    , shared         = __webpack_require__(247)
    , setToStringTag = __webpack_require__(196)
    , uid            = __webpack_require__(184)
    , wks            = __webpack_require__(99)
    , wksExt         = __webpack_require__(429)
    , wksDefine      = __webpack_require__(335)
    , keyOf          = __webpack_require__(851)
    , enumKeys       = __webpack_require__(850)
    , isArray        = __webpack_require__(320)
    , anObject       = __webpack_require__(92)
    , toIObject      = __webpack_require__(121)
    , toPrimitive    = __webpack_require__(145)
    , createDesc     = __webpack_require__(161)
    , _create        = __webpack_require__(178)
    , gOPNExt        = __webpack_require__(421)
    , $GOPD          = __webpack_require__(122)
    , $DP            = __webpack_require__(107)
    , $keys          = __webpack_require__(180)
    , gOPD           = $GOPD.f
    , dP             = $DP.f
    , gOPN           = gOPNExt.f
    , $Symbol        = global.Symbol
    , $JSON          = global.JSON
    , _stringify     = $JSON && $JSON.stringify
    , PROTOTYPE      = 'prototype'
    , HIDDEN         = wks('_hidden')
    , TO_PRIMITIVE   = wks('toPrimitive')
    , isEnum         = {}.propertyIsEnumerable
    , SymbolRegistry = shared('symbol-registry')
    , AllSymbols     = shared('symbols')
    , OPSymbols      = shared('op-symbols')
    , ObjectProto    = Object[PROTOTYPE]
    , USE_NATIVE     = typeof $Symbol == 'function'
    , QObject        = global.QObject;
  // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
  var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

  // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
  var setSymbolDesc = DESCRIPTORS && $fails(function(){
    return _create(dP({}, 'a', {
      get: function(){ return dP(this, 'a', {value: 7}).a; }
    })).a != 7;
  }) ? function(it, key, D){
    var protoDesc = gOPD(ObjectProto, key);
    if(protoDesc)delete ObjectProto[key];
    dP(it, key, D);
    if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
  } : dP;

  var wrap = function(tag){
    var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
    sym._k = tag;
    return sym;
  };

  var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
    return typeof it == 'symbol';
  } : function(it){
    return it instanceof $Symbol;
  };

  var $defineProperty = function defineProperty(it, key, D){
    if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
    anObject(it);
    key = toPrimitive(key, true);
    anObject(D);
    if(has(AllSymbols, key)){
      if(!D.enumerable){
        if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
        it[HIDDEN][key] = true;
      } else {
        if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
        D = _create(D, {enumerable: createDesc(0, false)});
      } return setSymbolDesc(it, key, D);
    } return dP(it, key, D);
  };
  var $defineProperties = function defineProperties(it, P){
    anObject(it);
    var keys = enumKeys(P = toIObject(P))
      , i    = 0
      , l = keys.length
      , key;
    while(l > i)$defineProperty(it, key = keys[i++], P[key]);
    return it;
  };
  var $create = function create(it, P){
    return P === undefined ? _create(it) : $defineProperties(_create(it), P);
  };
  var $propertyIsEnumerable = function propertyIsEnumerable(key){
    var E = isEnum.call(this, key = toPrimitive(key, true));
    if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
    return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
  };
  var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
    it  = toIObject(it);
    key = toPrimitive(key, true);
    if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
    var D = gOPD(it, key);
    if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
    return D;
  };
  var $getOwnPropertyNames = function getOwnPropertyNames(it){
    var names  = gOPN(toIObject(it))
      , result = []
      , i      = 0
      , key;
    while(names.length > i){
      if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
    } return result;
  };
  var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
    var IS_OP  = it === ObjectProto
      , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
      , result = []
      , i      = 0
      , key;
    while(names.length > i){
      if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
    } return result;
  };

  // 19.4.1.1 Symbol([description])
  if(!USE_NATIVE){
    $Symbol = function Symbol(){
      if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
      var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
      var $set = function(value){
        if(this === ObjectProto)$set.call(OPSymbols, value);
        if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
        setSymbolDesc(this, tag, createDesc(1, value));
      };
      if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
      return wrap(tag);
    };
    redefine($Symbol[PROTOTYPE], 'toString', function toString(){
      return this._k;
    });

    $GOPD.f = $getOwnPropertyDescriptor;
    $DP.f   = $defineProperty;
    __webpack_require__(179).f = gOPNExt.f = $getOwnPropertyNames;
    __webpack_require__(210).f  = $propertyIsEnumerable;
    __webpack_require__(245).f = $getOwnPropertySymbols;

    if(DESCRIPTORS && !__webpack_require__(177)){
      redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
    }

    wksExt.f = function(name){
      return wrap(wks(name));
    }
  }

  $export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});

  for(var symbols = (
    // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
    'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
  ).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);

  for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);

  $export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
    // 19.4.2.1 Symbol.for(key)
    'for': function(key){
      return has(SymbolRegistry, key += '')
        ? SymbolRegistry[key]
        : SymbolRegistry[key] = $Symbol(key);
    },
    // 19.4.2.5 Symbol.keyFor(sym)
    keyFor: function keyFor(key){
      if(isSymbol(key))return keyOf(SymbolRegistry, key);
      throw TypeError(key + ' is not a symbol!');
    },
    useSetter: function(){ setter = true; },
    useSimple: function(){ setter = false; }
  });

  $export($export.S + $export.F * !USE_NATIVE, 'Object', {
    // 19.1.2.2 Object.create(O [, Properties])
    create: $create,
    // 19.1.2.4 Object.defineProperty(O, P, Attributes)
    defineProperty: $defineProperty,
    // 19.1.2.3 Object.defineProperties(O, Properties)
    defineProperties: $defineProperties,
    // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
    getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
    // 19.1.2.7 Object.getOwnPropertyNames(O)
    getOwnPropertyNames: $getOwnPropertyNames,
    // 19.1.2.8 Object.getOwnPropertySymbols(O)
    getOwnPropertySymbols: $getOwnPropertySymbols
  });

  // 24.3.2 JSON.stringify(value [, replacer [, space]])
  $JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
    var S = $Symbol();
    // MS Edge converts symbol values to JSON as {}
    // WebKit converts symbol values to JSON as null
    // V8 throws on boxed symbols
    return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
  })), 'JSON', {
    stringify: function stringify(it){
      if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
      var args = [it]
        , i    = 1
        , replacer, $replacer;
      while(arguments.length > i)args.push(arguments[i++]);
      replacer = args[1];
      if(typeof replacer == 'function')$replacer = replacer;
      if($replacer || !isArray(replacer))replacer = function(key, value){
        if($replacer)value = $replacer.call(this, key, value);
        if(!isSymbol(value))return value;
      };
      args[1] = replacer;
      return _stringify.apply($JSON, args);
    }
  });

  // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
  $Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(117)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
  // 19.4.3.5 Symbol.prototype[@@toStringTag]
  setToStringTag($Symbol, 'Symbol');
  // 20.2.1.9 Math[@@toStringTag]
  setToStringTag(Math, 'Math', true);
  // 24.3.3 JSON[@@toStringTag]
  setToStringTag(global.JSON, 'JSON', true);

/***/ },
/* 977 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $export      = __webpack_require__(89)
    , $typed       = __webpack_require__(248)
    , buffer       = __webpack_require__(334)
    , anObject     = __webpack_require__(92)
    , toIndex      = __webpack_require__(183)
    , toLength     = __webpack_require__(112)
    , isObject     = __webpack_require__(98)
    , TYPED_ARRAY  = __webpack_require__(99)('typed_array')
    , ArrayBuffer  = __webpack_require__(95).ArrayBuffer
    , speciesConstructor = __webpack_require__(328)
    , $ArrayBuffer = buffer.ArrayBuffer
    , $DataView    = buffer.DataView
    , $isView      = $typed.ABV && ArrayBuffer.isView
    , $slice       = $ArrayBuffer.prototype.slice
    , VIEW         = $typed.VIEW
    , ARRAY_BUFFER = 'ArrayBuffer';

  $export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), {ArrayBuffer: $ArrayBuffer});

  $export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
    // 24.1.3.1 ArrayBuffer.isView(arg)
    isView: function isView(it){
      return $isView && $isView(it) || isObject(it) && VIEW in it;
    }
  });

  $export($export.P + $export.U + $export.F * __webpack_require__(96)(function(){
    return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
  }), ARRAY_BUFFER, {
    // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
    slice: function slice(start, end){
      if($slice !== undefined && end === undefined)return $slice.call(anObject(this), start); // FF fix
      var len    = anObject(this).byteLength
        , first  = toIndex(start, len)
        , final  = toIndex(end === undefined ? len : end, len)
        , result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first))
        , viewS  = new $DataView(this)
        , viewT  = new $DataView(result)
        , index  = 0;
      while(first < final){
        viewT.setUint8(index++, viewS.getUint8(first++));
      } return result;
    }
  });

  __webpack_require__(182)(ARRAY_BUFFER);

/***/ },
/* 978 */
/***/ function(module, exports, __webpack_require__) {

  var $export = __webpack_require__(89);
  $export($export.G + $export.W + $export.F * !__webpack_require__(248).ABV, {
    DataView: __webpack_require__(334).DataView
  });

/***/ },
/* 979 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(154)('Float32', 4, function(init){
    return function Float32Array(data, byteOffset, length){
      return init(this, data, byteOffset, length);
    };
  });

/***/ },
/* 980 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(154)('Float64', 8, function(init){
    return function Float64Array(data, byteOffset, length){
      return init(this, data, byteOffset, length);
    };
  });

/***/ },
/* 981 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(154)('Int16', 2, function(init){
    return function Int16Array(data, byteOffset, length){
      return init(this, data, byteOffset, length);
    };
  });

/***/ },
/* 982 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(154)('Int32', 4, function(init){
    return function Int32Array(data, byteOffset, length){
      return init(this, data, byteOffset, length);
    };
  });

/***/ },
/* 983 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(154)('Int8', 1, function(init){
    return function Int8Array(data, byteOffset, length){
      return init(this, data, byteOffset, length);
    };
  });

/***/ },
/* 984 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(154)('Uint16', 2, function(init){
    return function Uint16Array(data, byteOffset, length){
      return init(this, data, byteOffset, length);
    };
  });

/***/ },
/* 985 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(154)('Uint32', 4, function(init){
    return function Uint32Array(data, byteOffset, length){
      return init(this, data, byteOffset, length);
    };
  });

/***/ },
/* 986 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(154)('Uint8', 1, function(init){
    return function Uint8Array(data, byteOffset, length){
      return init(this, data, byteOffset, length);
    };
  });

/***/ },
/* 987 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(154)('Uint8', 1, function(init){
    return function Uint8ClampedArray(data, byteOffset, length){
      return init(this, data, byteOffset, length);
    };
  }, true);

/***/ },
/* 988 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var weak = __webpack_require__(414);

  // 23.4 WeakSet Objects
  __webpack_require__(238)('WeakSet', function(get){
    return function WeakSet(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
  }, {
    // 23.4.3.1 WeakSet.prototype.add(value)
    add: function add(value){
      return weak.def(this, value, true);
    }
  }, weak, false, true);

/***/ },
/* 989 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // https://github.com/tc39/Array.prototype.includes
  var $export   = __webpack_require__(89)
    , $includes = __webpack_require__(237)(true);

  $export($export.P, 'Array', {
    includes: function includes(el /*, fromIndex = 0 */){
      return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
    }
  });

  __webpack_require__(193)('includes');

/***/ },
/* 990 */
/***/ function(module, exports, __webpack_require__) {

  // https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
  var $export   = __webpack_require__(89)
    , microtask = __webpack_require__(326)()
    , process   = __webpack_require__(95).process
    , isNode    = __webpack_require__(130)(process) == 'process';

  $export($export.G, {
    asap: function asap(fn){
      var domain = isNode && process.domain;
      microtask(domain ? domain.bind(fn) : fn);
    }
  });

/***/ },
/* 991 */
/***/ function(module, exports, __webpack_require__) {

  // https://github.com/ljharb/proposal-is-error
  var $export = __webpack_require__(89)
    , cof     = __webpack_require__(130);

  $export($export.S, 'Error', {
    isError: function isError(it){
      return cof(it) === 'Error';
    }
  });

/***/ },
/* 992 */
/***/ function(module, exports, __webpack_require__) {

  // https://github.com/DavidBruant/Map-Set.prototype.toJSON
  var $export  = __webpack_require__(89);

  $export($export.P + $export.R, 'Map', {toJSON: __webpack_require__(413)('Map')});

/***/ },
/* 993 */
/***/ function(module, exports, __webpack_require__) {

  // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
  var $export = __webpack_require__(89);

  $export($export.S, 'Math', {
    iaddh: function iaddh(x0, x1, y0, y1){
      var $x0 = x0 >>> 0
        , $x1 = x1 >>> 0
        , $y0 = y0 >>> 0;
      return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
    }
  });

/***/ },
/* 994 */
/***/ function(module, exports, __webpack_require__) {

  // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
  var $export = __webpack_require__(89);

  $export($export.S, 'Math', {
    imulh: function imulh(u, v){
      var UINT16 = 0xffff
        , $u = +u
        , $v = +v
        , u0 = $u & UINT16
        , v0 = $v & UINT16
        , u1 = $u >> 16
        , v1 = $v >> 16
        , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
      return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
    }
  });

/***/ },
/* 995 */
/***/ function(module, exports, __webpack_require__) {

  // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
  var $export = __webpack_require__(89);

  $export($export.S, 'Math', {
    isubh: function isubh(x0, x1, y0, y1){
      var $x0 = x0 >>> 0
        , $x1 = x1 >>> 0
        , $y0 = y0 >>> 0;
      return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
    }
  });

/***/ },
/* 996 */
/***/ function(module, exports, __webpack_require__) {

  // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
  var $export = __webpack_require__(89);

  $export($export.S, 'Math', {
    umulh: function umulh(u, v){
      var UINT16 = 0xffff
        , $u = +u
        , $v = +v
        , u0 = $u & UINT16
        , v0 = $v & UINT16
        , u1 = $u >>> 16
        , v1 = $v >>> 16
        , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
      return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
    }
  });

/***/ },
/* 997 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $export         = __webpack_require__(89)
    , toObject        = __webpack_require__(113)
    , aFunction       = __webpack_require__(118)
    , $defineProperty = __webpack_require__(107);

  // B.2.2.2 Object.prototype.__defineGetter__(P, getter)
  __webpack_require__(106) && $export($export.P + __webpack_require__(244), 'Object', {
    __defineGetter__: function __defineGetter__(P, getter){
      $defineProperty.f(toObject(this), P, {get: aFunction(getter), enumerable: true, configurable: true});
    }
  });

/***/ },
/* 998 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $export         = __webpack_require__(89)
    , toObject        = __webpack_require__(113)
    , aFunction       = __webpack_require__(118)
    , $defineProperty = __webpack_require__(107);

  // B.2.2.3 Object.prototype.__defineSetter__(P, setter)
  __webpack_require__(106) && $export($export.P + __webpack_require__(244), 'Object', {
    __defineSetter__: function __defineSetter__(P, setter){
      $defineProperty.f(toObject(this), P, {set: aFunction(setter), enumerable: true, configurable: true});
    }
  });

/***/ },
/* 999 */
/***/ function(module, exports, __webpack_require__) {

  // https://github.com/tc39/proposal-object-values-entries
  var $export  = __webpack_require__(89)
    , $entries = __webpack_require__(423)(true);

  $export($export.S, 'Object', {
    entries: function entries(it){
      return $entries(it);
    }
  });

/***/ },
/* 1000 */
/***/ function(module, exports, __webpack_require__) {

  // https://github.com/tc39/proposal-object-getownpropertydescriptors
  var $export        = __webpack_require__(89)
    , ownKeys        = __webpack_require__(424)
    , toIObject      = __webpack_require__(121)
    , gOPD           = __webpack_require__(122)
    , createProperty = __webpack_require__(313);

  $export($export.S, 'Object', {
    getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object){
      var O       = toIObject(object)
        , getDesc = gOPD.f
        , keys    = ownKeys(O)
        , result  = {}
        , i       = 0
        , key, D;
      while(keys.length > i)createProperty(result, key = keys[i++], getDesc(O, key));
      return result;
    }
  });

/***/ },
/* 1001 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $export                  = __webpack_require__(89)
    , toObject                 = __webpack_require__(113)
    , toPrimitive              = __webpack_require__(145)
    , getPrototypeOf           = __webpack_require__(123)
    , getOwnPropertyDescriptor = __webpack_require__(122).f;

  // B.2.2.4 Object.prototype.__lookupGetter__(P)
  __webpack_require__(106) && $export($export.P + __webpack_require__(244), 'Object', {
    __lookupGetter__: function __lookupGetter__(P){
      var O = toObject(this)
        , K = toPrimitive(P, true)
        , D;
      do {
        if(D = getOwnPropertyDescriptor(O, K))return D.get;
      } while(O = getPrototypeOf(O));
    }
  });

/***/ },
/* 1002 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $export                  = __webpack_require__(89)
    , toObject                 = __webpack_require__(113)
    , toPrimitive              = __webpack_require__(145)
    , getPrototypeOf           = __webpack_require__(123)
    , getOwnPropertyDescriptor = __webpack_require__(122).f;

  // B.2.2.5 Object.prototype.__lookupSetter__(P)
  __webpack_require__(106) && $export($export.P + __webpack_require__(244), 'Object', {
    __lookupSetter__: function __lookupSetter__(P){
      var O = toObject(this)
        , K = toPrimitive(P, true)
        , D;
      do {
        if(D = getOwnPropertyDescriptor(O, K))return D.set;
      } while(O = getPrototypeOf(O));
    }
  });

/***/ },
/* 1003 */
/***/ function(module, exports, __webpack_require__) {

  // https://github.com/tc39/proposal-object-values-entries
  var $export = __webpack_require__(89)
    , $values = __webpack_require__(423)(false);

  $export($export.S, 'Object', {
    values: function values(it){
      return $values(it);
    }
  });

/***/ },
/* 1004 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // https://github.com/zenparsing/es-observable
  var $export     = __webpack_require__(89)
    , global      = __webpack_require__(95)
    , core        = __webpack_require__(143)
    , microtask   = __webpack_require__(326)()
    , OBSERVABLE  = __webpack_require__(99)('observable')
    , aFunction   = __webpack_require__(118)
    , anObject    = __webpack_require__(92)
    , anInstance  = __webpack_require__(159)
    , redefineAll = __webpack_require__(181)
    , hide        = __webpack_require__(117)
    , forOf       = __webpack_require__(195)
    , RETURN      = forOf.RETURN;

  var getMethod = function(fn){
    return fn == null ? undefined : aFunction(fn);
  };

  var cleanupSubscription = function(subscription){
    var cleanup = subscription._c;
    if(cleanup){
      subscription._c = undefined;
      cleanup();
    }
  };

  var subscriptionClosed = function(subscription){
    return subscription._o === undefined;
  };

  var closeSubscription = function(subscription){
    if(!subscriptionClosed(subscription)){
      subscription._o = undefined;
      cleanupSubscription(subscription);
    }
  };

  var Subscription = function(observer, subscriber){
    anObject(observer);
    this._c = undefined;
    this._o = observer;
    observer = new SubscriptionObserver(this);
    try {
      var cleanup      = subscriber(observer)
        , subscription = cleanup;
      if(cleanup != null){
        if(typeof cleanup.unsubscribe === 'function')cleanup = function(){ subscription.unsubscribe(); };
        else aFunction(cleanup);
        this._c = cleanup;
      }
    } catch(e){
      observer.error(e);
      return;
    } if(subscriptionClosed(this))cleanupSubscription(this);
  };

  Subscription.prototype = redefineAll({}, {
    unsubscribe: function unsubscribe(){ closeSubscription(this); }
  });

  var SubscriptionObserver = function(subscription){
    this._s = subscription;
  };

  SubscriptionObserver.prototype = redefineAll({}, {
    next: function next(value){
      var subscription = this._s;
      if(!subscriptionClosed(subscription)){
        var observer = subscription._o;
        try {
          var m = getMethod(observer.next);
          if(m)return m.call(observer, value);
        } catch(e){
          try {
            closeSubscription(subscription);
          } finally {
            throw e;
          }
        }
      }
    },
    error: function error(value){
      var subscription = this._s;
      if(subscriptionClosed(subscription))throw value;
      var observer = subscription._o;
      subscription._o = undefined;
      try {
        var m = getMethod(observer.error);
        if(!m)throw value;
        value = m.call(observer, value);
      } catch(e){
        try {
          cleanupSubscription(subscription);
        } finally {
          throw e;
        }
      } cleanupSubscription(subscription);
      return value;
    },
    complete: function complete(value){
      var subscription = this._s;
      if(!subscriptionClosed(subscription)){
        var observer = subscription._o;
        subscription._o = undefined;
        try {
          var m = getMethod(observer.complete);
          value = m ? m.call(observer, value) : undefined;
        } catch(e){
          try {
            cleanupSubscription(subscription);
          } finally {
            throw e;
          }
        } cleanupSubscription(subscription);
        return value;
      }
    }
  });

  var $Observable = function Observable(subscriber){
    anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
  };

  redefineAll($Observable.prototype, {
    subscribe: function subscribe(observer){
      return new Subscription(observer, this._f);
    },
    forEach: function forEach(fn){
      var that = this;
      return new (core.Promise || global.Promise)(function(resolve, reject){
        aFunction(fn);
        var subscription = that.subscribe({
          next : function(value){
            try {
              return fn(value);
            } catch(e){
              reject(e);
              subscription.unsubscribe();
            }
          },
          error: reject,
          complete: resolve
        });
      });
    }
  });

  redefineAll($Observable, {
    from: function from(x){
      var C = typeof this === 'function' ? this : $Observable;
      var method = getMethod(anObject(x)[OBSERVABLE]);
      if(method){
        var observable = anObject(method.call(x));
        return observable.constructor === C ? observable : new C(function(observer){
          return observable.subscribe(observer);
        });
      }
      return new C(function(observer){
        var done = false;
        microtask(function(){
          if(!done){
            try {
              if(forOf(x, false, function(it){
                observer.next(it);
                if(done)return RETURN;
              }) === RETURN)return;
            } catch(e){
              if(done)throw e;
              observer.error(e);
              return;
            } observer.complete();
          }
        });
        return function(){ done = true; };
      });
    },
    of: function of(){
      for(var i = 0, l = arguments.length, items = Array(l); i < l;)items[i] = arguments[i++];
      return new (typeof this === 'function' ? this : $Observable)(function(observer){
        var done = false;
        microtask(function(){
          if(!done){
            for(var i = 0; i < items.length; ++i){
              observer.next(items[i]);
              if(done)return;
            } observer.complete();
          }
        });
        return function(){ done = true; };
      });
    }
  });

  hide($Observable.prototype, OBSERVABLE, function(){ return this; });

  $export($export.G, {Observable: $Observable});

  __webpack_require__(182)('Observable');

/***/ },
/* 1005 */
/***/ function(module, exports, __webpack_require__) {

  var metadata                  = __webpack_require__(153)
    , anObject                  = __webpack_require__(92)
    , toMetaKey                 = metadata.key
    , ordinaryDefineOwnMetadata = metadata.set;

  metadata.exp({defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey){
    ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
  }});

/***/ },
/* 1006 */
/***/ function(module, exports, __webpack_require__) {

  var metadata               = __webpack_require__(153)
    , anObject               = __webpack_require__(92)
    , toMetaKey              = metadata.key
    , getOrCreateMetadataMap = metadata.map
    , store                  = metadata.store;

  metadata.exp({deleteMetadata: function deleteMetadata(metadataKey, target /*, targetKey */){
    var targetKey   = arguments.length < 3 ? undefined : toMetaKey(arguments[2])
      , metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
    if(metadataMap === undefined || !metadataMap['delete'](metadataKey))return false;
    if(metadataMap.size)return true;
    var targetMetadata = store.get(target);
    targetMetadata['delete'](targetKey);
    return !!targetMetadata.size || store['delete'](target);
  }});

/***/ },
/* 1007 */
/***/ function(module, exports, __webpack_require__) {

  var Set                     = __webpack_require__(432)
    , from                    = __webpack_require__(409)
    , metadata                = __webpack_require__(153)
    , anObject                = __webpack_require__(92)
    , getPrototypeOf          = __webpack_require__(123)
    , ordinaryOwnMetadataKeys = metadata.keys
    , toMetaKey               = metadata.key;

  var ordinaryMetadataKeys = function(O, P){
    var oKeys  = ordinaryOwnMetadataKeys(O, P)
      , parent = getPrototypeOf(O);
    if(parent === null)return oKeys;
    var pKeys  = ordinaryMetadataKeys(parent, P);
    return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
  };

  metadata.exp({getMetadataKeys: function getMetadataKeys(target /*, targetKey */){
    return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
  }});

/***/ },
/* 1008 */
/***/ function(module, exports, __webpack_require__) {

  var metadata               = __webpack_require__(153)
    , anObject               = __webpack_require__(92)
    , getPrototypeOf         = __webpack_require__(123)
    , ordinaryHasOwnMetadata = metadata.has
    , ordinaryGetOwnMetadata = metadata.get
    , toMetaKey              = metadata.key;

  var ordinaryGetMetadata = function(MetadataKey, O, P){
    var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
    if(hasOwn)return ordinaryGetOwnMetadata(MetadataKey, O, P);
    var parent = getPrototypeOf(O);
    return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
  };

  metadata.exp({getMetadata: function getMetadata(metadataKey, target /*, targetKey */){
    return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
  }});

/***/ },
/* 1009 */
/***/ function(module, exports, __webpack_require__) {

  var metadata                = __webpack_require__(153)
    , anObject                = __webpack_require__(92)
    , ordinaryOwnMetadataKeys = metadata.keys
    , toMetaKey               = metadata.key;

  metadata.exp({getOwnMetadataKeys: function getOwnMetadataKeys(target /*, targetKey */){
    return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
  }});

/***/ },
/* 1010 */
/***/ function(module, exports, __webpack_require__) {

  var metadata               = __webpack_require__(153)
    , anObject               = __webpack_require__(92)
    , ordinaryGetOwnMetadata = metadata.get
    , toMetaKey              = metadata.key;

  metadata.exp({getOwnMetadata: function getOwnMetadata(metadataKey, target /*, targetKey */){
    return ordinaryGetOwnMetadata(metadataKey, anObject(target)
      , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
  }});

/***/ },
/* 1011 */
/***/ function(module, exports, __webpack_require__) {

  var metadata               = __webpack_require__(153)
    , anObject               = __webpack_require__(92)
    , getPrototypeOf         = __webpack_require__(123)
    , ordinaryHasOwnMetadata = metadata.has
    , toMetaKey              = metadata.key;

  var ordinaryHasMetadata = function(MetadataKey, O, P){
    var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
    if(hasOwn)return true;
    var parent = getPrototypeOf(O);
    return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
  };

  metadata.exp({hasMetadata: function hasMetadata(metadataKey, target /*, targetKey */){
    return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
  }});

/***/ },
/* 1012 */
/***/ function(module, exports, __webpack_require__) {

  var metadata               = __webpack_require__(153)
    , anObject               = __webpack_require__(92)
    , ordinaryHasOwnMetadata = metadata.has
    , toMetaKey              = metadata.key;

  metadata.exp({hasOwnMetadata: function hasOwnMetadata(metadataKey, target /*, targetKey */){
    return ordinaryHasOwnMetadata(metadataKey, anObject(target)
      , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
  }});

/***/ },
/* 1013 */
/***/ function(module, exports, __webpack_require__) {

  var metadata                  = __webpack_require__(153)
    , anObject                  = __webpack_require__(92)
    , aFunction                 = __webpack_require__(118)
    , toMetaKey                 = metadata.key
    , ordinaryDefineOwnMetadata = metadata.set;

  metadata.exp({metadata: function metadata(metadataKey, metadataValue){
    return function decorator(target, targetKey){
      ordinaryDefineOwnMetadata(
        metadataKey, metadataValue,
        (targetKey !== undefined ? anObject : aFunction)(target),
        toMetaKey(targetKey)
      );
    };
  }});

/***/ },
/* 1014 */
/***/ function(module, exports, __webpack_require__) {

  // https://github.com/DavidBruant/Map-Set.prototype.toJSON
  var $export  = __webpack_require__(89);

  $export($export.P + $export.R, 'Set', {toJSON: __webpack_require__(413)('Set')});

/***/ },
/* 1015 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // https://github.com/mathiasbynens/String.prototype.at
  var $export = __webpack_require__(89)
    , $at     = __webpack_require__(329)(true);

  $export($export.P, 'String', {
    at: function at(pos){
      return $at(this, pos);
    }
  });

/***/ },
/* 1016 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // https://tc39.github.io/String.prototype.matchAll/
  var $export     = __webpack_require__(89)
    , defined     = __webpack_require__(131)
    , toLength    = __webpack_require__(112)
    , isRegExp    = __webpack_require__(242)
    , getFlags    = __webpack_require__(240)
    , RegExpProto = RegExp.prototype;

  var $RegExpStringIterator = function(regexp, string){
    this._r = regexp;
    this._s = string;
  };

  __webpack_require__(322)($RegExpStringIterator, 'RegExp String', function next(){
    var match = this._r.exec(this._s);
    return {value: match, done: match === null};
  });

  $export($export.P, 'String', {
    matchAll: function matchAll(regexp){
      defined(this);
      if(!isRegExp(regexp))throw TypeError(regexp + ' is not a regexp!');
      var S     = String(this)
        , flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp)
        , rx    = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
      rx.lastIndex = toLength(regexp.lastIndex);
      return new $RegExpStringIterator(rx, S);
    }
  });

/***/ },
/* 1017 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // https://github.com/tc39/proposal-string-pad-start-end
  var $export = __webpack_require__(89)
    , $pad    = __webpack_require__(428);

  $export($export.P, 'String', {
    padEnd: function padEnd(maxLength /*, fillString = ' ' */){
      return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
    }
  });

/***/ },
/* 1018 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // https://github.com/tc39/proposal-string-pad-start-end
  var $export = __webpack_require__(89)
    , $pad    = __webpack_require__(428);

  $export($export.P, 'String', {
    padStart: function padStart(maxLength /*, fillString = ' ' */){
      return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
    }
  });

/***/ },
/* 1019 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // https://github.com/sebmarkbage/ecmascript-string-left-right-trim
  __webpack_require__(197)('trimLeft', function($trim){
    return function trimLeft(){
      return $trim(this, 1);
    };
  }, 'trimStart');

/***/ },
/* 1020 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // https://github.com/sebmarkbage/ecmascript-string-left-right-trim
  __webpack_require__(197)('trimRight', function($trim){
    return function trimRight(){
      return $trim(this, 2);
    };
  }, 'trimEnd');

/***/ },
/* 1021 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(335)('asyncIterator');

/***/ },
/* 1022 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(335)('observable');

/***/ },
/* 1023 */
/***/ function(module, exports, __webpack_require__) {

  // https://github.com/ljharb/proposal-global
  var $export = __webpack_require__(89);

  $export($export.S, 'System', {global: __webpack_require__(95)});

/***/ },
/* 1024 */
/***/ function(module, exports, __webpack_require__) {

  var $iterators    = __webpack_require__(337)
    , redefine      = __webpack_require__(119)
    , global        = __webpack_require__(95)
    , hide          = __webpack_require__(117)
    , Iterators     = __webpack_require__(176)
    , wks           = __webpack_require__(99)
    , ITERATOR      = wks('iterator')
    , TO_STRING_TAG = wks('toStringTag')
    , ArrayValues   = Iterators.Array;

  for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
    var NAME       = collections[i]
      , Collection = global[NAME]
      , proto      = Collection && Collection.prototype
      , key;
    if(proto){
      if(!proto[ITERATOR])hide(proto, ITERATOR, ArrayValues);
      if(!proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
      Iterators[NAME] = ArrayValues;
      for(key in $iterators)if(!proto[key])redefine(proto, key, $iterators[key], true);
    }
  }

/***/ },
/* 1025 */
/***/ function(module, exports, __webpack_require__) {

  var $export = __webpack_require__(89)
    , $task   = __webpack_require__(333);
  $export($export.G + $export.B, {
    setImmediate:   $task.set,
    clearImmediate: $task.clear
  });

/***/ },
/* 1026 */
/***/ function(module, exports, __webpack_require__) {

  // ie9- setTimeout & setInterval additional parameters fix
  var global     = __webpack_require__(95)
    , $export    = __webpack_require__(89)
    , invoke     = __webpack_require__(241)
    , partial    = __webpack_require__(852)
    , navigator  = global.navigator
    , MSIE       = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check
  var wrap = function(set){
    return MSIE ? function(fn, time /*, ...args */){
      return set(invoke(
        partial,
        [].slice.call(arguments, 2),
        typeof fn == 'function' ? fn : Function(fn)
      ), time);
    } : set;
  };
  $export($export.G + $export.B + $export.F * MSIE, {
    setTimeout:  wrap(global.setTimeout),
    setInterval: wrap(global.setInterval)
  });

/***/ },
/* 1027 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(976);
  __webpack_require__(915);
  __webpack_require__(917);
  __webpack_require__(916);
  __webpack_require__(919);
  __webpack_require__(921);
  __webpack_require__(926);
  __webpack_require__(920);
  __webpack_require__(918);
  __webpack_require__(928);
  __webpack_require__(927);
  __webpack_require__(923);
  __webpack_require__(924);
  __webpack_require__(922);
  __webpack_require__(914);
  __webpack_require__(925);
  __webpack_require__(929);
  __webpack_require__(930);
  __webpack_require__(882);
  __webpack_require__(884);
  __webpack_require__(883);
  __webpack_require__(932);
  __webpack_require__(931);
  __webpack_require__(902);
  __webpack_require__(912);
  __webpack_require__(913);
  __webpack_require__(903);
  __webpack_require__(904);
  __webpack_require__(905);
  __webpack_require__(906);
  __webpack_require__(907);
  __webpack_require__(908);
  __webpack_require__(909);
  __webpack_require__(910);
  __webpack_require__(911);
  __webpack_require__(885);
  __webpack_require__(886);
  __webpack_require__(887);
  __webpack_require__(888);
  __webpack_require__(889);
  __webpack_require__(890);
  __webpack_require__(891);
  __webpack_require__(892);
  __webpack_require__(893);
  __webpack_require__(894);
  __webpack_require__(895);
  __webpack_require__(896);
  __webpack_require__(897);
  __webpack_require__(898);
  __webpack_require__(899);
  __webpack_require__(900);
  __webpack_require__(901);
  __webpack_require__(963);
  __webpack_require__(968);
  __webpack_require__(975);
  __webpack_require__(966);
  __webpack_require__(958);
  __webpack_require__(959);
  __webpack_require__(964);
  __webpack_require__(969);
  __webpack_require__(971);
  __webpack_require__(954);
  __webpack_require__(955);
  __webpack_require__(956);
  __webpack_require__(957);
  __webpack_require__(960);
  __webpack_require__(961);
  __webpack_require__(962);
  __webpack_require__(965);
  __webpack_require__(967);
  __webpack_require__(970);
  __webpack_require__(972);
  __webpack_require__(973);
  __webpack_require__(974);
  __webpack_require__(877);
  __webpack_require__(879);
  __webpack_require__(878);
  __webpack_require__(881);
  __webpack_require__(880);
  __webpack_require__(866);
  __webpack_require__(864);
  __webpack_require__(870);
  __webpack_require__(867);
  __webpack_require__(873);
  __webpack_require__(875);
  __webpack_require__(863);
  __webpack_require__(869);
  __webpack_require__(860);
  __webpack_require__(874);
  __webpack_require__(858);
  __webpack_require__(872);
  __webpack_require__(871);
  __webpack_require__(865);
  __webpack_require__(868);
  __webpack_require__(857);
  __webpack_require__(859);
  __webpack_require__(862);
  __webpack_require__(861);
  __webpack_require__(876);
  __webpack_require__(337);
  __webpack_require__(948);
  __webpack_require__(953);
  __webpack_require__(431);
  __webpack_require__(949);
  __webpack_require__(950);
  __webpack_require__(951);
  __webpack_require__(952);
  __webpack_require__(933);
  __webpack_require__(430);
  __webpack_require__(432);
  __webpack_require__(433);
  __webpack_require__(988);
  __webpack_require__(977);
  __webpack_require__(978);
  __webpack_require__(983);
  __webpack_require__(986);
  __webpack_require__(987);
  __webpack_require__(981);
  __webpack_require__(984);
  __webpack_require__(982);
  __webpack_require__(985);
  __webpack_require__(979);
  __webpack_require__(980);
  __webpack_require__(934);
  __webpack_require__(935);
  __webpack_require__(936);
  __webpack_require__(937);
  __webpack_require__(938);
  __webpack_require__(941);
  __webpack_require__(939);
  __webpack_require__(940);
  __webpack_require__(942);
  __webpack_require__(943);
  __webpack_require__(944);
  __webpack_require__(945);
  __webpack_require__(947);
  __webpack_require__(946);
  __webpack_require__(989);
  __webpack_require__(1015);
  __webpack_require__(1018);
  __webpack_require__(1017);
  __webpack_require__(1019);
  __webpack_require__(1020);
  __webpack_require__(1016);
  __webpack_require__(1021);
  __webpack_require__(1022);
  __webpack_require__(1000);
  __webpack_require__(1003);
  __webpack_require__(999);
  __webpack_require__(997);
  __webpack_require__(998);
  __webpack_require__(1001);
  __webpack_require__(1002);
  __webpack_require__(992);
  __webpack_require__(1014);
  __webpack_require__(1023);
  __webpack_require__(991);
  __webpack_require__(993);
  __webpack_require__(995);
  __webpack_require__(994);
  __webpack_require__(996);
  __webpack_require__(1005);
  __webpack_require__(1006);
  __webpack_require__(1008);
  __webpack_require__(1007);
  __webpack_require__(1010);
  __webpack_require__(1009);
  __webpack_require__(1011);
  __webpack_require__(1012);
  __webpack_require__(1013);
  __webpack_require__(990);
  __webpack_require__(1004);
  __webpack_require__(1026);
  __webpack_require__(1025);
  __webpack_require__(1024);
  module.exports = __webpack_require__(143);

/***/ },
/* 1028 */
/***/ function(module, exports, __webpack_require__) {

  
  /**
   * This is the web browser implementation of `debug()`.
   *
   * Expose `debug()` as the module.
   */

  exports = module.exports = __webpack_require__(434);
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.storage = 'undefined' != typeof chrome
                 && 'undefined' != typeof chrome.storage
                    ? chrome.storage.local
                    : localstorage();

  /**
   * Colors.
   */

  exports.colors = [
    'lightseagreen',
    'forestgreen',
    'goldenrod',
    'dodgerblue',
    'darkorchid',
    'crimson'
  ];

  /**
   * Currently only WebKit-based Web Inspectors, Firefox >= v31,
   * and the Firebug extension (any Firefox version) are known
   * to support "%c" CSS customizations.
   *
   * TODO: add a `localStorage` variable to explicitly enable/disable colors
   */

  function useColors() {
    // is webkit? http://stackoverflow.com/a/16459606/376773
    return ('WebkitAppearance' in document.documentElement.style) ||
      // is firebug? http://stackoverflow.com/a/398120/376773
      (window.console && (console.firebug || (console.exception && console.table))) ||
      // is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
  }

  /**
   * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
   */

  exports.formatters.j = function(v) {
    return JSON.stringify(v);
  };


  /**
   * Colorize log arguments if enabled.
   *
   * @api public
   */

  function formatArgs() {
    var args = arguments;
    var useColors = this.useColors;

    args[0] = (useColors ? '%c' : '')
      + this.namespace
      + (useColors ? ' %c' : ' ')
      + args[0]
      + (useColors ? '%c ' : ' ')
      + '+' + exports.humanize(this.diff);

    if (!useColors) return args;

    var c = 'color: ' + this.color;
    args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

    // the final "%c" is somewhat tricky, because there could be other
    // arguments passed either before or after the %c, so we need to
    // figure out the correct index to insert the CSS into
    var index = 0;
    var lastC = 0;
    args[0].replace(/%[a-z%]/g, function(match) {
      if ('%%' === match) return;
      index++;
      if ('%c' === match) {
        // we only are interested in the *last* %c
        // (the user may have provided their own)
        lastC = index;
      }
    });

    args.splice(lastC, 0, c);
    return args;
  }

  /**
   * Invokes `console.log()` when available.
   * No-op when `console.log` is not a "function".
   *
   * @api public
   */

  function log() {
    // this hackery is required for IE8/9, where
    // the `console.log` function doesn't have 'apply'
    return 'object' === typeof console
      && console.log
      && Function.prototype.apply.call(console.log, console, arguments);
  }

  /**
   * Save `namespaces`.
   *
   * @param {String} namespaces
   * @api private
   */

  function save(namespaces) {
    try {
      if (null == namespaces) {
        exports.storage.removeItem('debug');
      } else {
        exports.storage.debug = namespaces;
      }
    } catch(e) {}
  }

  /**
   * Load `namespaces`.
   *
   * @return {String} returns the previously persisted debug modes
   * @api private
   */

  function load() {
    var r;
    try {
      r = exports.storage.debug;
    } catch(e) {}
    return r;
  }

  /**
   * Enable namespaces listed in `localStorage.debug` initially.
   */

  exports.enable(load());

  /**
   * Localstorage attempts to return the localstorage.
   *
   * This is necessary because safari throws
   * when a user disables cookies/localstorage
   * and you attempt to access it.
   *
   * @return {LocalStorage}
   * @api private
   */

  function localstorage(){
    try {
      return window.localStorage;
    } catch (e) {}
  }


/***/ },
/* 1029 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(process) {
  /**
   * Module dependencies.
   */

  var tty = __webpack_require__(1295);
  var util = __webpack_require__(168);

  /**
   * This is the Node.js implementation of `debug()`.
   *
   * Expose `debug()` as the module.
   */

  exports = module.exports = __webpack_require__(434);
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;

  /**
   * Colors.
   */

  exports.colors = [6, 2, 3, 4, 5, 1];

  /**
   * The file descriptor to write the `debug()` calls to.
   * Set the `DEBUG_FD` env variable to override with another value. i.e.:
   *
   *   $ DEBUG_FD=3 node script.js 3>debug.log
   */

  var fd = parseInt(process.env.DEBUG_FD, 10) || 2;
  var stream = 1 === fd ? process.stdout :
               2 === fd ? process.stderr :
               createWritableStdioStream(fd);

  /**
   * Is stdout a TTY? Colored output is enabled when `true`.
   */

  function useColors() {
    var debugColors = (process.env.DEBUG_COLORS || '').trim().toLowerCase();
    if (0 === debugColors.length) {
      return tty.isatty(fd);
    } else {
      return '0' !== debugColors
          && 'no' !== debugColors
          && 'false' !== debugColors
          && 'disabled' !== debugColors;
    }
  }

  /**
   * Map %o to `util.inspect()`, since Node doesn't do that out of the box.
   */

  var inspect = (4 === util.inspect.length ?
    // node <= 0.8.x
    function (v, colors) {
      return util.inspect(v, void 0, void 0, colors);
    } :
    // node > 0.8.x
    function (v, colors) {
      return util.inspect(v, { colors: colors });
    }
  );

  exports.formatters.o = function(v) {
    return inspect(v, this.useColors)
      .replace(/\s*\n\s*/g, ' ');
  };

  /**
   * Adds ANSI color escape codes if enabled.
   *
   * @api public
   */

  function formatArgs() {
    var args = arguments;
    var useColors = this.useColors;
    var name = this.namespace;

    if (useColors) {
      var c = this.color;

      args[0] = '  \u001b[3' + c + ';1m' + name + ' '
        + '\u001b[0m'
        + args[0] + '\u001b[3' + c + 'm'
        + ' +' + exports.humanize(this.diff) + '\u001b[0m';
    } else {
      args[0] = new Date().toUTCString()
        + ' ' + name + ' ' + args[0];
    }
    return args;
  }

  /**
   * Invokes `console.error()` with the specified arguments.
   */

  function log() {
    return stream.write(util.format.apply(this, arguments) + '\n');
  }

  /**
   * Save `namespaces`.
   *
   * @param {String} namespaces
   * @api private
   */

  function save(namespaces) {
    if (null == namespaces) {
      // If you set a process.env field to null or undefined, it gets cast to the
      // string 'null' or 'undefined'. Just delete instead.
      delete process.env.DEBUG;
    } else {
      process.env.DEBUG = namespaces;
    }
  }

  /**
   * Load `namespaces`.
   *
   * @return {String} returns the previously persisted debug modes
   * @api private
   */

  function load() {
    return process.env.DEBUG;
  }

  /**
   * Copied from `node/src/node.js`.
   *
   * XXX: It's lame that node doesn't expose this API out-of-the-box. It also
   * relies on the undocumented `tty_wrap.guessHandleType()` which is also lame.
   */

  function createWritableStdioStream (fd) {
    var stream;
    var tty_wrap = process.binding('tty_wrap');

    // Note stream._type is used for test-module-load-list.js

    switch (tty_wrap.guessHandleType(fd)) {
      case 'TTY':
        stream = new tty.WriteStream(fd);
        stream._type = 'tty';

        // Hack to have stream not keep the event loop alive.
        // See https://github.com/joyent/node/issues/1726
        if (stream._handle && stream._handle.unref) {
          stream._handle.unref();
        }
        break;

      case 'FILE':
        var fs = __webpack_require__(126);
        stream = new fs.SyncWriteStream(fd, { autoClose: false });
        stream._type = 'fs';
        break;

      case 'PIPE':
      case 'TCP':
        var net = __webpack_require__(126);
        stream = new net.Socket({
          fd: fd,
          readable: false,
          writable: true
        });

        // FIXME Should probably have an option in net.Socket to create a
        // stream from an existing fd which is writable only. But for now
        // we'll just add this hack and set the `readable` member to false.
        // Test: ./node test/fixtures/echo.js < /etc/passwd
        stream.readable = false;
        stream.read = null;
        stream._type = 'pipe';

        // FIXME Hack to have stream not keep the event loop alive.
        // See https://github.com/joyent/node/issues/1726
        if (stream._handle && stream._handle.unref) {
          stream._handle.unref();
        }
        break;

      default:
        // Probably an error on in uv_guess_handle()
        throw new Error('Implement me. Unknown stream file type!');
    }

    // For supporting legacy API we put the FD here.
    stream.fd = fd;

    stream._isStdio = true;

    return stream;
  }

  /**
   * Enable namespaces listed in `process.env.DEBUG` initially.
   */

  exports.enable(load());

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(111)))

/***/ },
/* 1030 */
/***/ function(module, exports, __webpack_require__) {

  var pSlice = Array.prototype.slice;
  var objectKeys = __webpack_require__(1032);
  var isArguments = __webpack_require__(1031);

  var deepEqual = module.exports = function (actual, expected, opts) {
    if (!opts) opts = {};
    // 7.1. All identical values are equivalent, as determined by ===.
    if (actual === expected) {
      return true;

    } else if (actual instanceof Date && expected instanceof Date) {
      return actual.getTime() === expected.getTime();

    // 7.3. Other pairs that do not both pass typeof value == 'object',
    // equivalence is determined by ==.
    } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
      return opts.strict ? actual === expected : actual == expected;

    // 7.4. For all other Object pairs, including Array objects, equivalence is
    // determined by having the same number of owned properties (as verified
    // with Object.prototype.hasOwnProperty.call), the same set of keys
    // (although not necessarily the same order), equivalent values for every
    // corresponding key, and an identical 'prototype' property. Note: this
    // accounts for both named and indexed properties on Arrays.
    } else {
      return objEquiv(actual, expected, opts);
    }
  }

  function isUndefinedOrNull(value) {
    return value === null || value === undefined;
  }

  function isBuffer (x) {
    if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
    if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
      return false;
    }
    if (x.length > 0 && typeof x[0] !== 'number') return false;
    return true;
  }

  function objEquiv(a, b, opts) {
    var i, key;
    if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
      return false;
    // an identical 'prototype' property.
    if (a.prototype !== b.prototype) return false;
    //~~~I've managed to break Object.keys through screwy arguments passing.
    //   Converting to array solves the problem.
    if (isArguments(a)) {
      if (!isArguments(b)) {
        return false;
      }
      a = pSlice.call(a);
      b = pSlice.call(b);
      return deepEqual(a, b, opts);
    }
    if (isBuffer(a)) {
      if (!isBuffer(b)) {
        return false;
      }
      if (a.length !== b.length) return false;
      for (i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) return false;
      }
      return true;
    }
    try {
      var ka = objectKeys(a),
          kb = objectKeys(b);
    } catch (e) {//happens when one is a string literal and the other isn't
      return false;
    }
    // having the same number of owned properties (keys incorporates
    // hasOwnProperty)
    if (ka.length != kb.length)
      return false;
    //the same set of keys (although not necessarily the same order),
    ka.sort();
    kb.sort();
    //~~~cheap key test
    for (i = ka.length - 1; i >= 0; i--) {
      if (ka[i] != kb[i])
        return false;
    }
    //equivalent values for every corresponding key, and
    //~~~possibly expensive deep test
    for (i = ka.length - 1; i >= 0; i--) {
      key = ka[i];
      if (!deepEqual(a[key], b[key], opts)) return false;
    }
    return typeof a === typeof b;
  }


/***/ },
/* 1031 */
/***/ function(module, exports) {

  var supportsArgumentsClass = (function(){
    return Object.prototype.toString.call(arguments)
  })() == '[object Arguments]';

  exports = module.exports = supportsArgumentsClass ? supported : unsupported;

  exports.supported = supported;
  function supported(object) {
    return Object.prototype.toString.call(object) == '[object Arguments]';
  };

  exports.unsupported = unsupported;
  function unsupported(object){
    return object &&
      typeof object == 'object' &&
      typeof object.length == 'number' &&
      Object.prototype.hasOwnProperty.call(object, 'callee') &&
      !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
      false;
  };


/***/ },
/* 1032 */
/***/ function(module, exports) {

  exports = module.exports = typeof Object.keys === 'function'
    ? Object.keys : shim;

  exports.shim = shim;
  function shim (obj) {
    var keys = [];
    for (var key in obj) keys.push(key);
    return keys;
  }


/***/ },
/* 1033 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var repeating = __webpack_require__(1282);

  // detect either spaces or tabs but not both to properly handle tabs
  // for indentation and spaces for alignment
  var INDENT_RE = /^(?:( )+|\t+)/;

  function getMostUsed(indents) {
  	var result = 0;
  	var maxUsed = 0;
  	var maxWeight = 0;

  	for (var n in indents) {
  		var indent = indents[n];
  		var u = indent[0];
  		var w = indent[1];

  		if (u > maxUsed || u === maxUsed && w > maxWeight) {
  			maxUsed = u;
  			maxWeight = w;
  			result = +n;
  		}
  	}

  	return result;
  }

  module.exports = function (str) {
  	if (typeof str !== 'string') {
  		throw new TypeError('Expected a string');
  	}

  	// used to see if tabs or spaces are the most used
  	var tabs = 0;
  	var spaces = 0;

  	// remember the size of previous line's indentation
  	var prev = 0;

  	// remember how many indents/unindents as occurred for a given size
  	// and how much lines follow a given indentation
  	//
  	// indents = {
  	//    3: [1, 0],
  	//    4: [1, 5],
  	//    5: [1, 0],
  	//   12: [1, 0],
  	// }
  	var indents = {};

  	// pointer to the array of last used indent
  	var current;

  	// whether the last action was an indent (opposed to an unindent)
  	var isIndent;

  	str.split(/\n/g).forEach(function (line) {
  		if (!line) {
  			// ignore empty lines
  			return;
  		}

  		var indent;
  		var matches = line.match(INDENT_RE);

  		if (!matches) {
  			indent = 0;
  		} else {
  			indent = matches[0].length;

  			if (matches[1]) {
  				spaces++;
  			} else {
  				tabs++;
  			}
  		}

  		var diff = indent - prev;
  		prev = indent;

  		if (diff) {
  			// an indent or unindent has been detected

  			isIndent = diff > 0;

  			current = indents[isIndent ? diff : -diff];

  			if (current) {
  				current[0]++;
  			} else {
  				current = indents[diff] = [1, 0];
  			}
  		} else if (current) {
  			// if the last action was an indent, increment the weight
  			current[1] += +isIndent;
  		}
  	});

  	var amount = getMostUsed(indents);

  	var type;
  	var actual;
  	if (!amount) {
  		type = null;
  		actual = '';
  	} else if (spaces >= tabs) {
  		type = 'space';
  		actual = repeating(' ', amount);
  	} else {
  		type = 'tab';
  		actual = repeating('\t', amount);
  	}

  	return {
  		amount: amount,
  		type: type,
  		indent: actual
  	};
  };


/***/ },
/* 1034 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var canUseDOM = __webpack_require__(338);
  var off = function off() {};

  if (canUseDOM) {

    off = (function () {

      if (document.addEventListener) return function (node, eventName, handler, capture) {
        return node.removeEventListener(eventName, handler, capture || false);
      };else if (document.attachEvent) return function (node, eventName, handler) {
        return node.detachEvent('on' + eventName, handler);
      };
    })();
  }

  module.exports = off;

/***/ },
/* 1035 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var canUseDOM = __webpack_require__(338);
  var on = function on() {};

  if (canUseDOM) {
    on = (function () {

      if (document.addEventListener) return function (node, eventName, handler, capture) {
        return node.addEventListener(eventName, handler, capture || false);
      };else if (document.attachEvent) return function (node, eventName, handler) {
        return node.attachEvent('on' + eventName, handler);
      };
    })();
  }

  module.exports = on;

/***/ },
/* 1036 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var getWindow = __webpack_require__(435);

  module.exports = function scrollTop(node, val) {
    var win = getWindow(node);

    if (val === undefined) return win ? 'pageXOffset' in win ? win.pageXOffset : win.document.documentElement.scrollLeft : node.scrollLeft;

    if (win) win.scrollTo(val, 'pageYOffset' in win ? win.pageYOffset : win.document.documentElement.scrollTop);else node.scrollLeft = val;
  };

/***/ },
/* 1037 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var getWindow = __webpack_require__(435);

  module.exports = function scrollTop(node, val) {
    var win = getWindow(node);

    if (val === undefined) return win ? 'pageYOffset' in win ? win.pageYOffset : win.document.documentElement.scrollTop : node.scrollTop;

    if (win) win.scrollTo('pageXOffset' in win ? win.pageXOffset : win.document.documentElement.scrollLeft, val);else node.scrollTop = val;
  };

/***/ },
/* 1038 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var canUseDOM = __webpack_require__(338);

  var vendors = ['', 'webkit', 'moz', 'o', 'ms'],
      cancel = 'clearTimeout',
      raf = fallback,
      compatRaf;

  var getKey = function getKey(vendor, k) {
    return vendor + (!vendor ? k : k[0].toUpperCase() + k.substr(1)) + 'AnimationFrame';
  };

  if (canUseDOM) {
    vendors.some(function (vendor) {
      var rafKey = getKey(vendor, 'request');

      if (rafKey in window) {
        cancel = getKey(vendor, 'cancel');
        return raf = function (cb) {
          return window[rafKey](cb);
        };
      }
    });
  }

  /* https://github.com/component/raf */
  var prev = new Date().getTime();

  function fallback(fn) {
    var curr = new Date().getTime(),
        ms = Math.max(0, 16 - (curr - prev)),
        req = setTimeout(fn, ms);

    prev = curr;
    return req;
  }

  compatRaf = function (cb) {
    return raf(cb);
  };
  compatRaf.cancel = function (id) {
    return window[cancel](id);
  };

  module.exports = compatRaf;

/***/ },
/* 1039 */
/***/ function(module, exports) {

  module.exports = [
    "🀄",
    "🃏",
    "🅰",
    "🅱",
    "🅾",
    "🅿",
    "🆎",
    "🆑",
    "🆒",
    "🆓",
    "🆔",
    "🆕",
    "🆖",
    "🆗",
    "🆘",
    "🆙",
    "🆚",
    "🇦🇨",
    "🇦🇩",
    "🇦🇪",
    "🇦🇫",
    "🇦🇬",
    "🇦🇮",
    "🇦🇱",
    "🇦🇲",
    "🇦🇴",
    "🇦🇶",
    "🇦🇷",
    "🇦🇸",
    "🇦🇹",
    "🇦🇺",
    "🇦🇼",
    "🇦🇽",
    "🇦🇿",
    "🇦",
    "🇧🇦",
    "🇧🇧",
    "🇧🇩",
    "🇧🇪",
    "🇧🇫",
    "🇧🇬",
    "🇧🇭",
    "🇧🇮",
    "🇧🇯",
    "🇧🇱",
    "🇧🇲",
    "🇧🇳",
    "🇧🇴",
    "🇧🇶",
    "🇧🇷",
    "🇧🇸",
    "🇧🇹",
    "🇧🇻",
    "🇧🇼",
    "🇧🇾",
    "🇧🇿",
    "🇧",
    "🇨🇦",
    "🇨🇨",
    "🇨🇩",
    "🇨🇫",
    "🇨🇬",
    "🇨🇭",
    "🇨🇮",
    "🇨🇰",
    "🇨🇱",
    "🇨🇲",
    "🇨🇳",
    "🇨🇴",
    "🇨🇵",
    "🇨🇷",
    "🇨🇺",
    "🇨🇻",
    "🇨🇼",
    "🇨🇽",
    "🇨🇾",
    "🇨🇿",
    "🇨",
    "🇩🇪",
    "🇩🇬",
    "🇩🇯",
    "🇩🇰",
    "🇩🇲",
    "🇩🇴",
    "🇩🇿",
    "🇩",
    "🇪🇦",
    "🇪🇨",
    "🇪🇪",
    "🇪🇬",
    "🇪🇭",
    "🇪🇷",
    "🇪🇸",
    "🇪🇹",
    "🇪🇺",
    "🇪",
    "🇫🇮",
    "🇫🇯",
    "🇫🇰",
    "🇫🇲",
    "🇫🇴",
    "🇫🇷",
    "🇫",
    "🇬🇦",
    "🇬🇧",
    "🇬🇩",
    "🇬🇪",
    "🇬🇫",
    "🇬🇬",
    "🇬🇭",
    "🇬🇮",
    "🇬🇱",
    "🇬🇲",
    "🇬🇳",
    "🇬🇵",
    "🇬🇶",
    "🇬🇷",
    "🇬🇸",
    "🇬🇹",
    "🇬🇺",
    "🇬🇼",
    "🇬🇾",
    "🇬",
    "🇭🇰",
    "🇭🇲",
    "🇭🇳",
    "🇭🇷",
    "🇭🇹",
    "🇭🇺",
    "🇭",
    "🇮🇨",
    "🇮🇩",
    "🇮🇪",
    "🇮🇱",
    "🇮🇲",
    "🇮🇳",
    "🇮🇴",
    "🇮🇶",
    "🇮🇷",
    "🇮🇸",
    "🇮🇹",
    "🇮",
    "🇯🇪",
    "🇯🇲",
    "🇯🇴",
    "🇯🇵",
    "🇯",
    "🇰🇪",
    "🇰🇬",
    "🇰🇭",
    "🇰🇮",
    "🇰🇲",
    "🇰🇳",
    "🇰🇵",
    "🇰🇷",
    "🇰🇼",
    "🇰🇾",
    "🇰🇿",
    "🇰",
    "🇱🇦",
    "🇱🇧",
    "🇱🇨",
    "🇱🇮",
    "🇱🇰",
    "🇱🇷",
    "🇱🇸",
    "🇱🇹",
    "🇱🇺",
    "🇱🇻",
    "🇱🇾",
    "🇱",
    "🇲🇦",
    "🇲🇨",
    "🇲🇩",
    "🇲🇪",
    "🇲🇫",
    "🇲🇬",
    "🇲🇭",
    "🇲🇰",
    "🇲🇱",
    "🇲🇲",
    "🇲🇳",
    "🇲🇴",
    "🇲🇵",
    "🇲🇶",
    "🇲🇷",
    "🇲🇸",
    "🇲🇹",
    "🇲🇺",
    "🇲🇻",
    "🇲🇼",
    "🇲🇽",
    "🇲🇾",
    "🇲🇿",
    "🇲",
    "🇳🇦",
    "🇳🇨",
    "🇳🇪",
    "🇳🇫",
    "🇳🇬",
    "🇳🇮",
    "🇳🇱",
    "🇳🇴",
    "🇳🇵",
    "🇳🇷",
    "🇳🇺",
    "🇳🇿",
    "🇳",
    "🇴🇲",
    "🇴",
    "🇵🇦",
    "🇵🇪",
    "🇵🇫",
    "🇵🇬",
    "🇵🇭",
    "🇵🇰",
    "🇵🇱",
    "🇵🇲",
    "🇵🇳",
    "🇵🇷",
    "🇵🇸",
    "🇵🇹",
    "🇵🇼",
    "🇵🇾",
    "🇵",
    "🇶🇦",
    "🇶",
    "🇷🇪",
    "🇷🇴",
    "🇷🇸",
    "🇷🇺",
    "🇷🇼",
    "🇷",
    "🇸🇦",
    "🇸🇧",
    "🇸🇨",
    "🇸🇩",
    "🇸🇪",
    "🇸🇬",
    "🇸🇭",
    "🇸🇮",
    "🇸🇯",
    "🇸🇰",
    "🇸🇱",
    "🇸🇲",
    "🇸🇳",
    "🇸🇴",
    "🇸🇷",
    "🇸🇸",
    "🇸🇹",
    "🇸🇻",
    "🇸🇽",
    "🇸🇾",
    "🇸🇿",
    "🇸",
    "🇹🇦",
    "🇹🇨",
    "🇹🇩",
    "🇹🇫",
    "🇹🇬",
    "🇹🇭",
    "🇹🇯",
    "🇹🇰",
    "🇹🇱",
    "🇹🇲",
    "🇹🇳",
    "🇹🇴",
    "🇹🇷",
    "🇹🇹",
    "🇹🇻",
    "🇹🇼",
    "🇹🇿",
    "🇹",
    "🇺🇦",
    "🇺🇬",
    "🇺🇲",
    "🇺🇸",
    "🇺🇾",
    "🇺🇿",
    "🇺",
    "🇻🇦",
    "🇻🇨",
    "🇻🇪",
    "🇻🇬",
    "🇻🇮",
    "🇻🇳",
    "🇻🇺",
    "🇻",
    "🇼🇫",
    "🇼🇸",
    "🇼",
    "🇽🇰",
    "🇽",
    "🇾🇪",
    "🇾🇹",
    "🇾",
    "🇿🇦",
    "🇿🇲",
    "🇿🇼",
    "🇿",
    "🈁",
    "🈂",
    "🈚",
    "🈯",
    "🈲",
    "🈳",
    "🈴",
    "🈵",
    "🈶",
    "🈷",
    "🈸",
    "🈹",
    "🈺",
    "🉐",
    "🉑",
    "🌀",
    "🌁",
    "🌂",
    "🌃",
    "🌄",
    "🌅",
    "🌆",
    "🌇",
    "🌈",
    "🌉",
    "🌊",
    "🌋",
    "🌌",
    "🌍",
    "🌎",
    "🌏",
    "🌐",
    "🌑",
    "🌒",
    "🌓",
    "🌔",
    "🌕",
    "🌖",
    "🌗",
    "🌘",
    "🌙",
    "🌚",
    "🌛",
    "🌜",
    "🌝",
    "🌞",
    "🌟",
    "🌠",
    "🌡",
    "🌤",
    "🌥",
    "🌦",
    "🌧",
    "🌨",
    "🌩",
    "🌪",
    "🌫",
    "🌬",
    "🌭",
    "🌮",
    "🌯",
    "🌰",
    "🌱",
    "🌲",
    "🌳",
    "🌴",
    "🌵",
    "🌶",
    "🌷",
    "🌸",
    "🌹",
    "🌺",
    "🌻",
    "🌼",
    "🌽",
    "🌾",
    "🌿",
    "🍀",
    "🍁",
    "🍂",
    "🍃",
    "🍄",
    "🍅",
    "🍆",
    "🍇",
    "🍈",
    "🍉",
    "🍊",
    "🍋",
    "🍌",
    "🍍",
    "🍎",
    "🍏",
    "🍐",
    "🍑",
    "🍒",
    "🍓",
    "🍔",
    "🍕",
    "🍖",
    "🍗",
    "🍘",
    "🍙",
    "🍚",
    "🍛",
    "🍜",
    "🍝",
    "🍞",
    "🍟",
    "🍠",
    "🍡",
    "🍢",
    "🍣",
    "🍤",
    "🍥",
    "🍦",
    "🍧",
    "🍨",
    "🍩",
    "🍪",
    "🍫",
    "🍬",
    "🍭",
    "🍮",
    "🍯",
    "🍰",
    "🍱",
    "🍲",
    "🍳",
    "🍴",
    "🍵",
    "🍶",
    "🍷",
    "🍸",
    "🍹",
    "🍺",
    "🍻",
    "🍼",
    "🍽",
    "🍾",
    "🍿",
    "🎀",
    "🎁",
    "🎂",
    "🎃",
    "🎄",
    "🎅🏻",
    "🎅🏼",
    "🎅🏽",
    "🎅🏾",
    "🎅🏿",
    "🎅",
    "🎆",
    "🎇",
    "🎈",
    "🎉",
    "🎊",
    "🎋",
    "🎌",
    "🎍",
    "🎎",
    "🎏",
    "🎐",
    "🎑",
    "🎒",
    "🎓",
    "🎖",
    "🎗",
    "🎙",
    "🎚",
    "🎛",
    "🎞",
    "🎟",
    "🎠",
    "🎡",
    "🎢",
    "🎣",
    "🎤",
    "🎥",
    "🎦",
    "🎧",
    "🎨",
    "🎩",
    "🎪",
    "🎫",
    "🎬",
    "🎭",
    "🎮",
    "🎯",
    "🎰",
    "🎱",
    "🎲",
    "🎳",
    "🎴",
    "🎵",
    "🎶",
    "🎷",
    "🎸",
    "🎹",
    "🎺",
    "🎻",
    "🎼",
    "🎽",
    "🎾",
    "🎿",
    "🏀",
    "🏁",
    "🏂🏻",
    "🏂🏼",
    "🏂🏽",
    "🏂🏾",
    "🏂🏿",
    "🏂",
    "🏃🏻",
    "🏃🏼",
    "🏃🏽",
    "🏃🏾",
    "🏃🏿",
    "🏃",
    "🏄🏻",
    "🏄🏼",
    "🏄🏽",
    "🏄🏾",
    "🏄🏿",
    "🏄",
    "🏅",
    "🏆",
    "🏇🏻",
    "🏇🏼",
    "🏇🏽",
    "🏇🏾",
    "🏇🏿",
    "🏇",
    "🏈",
    "🏉",
    "🏊🏻",
    "🏊🏼",
    "🏊🏽",
    "🏊🏾",
    "🏊🏿",
    "🏊",
    "🏋🏻",
    "🏋🏼",
    "🏋🏽",
    "🏋🏾",
    "🏋🏿",
    "🏋",
    "🏌",
    "🏍",
    "🏎",
    "🏏",
    "🏐",
    "🏑",
    "🏒",
    "🏓",
    "🏔",
    "🏕",
    "🏖",
    "🏗",
    "🏘",
    "🏙",
    "🏚",
    "🏛",
    "🏜",
    "🏝",
    "🏞",
    "🏟",
    "🏠",
    "🏡",
    "🏢",
    "🏣",
    "🏤",
    "🏥",
    "🏦",
    "🏧",
    "🏨",
    "🏩",
    "🏪",
    "🏫",
    "🏬",
    "🏭",
    "🏮",
    "🏯",
    "🏰",
    "🏳",
    "🏴",
    "🏵",
    "🏷",
    "🏸",
    "🏹",
    "🏺",
    "🏻",
    "🏼",
    "🏽",
    "🏾",
    "🏿",
    "🐀",
    "🐁",
    "🐂",
    "🐃",
    "🐄",
    "🐅",
    "🐆",
    "🐇",
    "🐈",
    "🐉",
    "🐊",
    "🐋",
    "🐌",
    "🐍",
    "🐎",
    "🐏",
    "🐐",
    "🐑",
    "🐒",
    "🐓",
    "🐔",
    "🐕",
    "🐖",
    "🐗",
    "🐘",
    "🐙",
    "🐚",
    "🐛",
    "🐜",
    "🐝",
    "🐞",
    "🐟",
    "🐠",
    "🐡",
    "🐢",
    "🐣",
    "🐤",
    "🐥",
    "🐦",
    "🐧",
    "🐨",
    "🐩",
    "🐪",
    "🐫",
    "🐬",
    "🐭",
    "🐮",
    "🐯",
    "🐰",
    "🐱",
    "🐲",
    "🐳",
    "🐴",
    "🐵",
    "🐶",
    "🐷",
    "🐸",
    "🐹",
    "🐺",
    "🐻",
    "🐼",
    "🐽",
    "🐾",
    "🐿",
    "👀",
    "👁‍🗨",
    "👁",
    "👂🏻",
    "👂🏼",
    "👂🏽",
    "👂🏾",
    "👂🏿",
    "👂",
    "👃🏻",
    "👃🏼",
    "👃🏽",
    "👃🏾",
    "👃🏿",
    "👃",
    "👄",
    "👅",
    "👆🏻",
    "👆🏼",
    "👆🏽",
    "👆🏾",
    "👆🏿",
    "👆",
    "👇🏻",
    "👇🏼",
    "👇🏽",
    "👇🏾",
    "👇🏿",
    "👇",
    "👈🏻",
    "👈🏼",
    "👈🏽",
    "👈🏾",
    "👈🏿",
    "👈",
    "👉🏻",
    "👉🏼",
    "👉🏽",
    "👉🏾",
    "👉🏿",
    "👉",
    "👊🏻",
    "👊🏼",
    "👊🏽",
    "👊🏾",
    "👊🏿",
    "👊",
    "👋🏻",
    "👋🏼",
    "👋🏽",
    "👋🏾",
    "👋🏿",
    "👋",
    "👌🏻",
    "👌🏼",
    "👌🏽",
    "👌🏾",
    "👌🏿",
    "👌",
    "👍🏻",
    "👍🏼",
    "👍🏽",
    "👍🏾",
    "👍🏿",
    "👍",
    "👎🏻",
    "👎🏼",
    "👎🏽",
    "👎🏾",
    "👎🏿",
    "👎",
    "👏🏻",
    "👏🏼",
    "👏🏽",
    "👏🏾",
    "👏🏿",
    "👏",
    "👐🏻",
    "👐🏼",
    "👐🏽",
    "👐🏾",
    "👐🏿",
    "👐",
    "👑",
    "👒",
    "👓",
    "👔",
    "👕",
    "👖",
    "👗",
    "👘",
    "👙",
    "👚",
    "👛",
    "👜",
    "👝",
    "👞",
    "👟",
    "👠",
    "👡",
    "👢",
    "👣",
    "👤",
    "👥",
    "👦🏻",
    "👦🏼",
    "👦🏽",
    "👦🏾",
    "👦🏿",
    "👦",
    "👧🏻",
    "👧🏼",
    "👧🏽",
    "👧🏾",
    "👧🏿",
    "👧",
    "👨🏻",
    "👨🏼",
    "👨🏽",
    "👨🏾",
    "👨🏿",
    "👨‍👨‍👦‍👦",
    "👨‍👨‍👦",
    "👨‍👨‍👧‍👦",
    "👨‍👨‍👧‍👧",
    "👨‍👨‍👧",
    "👨‍👩‍👦‍👦",
    "👨‍👩‍👦",
    "👨‍👩‍👧‍👦",
    "👨‍👩‍👧‍👧",
    "👨‍👩‍👧",
    "👨‍❤️‍👨",
    "👨‍❤️‍💋‍👨",
    "👨",
    "👩🏻",
    "👩🏼",
    "👩🏽",
    "👩🏾",
    "👩🏿",
    "👩‍👩‍👦‍👦",
    "👩‍👩‍👦",
    "👩‍👩‍👧‍👦",
    "👩‍👩‍👧‍👧",
    "👩‍👩‍👧",
    "👩‍❤️‍👨",
    "👩‍❤️‍👩",
    "👩‍❤️‍💋‍👨",
    "👩‍❤️‍💋‍👩",
    "👩",
    "👪",
    "👫",
    "👬",
    "👭",
    "👮🏻",
    "👮🏼",
    "👮🏽",
    "👮🏾",
    "👮🏿",
    "👮",
    "👯",
    "👰🏻",
    "👰🏼",
    "👰🏽",
    "👰🏾",
    "👰🏿",
    "👰",
    "👱🏻",
    "👱🏼",
    "👱🏽",
    "👱🏾",
    "👱🏿",
    "👱",
    "👲🏻",
    "👲🏼",
    "👲🏽",
    "👲🏾",
    "👲🏿",
    "👲",
    "👳🏻",
    "👳🏼",
    "👳🏽",
    "👳🏾",
    "👳🏿",
    "👳",
    "👴🏻",
    "👴🏼",
    "👴🏽",
    "👴🏾",
    "👴🏿",
    "👴",
    "👵🏻",
    "👵🏼",
    "👵🏽",
    "👵🏾",
    "👵🏿",
    "👵",
    "👶🏻",
    "👶🏼",
    "👶🏽",
    "👶🏾",
    "👶🏿",
    "👶",
    "👷🏻",
    "👷🏼",
    "👷🏽",
    "👷🏾",
    "👷🏿",
    "👷",
    "👸🏻",
    "👸🏼",
    "👸🏽",
    "👸🏾",
    "👸🏿",
    "👸",
    "👹",
    "👺",
    "👻",
    "👼🏻",
    "👼🏼",
    "👼🏽",
    "👼🏾",
    "👼🏿",
    "👼",
    "👽",
    "👾",
    "👿",
    "💀",
    "💁🏻",
    "💁🏼",
    "💁🏽",
    "💁🏾",
    "💁🏿",
    "💁",
    "💂🏻",
    "💂🏼",
    "💂🏽",
    "💂🏾",
    "💂🏿",
    "💂",
    "💃🏻",
    "💃🏼",
    "💃🏽",
    "💃🏾",
    "💃🏿",
    "💃",
    "💄",
    "💅🏻",
    "💅🏼",
    "💅🏽",
    "💅🏾",
    "💅🏿",
    "💅",
    "💆🏻",
    "💆🏼",
    "💆🏽",
    "💆🏾",
    "💆🏿",
    "💆",
    "💇🏻",
    "💇🏼",
    "💇🏽",
    "💇🏾",
    "💇🏿",
    "💇",
    "💈",
    "💉",
    "💊",
    "💋",
    "💌",
    "💍",
    "💎",
    "💏",
    "💐",
    "💑",
    "💒",
    "💓",
    "💔",
    "💕",
    "💖",
    "💗",
    "💘",
    "💙",
    "💚",
    "💛",
    "💜",
    "💝",
    "💞",
    "💟",
    "💠",
    "💡",
    "💢",
    "💣",
    "💤",
    "💥",
    "💦",
    "💧",
    "💨",
    "💩",
    "💪🏻",
    "💪🏼",
    "💪🏽",
    "💪🏾",
    "💪🏿",
    "💪",
    "💫",
    "💬",
    "💭",
    "💮",
    "💯",
    "💰",
    "💱",
    "💲",
    "💳",
    "💴",
    "💵",
    "💶",
    "💷",
    "💸",
    "💹",
    "💺",
    "💻",
    "💼",
    "💽",
    "💾",
    "💿",
    "📀",
    "📁",
    "📂",
    "📃",
    "📄",
    "📅",
    "📆",
    "📇",
    "📈",
    "📉",
    "📊",
    "📋",
    "📌",
    "📍",
    "📎",
    "📏",
    "📐",
    "📑",
    "📒",
    "📓",
    "📔",
    "📕",
    "📖",
    "📗",
    "📘",
    "📙",
    "📚",
    "📛",
    "📜",
    "📝",
    "📞",
    "📟",
    "📠",
    "📡",
    "📢",
    "📣",
    "📤",
    "📥",
    "📦",
    "📧",
    "📨",
    "📩",
    "📪",
    "📫",
    "📬",
    "📭",
    "📮",
    "📯",
    "📰",
    "📱",
    "📲",
    "📳",
    "📴",
    "📵",
    "📶",
    "📷",
    "📸",
    "📹",
    "📺",
    "📻",
    "📼",
    "📽",
    "📿",
    "🔀",
    "🔁",
    "🔂",
    "🔃",
    "🔄",
    "🔅",
    "🔆",
    "🔇",
    "🔈",
    "🔉",
    "🔊",
    "🔋",
    "🔌",
    "🔍",
    "🔎",
    "🔏",
    "🔐",
    "🔑",
    "🔒",
    "🔓",
    "🔔",
    "🔕",
    "🔖",
    "🔗",
    "🔘",
    "🔙",
    "🔚",
    "🔛",
    "🔜",
    "🔝",
    "🔞",
    "🔟",
    "🔠",
    "🔡",
    "🔢",
    "🔣",
    "🔤",
    "🔥",
    "🔦",
    "🔧",
    "🔨",
    "🔩",
    "🔪",
    "🔫",
    "🔬",
    "🔭",
    "🔮",
    "🔯",
    "🔰",
    "🔱",
    "🔲",
    "🔳",
    "🔴",
    "🔵",
    "🔶",
    "🔷",
    "🔸",
    "🔹",
    "🔺",
    "🔻",
    "🔼",
    "🔽",
    "🕉",
    "🕊",
    "🕋",
    "🕌",
    "🕍",
    "🕎",
    "🕐",
    "🕑",
    "🕒",
    "🕓",
    "🕔",
    "🕕",
    "🕖",
    "🕗",
    "🕘",
    "🕙",
    "🕚",
    "🕛",
    "🕜",
    "🕝",
    "🕞",
    "🕟",
    "🕠",
    "🕡",
    "🕢",
    "🕣",
    "🕤",
    "🕥",
    "🕦",
    "🕧",
    "🕯",
    "🕰",
    "🕳",
    "🕴",
    "🕵🏻",
    "🕵🏼",
    "🕵🏽",
    "🕵🏾",
    "🕵🏿",
    "🕵",
    "🕶",
    "🕷",
    "🕸",
    "🕹",
    "🖇",
    "🖊",
    "🖋",
    "🖌",
    "🖍",
    "🖐🏻",
    "🖐🏼",
    "🖐🏽",
    "🖐🏾",
    "🖐🏿",
    "🖐",
    "🖕🏻",
    "🖕🏼",
    "🖕🏽",
    "🖕🏾",
    "🖕🏿",
    "🖕",
    "🖖🏻",
    "🖖🏼",
    "🖖🏽",
    "🖖🏾",
    "🖖🏿",
    "🖖",
    "🖥",
    "🖨",
    "🖱",
    "🖲",
    "🖼",
    "🗂",
    "🗃",
    "🗄",
    "🗑",
    "🗒",
    "🗓",
    "🗜",
    "🗝",
    "🗞",
    "🗡",
    "🗣",
    "🗨",
    "🗯",
    "🗳",
    "🗺",
    "🗻",
    "🗼",
    "🗽",
    "🗾",
    "🗿",
    "😀",
    "😁",
    "😂",
    "😃",
    "😄",
    "😅",
    "😆",
    "😇",
    "😈",
    "😉",
    "😊",
    "😋",
    "😌",
    "😍",
    "😎",
    "😏",
    "😐",
    "😑",
    "😒",
    "😓",
    "😔",
    "😕",
    "😖",
    "😗",
    "😘",
    "😙",
    "😚",
    "😛",
    "😜",
    "😝",
    "😞",
    "😟",
    "😠",
    "😡",
    "😢",
    "😣",
    "😤",
    "😥",
    "😦",
    "😧",
    "😨",
    "😩",
    "😪",
    "😫",
    "😬",
    "😭",
    "😮",
    "😯",
    "😰",
    "😱",
    "😲",
    "😳",
    "😴",
    "😵",
    "😶",
    "😷",
    "😸",
    "😹",
    "😺",
    "😻",
    "😼",
    "😽",
    "😾",
    "😿",
    "🙀",
    "🙁",
    "🙂",
    "🙃",
    "🙄",
    "🙅🏻",
    "🙅🏼",
    "🙅🏽",
    "🙅🏾",
    "🙅🏿",
    "🙅",
    "🙆🏻",
    "🙆🏼",
    "🙆🏽",
    "🙆🏾",
    "🙆🏿",
    "🙆",
    "🙇🏻",
    "🙇🏼",
    "🙇🏽",
    "🙇🏾",
    "🙇🏿",
    "🙇",
    "🙈",
    "🙉",
    "🙊",
    "🙋🏻",
    "🙋🏼",
    "🙋🏽",
    "🙋🏾",
    "🙋🏿",
    "🙋",
    "🙌🏻",
    "🙌🏼",
    "🙌🏽",
    "🙌🏾",
    "🙌🏿",
    "🙌",
    "🙍🏻",
    "🙍🏼",
    "🙍🏽",
    "🙍🏾",
    "🙍🏿",
    "🙍",
    "🙎🏻",
    "🙎🏼",
    "🙎🏽",
    "🙎🏾",
    "🙎🏿",
    "🙎",
    "🙏🏻",
    "🙏🏼",
    "🙏🏽",
    "🙏🏾",
    "🙏🏿",
    "🙏",
    "🚀",
    "🚁",
    "🚂",
    "🚃",
    "🚄",
    "🚅",
    "🚆",
    "🚇",
    "🚈",
    "🚉",
    "🚊",
    "🚋",
    "🚌",
    "🚍",
    "🚎",
    "🚏",
    "🚐",
    "🚑",
    "🚒",
    "🚓",
    "🚔",
    "🚕",
    "🚖",
    "🚗",
    "🚘",
    "🚙",
    "🚚",
    "🚛",
    "🚜",
    "🚝",
    "🚞",
    "🚟",
    "🚠",
    "🚡",
    "🚢",
    "🚣🏻",
    "🚣🏼",
    "🚣🏽",
    "🚣🏾",
    "🚣🏿",
    "🚣",
    "🚤",
    "🚥",
    "🚦",
    "🚧",
    "🚨",
    "🚩",
    "🚪",
    "🚫",
    "🚬",
    "🚭",
    "🚮",
    "🚯",
    "🚰",
    "🚱",
    "🚲",
    "🚳",
    "🚴🏻",
    "🚴🏼",
    "🚴🏽",
    "🚴🏾",
    "🚴🏿",
    "🚴",
    "🚵🏻",
    "🚵🏼",
    "🚵🏽",
    "🚵🏾",
    "🚵🏿",
    "🚵",
    "🚶🏻",
    "🚶🏼",
    "🚶🏽",
    "🚶🏾",
    "🚶🏿",
    "🚶",
    "🚷",
    "🚸",
    "🚹",
    "🚺",
    "🚻",
    "🚼",
    "🚽",
    "🚾",
    "🚿",
    "🛀🏻",
    "🛀🏼",
    "🛀🏽",
    "🛀🏾",
    "🛀🏿",
    "🛀",
    "🛁",
    "🛂",
    "🛃",
    "🛄",
    "🛅",
    "🛋",
    "🛌",
    "🛍",
    "🛎",
    "🛏",
    "🛐",
    "🛠",
    "🛡",
    "🛢",
    "🛣",
    "🛤",
    "🛥",
    "🛩",
    "🛫",
    "🛬",
    "🛰",
    "🛳",
    "🤐",
    "🤑",
    "🤒",
    "🤓",
    "🤔",
    "🤕",
    "🤖",
    "🤗",
    "🤘🏻",
    "🤘🏼",
    "🤘🏽",
    "🤘🏾",
    "🤘🏿",
    "🤘",
    "🦀",
    "🦁",
    "🦂",
    "🦃",
    "🦄",
    "🧀",
    "‼",
    "⁉",
    "™",
    "ℹ",
    "↔",
    "↕",
    "↖",
    "↗",
    "↘",
    "↙",
    "↩",
    "↪",
    "#⃣",
    "⌚",
    "⌛",
    "⌨",
    "⏏",
    "⏩",
    "⏪",
    "⏫",
    "⏬",
    "⏭",
    "⏮",
    "⏯",
    "⏰",
    "⏱",
    "⏲",
    "⏳",
    "⏸",
    "⏹",
    "⏺",
    "Ⓜ",
    "▪",
    "▫",
    "▶",
    "◀",
    "◻",
    "◼",
    "◽",
    "◾",
    "☀",
    "☁",
    "☂",
    "☃",
    "☄",
    "☎",
    "☑",
    "☔",
    "☕",
    "☘",
    "☝🏻",
    "☝🏼",
    "☝🏽",
    "☝🏾",
    "☝🏿",
    "☝",
    "☠",
    "☢",
    "☣",
    "☦",
    "☪",
    "☮",
    "☯",
    "☸",
    "☹",
    "☺",
    "♈",
    "♉",
    "♊",
    "♋",
    "♌",
    "♍",
    "♎",
    "♏",
    "♐",
    "♑",
    "♒",
    "♓",
    "♠",
    "♣",
    "♥",
    "♦",
    "♨",
    "♻",
    "♿",
    "⚒",
    "⚓",
    "⚔",
    "⚖",
    "⚗",
    "⚙",
    "⚛",
    "⚜",
    "⚠",
    "⚡",
    "⚪",
    "⚫",
    "⚰",
    "⚱",
    "⚽",
    "⚾",
    "⛄",
    "⛅",
    "⛈",
    "⛎",
    "⛏",
    "⛑",
    "⛓",
    "⛔",
    "⛩",
    "⛪",
    "⛰",
    "⛱",
    "⛲",
    "⛳",
    "⛴",
    "⛵",
    "⛷",
    "⛸",
    "⛹🏻",
    "⛹🏼",
    "⛹🏽",
    "⛹🏾",
    "⛹🏿",
    "⛹",
    "⛺",
    "⛽",
    "✂",
    "✅",
    "✈",
    "✉",
    "✊🏻",
    "✊🏼",
    "✊🏽",
    "✊🏾",
    "✊🏿",
    "✊",
    "✋🏻",
    "✋🏼",
    "✋🏽",
    "✋🏾",
    "✋🏿",
    "✋",
    "✌🏻",
    "✌🏼",
    "✌🏽",
    "✌🏾",
    "✌🏿",
    "✌",
    "✍🏻",
    "✍🏼",
    "✍🏽",
    "✍🏾",
    "✍🏿",
    "✍",
    "✏",
    "✒",
    "✔",
    "✖",
    "✝",
    "✡",
    "✨",
    "✳",
    "✴",
    "❄",
    "❇",
    "❌",
    "❎",
    "❓",
    "❔",
    "❕",
    "❗",
    "❣",
    "❤",
    "➕",
    "➖",
    "➗",
    "➡",
    "➰",
    "➿",
    "⤴",
    "⤵",
    "*⃣",
    "⬅",
    "⬆",
    "⬇",
    "⬛",
    "⬜",
    "⭐",
    "⭕",
    "0⃣",
    "〰",
    "〽",
    "1⃣",
    "2⃣",
    "㊗",
    "㊙",
    "3⃣",
    "4⃣",
    "5⃣",
    "6⃣",
    "7⃣",
    "8⃣",
    "9⃣",
    "©",
    "®",
    ""
  ]

/***/ },
/* 1040 */
/***/ function(module, exports) {

  'use strict';

  var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;

  module.exports = function (str) {
  	if (typeof str !== 'string') {
  		throw new TypeError('Expected a string');
  	}

  	return str.replace(matchOperatorsRe, '\\$&');
  };


/***/ },
/* 1041 */
/***/ function(module, exports) {

  /*
    Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:

      * Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
      * Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
    ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
    THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */

  (function () {
      'use strict';

      function isExpression(node) {
          if (node == null) { return false; }
          switch (node.type) {
              case 'ArrayExpression':
              case 'AssignmentExpression':
              case 'BinaryExpression':
              case 'CallExpression':
              case 'ConditionalExpression':
              case 'FunctionExpression':
              case 'Identifier':
              case 'Literal':
              case 'LogicalExpression':
              case 'MemberExpression':
              case 'NewExpression':
              case 'ObjectExpression':
              case 'SequenceExpression':
              case 'ThisExpression':
              case 'UnaryExpression':
              case 'UpdateExpression':
                  return true;
          }
          return false;
      }

      function isIterationStatement(node) {
          if (node == null) { return false; }
          switch (node.type) {
              case 'DoWhileStatement':
              case 'ForInStatement':
              case 'ForStatement':
              case 'WhileStatement':
                  return true;
          }
          return false;
      }

      function isStatement(node) {
          if (node == null) { return false; }
          switch (node.type) {
              case 'BlockStatement':
              case 'BreakStatement':
              case 'ContinueStatement':
              case 'DebuggerStatement':
              case 'DoWhileStatement':
              case 'EmptyStatement':
              case 'ExpressionStatement':
              case 'ForInStatement':
              case 'ForStatement':
              case 'IfStatement':
              case 'LabeledStatement':
              case 'ReturnStatement':
              case 'SwitchStatement':
              case 'ThrowStatement':
              case 'TryStatement':
              case 'VariableDeclaration':
              case 'WhileStatement':
              case 'WithStatement':
                  return true;
          }
          return false;
      }

      function isSourceElement(node) {
        return isStatement(node) || node != null && node.type === 'FunctionDeclaration';
      }

      function trailingStatement(node) {
          switch (node.type) {
          case 'IfStatement':
              if (node.alternate != null) {
                  return node.alternate;
              }
              return node.consequent;

          case 'LabeledStatement':
          case 'ForStatement':
          case 'ForInStatement':
          case 'WhileStatement':
          case 'WithStatement':
              return node.body;
          }
          return null;
      }

      function isProblematicIfStatement(node) {
          var current;

          if (node.type !== 'IfStatement') {
              return false;
          }
          if (node.alternate == null) {
              return false;
          }
          current = node.consequent;
          do {
              if (current.type === 'IfStatement') {
                  if (current.alternate == null)  {
                      return true;
                  }
              }
              current = trailingStatement(current);
          } while (current);

          return false;
      }

      module.exports = {
          isExpression: isExpression,
          isStatement: isStatement,
          isIterationStatement: isIterationStatement,
          isSourceElement: isSourceElement,
          isProblematicIfStatement: isProblematicIfStatement,

          trailingStatement: trailingStatement
      };
  }());
  /* vim: set sw=4 ts=4 et tw=80 : */


/***/ },
/* 1042 */
/***/ function(module, exports, __webpack_require__) {

  /*
    Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:

      * Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
      * Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
    ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
    THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */

  (function () {
      'use strict';

      var code = __webpack_require__(436);

      function isStrictModeReservedWordES6(id) {
          switch (id) {
          case 'implements':
          case 'interface':
          case 'package':
          case 'private':
          case 'protected':
          case 'public':
          case 'static':
          case 'let':
              return true;
          default:
              return false;
          }
      }

      function isKeywordES5(id, strict) {
          // yield should not be treated as keyword under non-strict mode.
          if (!strict && id === 'yield') {
              return false;
          }
          return isKeywordES6(id, strict);
      }

      function isKeywordES6(id, strict) {
          if (strict && isStrictModeReservedWordES6(id)) {
              return true;
          }

          switch (id.length) {
          case 2:
              return (id === 'if') || (id === 'in') || (id === 'do');
          case 3:
              return (id === 'var') || (id === 'for') || (id === 'new') || (id === 'try');
          case 4:
              return (id === 'this') || (id === 'else') || (id === 'case') ||
                  (id === 'void') || (id === 'with') || (id === 'enum');
          case 5:
              return (id === 'while') || (id === 'break') || (id === 'catch') ||
                  (id === 'throw') || (id === 'const') || (id === 'yield') ||
                  (id === 'class') || (id === 'super');
          case 6:
              return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
                  (id === 'switch') || (id === 'export') || (id === 'import');
          case 7:
              return (id === 'default') || (id === 'finally') || (id === 'extends');
          case 8:
              return (id === 'function') || (id === 'continue') || (id === 'debugger');
          case 10:
              return (id === 'instanceof');
          default:
              return false;
          }
      }

      function isReservedWordES5(id, strict) {
          return id === 'null' || id === 'true' || id === 'false' || isKeywordES5(id, strict);
      }

      function isReservedWordES6(id, strict) {
          return id === 'null' || id === 'true' || id === 'false' || isKeywordES6(id, strict);
      }

      function isRestrictedWord(id) {
          return id === 'eval' || id === 'arguments';
      }

      function isIdentifierNameES5(id) {
          var i, iz, ch;

          if (id.length === 0) { return false; }

          ch = id.charCodeAt(0);
          if (!code.isIdentifierStartES5(ch)) {
              return false;
          }

          for (i = 1, iz = id.length; i < iz; ++i) {
              ch = id.charCodeAt(i);
              if (!code.isIdentifierPartES5(ch)) {
                  return false;
              }
          }
          return true;
      }

      function decodeUtf16(lead, trail) {
          return (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;
      }

      function isIdentifierNameES6(id) {
          var i, iz, ch, lowCh, check;

          if (id.length === 0) { return false; }

          check = code.isIdentifierStartES6;
          for (i = 0, iz = id.length; i < iz; ++i) {
              ch = id.charCodeAt(i);
              if (0xD800 <= ch && ch <= 0xDBFF) {
                  ++i;
                  if (i >= iz) { return false; }
                  lowCh = id.charCodeAt(i);
                  if (!(0xDC00 <= lowCh && lowCh <= 0xDFFF)) {
                      return false;
                  }
                  ch = decodeUtf16(ch, lowCh);
              }
              if (!check(ch)) {
                  return false;
              }
              check = code.isIdentifierPartES6;
          }
          return true;
      }

      function isIdentifierES5(id, strict) {
          return isIdentifierNameES5(id) && !isReservedWordES5(id, strict);
      }

      function isIdentifierES6(id, strict) {
          return isIdentifierNameES6(id) && !isReservedWordES6(id, strict);
      }

      module.exports = {
          isKeywordES5: isKeywordES5,
          isKeywordES6: isKeywordES6,
          isReservedWordES5: isReservedWordES5,
          isReservedWordES6: isReservedWordES6,
          isRestrictedWord: isRestrictedWord,
          isIdentifierNameES5: isIdentifierNameES5,
          isIdentifierNameES6: isIdentifierNameES6,
          isIdentifierES5: isIdentifierES5,
          isIdentifierES6: isIdentifierES6
      };
  }());
  /* vim: set sw=4 ts=4 et tw=80 : */


/***/ },
/* 1043 */
/***/ function(module, exports) {

  // removed by extract-text-webpack-plugin

/***/ },
/* 1044 */
/***/ function(module, exports) {

  // removed by extract-text-webpack-plugin

/***/ },
/* 1045 */
/***/ function(module, exports) {

  // removed by extract-text-webpack-plugin

/***/ },
/* 1046 */
/***/ function(module, exports) {

  // removed by extract-text-webpack-plugin

/***/ },
/* 1047 */
/***/ function(module, exports) {

  // removed by extract-text-webpack-plugin

/***/ },
/* 1048 */
/***/ function(module, exports) {

  "use strict";

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @typechecks
   */

  var _hyphenPattern = /-(.)/g;

  /**
   * Camelcases a hyphenated string, for example:
   *
   *   > camelize('background-color')
   *   < "backgroundColor"
   *
   * @param {string} string
   * @return {string}
   */
  function camelize(string) {
    return string.replace(_hyphenPattern, function (_, character) {
      return character.toUpperCase();
    });
  }

  module.exports = camelize;

/***/ },
/* 1049 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @typechecks
   */

  'use strict';

  var camelize = __webpack_require__(1048);

  var msPattern = /^-ms-/;

  /**
   * Camelcases a hyphenated CSS property name, for example:
   *
   *   > camelizeStyleName('background-color')
   *   < "backgroundColor"
   *   > camelizeStyleName('-moz-transition')
   *   < "MozTransition"
   *   > camelizeStyleName('-ms-transition')
   *   < "msTransition"
   *
   * As Andi Smith suggests
   * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
   * is converted to lowercase `ms`.
   *
   * @param {string} string
   * @return {string}
   */
  function camelizeStyleName(string) {
    return camelize(string.replace(msPattern, 'ms-'));
  }

  module.exports = camelizeStyleName;

/***/ },
/* 1050 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * 
   */

  var isTextNode = __webpack_require__(1057);

  /*eslint-disable no-bitwise */

  /**
   * Checks if a given DOM node contains or is another DOM node.
   */
  function containsNode(outerNode, innerNode) {
    if (!outerNode || !innerNode) {
      return false;
    } else if (outerNode === innerNode) {
      return true;
    } else if (isTextNode(outerNode)) {
      return false;
    } else if (isTextNode(innerNode)) {
      return containsNode(outerNode, innerNode.parentNode);
    } else if ('contains' in outerNode) {
      return outerNode.contains(innerNode);
    } else if (outerNode.compareDocumentPosition) {
      return !!(outerNode.compareDocumentPosition(innerNode) & 16);
    } else {
      return false;
    }
  }

  module.exports = containsNode;

/***/ },
/* 1051 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @typechecks
   */

  var invariant = __webpack_require__(91);

  /**
   * Convert array-like objects to arrays.
   *
   * This API assumes the caller knows the contents of the data type. For less
   * well defined inputs use createArrayFromMixed.
   *
   * @param {object|function|filelist} obj
   * @return {array}
   */
  function toArray(obj) {
    var length = obj.length;

    // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
    // in old versions of Safari).
    !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ?  true ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;

    !(typeof length === 'number') ?  true ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;

    !(length === 0 || length - 1 in obj) ?  true ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;

    !(typeof obj.callee !== 'function') ?  true ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;

    // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
    // without method will throw during the slice call and skip straight to the
    // fallback.
    if (obj.hasOwnProperty) {
      try {
        return Array.prototype.slice.call(obj);
      } catch (e) {
        // IE < 9 does not support Array#slice on collections objects
      }
    }

    // Fall back to copying key by key. This assumes all keys have a value,
    // so will not preserve sparsely populated inputs.
    var ret = Array(length);
    for (var ii = 0; ii < length; ii++) {
      ret[ii] = obj[ii];
    }
    return ret;
  }

  /**
   * Perform a heuristic test to determine if an object is "array-like".
   *
   *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
   *   Joshu replied: "Mu."
   *
   * This function determines if its argument has "array nature": it returns
   * true if the argument is an actual array, an `arguments' object, or an
   * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
   *
   * It will return false for other array-like objects like Filelist.
   *
   * @param {*} obj
   * @return {boolean}
   */
  function hasArrayNature(obj) {
    return(
      // not null/false
      !!obj && (
      // arrays are objects, NodeLists are functions in Safari
      typeof obj == 'object' || typeof obj == 'function') &&
      // quacks like an array
      'length' in obj &&
      // not window
      !('setInterval' in obj) &&
      // no DOM node should be considered an array-like
      // a 'select' element has 'length' and 'item' properties on IE8
      typeof obj.nodeType != 'number' && (
      // a real array
      Array.isArray(obj) ||
      // arguments
      'callee' in obj ||
      // HTMLCollection/NodeList
      'item' in obj)
    );
  }

  /**
   * Ensure that the argument is an array by wrapping it in an array if it is not.
   * Creates a copy of the argument if it is already an array.
   *
   * This is mostly useful idiomatically:
   *
   *   var createArrayFromMixed = require('createArrayFromMixed');
   *
   *   function takesOneOrMoreThings(things) {
   *     things = createArrayFromMixed(things);
   *     ...
   *   }
   *
   * This allows you to treat `things' as an array, but accept scalars in the API.
   *
   * If you need to convert an array-like object, like `arguments`, into an array
   * use toArray instead.
   *
   * @param {*} obj
   * @return {array}
   */
  function createArrayFromMixed(obj) {
    if (!hasArrayNature(obj)) {
      return [obj];
    } else if (Array.isArray(obj)) {
      return obj.slice();
    } else {
      return toArray(obj);
    }
  }

  module.exports = createArrayFromMixed;

/***/ },
/* 1052 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @typechecks
   */

  /*eslint-disable fb-www/unsafe-html*/

  var ExecutionEnvironment = __webpack_require__(109);

  var createArrayFromMixed = __webpack_require__(1051);
  var getMarkupWrap = __webpack_require__(442);
  var invariant = __webpack_require__(91);

  /**
   * Dummy container used to render all markup.
   */
  var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

  /**
   * Pattern used by `getNodeName`.
   */
  var nodeNamePattern = /^\s*<(\w+)/;

  /**
   * Extracts the `nodeName` of the first element in a string of markup.
   *
   * @param {string} markup String of markup.
   * @return {?string} Node name of the supplied markup.
   */
  function getNodeName(markup) {
    var nodeNameMatch = markup.match(nodeNamePattern);
    return nodeNameMatch && nodeNameMatch[1].toLowerCase();
  }

  /**
   * Creates an array containing the nodes rendered from the supplied markup. The
   * optionally supplied `handleScript` function will be invoked once for each
   * <script> element that is rendered. If no `handleScript` function is supplied,
   * an exception is thrown if any <script> elements are rendered.
   *
   * @param {string} markup A string of valid HTML markup.
   * @param {?function} handleScript Invoked once for each rendered <script>.
   * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
   */
  function createNodesFromMarkup(markup, handleScript) {
    var node = dummyNode;
    !!!dummyNode ?  true ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
    var nodeName = getNodeName(markup);

    var wrap = nodeName && getMarkupWrap(nodeName);
    if (wrap) {
      node.innerHTML = wrap[1] + markup + wrap[2];

      var wrapDepth = wrap[0];
      while (wrapDepth--) {
        node = node.lastChild;
      }
    } else {
      node.innerHTML = markup;
    }

    var scripts = node.getElementsByTagName('script');
    if (scripts.length) {
      !handleScript ?  true ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
      createArrayFromMixed(scripts).forEach(handleScript);
    }

    var nodes = Array.from(node.childNodes);
    while (node.lastChild) {
      node.removeChild(node.lastChild);
    }
    return nodes;
  }

  module.exports = createNodesFromMarkup;

/***/ },
/* 1053 */
/***/ function(module, exports) {

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @typechecks
   */

  'use strict';

  /**
   * Gets the scroll position of the supplied element or window.
   *
   * The return values are unbounded, unlike `getScrollPosition`. This means they
   * may be negative or exceed the element boundaries (which is possible using
   * inertial scrolling).
   *
   * @param {DOMWindow|DOMElement} scrollable
   * @return {object} Map with `x` and `y` keys.
   */

  function getUnboundedScrollPosition(scrollable) {
    if (scrollable === window) {
      return {
        x: window.pageXOffset || document.documentElement.scrollLeft,
        y: window.pageYOffset || document.documentElement.scrollTop
      };
    }
    return {
      x: scrollable.scrollLeft,
      y: scrollable.scrollTop
    };
  }

  module.exports = getUnboundedScrollPosition;

/***/ },
/* 1054 */
/***/ function(module, exports) {

  'use strict';

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @typechecks
   */

  var _uppercasePattern = /([A-Z])/g;

  /**
   * Hyphenates a camelcased string, for example:
   *
   *   > hyphenate('backgroundColor')
   *   < "background-color"
   *
   * For CSS style names, use `hyphenateStyleName` instead which works properly
   * with all vendor prefixes, including `ms`.
   *
   * @param {string} string
   * @return {string}
   */
  function hyphenate(string) {
    return string.replace(_uppercasePattern, '-$1').toLowerCase();
  }

  module.exports = hyphenate;

/***/ },
/* 1055 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @typechecks
   */

  'use strict';

  var hyphenate = __webpack_require__(1054);

  var msPattern = /^ms-/;

  /**
   * Hyphenates a camelcased CSS property name, for example:
   *
   *   > hyphenateStyleName('backgroundColor')
   *   < "background-color"
   *   > hyphenateStyleName('MozTransition')
   *   < "-moz-transition"
   *   > hyphenateStyleName('msTransition')
   *   < "-ms-transition"
   *
   * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
   * is converted to `-ms-`.
   *
   * @param {string} string
   * @return {string}
   */
  function hyphenateStyleName(string) {
    return hyphenate(string).replace(msPattern, '-ms-');
  }

  module.exports = hyphenateStyleName;

/***/ },
/* 1056 */
/***/ function(module, exports) {

  'use strict';

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @typechecks
   */

  /**
   * @param {*} object The object to check.
   * @return {boolean} Whether or not the object is a DOM node.
   */
  function isNode(object) {
    return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
  }

  module.exports = isNode;

/***/ },
/* 1057 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @typechecks
   */

  var isNode = __webpack_require__(1056);

  /**
   * @param {*} object The object to check.
   * @return {boolean} Whether or not the object is a DOM text node.
   */
  function isTextNode(object) {
    return isNode(object) && object.nodeType == 3;
  }

  module.exports = isTextNode;

/***/ },
/* 1058 */
/***/ function(module, exports) {

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   */

  'use strict';

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  /**
   * Executes the provided `callback` once for each enumerable own property in the
   * object and constructs a new object from the results. The `callback` is
   * invoked with three arguments:
   *
   *  - the property value
   *  - the property name
   *  - the object being traversed
   *
   * Properties that are added after the call to `mapObject` will not be visited
   * by `callback`. If the values of existing properties are changed, the value
   * passed to `callback` will be the value at the time `mapObject` visits them.
   * Properties that are deleted before being visited are not visited.
   *
   * @grep function objectMap()
   * @grep function objMap()
   *
   * @param {?object} object
   * @param {function} callback
   * @param {*} context
   * @return {?object}
   */
  function mapObject(object, callback, context) {
    if (!object) {
      return null;
    }
    var result = {};
    for (var name in object) {
      if (hasOwnProperty.call(object, name)) {
        result[name] = callback.call(context, object[name], name, object);
      }
    }
    return result;
  }

  module.exports = mapObject;

/***/ },
/* 1059 */
/***/ function(module, exports) {

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * 
   * @typechecks static-only
   */

  'use strict';

  /**
   * Memoizes the return value of a function that accepts one string argument.
   */

  function memoizeStringOnly(callback) {
    var cache = {};
    return function (string) {
      if (!cache.hasOwnProperty(string)) {
        cache[string] = callback.call(this, string);
      }
      return cache[string];
    };
  }

  module.exports = memoizeStringOnly;

/***/ },
/* 1060 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @typechecks
   */

  'use strict';

  var ExecutionEnvironment = __webpack_require__(109);

  var performance;

  if (ExecutionEnvironment.canUseDOM) {
    performance = window.performance || window.msPerformance || window.webkitPerformance;
  }

  module.exports = performance || {};

/***/ },
/* 1061 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @typechecks
   */

  var performance = __webpack_require__(1060);

  var performanceNow;

  /**
   * Detect if we can use `window.performance.now()` and gracefully fallback to
   * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
   * because of Facebook's testing infrastructure.
   */
  if (performance.now) {
    performanceNow = function performanceNow() {
      return performance.now();
    };
  } else {
    performanceNow = function performanceNow() {
      return Date.now();
    };
  }

  module.exports = performanceNow;

/***/ },
/* 1062 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = __webpack_require__(1075);


/***/ },
/* 1063 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var ansiRegex = __webpack_require__(378);
  var re = new RegExp(ansiRegex().source); // remove the `g` flag
  module.exports = re.test.bind(re);


/***/ },
/* 1064 */
/***/ function(module, exports) {

  "use strict";

  exports.__esModule = true;
  var _slice = Array.prototype.slice;
  exports.loopAsync = loopAsync;

  function loopAsync(turns, work, callback) {
    var currentTurn = 0,
        isDone = false;
    var sync = false,
        hasNext = false,
        doneArgs = undefined;

    function done() {
      isDone = true;
      if (sync) {
        // Iterate instead of recursing if possible.
        doneArgs = [].concat(_slice.call(arguments));
        return;
      }

      callback.apply(this, arguments);
    }

    function next() {
      if (isDone) {
        return;
      }

      hasNext = true;
      if (sync) {
        // Iterate instead of recursing if possible.
        return;
      }

      sync = true;

      while (!isDone && currentTurn < turns && hasNext) {
        hasNext = false;
        work.call(this, currentTurn++, next, done);
      }

      sync = false;

      if (isDone) {
        // This means the loop finished synchronously.
        callback.apply(this, doneArgs);
        return;
      }

      if (currentTurn >= turns && hasNext) {
        isDone = true;
        callback();
      }
    }

    next();
  }

/***/ },
/* 1065 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  exports.__esModule = true;

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _invariant = __webpack_require__(251);

  var _invariant2 = _interopRequireDefault(_invariant);

  var _Actions = __webpack_require__(212);

  var _PathUtils = __webpack_require__(213);

  var _ExecutionEnvironment = __webpack_require__(446);

  var _DOMUtils = __webpack_require__(445);

  var _DOMStateStorage = __webpack_require__(444);

  var _createDOMHistory = __webpack_require__(1066);

  var _createDOMHistory2 = _interopRequireDefault(_createDOMHistory);

  /**
   * Creates and returns a history object that uses HTML5's history API
   * (pushState, replaceState, and the popstate event) to manage history.
   * This is the recommended method of managing history in browsers because
   * it provides the cleanest URLs.
   *
   * Note: In browsers that do not support the HTML5 history API full
   * page reloads will be used to preserve URLs.
   */
  function createBrowserHistory() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    !_ExecutionEnvironment.canUseDOM ?  true ? _invariant2['default'](false, 'Browser history needs a DOM') : _invariant2['default'](false) : undefined;

    var forceRefresh = options.forceRefresh;

    var isSupported = _DOMUtils.supportsHistory();
    var useRefresh = !isSupported || forceRefresh;

    function getCurrentLocation(historyState) {
      try {
        historyState = historyState || window.history.state || {};
      } catch (e) {
        historyState = {};
      }

      var path = _DOMUtils.getWindowPath();
      var _historyState = historyState;
      var key = _historyState.key;

      var state = undefined;
      if (key) {
        state = _DOMStateStorage.readState(key);
      } else {
        state = null;
        key = history.createKey();

        if (isSupported) window.history.replaceState(_extends({}, historyState, { key: key }), null);
      }

      var location = _PathUtils.parsePath(path);

      return history.createLocation(_extends({}, location, { state: state }), undefined, key);
    }

    function startPopStateListener(_ref) {
      var transitionTo = _ref.transitionTo;

      function popStateListener(event) {
        if (event.state === undefined) return; // Ignore extraneous popstate events in WebKit.

        transitionTo(getCurrentLocation(event.state));
      }

      _DOMUtils.addEventListener(window, 'popstate', popStateListener);

      return function () {
        _DOMUtils.removeEventListener(window, 'popstate', popStateListener);
      };
    }

    function finishTransition(location) {
      var basename = location.basename;
      var pathname = location.pathname;
      var search = location.search;
      var hash = location.hash;
      var state = location.state;
      var action = location.action;
      var key = location.key;

      if (action === _Actions.POP) return; // Nothing to do.

      _DOMStateStorage.saveState(key, state);

      var path = (basename || '') + pathname + search + hash;
      var historyState = {
        key: key
      };

      if (action === _Actions.PUSH) {
        if (useRefresh) {
          window.location.href = path;
          return false; // Prevent location update.
        } else {
            window.history.pushState(historyState, null, path);
          }
      } else {
        // REPLACE
        if (useRefresh) {
          window.location.replace(path);
          return false; // Prevent location update.
        } else {
            window.history.replaceState(historyState, null, path);
          }
      }
    }

    var history = _createDOMHistory2['default'](_extends({}, options, {
      getCurrentLocation: getCurrentLocation,
      finishTransition: finishTransition,
      saveState: _DOMStateStorage.saveState
    }));

    var listenerCount = 0,
        stopPopStateListener = undefined;

    function listenBefore(listener) {
      if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);

      var unlisten = history.listenBefore(listener);

      return function () {
        unlisten();

        if (--listenerCount === 0) stopPopStateListener();
      };
    }

    function listen(listener) {
      if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);

      var unlisten = history.listen(listener);

      return function () {
        unlisten();

        if (--listenerCount === 0) stopPopStateListener();
      };
    }

    // deprecated
    function registerTransitionHook(hook) {
      if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);

      history.registerTransitionHook(hook);
    }

    // deprecated
    function unregisterTransitionHook(hook) {
      history.unregisterTransitionHook(hook);

      if (--listenerCount === 0) stopPopStateListener();
    }

    return _extends({}, history, {
      listenBefore: listenBefore,
      listen: listen,
      registerTransitionHook: registerTransitionHook,
      unregisterTransitionHook: unregisterTransitionHook
    });
  }

  exports['default'] = createBrowserHistory;
  module.exports = exports['default'];

/***/ },
/* 1066 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  exports.__esModule = true;

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _invariant = __webpack_require__(251);

  var _invariant2 = _interopRequireDefault(_invariant);

  var _ExecutionEnvironment = __webpack_require__(446);

  var _DOMUtils = __webpack_require__(445);

  var _createHistory = __webpack_require__(447);

  var _createHistory2 = _interopRequireDefault(_createHistory);

  function createDOMHistory(options) {
    var history = _createHistory2['default'](_extends({
      getUserConfirmation: _DOMUtils.getUserConfirmation
    }, options, {
      go: _DOMUtils.go
    }));

    function listen(listener) {
      !_ExecutionEnvironment.canUseDOM ?  true ? _invariant2['default'](false, 'DOM history needs a DOM') : _invariant2['default'](false) : undefined;

      return history.listen(listener);
    }

    return _extends({}, history, {
      listen: listen
    });
  }

  exports['default'] = createDOMHistory;
  module.exports = exports['default'];

/***/ },
/* 1067 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  exports.__esModule = true;

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _warning = __webpack_require__(169);

  var _warning2 = _interopRequireDefault(_warning);

  var _Actions = __webpack_require__(212);

  var _PathUtils = __webpack_require__(213);

  function createLocation() {
    var location = arguments.length <= 0 || arguments[0] === undefined ? '/' : arguments[0];
    var action = arguments.length <= 1 || arguments[1] === undefined ? _Actions.POP : arguments[1];
    var key = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

    var _fourthArg = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];

    if (typeof location === 'string') location = _PathUtils.parsePath(location);

    if (typeof action === 'object') {
       true ? _warning2['default'](false, 'The state (2nd) argument to createLocation is deprecated; use a ' + 'location descriptor instead') : undefined;

      location = _extends({}, location, { state: action });

      action = key || _Actions.POP;
      key = _fourthArg;
    }

    var pathname = location.pathname || '/';
    var search = location.search || '';
    var hash = location.hash || '';
    var state = location.state || null;

    return {
      pathname: pathname,
      search: search,
      hash: hash,
      state: state,
      action: action,
      key: key
    };
  }

  exports['default'] = createLocation;
  module.exports = exports['default'];

/***/ },
/* 1068 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  exports.__esModule = true;

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _warning = __webpack_require__(169);

  var _warning2 = _interopRequireDefault(_warning);

  var _invariant = __webpack_require__(251);

  var _invariant2 = _interopRequireDefault(_invariant);

  var _PathUtils = __webpack_require__(213);

  var _Actions = __webpack_require__(212);

  var _createHistory = __webpack_require__(447);

  var _createHistory2 = _interopRequireDefault(_createHistory);

  function createStateStorage(entries) {
    return entries.filter(function (entry) {
      return entry.state;
    }).reduce(function (memo, entry) {
      memo[entry.key] = entry.state;
      return memo;
    }, {});
  }

  function createMemoryHistory() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    if (Array.isArray(options)) {
      options = { entries: options };
    } else if (typeof options === 'string') {
      options = { entries: [options] };
    }

    var history = _createHistory2['default'](_extends({}, options, {
      getCurrentLocation: getCurrentLocation,
      finishTransition: finishTransition,
      saveState: saveState,
      go: go
    }));

    var _options = options;
    var entries = _options.entries;
    var current = _options.current;

    if (typeof entries === 'string') {
      entries = [entries];
    } else if (!Array.isArray(entries)) {
      entries = ['/'];
    }

    entries = entries.map(function (entry) {
      var key = history.createKey();

      if (typeof entry === 'string') return { pathname: entry, key: key };

      if (typeof entry === 'object' && entry) return _extends({}, entry, { key: key });

       true ?  true ? _invariant2['default'](false, 'Unable to create history entry from %s', entry) : _invariant2['default'](false) : undefined;
    });

    if (current == null) {
      current = entries.length - 1;
    } else {
      !(current >= 0 && current < entries.length) ?  true ? _invariant2['default'](false, 'Current index must be >= 0 and < %s, was %s', entries.length, current) : _invariant2['default'](false) : undefined;
    }

    var storage = createStateStorage(entries);

    function saveState(key, state) {
      storage[key] = state;
    }

    function readState(key) {
      return storage[key];
    }

    function getCurrentLocation() {
      var entry = entries[current];
      var basename = entry.basename;
      var pathname = entry.pathname;
      var search = entry.search;

      var path = (basename || '') + pathname + (search || '');

      var key = undefined,
          state = undefined;
      if (entry.key) {
        key = entry.key;
        state = readState(key);
      } else {
        key = history.createKey();
        state = null;
        entry.key = key;
      }

      var location = _PathUtils.parsePath(path);

      return history.createLocation(_extends({}, location, { state: state }), undefined, key);
    }

    function canGo(n) {
      var index = current + n;
      return index >= 0 && index < entries.length;
    }

    function go(n) {
      if (n) {
        if (!canGo(n)) {
           true ? _warning2['default'](false, 'Cannot go(%s) there is not enough history', n) : undefined;
          return;
        }

        current += n;

        var currentLocation = getCurrentLocation();

        // change action to POP
        history.transitionTo(_extends({}, currentLocation, { action: _Actions.POP }));
      }
    }

    function finishTransition(location) {
      switch (location.action) {
        case _Actions.PUSH:
          current += 1;

          // if we are not on the top of stack
          // remove rest and push new
          if (current < entries.length) entries.splice(current);

          entries.push(location);
          saveState(location.key, location.state);
          break;
        case _Actions.REPLACE:
          entries[current] = location;
          saveState(location.key, location.state);
          break;
      }
    }

    return history;
  }

  exports['default'] = createMemoryHistory;
  module.exports = exports['default'];

/***/ },
/* 1069 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  exports.__esModule = true;

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _warning = __webpack_require__(169);

  var _warning2 = _interopRequireDefault(_warning);

  var _queryString = __webpack_require__(1070);

  var _runTransitionHook = __webpack_require__(449);

  var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

  var _PathUtils = __webpack_require__(213);

  var _deprecate = __webpack_require__(448);

  var _deprecate2 = _interopRequireDefault(_deprecate);

  var SEARCH_BASE_KEY = '$searchBase';

  function defaultStringifyQuery(query) {
    return _queryString.stringify(query).replace(/%20/g, '+');
  }

  var defaultParseQueryString = _queryString.parse;

  function isNestedObject(object) {
    for (var p in object) {
      if (Object.prototype.hasOwnProperty.call(object, p) && typeof object[p] === 'object' && !Array.isArray(object[p]) && object[p] !== null) return true;
    }return false;
  }

  /**
   * Returns a new createHistory function that may be used to create
   * history objects that know how to handle URL queries.
   */
  function useQueries(createHistory) {
    return function () {
      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

      var history = createHistory(options);

      var stringifyQuery = options.stringifyQuery;
      var parseQueryString = options.parseQueryString;

      if (typeof stringifyQuery !== 'function') stringifyQuery = defaultStringifyQuery;

      if (typeof parseQueryString !== 'function') parseQueryString = defaultParseQueryString;

      function addQuery(location) {
        if (location.query == null) {
          var search = location.search;

          location.query = parseQueryString(search.substring(1));
          location[SEARCH_BASE_KEY] = { search: search, searchBase: '' };
        }

        // TODO: Instead of all the book-keeping here, this should just strip the
        // stringified query from the search.

        return location;
      }

      function appendQuery(location, query) {
        var _extends2;

        var searchBaseSpec = location[SEARCH_BASE_KEY];
        var queryString = query ? stringifyQuery(query) : '';
        if (!searchBaseSpec && !queryString) {
          return location;
        }

         true ? _warning2['default'](stringifyQuery !== defaultStringifyQuery || !isNestedObject(query), 'useQueries does not stringify nested query objects by default; ' + 'use a custom stringifyQuery function') : undefined;

        if (typeof location === 'string') location = _PathUtils.parsePath(location);

        var searchBase = undefined;
        if (searchBaseSpec && location.search === searchBaseSpec.search) {
          searchBase = searchBaseSpec.searchBase;
        } else {
          searchBase = location.search || '';
        }

        var search = searchBase;
        if (queryString) {
          search += (search ? '&' : '?') + queryString;
        }

        return _extends({}, location, (_extends2 = {
          search: search
        }, _extends2[SEARCH_BASE_KEY] = { search: search, searchBase: searchBase }, _extends2));
      }

      // Override all read methods with query-aware versions.
      function listenBefore(hook) {
        return history.listenBefore(function (location, callback) {
          _runTransitionHook2['default'](hook, addQuery(location), callback);
        });
      }

      function listen(listener) {
        return history.listen(function (location) {
          listener(addQuery(location));
        });
      }

      // Override all write methods with query-aware versions.
      function push(location) {
        history.push(appendQuery(location, location.query));
      }

      function replace(location) {
        history.replace(appendQuery(location, location.query));
      }

      function createPath(location, query) {
         true ? _warning2['default'](!query, 'the query argument to createPath is deprecated; use a location descriptor instead') : undefined;

        return history.createPath(appendQuery(location, query || location.query));
      }

      function createHref(location, query) {
         true ? _warning2['default'](!query, 'the query argument to createHref is deprecated; use a location descriptor instead') : undefined;

        return history.createHref(appendQuery(location, query || location.query));
      }

      function createLocation(location) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var fullLocation = history.createLocation.apply(history, [appendQuery(location, location.query)].concat(args));
        if (location.query) {
          fullLocation.query = location.query;
        }
        return addQuery(fullLocation);
      }

      // deprecated
      function pushState(state, path, query) {
        if (typeof path === 'string') path = _PathUtils.parsePath(path);

        push(_extends({ state: state }, path, { query: query }));
      }

      // deprecated
      function replaceState(state, path, query) {
        if (typeof path === 'string') path = _PathUtils.parsePath(path);

        replace(_extends({ state: state }, path, { query: query }));
      }

      return _extends({}, history, {
        listenBefore: listenBefore,
        listen: listen,
        push: push,
        replace: replace,
        createPath: createPath,
        createHref: createHref,
        createLocation: createLocation,

        pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),
        replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')
      });
    };
  }

  exports['default'] = useQueries;
  module.exports = exports['default'];

/***/ },
/* 1070 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var strictUriEncode = __webpack_require__(1292);

  exports.extract = function (str) {
  	return str.split('?')[1] || '';
  };

  exports.parse = function (str) {
  	if (typeof str !== 'string') {
  		return {};
  	}

  	str = str.trim().replace(/^(\?|#|&)/, '');

  	if (!str) {
  		return {};
  	}

  	return str.split('&').reduce(function (ret, param) {
  		var parts = param.replace(/\+/g, ' ').split('=');
  		// Firefox (pre 40) decodes `%3D` to `=`
  		// https://github.com/sindresorhus/query-string/pull/37
  		var key = parts.shift();
  		var val = parts.length > 0 ? parts.join('=') : undefined;

  		key = decodeURIComponent(key);

  		// missing `=` should be `null`:
  		// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
  		val = val === undefined ? null : decodeURIComponent(val);

  		if (!ret.hasOwnProperty(key)) {
  			ret[key] = val;
  		} else if (Array.isArray(ret[key])) {
  			ret[key].push(val);
  		} else {
  			ret[key] = [ret[key], val];
  		}

  		return ret;
  	}, {});
  };

  exports.stringify = function (obj) {
  	return obj ? Object.keys(obj).sort().map(function (key) {
  		var val = obj[key];

  		if (val === undefined) {
  			return '';
  		}

  		if (val === null) {
  			return key;
  		}

  		if (Array.isArray(val)) {
  			return val.slice().sort().map(function (val2) {
  				return strictUriEncode(key) + '=' + strictUriEncode(val2);
  			}).join('&');
  		}

  		return strictUriEncode(key) + '=' + strictUriEncode(val);
  	}).filter(function (x) {
  		return x.length > 0;
  	}).join('&') : '';
  };


/***/ },
/* 1071 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var numberIsNan = __webpack_require__(1202);

  module.exports = Number.isFinite || function (val) {
  	return !(typeof val !== 'number' || numberIsNan(val) || val === Infinity || val === -Infinity);
  };


/***/ },
/* 1072 */
/***/ function(module, exports) {

  // Copyright 2014, 2015, 2016 Simon Lydell
  // X11 (“MIT”) Licensed. (See LICENSE.)

  // This regex comes from regex.coffee, and is inserted here by generate-index.js
  // (run `npm run build`).
  module.exports = /((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyu]{1,5}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![\/*])))))|(0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?)|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]{1,6}\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-*\/%&|^]|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\](){}])|(\s+)|(^$|[\s\S])/g

  module.exports.matchToToken = function(match) {
    var token = {type: "invalid", value: match[0]}
         if (match[ 1]) token.type = "string" , token.closed = !!(match[3] || match[4])
    else if (match[ 5]) token.type = "comment"
    else if (match[ 6]) token.type = "comment", token.closed = !!match[7]
    else if (match[ 8]) token.type = "regex"
    else if (match[ 9]) token.type = "number"
    else if (match[10]) token.type = "name"
    else if (match[11]) token.type = "punctuator"
    else if (match[12]) token.type = "whitespace"
    return token
  }


/***/ },
/* 1073 */
/***/ function(module, exports) {

  module.exports = {
  	"_args": [
  		[
  			"babel-core@^6.8.0",
  			"/Users/lparry/dev/blog-2.0"
  		]
  	],
  	"_from": "babel-core@>=6.8.0 <7.0.0",
  	"_id": "babel-core@6.9.1",
  	"_inCache": true,
  	"_installable": true,
  	"_location": "/babel-core",
  	"_nodeVersion": "5.1.0",
  	"_npmOperationalInternal": {
  		"host": "packages-12-west.internal.npmjs.com",
  		"tmp": "tmp/babel-core-6.9.1.tgz_1464551408093_0.2568425089120865"
  	},
  	"_npmUser": {
  		"email": "hi@henryzoo.com",
  		"name": "hzoo"
  	},
  	"_npmVersion": "3.8.6",
  	"_phantomChildren": {},
  	"_requested": {
  		"name": "babel-core",
  		"raw": "babel-core@^6.8.0",
  		"rawSpec": "^6.8.0",
  		"scope": null,
  		"spec": ">=6.8.0 <7.0.0",
  		"type": "range"
  	},
  	"_requiredBy": [
  		"#DEV:/",
  		"/babel-cli",
  		"/babel-plugin-transform-regenerator",
  		"/babel-register",
  		"/systemjs-builder"
  	],
  	"_resolved": "https://registry.npmjs.org/babel-core/-/babel-core-6.9.1.tgz",
  	"_shasum": "48d471eebf4de469e0a942fe456dcc94b18be80d",
  	"_shrinkwrap": null,
  	"_spec": "babel-core@^6.8.0",
  	"_where": "/Users/lparry/dev/blog-2.0",
  	"author": {
  		"email": "sebmck@gmail.com",
  		"name": "Sebastian McKenzie"
  	},
  	"dependencies": {
  		"babel-code-frame": "^6.8.0",
  		"babel-generator": "^6.9.0",
  		"babel-helpers": "^6.8.0",
  		"babel-messages": "^6.8.0",
  		"babel-register": "^6.9.0",
  		"babel-runtime": "^6.9.1",
  		"babel-template": "^6.9.0",
  		"babel-traverse": "^6.9.0",
  		"babel-types": "^6.9.1",
  		"babylon": "^6.7.0",
  		"convert-source-map": "^1.1.0",
  		"debug": "^2.1.1",
  		"json5": "^0.4.0",
  		"lodash": "^4.2.0",
  		"minimatch": "^2.0.3",
  		"path-exists": "^1.0.0",
  		"path-is-absolute": "^1.0.0",
  		"private": "^0.1.6",
  		"shebang-regex": "^1.0.0",
  		"slash": "^1.0.0",
  		"source-map": "^0.5.0"
  	},
  	"description": "Babel compiler core.",
  	"devDependencies": {
  		"babel-helper-fixtures": "^6.9.0",
  		"babel-helper-transform-fixture-test-runner": "^6.9.0",
  		"babel-polyfill": "^6.9.1"
  	},
  	"directories": {},
  	"dist": {
  		"shasum": "48d471eebf4de469e0a942fe456dcc94b18be80d",
  		"tarball": "https://registry.npmjs.org/babel-core/-/babel-core-6.9.1.tgz"
  	},
  	"homepage": "https://babeljs.io/",
  	"keywords": [
  		"6to5",
  		"babel",
  		"classes",
  		"const",
  		"es6",
  		"harmony",
  		"let",
  		"modules",
  		"transpile",
  		"transpiler",
  		"var"
  	],
  	"license": "MIT",
  	"maintainers": [
  		{
  			"email": "amjad.masad@gmail.com",
  			"name": "amasad"
  		},
  		{
  			"email": "hi@henryzoo.com",
  			"name": "hzoo"
  		},
  		{
  			"email": "npm-public@jessemccarthy.net",
  			"name": "jmm"
  		},
  		{
  			"email": "loganfsmyth@gmail.com",
  			"name": "loganfsmyth"
  		},
  		{
  			"email": "sebmck@gmail.com",
  			"name": "sebmck"
  		},
  		{
  			"email": "me@thejameskyle.com",
  			"name": "thejameskyle"
  		}
  	],
  	"name": "babel-core",
  	"optionalDependencies": {},
  	"readme": "ERROR: No README data found!",
  	"repository": {
  		"type": "git",
  		"url": "https://github.com/babel/babel/tree/master/packages/babel-core"
  	},
  	"scripts": {
  		"bench": "make bench",
  		"test": "make test"
  	},
  	"version": "6.9.1"
  };

/***/ },
/* 1074 */
/***/ function(module, exports) {

  module.exports = {
  	"_args": [
  		[
  			"babel-loader@^6.2.4",
  			"/Users/lparry/dev/blog-2.0"
  		]
  	],
  	"_from": "babel-loader@>=6.2.4 <7.0.0",
  	"_id": "babel-loader@6.2.4",
  	"_inCache": true,
  	"_installable": true,
  	"_location": "/babel-loader",
  	"_nodeVersion": "5.6.0",
  	"_npmOperationalInternal": {
  		"host": "packages-6-west.internal.npmjs.com",
  		"tmp": "tmp/babel-loader-6.2.4.tgz_1456567898502_0.7956836845260113"
  	},
  	"_npmUser": {
  		"email": "hello@luiscouto.pt",
  		"name": "couto"
  	},
  	"_npmVersion": "3.7.2",
  	"_phantomChildren": {},
  	"_requested": {
  		"name": "babel-loader",
  		"raw": "babel-loader@^6.2.4",
  		"rawSpec": "^6.2.4",
  		"scope": null,
  		"spec": ">=6.2.4 <7.0.0",
  		"type": "range"
  	},
  	"_requiredBy": [
  		"#DEV:/"
  	],
  	"_resolved": "https://registry.npmjs.org/babel-loader/-/babel-loader-6.2.4.tgz",
  	"_shasum": "aa70aff8ddc223a5952e839a43a6c3a4c8bfa1e9",
  	"_shrinkwrap": null,
  	"_spec": "babel-loader@^6.2.4",
  	"_where": "/Users/lparry/dev/blog-2.0",
  	"author": {
  		"email": "hello@luiscouto.pt",
  		"name": "Luis Couto"
  	},
  	"bugs": {
  		"url": "https://github.com/babel/babel-loader/issues"
  	},
  	"dependencies": {
  		"loader-utils": "^0.2.11",
  		"mkdirp": "^0.5.1",
  		"object-assign": "^4.0.1"
  	},
  	"description": "babel module loader for webpack",
  	"devDependencies": {
  		"expect.js": "^0.3.1",
  		"istanbul": "^0.4.0",
  		"jscs": "^2.5.0",
  		"jshint": "^2.8.0",
  		"mocha": "^2.3.3",
  		"rimraf": "^2.4.3",
  		"webpack": "^1.12.2"
  	},
  	"directories": {},
  	"dist": {
  		"shasum": "aa70aff8ddc223a5952e839a43a6c3a4c8bfa1e9",
  		"tarball": "https://registry.npmjs.org/babel-loader/-/babel-loader-6.2.4.tgz"
  	},
  	"files": [
  		"index.js",
  		"lib"
  	],
  	"gitHead": "28e76e3b5b4b1526ea89126a83588619c2ac1638",
  	"homepage": "https://github.com/babel/babel-loader",
  	"keywords": [
  		"webpack",
  		"loader",
  		"6to5",
  		"babel",
  		"es6",
  		"transpiler",
  		"module"
  	],
  	"license": "MIT",
  	"maintainers": [
  		{
  			"email": "sebmck@gmail.com",
  			"name": "sebmck"
  		},
  		{
  			"email": "couto@15minuteslate.net",
  			"name": "couto"
  		}
  	],
  	"name": "babel-loader",
  	"optionalDependencies": {},
  	"peerDependencies": {
  		"babel-core": "^6.0.0",
  		"webpack": "1 || ^2.1.0-beta"
  	},
  	"readme": "ERROR: No README data found!",
  	"repository": {
  		"type": "git",
  		"url": "git+https://github.com/babel/babel-loader.git"
  	},
  	"scripts": {
  		"cov": "istanbul cover ./node_modules/.bin/_mocha -- test/*.test.js",
  		"cs": "jscs --config .jscsrc index.js lib/* test/*",
  		"hint": "jshint --config .jshintrc index.js lib/* test/*",
  		"test": "npm run hint && npm run cs && npm run cov"
  	},
  	"version": "6.2.4"
  };

/***/ },
/* 1075 */
/***/ function(module, exports) {

  module.exports = {
  	"builtin": {
  		"Array": false,
  		"ArrayBuffer": false,
  		"Boolean": false,
  		"constructor": false,
  		"DataView": false,
  		"Date": false,
  		"decodeURI": false,
  		"decodeURIComponent": false,
  		"encodeURI": false,
  		"encodeURIComponent": false,
  		"Error": false,
  		"escape": false,
  		"eval": false,
  		"EvalError": false,
  		"Float32Array": false,
  		"Float64Array": false,
  		"Function": false,
  		"hasOwnProperty": false,
  		"Infinity": false,
  		"Int16Array": false,
  		"Int32Array": false,
  		"Int8Array": false,
  		"isFinite": false,
  		"isNaN": false,
  		"isPrototypeOf": false,
  		"JSON": false,
  		"Map": false,
  		"Math": false,
  		"NaN": false,
  		"Number": false,
  		"Object": false,
  		"parseFloat": false,
  		"parseInt": false,
  		"Promise": false,
  		"propertyIsEnumerable": false,
  		"Proxy": false,
  		"RangeError": false,
  		"ReferenceError": false,
  		"Reflect": false,
  		"RegExp": false,
  		"Set": false,
  		"String": false,
  		"Symbol": false,
  		"SyntaxError": false,
  		"System": false,
  		"toLocaleString": false,
  		"toString": false,
  		"TypeError": false,
  		"Uint16Array": false,
  		"Uint32Array": false,
  		"Uint8Array": false,
  		"Uint8ClampedArray": false,
  		"undefined": false,
  		"unescape": false,
  		"URIError": false,
  		"valueOf": false,
  		"WeakMap": false,
  		"WeakSet": false
  	},
  	"es5": {
  		"Array": false,
  		"Boolean": false,
  		"constructor": false,
  		"Date": false,
  		"decodeURI": false,
  		"decodeURIComponent": false,
  		"encodeURI": false,
  		"encodeURIComponent": false,
  		"Error": false,
  		"escape": false,
  		"eval": false,
  		"EvalError": false,
  		"Float32Array": false,
  		"Float64Array": false,
  		"Function": false,
  		"hasOwnProperty": false,
  		"Infinity": false,
  		"isFinite": false,
  		"isNaN": false,
  		"isPrototypeOf": false,
  		"JSON": false,
  		"Math": false,
  		"NaN": false,
  		"Number": false,
  		"Object": false,
  		"parseFloat": false,
  		"parseInt": false,
  		"propertyIsEnumerable": false,
  		"RangeError": false,
  		"ReferenceError": false,
  		"RegExp": false,
  		"String": false,
  		"SyntaxError": false,
  		"toLocaleString": false,
  		"toString": false,
  		"TypeError": false,
  		"undefined": false,
  		"unescape": false,
  		"URIError": false,
  		"valueOf": false
  	},
  	"es6": {
  		"Array": false,
  		"ArrayBuffer": false,
  		"Boolean": false,
  		"constructor": false,
  		"DataView": false,
  		"Date": false,
  		"decodeURI": false,
  		"decodeURIComponent": false,
  		"encodeURI": false,
  		"encodeURIComponent": false,
  		"Error": false,
  		"escape": false,
  		"eval": false,
  		"EvalError": false,
  		"Float32Array": false,
  		"Float64Array": false,
  		"Function": false,
  		"hasOwnProperty": false,
  		"Infinity": false,
  		"Int16Array": false,
  		"Int32Array": false,
  		"Int8Array": false,
  		"isFinite": false,
  		"isNaN": false,
  		"isPrototypeOf": false,
  		"JSON": false,
  		"Map": false,
  		"Math": false,
  		"NaN": false,
  		"Number": false,
  		"Object": false,
  		"parseFloat": false,
  		"parseInt": false,
  		"Promise": false,
  		"propertyIsEnumerable": false,
  		"Proxy": false,
  		"RangeError": false,
  		"ReferenceError": false,
  		"Reflect": false,
  		"RegExp": false,
  		"Set": false,
  		"String": false,
  		"Symbol": false,
  		"SyntaxError": false,
  		"System": false,
  		"toLocaleString": false,
  		"toString": false,
  		"TypeError": false,
  		"Uint16Array": false,
  		"Uint32Array": false,
  		"Uint8Array": false,
  		"Uint8ClampedArray": false,
  		"undefined": false,
  		"unescape": false,
  		"URIError": false,
  		"valueOf": false,
  		"WeakMap": false,
  		"WeakSet": false
  	},
  	"browser": {
  		"addEventListener": false,
  		"alert": false,
  		"AnalyserNode": false,
  		"AnimationEvent": false,
  		"applicationCache": false,
  		"ApplicationCache": false,
  		"ApplicationCacheErrorEvent": false,
  		"atob": false,
  		"Attr": false,
  		"Audio": false,
  		"AudioBuffer": false,
  		"AudioBufferSourceNode": false,
  		"AudioContext": false,
  		"AudioDestinationNode": false,
  		"AudioListener": false,
  		"AudioNode": false,
  		"AudioParam": false,
  		"AudioProcessingEvent": false,
  		"AutocompleteErrorEvent": false,
  		"BarProp": false,
  		"BatteryManager": false,
  		"BeforeUnloadEvent": false,
  		"BiquadFilterNode": false,
  		"Blob": false,
  		"blur": false,
  		"btoa": false,
  		"Cache": false,
  		"caches": false,
  		"CacheStorage": false,
  		"cancelAnimationFrame": false,
  		"CanvasGradient": false,
  		"CanvasPattern": false,
  		"CanvasRenderingContext2D": false,
  		"CDATASection": false,
  		"ChannelMergerNode": false,
  		"ChannelSplitterNode": false,
  		"CharacterData": false,
  		"clearInterval": false,
  		"clearTimeout": false,
  		"clientInformation": false,
  		"ClientRect": false,
  		"ClientRectList": false,
  		"ClipboardEvent": false,
  		"close": false,
  		"closed": false,
  		"CloseEvent": false,
  		"Comment": false,
  		"CompositionEvent": false,
  		"confirm": false,
  		"console": false,
  		"ConvolverNode": false,
  		"crypto": false,
  		"Crypto": false,
  		"CryptoKey": false,
  		"CSS": false,
  		"CSSFontFaceRule": false,
  		"CSSImportRule": false,
  		"CSSKeyframeRule": false,
  		"CSSKeyframesRule": false,
  		"CSSMediaRule": false,
  		"CSSPageRule": false,
  		"CSSRule": false,
  		"CSSRuleList": false,
  		"CSSStyleDeclaration": false,
  		"CSSStyleRule": false,
  		"CSSStyleSheet": false,
  		"CSSSupportsRule": false,
  		"CSSUnknownRule": false,
  		"CSSViewportRule": false,
  		"CustomEvent": false,
  		"DataTransfer": false,
  		"DataTransferItem": false,
  		"DataTransferItemList": false,
  		"Debug": false,
  		"defaultStatus": false,
  		"defaultstatus": false,
  		"DelayNode": false,
  		"DeviceMotionEvent": false,
  		"DeviceOrientationEvent": false,
  		"devicePixelRatio": false,
  		"dispatchEvent": false,
  		"document": false,
  		"Document": false,
  		"DocumentFragment": false,
  		"DocumentType": false,
  		"DOMError": false,
  		"DOMException": false,
  		"DOMImplementation": false,
  		"DOMParser": false,
  		"DOMSettableTokenList": false,
  		"DOMStringList": false,
  		"DOMStringMap": false,
  		"DOMTokenList": false,
  		"DragEvent": false,
  		"DynamicsCompressorNode": false,
  		"Element": false,
  		"ElementTimeControl": false,
  		"ErrorEvent": false,
  		"event": false,
  		"Event": false,
  		"EventSource": false,
  		"EventTarget": false,
  		"external": false,
  		"fetch": false,
  		"File": false,
  		"FileError": false,
  		"FileList": false,
  		"FileReader": false,
  		"find": false,
  		"focus": false,
  		"FocusEvent": false,
  		"FontFace": false,
  		"FormData": false,
  		"frameElement": false,
  		"frames": false,
  		"GainNode": false,
  		"Gamepad": false,
  		"GamepadButton": false,
  		"GamepadEvent": false,
  		"getComputedStyle": false,
  		"getSelection": false,
  		"HashChangeEvent": false,
  		"Headers": false,
  		"history": false,
  		"History": false,
  		"HTMLAllCollection": false,
  		"HTMLAnchorElement": false,
  		"HTMLAppletElement": false,
  		"HTMLAreaElement": false,
  		"HTMLAudioElement": false,
  		"HTMLBaseElement": false,
  		"HTMLBlockquoteElement": false,
  		"HTMLBodyElement": false,
  		"HTMLBRElement": false,
  		"HTMLButtonElement": false,
  		"HTMLCanvasElement": false,
  		"HTMLCollection": false,
  		"HTMLContentElement": false,
  		"HTMLDataListElement": false,
  		"HTMLDetailsElement": false,
  		"HTMLDialogElement": false,
  		"HTMLDirectoryElement": false,
  		"HTMLDivElement": false,
  		"HTMLDListElement": false,
  		"HTMLDocument": false,
  		"HTMLElement": false,
  		"HTMLEmbedElement": false,
  		"HTMLFieldSetElement": false,
  		"HTMLFontElement": false,
  		"HTMLFormControlsCollection": false,
  		"HTMLFormElement": false,
  		"HTMLFrameElement": false,
  		"HTMLFrameSetElement": false,
  		"HTMLHeadElement": false,
  		"HTMLHeadingElement": false,
  		"HTMLHRElement": false,
  		"HTMLHtmlElement": false,
  		"HTMLIFrameElement": false,
  		"HTMLImageElement": false,
  		"HTMLInputElement": false,
  		"HTMLIsIndexElement": false,
  		"HTMLKeygenElement": false,
  		"HTMLLabelElement": false,
  		"HTMLLayerElement": false,
  		"HTMLLegendElement": false,
  		"HTMLLIElement": false,
  		"HTMLLinkElement": false,
  		"HTMLMapElement": false,
  		"HTMLMarqueeElement": false,
  		"HTMLMediaElement": false,
  		"HTMLMenuElement": false,
  		"HTMLMetaElement": false,
  		"HTMLMeterElement": false,
  		"HTMLModElement": false,
  		"HTMLObjectElement": false,
  		"HTMLOListElement": false,
  		"HTMLOptGroupElement": false,
  		"HTMLOptionElement": false,
  		"HTMLOptionsCollection": false,
  		"HTMLOutputElement": false,
  		"HTMLParagraphElement": false,
  		"HTMLParamElement": false,
  		"HTMLPictureElement": false,
  		"HTMLPreElement": false,
  		"HTMLProgressElement": false,
  		"HTMLQuoteElement": false,
  		"HTMLScriptElement": false,
  		"HTMLSelectElement": false,
  		"HTMLShadowElement": false,
  		"HTMLSourceElement": false,
  		"HTMLSpanElement": false,
  		"HTMLStyleElement": false,
  		"HTMLTableCaptionElement": false,
  		"HTMLTableCellElement": false,
  		"HTMLTableColElement": false,
  		"HTMLTableElement": false,
  		"HTMLTableRowElement": false,
  		"HTMLTableSectionElement": false,
  		"HTMLTemplateElement": false,
  		"HTMLTextAreaElement": false,
  		"HTMLTitleElement": false,
  		"HTMLTrackElement": false,
  		"HTMLUListElement": false,
  		"HTMLUnknownElement": false,
  		"HTMLVideoElement": false,
  		"IDBCursor": false,
  		"IDBCursorWithValue": false,
  		"IDBDatabase": false,
  		"IDBEnvironment": false,
  		"IDBFactory": false,
  		"IDBIndex": false,
  		"IDBKeyRange": false,
  		"IDBObjectStore": false,
  		"IDBOpenDBRequest": false,
  		"IDBRequest": false,
  		"IDBTransaction": false,
  		"IDBVersionChangeEvent": false,
  		"Image": false,
  		"ImageBitmap": false,
  		"ImageData": false,
  		"indexedDB": false,
  		"innerHeight": false,
  		"innerWidth": false,
  		"InputEvent": false,
  		"InputMethodContext": false,
  		"Intl": false,
  		"KeyboardEvent": false,
  		"length": false,
  		"localStorage": false,
  		"location": false,
  		"Location": false,
  		"locationbar": false,
  		"matchMedia": false,
  		"MediaElementAudioSourceNode": false,
  		"MediaEncryptedEvent": false,
  		"MediaError": false,
  		"MediaKeyError": false,
  		"MediaKeyEvent": false,
  		"MediaKeyMessageEvent": false,
  		"MediaKeys": false,
  		"MediaKeySession": false,
  		"MediaKeyStatusMap": false,
  		"MediaKeySystemAccess": false,
  		"MediaList": false,
  		"MediaQueryList": false,
  		"MediaQueryListEvent": false,
  		"MediaSource": false,
  		"MediaStreamAudioDestinationNode": false,
  		"MediaStreamAudioSourceNode": false,
  		"MediaStreamEvent": false,
  		"MediaStreamTrack": false,
  		"menubar": false,
  		"MessageChannel": false,
  		"MessageEvent": false,
  		"MessagePort": false,
  		"MIDIAccess": false,
  		"MIDIConnectionEvent": false,
  		"MIDIInput": false,
  		"MIDIInputMap": false,
  		"MIDIMessageEvent": false,
  		"MIDIOutput": false,
  		"MIDIOutputMap": false,
  		"MIDIPort": false,
  		"MimeType": false,
  		"MimeTypeArray": false,
  		"MouseEvent": false,
  		"moveBy": false,
  		"moveTo": false,
  		"MutationEvent": false,
  		"MutationObserver": false,
  		"MutationRecord": false,
  		"name": false,
  		"NamedNodeMap": false,
  		"navigator": false,
  		"Navigator": false,
  		"Node": false,
  		"NodeFilter": false,
  		"NodeIterator": false,
  		"NodeList": false,
  		"Notification": false,
  		"OfflineAudioCompletionEvent": false,
  		"OfflineAudioContext": false,
  		"offscreenBuffering": false,
  		"onbeforeunload": true,
  		"onblur": true,
  		"onerror": true,
  		"onfocus": true,
  		"onload": true,
  		"onresize": true,
  		"onunload": true,
  		"open": false,
  		"openDatabase": false,
  		"opener": false,
  		"opera": false,
  		"Option": false,
  		"OscillatorNode": false,
  		"outerHeight": false,
  		"outerWidth": false,
  		"PageTransitionEvent": false,
  		"pageXOffset": false,
  		"pageYOffset": false,
  		"parent": false,
  		"Path2D": false,
  		"performance": false,
  		"Performance": false,
  		"PerformanceEntry": false,
  		"PerformanceMark": false,
  		"PerformanceMeasure": false,
  		"PerformanceNavigation": false,
  		"PerformanceResourceTiming": false,
  		"PerformanceTiming": false,
  		"PeriodicWave": false,
  		"Permissions": false,
  		"PermissionStatus": false,
  		"personalbar": false,
  		"Plugin": false,
  		"PluginArray": false,
  		"PopStateEvent": false,
  		"postMessage": false,
  		"print": false,
  		"ProcessingInstruction": false,
  		"ProgressEvent": false,
  		"prompt": false,
  		"PushManager": false,
  		"PushSubscription": false,
  		"RadioNodeList": false,
  		"Range": false,
  		"ReadableByteStream": false,
  		"ReadableStream": false,
  		"removeEventListener": false,
  		"Request": false,
  		"requestAnimationFrame": false,
  		"resizeBy": false,
  		"resizeTo": false,
  		"Response": false,
  		"RTCIceCandidate": false,
  		"RTCSessionDescription": false,
  		"screen": false,
  		"Screen": false,
  		"screenLeft": false,
  		"ScreenOrientation": false,
  		"screenTop": false,
  		"screenX": false,
  		"screenY": false,
  		"ScriptProcessorNode": false,
  		"scroll": false,
  		"scrollbars": false,
  		"scrollBy": false,
  		"scrollTo": false,
  		"scrollX": false,
  		"scrollY": false,
  		"SecurityPolicyViolationEvent": false,
  		"Selection": false,
  		"self": false,
  		"ServiceWorker": false,
  		"ServiceWorkerContainer": false,
  		"ServiceWorkerRegistration": false,
  		"sessionStorage": false,
  		"setInterval": false,
  		"setTimeout": false,
  		"ShadowRoot": false,
  		"SharedWorker": false,
  		"showModalDialog": false,
  		"speechSynthesis": false,
  		"SpeechSynthesisEvent": false,
  		"SpeechSynthesisUtterance": false,
  		"status": false,
  		"statusbar": false,
  		"stop": false,
  		"Storage": false,
  		"StorageEvent": false,
  		"styleMedia": false,
  		"StyleSheet": false,
  		"StyleSheetList": false,
  		"SubtleCrypto": false,
  		"SVGAElement": false,
  		"SVGAltGlyphDefElement": false,
  		"SVGAltGlyphElement": false,
  		"SVGAltGlyphItemElement": false,
  		"SVGAngle": false,
  		"SVGAnimateColorElement": false,
  		"SVGAnimatedAngle": false,
  		"SVGAnimatedBoolean": false,
  		"SVGAnimatedEnumeration": false,
  		"SVGAnimatedInteger": false,
  		"SVGAnimatedLength": false,
  		"SVGAnimatedLengthList": false,
  		"SVGAnimatedNumber": false,
  		"SVGAnimatedNumberList": false,
  		"SVGAnimatedPathData": false,
  		"SVGAnimatedPoints": false,
  		"SVGAnimatedPreserveAspectRatio": false,
  		"SVGAnimatedRect": false,
  		"SVGAnimatedString": false,
  		"SVGAnimatedTransformList": false,
  		"SVGAnimateElement": false,
  		"SVGAnimateMotionElement": false,
  		"SVGAnimateTransformElement": false,
  		"SVGAnimationElement": false,
  		"SVGCircleElement": false,
  		"SVGClipPathElement": false,
  		"SVGColor": false,
  		"SVGColorProfileElement": false,
  		"SVGColorProfileRule": false,
  		"SVGComponentTransferFunctionElement": false,
  		"SVGCSSRule": false,
  		"SVGCursorElement": false,
  		"SVGDefsElement": false,
  		"SVGDescElement": false,
  		"SVGDiscardElement": false,
  		"SVGDocument": false,
  		"SVGElement": false,
  		"SVGElementInstance": false,
  		"SVGElementInstanceList": false,
  		"SVGEllipseElement": false,
  		"SVGEvent": false,
  		"SVGExternalResourcesRequired": false,
  		"SVGFEBlendElement": false,
  		"SVGFEColorMatrixElement": false,
  		"SVGFEComponentTransferElement": false,
  		"SVGFECompositeElement": false,
  		"SVGFEConvolveMatrixElement": false,
  		"SVGFEDiffuseLightingElement": false,
  		"SVGFEDisplacementMapElement": false,
  		"SVGFEDistantLightElement": false,
  		"SVGFEDropShadowElement": false,
  		"SVGFEFloodElement": false,
  		"SVGFEFuncAElement": false,
  		"SVGFEFuncBElement": false,
  		"SVGFEFuncGElement": false,
  		"SVGFEFuncRElement": false,
  		"SVGFEGaussianBlurElement": false,
  		"SVGFEImageElement": false,
  		"SVGFEMergeElement": false,
  		"SVGFEMergeNodeElement": false,
  		"SVGFEMorphologyElement": false,
  		"SVGFEOffsetElement": false,
  		"SVGFEPointLightElement": false,
  		"SVGFESpecularLightingElement": false,
  		"SVGFESpotLightElement": false,
  		"SVGFETileElement": false,
  		"SVGFETurbulenceElement": false,
  		"SVGFilterElement": false,
  		"SVGFilterPrimitiveStandardAttributes": false,
  		"SVGFitToViewBox": false,
  		"SVGFontElement": false,
  		"SVGFontFaceElement": false,
  		"SVGFontFaceFormatElement": false,
  		"SVGFontFaceNameElement": false,
  		"SVGFontFaceSrcElement": false,
  		"SVGFontFaceUriElement": false,
  		"SVGForeignObjectElement": false,
  		"SVGGElement": false,
  		"SVGGeometryElement": false,
  		"SVGGlyphElement": false,
  		"SVGGlyphRefElement": false,
  		"SVGGradientElement": false,
  		"SVGGraphicsElement": false,
  		"SVGHKernElement": false,
  		"SVGICCColor": false,
  		"SVGImageElement": false,
  		"SVGLangSpace": false,
  		"SVGLength": false,
  		"SVGLengthList": false,
  		"SVGLinearGradientElement": false,
  		"SVGLineElement": false,
  		"SVGLocatable": false,
  		"SVGMarkerElement": false,
  		"SVGMaskElement": false,
  		"SVGMatrix": false,
  		"SVGMetadataElement": false,
  		"SVGMissingGlyphElement": false,
  		"SVGMPathElement": false,
  		"SVGNumber": false,
  		"SVGNumberList": false,
  		"SVGPaint": false,
  		"SVGPathElement": false,
  		"SVGPathSeg": false,
  		"SVGPathSegArcAbs": false,
  		"SVGPathSegArcRel": false,
  		"SVGPathSegClosePath": false,
  		"SVGPathSegCurvetoCubicAbs": false,
  		"SVGPathSegCurvetoCubicRel": false,
  		"SVGPathSegCurvetoCubicSmoothAbs": false,
  		"SVGPathSegCurvetoCubicSmoothRel": false,
  		"SVGPathSegCurvetoQuadraticAbs": false,
  		"SVGPathSegCurvetoQuadraticRel": false,
  		"SVGPathSegCurvetoQuadraticSmoothAbs": false,
  		"SVGPathSegCurvetoQuadraticSmoothRel": false,
  		"SVGPathSegLinetoAbs": false,
  		"SVGPathSegLinetoHorizontalAbs": false,
  		"SVGPathSegLinetoHorizontalRel": false,
  		"SVGPathSegLinetoRel": false,
  		"SVGPathSegLinetoVerticalAbs": false,
  		"SVGPathSegLinetoVerticalRel": false,
  		"SVGPathSegList": false,
  		"SVGPathSegMovetoAbs": false,
  		"SVGPathSegMovetoRel": false,
  		"SVGPatternElement": false,
  		"SVGPoint": false,
  		"SVGPointList": false,
  		"SVGPolygonElement": false,
  		"SVGPolylineElement": false,
  		"SVGPreserveAspectRatio": false,
  		"SVGRadialGradientElement": false,
  		"SVGRect": false,
  		"SVGRectElement": false,
  		"SVGRenderingIntent": false,
  		"SVGScriptElement": false,
  		"SVGSetElement": false,
  		"SVGStopElement": false,
  		"SVGStringList": false,
  		"SVGStylable": false,
  		"SVGStyleElement": false,
  		"SVGSVGElement": false,
  		"SVGSwitchElement": false,
  		"SVGSymbolElement": false,
  		"SVGTests": false,
  		"SVGTextContentElement": false,
  		"SVGTextElement": false,
  		"SVGTextPathElement": false,
  		"SVGTextPositioningElement": false,
  		"SVGTitleElement": false,
  		"SVGTransform": false,
  		"SVGTransformable": false,
  		"SVGTransformList": false,
  		"SVGTRefElement": false,
  		"SVGTSpanElement": false,
  		"SVGUnitTypes": false,
  		"SVGURIReference": false,
  		"SVGUseElement": false,
  		"SVGViewElement": false,
  		"SVGViewSpec": false,
  		"SVGVKernElement": false,
  		"SVGZoomAndPan": false,
  		"SVGZoomEvent": false,
  		"Text": false,
  		"TextDecoder": false,
  		"TextEncoder": false,
  		"TextEvent": false,
  		"TextMetrics": false,
  		"TextTrack": false,
  		"TextTrackCue": false,
  		"TextTrackCueList": false,
  		"TextTrackList": false,
  		"TimeEvent": false,
  		"TimeRanges": false,
  		"toolbar": false,
  		"top": false,
  		"Touch": false,
  		"TouchEvent": false,
  		"TouchList": false,
  		"TrackEvent": false,
  		"TransitionEvent": false,
  		"TreeWalker": false,
  		"UIEvent": false,
  		"URL": false,
  		"ValidityState": false,
  		"VTTCue": false,
  		"WaveShaperNode": false,
  		"WebGLActiveInfo": false,
  		"WebGLBuffer": false,
  		"WebGLContextEvent": false,
  		"WebGLFramebuffer": false,
  		"WebGLProgram": false,
  		"WebGLRenderbuffer": false,
  		"WebGLRenderingContext": false,
  		"WebGLShader": false,
  		"WebGLShaderPrecisionFormat": false,
  		"WebGLTexture": false,
  		"WebGLUniformLocation": false,
  		"WebSocket": false,
  		"WheelEvent": false,
  		"window": false,
  		"Window": false,
  		"Worker": false,
  		"XDomainRequest": false,
  		"XMLDocument": false,
  		"XMLHttpRequest": false,
  		"XMLHttpRequestEventTarget": false,
  		"XMLHttpRequestProgressEvent": false,
  		"XMLHttpRequestUpload": false,
  		"XMLSerializer": false,
  		"XPathEvaluator": false,
  		"XPathException": false,
  		"XPathExpression": false,
  		"XPathNamespace": false,
  		"XPathNSResolver": false,
  		"XPathResult": false,
  		"XSLTProcessor": false
  	},
  	"worker": {
  		"applicationCache": false,
  		"atob": false,
  		"Blob": false,
  		"BroadcastChannel": false,
  		"btoa": false,
  		"Cache": false,
  		"caches": false,
  		"clearInterval": false,
  		"clearTimeout": false,
  		"close": true,
  		"console": false,
  		"fetch": false,
  		"FileReaderSync": false,
  		"FormData": false,
  		"Headers": false,
  		"IDBCursor": false,
  		"IDBCursorWithValue": false,
  		"IDBDatabase": false,
  		"IDBFactory": false,
  		"IDBIndex": false,
  		"IDBKeyRange": false,
  		"IDBObjectStore": false,
  		"IDBOpenDBRequest": false,
  		"IDBRequest": false,
  		"IDBTransaction": false,
  		"IDBVersionChangeEvent": false,
  		"ImageData": false,
  		"importScripts": true,
  		"indexedDB": false,
  		"location": false,
  		"MessageChannel": false,
  		"MessagePort": false,
  		"name": false,
  		"navigator": false,
  		"Notification": false,
  		"onclose": true,
  		"onconnect": true,
  		"onerror": true,
  		"onlanguagechange": true,
  		"onmessage": true,
  		"onoffline": true,
  		"ononline": true,
  		"onrejectionhandled": true,
  		"onunhandledrejection": true,
  		"performance": false,
  		"Performance": false,
  		"PerformanceEntry": false,
  		"PerformanceMark": false,
  		"PerformanceMeasure": false,
  		"PerformanceNavigation": false,
  		"PerformanceResourceTiming": false,
  		"PerformanceTiming": false,
  		"postMessage": true,
  		"Promise": false,
  		"Request": false,
  		"Response": false,
  		"self": true,
  		"ServiceWorkerRegistration": false,
  		"setInterval": false,
  		"setTimeout": false,
  		"TextDecoder": false,
  		"TextEncoder": false,
  		"URL": false,
  		"WebSocket": false,
  		"Worker": false,
  		"XMLHttpRequest": false
  	},
  	"node": {
  		"__dirname": false,
  		"__filename": false,
  		"arguments": false,
  		"Buffer": false,
  		"clearImmediate": false,
  		"clearInterval": false,
  		"clearTimeout": false,
  		"console": false,
  		"exports": true,
  		"GLOBAL": false,
  		"global": false,
  		"module": false,
  		"process": false,
  		"require": false,
  		"root": false,
  		"setImmediate": false,
  		"setInterval": false,
  		"setTimeout": false
  	},
  	"commonjs": {
  		"exports": true,
  		"module": false,
  		"require": false,
  		"global": false
  	},
  	"amd": {
  		"define": false,
  		"require": false
  	},
  	"mocha": {
  		"after": false,
  		"afterEach": false,
  		"before": false,
  		"beforeEach": false,
  		"context": false,
  		"describe": false,
  		"it": false,
  		"mocha": false,
  		"setup": false,
  		"specify": false,
  		"suite": false,
  		"suiteSetup": false,
  		"suiteTeardown": false,
  		"teardown": false,
  		"test": false,
  		"xcontext": false,
  		"xdescribe": false,
  		"xit": false,
  		"xspecify": false
  	},
  	"jasmine": {
  		"afterAll": false,
  		"afterEach": false,
  		"beforeAll": false,
  		"beforeEach": false,
  		"describe": false,
  		"expect": false,
  		"fail": false,
  		"fdescribe": false,
  		"fit": false,
  		"it": false,
  		"jasmine": false,
  		"pending": false,
  		"runs": false,
  		"spyOn": false,
  		"waits": false,
  		"waitsFor": false,
  		"xdescribe": false,
  		"xit": false
  	},
  	"jest": {
  		"afterEach": false,
  		"beforeEach": false,
  		"describe": false,
  		"expect": false,
  		"it": false,
  		"jest": false,
  		"pit": false,
  		"require": false,
  		"xdescribe": false,
  		"xit": false
  	},
  	"qunit": {
  		"asyncTest": false,
  		"deepEqual": false,
  		"equal": false,
  		"expect": false,
  		"module": false,
  		"notDeepEqual": false,
  		"notEqual": false,
  		"notOk": false,
  		"notPropEqual": false,
  		"notStrictEqual": false,
  		"ok": false,
  		"propEqual": false,
  		"QUnit": false,
  		"raises": false,
  		"start": false,
  		"stop": false,
  		"strictEqual": false,
  		"test": false,
  		"throws": false
  	},
  	"phantomjs": {
  		"console": true,
  		"exports": true,
  		"phantom": true,
  		"require": true,
  		"WebPage": true
  	},
  	"couch": {
  		"emit": false,
  		"exports": false,
  		"getRow": false,
  		"log": false,
  		"module": false,
  		"provides": false,
  		"require": false,
  		"respond": false,
  		"send": false,
  		"start": false,
  		"sum": false
  	},
  	"rhino": {
  		"defineClass": false,
  		"deserialize": false,
  		"gc": false,
  		"help": false,
  		"importClass": false,
  		"importPackage": false,
  		"java": false,
  		"load": false,
  		"loadClass": false,
  		"Packages": false,
  		"print": false,
  		"quit": false,
  		"readFile": false,
  		"readUrl": false,
  		"runCommand": false,
  		"seal": false,
  		"serialize": false,
  		"spawn": false,
  		"sync": false,
  		"toint32": false,
  		"version": false
  	},
  	"nashorn": {
  		"__DIR__": false,
  		"__FILE__": false,
  		"__LINE__": false,
  		"com": false,
  		"edu": false,
  		"exit": false,
  		"Java": false,
  		"java": false,
  		"javafx": false,
  		"JavaImporter": false,
  		"javax": false,
  		"JSAdapter": false,
  		"load": false,
  		"loadWithNewGlobal": false,
  		"org": false,
  		"Packages": false,
  		"print": false,
  		"quit": false
  	},
  	"wsh": {
  		"ActiveXObject": true,
  		"Enumerator": true,
  		"GetObject": true,
  		"ScriptEngine": true,
  		"ScriptEngineBuildVersion": true,
  		"ScriptEngineMajorVersion": true,
  		"ScriptEngineMinorVersion": true,
  		"VBArray": true,
  		"WScript": true,
  		"WSH": true,
  		"XDomainRequest": true
  	},
  	"jquery": {
  		"$": false,
  		"jQuery": false
  	},
  	"yui": {
  		"Y": false,
  		"YUI": false,
  		"YUI_config": false
  	},
  	"shelljs": {
  		"cat": false,
  		"cd": false,
  		"chmod": false,
  		"config": false,
  		"cp": false,
  		"dirs": false,
  		"echo": false,
  		"env": false,
  		"error": false,
  		"exec": false,
  		"exit": false,
  		"find": false,
  		"grep": false,
  		"ls": false,
  		"ln": false,
  		"mkdir": false,
  		"mv": false,
  		"popd": false,
  		"pushd": false,
  		"pwd": false,
  		"rm": false,
  		"sed": false,
  		"target": false,
  		"tempdir": false,
  		"test": false,
  		"which": false
  	},
  	"prototypejs": {
  		"$": false,
  		"$$": false,
  		"$A": false,
  		"$break": false,
  		"$continue": false,
  		"$F": false,
  		"$H": false,
  		"$R": false,
  		"$w": false,
  		"Abstract": false,
  		"Ajax": false,
  		"Autocompleter": false,
  		"Builder": false,
  		"Class": false,
  		"Control": false,
  		"Draggable": false,
  		"Draggables": false,
  		"Droppables": false,
  		"Effect": false,
  		"Element": false,
  		"Enumerable": false,
  		"Event": false,
  		"Field": false,
  		"Form": false,
  		"Hash": false,
  		"Insertion": false,
  		"ObjectRange": false,
  		"PeriodicalExecuter": false,
  		"Position": false,
  		"Prototype": false,
  		"Scriptaculous": false,
  		"Selector": false,
  		"Sortable": false,
  		"SortableObserver": false,
  		"Sound": false,
  		"Template": false,
  		"Toggle": false,
  		"Try": false
  	},
  	"meteor": {
  		"$": false,
  		"_": false,
  		"Accounts": false,
  		"App": false,
  		"Assets": false,
  		"Blaze": false,
  		"check": false,
  		"Cordova": false,
  		"DDP": false,
  		"DDPServer": false,
  		"Deps": false,
  		"EJSON": false,
  		"Email": false,
  		"HTTP": false,
  		"Log": false,
  		"Match": false,
  		"Meteor": false,
  		"Mongo": false,
  		"MongoInternals": false,
  		"Npm": false,
  		"Package": false,
  		"Plugin": false,
  		"process": false,
  		"Random": false,
  		"ReactiveDict": false,
  		"ReactiveVar": false,
  		"Router": false,
  		"Session": false,
  		"share": false,
  		"Spacebars": false,
  		"Template": false,
  		"Tinytest": false,
  		"Tracker": false,
  		"UI": false,
  		"Utils": false,
  		"WebApp": false,
  		"WebAppInternals": false
  	},
  	"mongo": {
  		"_isWindows": false,
  		"_rand": false,
  		"BulkWriteResult": false,
  		"cat": false,
  		"cd": false,
  		"connect": false,
  		"db": false,
  		"getHostName": false,
  		"getMemInfo": false,
  		"hostname": false,
  		"listFiles": false,
  		"load": false,
  		"ls": false,
  		"md5sumFile": false,
  		"mkdir": false,
  		"Mongo": false,
  		"ObjectId": false,
  		"PlanCache": false,
  		"print": false,
  		"printjson": false,
  		"pwd": false,
  		"quit": false,
  		"removeFile": false,
  		"rs": false,
  		"sh": false,
  		"UUID": false,
  		"version": false,
  		"WriteResult": false
  	},
  	"applescript": {
  		"$": false,
  		"Application": false,
  		"Automation": false,
  		"console": false,
  		"delay": false,
  		"Library": false,
  		"ObjC": false,
  		"ObjectSpecifier": false,
  		"Path": false,
  		"Progress": false,
  		"Ref": false
  	},
  	"serviceworker": {
  		"caches": false,
  		"Cache": false,
  		"CacheStorage": false,
  		"Client": false,
  		"clients": false,
  		"Clients": false,
  		"ExtendableEvent": false,
  		"ExtendableMessageEvent": false,
  		"FetchEvent": false,
  		"importScripts": false,
  		"registration": false,
  		"self": false,
  		"ServiceWorker": false,
  		"ServiceWorkerContainer": false,
  		"ServiceWorkerGlobalScope": false,
  		"ServiceWorkerMessageEvent": false,
  		"ServiceWorkerRegistration": false,
  		"skipWaiting": false,
  		"WindowClient": false
  	},
  	"atomtest": {
  		"advanceClock": false,
  		"fakeClearInterval": false,
  		"fakeClearTimeout": false,
  		"fakeSetInterval": false,
  		"fakeSetTimeout": false,
  		"resetTimeouts": false,
  		"waitsForPromise": false
  	},
  	"embertest": {
  		"andThen": false,
  		"click": false,
  		"currentPath": false,
  		"currentRouteName": false,
  		"currentURL": false,
  		"fillIn": false,
  		"find": false,
  		"findWithAssert": false,
  		"keyEvent": false,
  		"pauseTest": false,
  		"triggerEvent": false,
  		"visit": false
  	},
  	"protractor": {
  		"$": false,
  		"$$": false,
  		"browser": false,
  		"By": false,
  		"by": false,
  		"DartObject": false,
  		"element": false,
  		"protractor": false
  	},
  	"shared-node-browser": {
  		"clearInterval": false,
  		"clearTimeout": false,
  		"console": false,
  		"setInterval": false,
  		"setTimeout": false
  	},
  	"webextensions": {
  		"browser": false,
  		"chrome": false,
  		"opr": false
  	},
  	"greasemonkey": {
  		"GM_addStyle": false,
  		"GM_deleteValue": false,
  		"GM_getResourceText": false,
  		"GM_getResourceURL": false,
  		"GM_getValue": false,
  		"GM_info": false,
  		"GM_listValues": false,
  		"GM_log": false,
  		"GM_openInTab": false,
  		"GM_registerMenuCommand": false,
  		"GM_setClipboard": false,
  		"GM_setValue": false,
  		"GM_xmlhttpRequest": false,
  		"unsafeWindow": false
  	}
  };

/***/ },
/* 1076 */
/***/ function(module, exports, __webpack_require__) {

  // json5.js
  // Modern JSON. See README.md for details.
  //
  // This file is based directly off of Douglas Crockford's json_parse.js:
  // https://github.com/douglascrockford/JSON-js/blob/master/json_parse.js

  var JSON5 = ( true ? exports : {});

  JSON5.parse = (function () {
      "use strict";

  // This is a function that can parse a JSON5 text, producing a JavaScript
  // data structure. It is a simple, recursive descent parser. It does not use
  // eval or regular expressions, so it can be used as a model for implementing
  // a JSON5 parser in other languages.

  // We are defining the function inside of another function to avoid creating
  // global variables.

      var at,     // The index of the current character
          ch,     // The current character
          escapee = {
              "'":  "'",
              '"':  '"',
              '\\': '\\',
              '/':  '/',
              '\n': '',       // Replace escaped newlines in strings w/ empty string
              b:    '\b',
              f:    '\f',
              n:    '\n',
              r:    '\r',
              t:    '\t'
          },
          ws = [
              ' ',
              '\t',
              '\r',
              '\n',
              '\v',
              '\f',
              '\xA0',
              '\uFEFF'
          ],
          text,

          error = function (m) {

  // Call error when something is wrong.

              var error = new SyntaxError();
              error.message = m;
              error.at = at;
              error.text = text;
              throw error;
          },

          next = function (c) {

  // If a c parameter is provided, verify that it matches the current character.

              if (c && c !== ch) {
                  error("Expected '" + c + "' instead of '" + ch + "'");
              }

  // Get the next character. When there are no more characters,
  // return the empty string.

              ch = text.charAt(at);
              at += 1;
              return ch;
          },

          peek = function () {

  // Get the next character without consuming it or
  // assigning it to the ch varaible.

              return text.charAt(at);
          },

          identifier = function () {

  // Parse an identifier. Normally, reserved words are disallowed here, but we
  // only use this for unquoted object keys, where reserved words are allowed,
  // so we don't check for those here. References:
  // - http://es5.github.com/#x7.6
  // - https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Core_Language_Features#Variables
  // - http://docstore.mik.ua/orelly/webprog/jscript/ch02_07.htm
  // TODO Identifiers can have Unicode "letters" in them; add support for those.

              var key = ch;

              // Identifiers must start with a letter, _ or $.
              if ((ch !== '_' && ch !== '$') &&
                      (ch < 'a' || ch > 'z') &&
                      (ch < 'A' || ch > 'Z')) {
                  error("Bad identifier");
              }

              // Subsequent characters can contain digits.
              while (next() && (
                      ch === '_' || ch === '$' ||
                      (ch >= 'a' && ch <= 'z') ||
                      (ch >= 'A' && ch <= 'Z') ||
                      (ch >= '0' && ch <= '9'))) {
                  key += ch;
              }

              return key;
          },

          number = function () {

  // Parse a number value.

              var number,
                  sign = '',
                  string = '',
                  base = 10;

              if (ch === '-' || ch === '+') {
                  sign = ch;
                  next(ch);
              }

              // support for Infinity (could tweak to allow other words):
              if (ch === 'I') {
                  number = word();
                  if (typeof number !== 'number' || isNaN(number)) {
                      error('Unexpected word for number');
                  }
                  return (sign === '-') ? -number : number;
              }

              // support for NaN
              if (ch === 'N' ) {
                number = word();
                if (!isNaN(number)) {
                  error('expected word to be NaN');
                }
                // ignore sign as -NaN also is NaN
                return number;
              }

              if (ch === '0') {
                  string += ch;
                  next();
                  if (ch === 'x' || ch === 'X') {
                      string += ch;
                      next();
                      base = 16;
                  } else if (ch >= '0' && ch <= '9') {
                      error('Octal literal');
                  }
              }

              switch (base) {
              case 10:
                  while (ch >= '0' && ch <= '9' ) {
                      string += ch;
                      next();
                  }
                  if (ch === '.') {
                      string += '.';
                      while (next() && ch >= '0' && ch <= '9') {
                          string += ch;
                      }
                  }
                  if (ch === 'e' || ch === 'E') {
                      string += ch;
                      next();
                      if (ch === '-' || ch === '+') {
                          string += ch;
                          next();
                      }
                      while (ch >= '0' && ch <= '9') {
                          string += ch;
                          next();
                      }
                  }
                  break;
              case 16:
                  while (ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'F' || ch >= 'a' && ch <= 'f') {
                      string += ch;
                      next();
                  }
                  break;
              }

              if(sign === '-') {
                  number = -string;
              } else {
                  number = +string;
              }
              
              if (!isFinite(number)) {
                  error("Bad number");
              } else {
                  return number;
              }
          },

          string = function () {

  // Parse a string value.

              var hex,
                  i,
                  string = '',
                  delim,      // double quote or single quote
                  uffff;

  // When parsing for string values, we must look for ' or " and \ characters.

              if (ch === '"' || ch === "'") {
                  delim = ch;
                  while (next()) {
                      if (ch === delim) {
                          next();
                          return string;
                      } else if (ch === '\\') {
                          next();
                          if (ch === 'u') {
                              uffff = 0;
                              for (i = 0; i < 4; i += 1) {
                                  hex = parseInt(next(), 16);
                                  if (!isFinite(hex)) {
                                      break;
                                  }
                                  uffff = uffff * 16 + hex;
                              }
                              string += String.fromCharCode(uffff);
                          } else if (ch === '\r') {
                              if (peek() === '\n') {
                                  next();
                              }
                          } else if (typeof escapee[ch] === 'string') {
                              string += escapee[ch];
                          } else {
                              break;
                          }
                      } else if (ch === '\n') {
                          // unescaped newlines are invalid; see:
                          // https://github.com/aseemk/json5/issues/24
                          // TODO this feels special-cased; are there other
                          // invalid unescaped chars?
                          break;
                      } else {
                          string += ch;
                      }
                  }
              }
              error("Bad string");
          },

          inlineComment = function () {

  // Skip an inline comment, assuming this is one. The current character should
  // be the second / character in the // pair that begins this inline comment.
  // To finish the inline comment, we look for a newline or the end of the text.

              if (ch !== '/') {
                  error("Not an inline comment");
              }

              do {
                  next();
                  if (ch === '\n' || ch === '\r') {
                      next();
                      return;
                  }
              } while (ch);
          },

          blockComment = function () {

  // Skip a block comment, assuming this is one. The current character should be
  // the * character in the /* pair that begins this block comment.
  // To finish the block comment, we look for an ending */ pair of characters,
  // but we also watch for the end of text before the comment is terminated.

              if (ch !== '*') {
                  error("Not a block comment");
              }

              do {
                  next();
                  while (ch === '*') {
                      next('*');
                      if (ch === '/') {
                          next('/');
                          return;
                      }
                  }
              } while (ch);

              error("Unterminated block comment");
          },

          comment = function () {

  // Skip a comment, whether inline or block-level, assuming this is one.
  // Comments always begin with a / character.

              if (ch !== '/') {
                  error("Not a comment");
              }

              next('/');

              if (ch === '/') {
                  inlineComment();
              } else if (ch === '*') {
                  blockComment();
              } else {
                  error("Unrecognized comment");
              }
          },

          white = function () {

  // Skip whitespace and comments.
  // Note that we're detecting comments by only a single / character.
  // This works since regular expressions are not valid JSON(5), but this will
  // break if there are other valid values that begin with a / character!

              while (ch) {
                  if (ch === '/') {
                      comment();
                  } else if (ws.indexOf(ch) >= 0) {
                      next();
                  } else {
                      return;
                  }
              }
          },

          word = function () {

  // true, false, or null.

              switch (ch) {
              case 't':
                  next('t');
                  next('r');
                  next('u');
                  next('e');
                  return true;
              case 'f':
                  next('f');
                  next('a');
                  next('l');
                  next('s');
                  next('e');
                  return false;
              case 'n':
                  next('n');
                  next('u');
                  next('l');
                  next('l');
                  return null;
              case 'I':
                  next('I');
                  next('n');
                  next('f');
                  next('i');
                  next('n');
                  next('i');
                  next('t');
                  next('y');
                  return Infinity;
              case 'N':
                next( 'N' );
                next( 'a' );
                next( 'N' );
                return NaN;
              }
              error("Unexpected '" + ch + "'");
          },

          value,  // Place holder for the value function.

          array = function () {

  // Parse an array value.

              var array = [];

              if (ch === '[') {
                  next('[');
                  white();
                  while (ch) {
                      if (ch === ']') {
                          next(']');
                          return array;   // Potentially empty array
                      }
                      // ES5 allows omitting elements in arrays, e.g. [,] and
                      // [,null]. We don't allow this in JSON5.
                      if (ch === ',') {
                          error("Missing array element");
                      } else {
                          array.push(value());
                      }
                      white();
                      // If there's no comma after this value, this needs to
                      // be the end of the array.
                      if (ch !== ',') {
                          next(']');
                          return array;
                      }
                      next(',');
                      white();
                  }
              }
              error("Bad array");
          },

          object = function () {

  // Parse an object value.

              var key,
                  object = {};

              if (ch === '{') {
                  next('{');
                  white();
                  while (ch) {
                      if (ch === '}') {
                          next('}');
                          return object;   // Potentially empty object
                      }

                      // Keys can be unquoted. If they are, they need to be
                      // valid JS identifiers.
                      if (ch === '"' || ch === "'") {
                          key = string();
                      } else {
                          key = identifier();
                      }

                      white();
                      next(':');
                      object[key] = value();
                      white();
                      // If there's no comma after this pair, this needs to be
                      // the end of the object.
                      if (ch !== ',') {
                          next('}');
                          return object;
                      }
                      next(',');
                      white();
                  }
              }
              error("Bad object");
          };

      value = function () {

  // Parse a JSON value. It could be an object, an array, a string, a number,
  // or a word.

          white();
          switch (ch) {
          case '{':
              return object();
          case '[':
              return array();
          case '"':
          case "'":
              return string();
          case '-':
          case '+':
          case '.':
              return number();
          default:
              return ch >= '0' && ch <= '9' ? number() : word();
          }
      };

  // Return the json_parse function. It will have access to all of the above
  // functions and variables.

      return function (source, reviver) {
          var result;

          text = String(source);
          at = 0;
          ch = ' ';
          result = value();
          white();
          if (ch) {
              error("Syntax error");
          }

  // If there is a reviver function, we recursively walk the new structure,
  // passing each name/value pair to the reviver function for possible
  // transformation, starting with a temporary root object that holds the result
  // in an empty key. If there is not a reviver function, we simply return the
  // result.

          return typeof reviver === 'function' ? (function walk(holder, key) {
              var k, v, value = holder[key];
              if (value && typeof value === 'object') {
                  for (k in value) {
                      if (Object.prototype.hasOwnProperty.call(value, k)) {
                          v = walk(value, k);
                          if (v !== undefined) {
                              value[k] = v;
                          } else {
                              delete value[k];
                          }
                      }
                  }
              }
              return reviver.call(holder, key, value);
          }({'': result}, '')) : result;
      };
  }());

  // JSON5 stringify will not quote keys where appropriate
  JSON5.stringify = function (obj, replacer, space) {
      if (replacer && (typeof(replacer) !== "function" && !isArray(replacer))) {
          throw new Error('Replacer must be a function or an array');
      }
      var getReplacedValueOrUndefined = function(holder, key, isTopLevel) {
          var value = holder[key];

          // Replace the value with its toJSON value first, if possible
          if (value && value.toJSON && typeof value.toJSON === "function") {
              value = value.toJSON();
          }

          // If the user-supplied replacer if a function, call it. If it's an array, check objects' string keys for
          // presence in the array (removing the key/value pair from the resulting JSON if the key is missing).
          if (typeof(replacer) === "function") {
              return replacer.call(holder, key, value);
          } else if(replacer) {
              if (isTopLevel || isArray(holder) || replacer.indexOf(key) >= 0) {
                  return value;
              } else {
                  return undefined;
              }
          } else {
              return value;
          }
      };

      function isWordChar(char) {
          return (char >= 'a' && char <= 'z') ||
              (char >= 'A' && char <= 'Z') ||
              (char >= '0' && char <= '9') ||
              char === '_' || char === '$';
      }

      function isWordStart(char) {
          return (char >= 'a' && char <= 'z') ||
              (char >= 'A' && char <= 'Z') ||
              char === '_' || char === '$';
      }

      function isWord(key) {
          if (typeof key !== 'string') {
              return false;
          }
          if (!isWordStart(key[0])) {
              return false;
          }
          var i = 1, length = key.length;
          while (i < length) {
              if (!isWordChar(key[i])) {
                  return false;
              }
              i++;
          }
          return true;
      }

      // export for use in tests
      JSON5.isWord = isWord;

      // polyfills
      function isArray(obj) {
          if (Array.isArray) {
              return Array.isArray(obj);
          } else {
              return Object.prototype.toString.call(obj) === '[object Array]';
          }
      }

      function isDate(obj) {
          return Object.prototype.toString.call(obj) === '[object Date]';
      }

      isNaN = isNaN || function(val) {
          return typeof val === 'number' && val !== val;
      };

      var objStack = [];
      function checkForCircular(obj) {
          for (var i = 0; i < objStack.length; i++) {
              if (objStack[i] === obj) {
                  throw new TypeError("Converting circular structure to JSON");
              }
          }
      }

      function makeIndent(str, num, noNewLine) {
          if (!str) {
              return "";
          }
          // indentation no more than 10 chars
          if (str.length > 10) {
              str = str.substring(0, 10);
          }

          var indent = noNewLine ? "" : "\n";
          for (var i = 0; i < num; i++) {
              indent += str;
          }

          return indent;
      }

      var indentStr;
      if (space) {
          if (typeof space === "string") {
              indentStr = space;
          } else if (typeof space === "number" && space >= 0) {
              indentStr = makeIndent(" ", space, true);
          } else {
              // ignore space parameter
          }
      }

      // Copied from Crokford's implementation of JSON
      // See https://github.com/douglascrockford/JSON-js/blob/e39db4b7e6249f04a195e7dd0840e610cc9e941e/json2.js#L195
      // Begin
      var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
          escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
          meta = { // table of character substitutions
          '\b': '\\b',
          '\t': '\\t',
          '\n': '\\n',
          '\f': '\\f',
          '\r': '\\r',
          '"' : '\\"',
          '\\': '\\\\'
      };
      function escapeString(string) {

  // If the string contains no control characters, no quote characters, and no
  // backslash characters, then we can safely slap some quotes around it.
  // Otherwise we must also replace the offending characters with safe escape
  // sequences.
          escapable.lastIndex = 0;
          return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
              var c = meta[a];
              return typeof c === 'string' ?
                  c :
                  '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
          }) + '"' : '"' + string + '"';
      }
      // End

      function internalStringify(holder, key, isTopLevel) {
          var buffer, res;

          // Replace the value, if necessary
          var obj_part = getReplacedValueOrUndefined(holder, key, isTopLevel);

          if (obj_part && !isDate(obj_part)) {
              // unbox objects
              // don't unbox dates, since will turn it into number
              obj_part = obj_part.valueOf();
          }
          switch(typeof obj_part) {
              case "boolean":
                  return obj_part.toString();

              case "number":
                  if (isNaN(obj_part) || !isFinite(obj_part)) {
                      return "null";
                  }
                  return obj_part.toString();

              case "string":
                  return escapeString(obj_part.toString());

              case "object":
                  if (obj_part === null) {
                      return "null";
                  } else if (isArray(obj_part)) {
                      checkForCircular(obj_part);
                      buffer = "[";
                      objStack.push(obj_part);

                      for (var i = 0; i < obj_part.length; i++) {
                          res = internalStringify(obj_part, i, false);
                          buffer += makeIndent(indentStr, objStack.length);
                          if (res === null || typeof res === "undefined") {
                              buffer += "null";
                          } else {
                              buffer += res;
                          }
                          if (i < obj_part.length-1) {
                              buffer += ",";
                          } else if (indentStr) {
                              buffer += "\n";
                          }
                      }
                      objStack.pop();
                      buffer += makeIndent(indentStr, objStack.length, true) + "]";
                  } else {
                      checkForCircular(obj_part);
                      buffer = "{";
                      var nonEmpty = false;
                      objStack.push(obj_part);
                      for (var prop in obj_part) {
                          if (obj_part.hasOwnProperty(prop)) {
                              var value = internalStringify(obj_part, prop, false);
                              isTopLevel = false;
                              if (typeof value !== "undefined" && value !== null) {
                                  buffer += makeIndent(indentStr, objStack.length);
                                  nonEmpty = true;
                                  var key = isWord(prop) ? prop : escapeString(prop);
                                  buffer += key + ":" + (indentStr ? ' ' : '') + value + ",";
                              }
                          }
                      }
                      objStack.pop();
                      if (nonEmpty) {
                          buffer = buffer.substring(0, buffer.length-1) + makeIndent(indentStr, objStack.length) + "}";
                      } else {
                          buffer = '{}';
                      }
                  }
                  return buffer;
              default:
                  // functions and undefined should be ignored
                  return undefined;
          }
      }

      // special case...when undefined is used inside of
      // a compound object/array, return null.
      // but when top-level, return undefined
      var topLevelHolder = {"":obj};
      if (obj === undefined) {
          return getReplacedValueOrUndefined(topLevelHolder, '', true);
      }
      return internalStringify(topLevelHolder, '', true);
  };


/***/ },
/* 1077 */
/***/ function(module, exports, __webpack_require__) {

  var JSON5 = __webpack_require__(1078);
  var path = __webpack_require__(134);
  var assign = __webpack_require__(100);
  var emojiRegex = /[\uD800-\uDFFF]./;
  var emojiList = __webpack_require__(1039).filter(function(emoji) {
  	return emojiRegex.test(emoji)
  });

  var baseEncodeTables = {
  	26: "abcdefghijklmnopqrstuvwxyz",
  	32: "123456789abcdefghjkmnpqrstuvwxyz", // no 0lio
  	36: "0123456789abcdefghijklmnopqrstuvwxyz",
  	49: "abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ", // no lIO
  	52: "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
  	58: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ", // no 0lIO
  	62: "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
  	64: "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_"
  };
  var emojiCache = {};

  function encodeStringToEmoji(content, length) {
  	if (emojiCache[content]) return emojiCache[content];
  	length = length || 1;
  	var emojis = [];
  	do {
  		var index = Math.floor(Math.random() * emojiList.length);
  		emojis.push(emojiList[index]);
  		emojiList.splice(index, 1);
  	} while (--length > 0);
  	var emojiEncoding = emojis.join('');
  	emojiCache[content] = emojiEncoding;
  	return emojiEncoding;
  }

  function encodeBufferToBase(buffer, base) {
  	var encodeTable = baseEncodeTables[base];
  	if (!encodeTable) throw new Error("Unknown encoding base" + base);

  	var readLength = buffer.length;

  	var Big = __webpack_require__(787);
  	Big.RM = Big.DP = 0;
  	var b = new Big(0);
  	for (var i = readLength - 1; i >= 0; i--) {
  		b = b.times(256).plus(buffer[i]);
  	}

  	var output = "";
  	while (b.gt(0)) {
  		output = encodeTable[b.mod(base)] + output;
  		b = b.div(base);
  	}

  	Big.DP = 20;
  	Big.RM = 1;

  	return output;
  }

  exports.parseQuery = function parseQuery(query) {
  	var specialValues = {
  		'null': null,
  		'true': true,
  		'false': false
  	};
  	if(!query) return {};
  	if(typeof query !== "string")
  		throw new Error("parseQuery should get a string as first argument");
  	if(query.substr(0, 1) !== "?")
  		throw new Error("a valid query string passed to parseQuery should begin with '?'");
  	query = query.substr(1);
  	var queryLength = query.length;
  	if(query.substr(0, 1) === "{" && query.substr(-1) === "}") {
  		return JSON5.parse(query);
  	}
  	var queryArgs = query.split(/[,\&]/g);
  	var result = {};
  	queryArgs.forEach(function(arg) {
  		var idx = arg.indexOf("=");
  		if(idx >= 0) {
  			var name = arg.substr(0, idx);
  			var value = decodeURIComponent(arg.substr(idx+1));
  			if (specialValues.hasOwnProperty(value)) {
  				value = specialValues[value];
  			}
  			if(name.substr(-2) === "[]") {
  				name = decodeURIComponent(name.substr(0, name.length-2));
  				if(!Array.isArray(result[name]))
  					result[name] = [];
  				result[name].push(value);
  			} else {
  				name = decodeURIComponent(name);
  				result[name] = value;
  			}
  		} else {
  			if(arg.substr(0, 1) === "-") {
  				result[decodeURIComponent(arg.substr(1))] = false;
  			} else if(arg.substr(0, 1) === "+") {
  				result[decodeURIComponent(arg.substr(1))] = true;
  			} else {
  				result[decodeURIComponent(arg)] = true;
  			}
  		}
  	});
  	return result;
  };

  exports.getLoaderConfig = function(loaderContext, defaultConfigKey) {
  	if (!defaultConfigKey) {
  		throw new Error("Default config key missing");
  	}
  	var query = exports.parseQuery(loaderContext.query);
  	var configKey = query.config || defaultConfigKey;
  	var config = loaderContext.options[configKey] || {};

  	delete query.config;

  	return assign({}, config, query);
  };

  exports.stringifyRequest = function(loaderContext, request) {
  	var splitted = request.split("!");
  	var context = loaderContext.context || (loaderContext.options && loaderContext.options.context);
  	return JSON.stringify(splitted.map(function(part) {
  		if(/^\/|^[A-Z]:/i.test(part) && context) {
  			part = path.relative(context, part);
  			if(/^[A-Z]:/i.test(part)) {
  				return part;
  			} else {
  				return "./" + part.replace(/\\/g, "/");
  			}
  		}
  		return part;
  	}).join("!"));
  };

  function dotRequest(obj) {
  	return obj.request;
  }

  exports.getRemainingRequest = function(loaderContext) {
  	var request = loaderContext.loaders.slice(loaderContext.loaderIndex+1).map(dotRequest).concat([loaderContext.resource]);
  	return request.join("!");
  };

  exports.getCurrentRequest = function(loaderContext) {
  	var request = loaderContext.loaders.slice(loaderContext.loaderIndex).map(dotRequest).concat([loaderContext.resource]);
  	return request.join("!");
  };

  exports.isUrlRequest = function(url, root) {
  	// An URL is not an request if
  	// 1. it's a Data Url
  	// 2. it's an absolute url or and protocol-relative
  	// 3. it's some kind of url for a template
  	if(/^data:|^chrome-extension:|^(https?:)?\/\/|^[\{\}\[\]#*;,'§\$%&\(=?`´\^°<>]/.test(url)) return false;
  	// 4. It's also not an request if root isn't set and it's a root-relative url
  	if((root === undefined || root === false) && /^\//.test(url)) return false;
  	return true;
  };

  exports.urlToRequest = function(url, root) {
  	var moduleRequestRegex = /^[^?]*~/;
  	var request;

  	if(/^[a-zA-Z]:\\|^\\\\/.test(url)) {
  		// absolute windows path, keep it
  		request = url;
  	} else if(root !== undefined && root !== false && /^\//.test(url)) {
  		// if root is set and the url is root-relative
  		switch(typeof root) {
  			// 1. root is a string: root is prefixed to the url
  			case "string":
  				// special case: `~` roots convert to module request
  				if (moduleRequestRegex.test(root)) {
  					request = root.replace(/([^~\/])$/, "$1/") + url.slice(1);
  				} else {
  					request = root + url;
  				}
  				break;
  			// 2. root is `true`: absolute paths are allowed
  			//    *nix only, windows-style absolute paths are always allowed as they doesn't start with a `/`
  			case "boolean":
  				request = url;
  				break;
  			default:
  				throw new Error("Unexpected parameters to loader-utils 'urlToRequest': url = " + url + ", root = " + root + ".");
  		}
  	} else if(/^\.\.?\//.test(url)) {
  		// A relative url stays
  		request = url;
  	} else {
  		// every other url is threaded like a relative url
  		request = "./" + url;
  	}

  	// A `~` makes the url an module
  	if (moduleRequestRegex.test(request)) {
  		request = request.replace(moduleRequestRegex, "");
  	}

  	return request;
  };

  exports.parseString = function parseString(str) {
  	try {
  		if(str[0] === '"') return JSON.parse(str);
  		if(str[0] === "'" && str.substr(str.length - 1) === "'") {
  			return parseString(str.replace(/\\.|"/g, function(x) {
  				if(x === '"') return '\\"';
  				return x;
  			}).replace(/^'|'$/g, '"'));
  		}
  		return JSON.parse('"' + str + '"');
  	} catch(e) {
  		return str;
  	}
  };

  exports.getHashDigest = function getHashDigest(buffer, hashType, digestType, maxLength) {
  	hashType = hashType || "md5";
  	maxLength = maxLength || 9999;
  	var hash = __webpack_require__(523).createHash(hashType);
  	hash.update(buffer);
  	if (digestType === "base26" || digestType === "base32" || digestType === "base36" ||
  	    digestType === "base49" || digestType === "base52" || digestType === "base58" ||
  	    digestType === "base62" || digestType === "base64") {
  		return encodeBufferToBase(hash.digest(), digestType.substr(4)).substr(0, maxLength);
  	} else {
  		return hash.digest(digestType || "hex").substr(0, maxLength);
  	}
  };

  exports.interpolateName = function interpolateName(loaderContext, name, options) {
  	var filename = name || "[hash].[ext]";
  	var context = options.context;
  	var content = options.content;
  	var regExp = options.regExp;
  	var ext = "bin";
  	var basename = "file";
  	var directory = "";
  	var folder = "";
  	if(loaderContext.resourcePath) {
  		var resourcePath = loaderContext.resourcePath;
  		var idx = resourcePath.lastIndexOf(".");
  		var i = resourcePath.lastIndexOf("\\");
  		var j = resourcePath.lastIndexOf("/");
  		var p = i < 0 ? j : j < 0 ? i : i < j ? i : j;
  		if(idx >= 0) {
  			ext = resourcePath.substr(idx+1);
  			resourcePath = resourcePath.substr(0, idx);
  		}
  		if(p >= 0) {
  			basename = resourcePath.substr(p+1);
  			resourcePath = resourcePath.substr(0, p+1);
  		}
  		if (typeof context !== 'undefined') {
  			directory = path.relative(context, resourcePath + "_").replace(/\\/g, "/").replace(/\.\.(\/)?/g, "_$1");
  			directory = directory.substr(0, directory.length-1);
  		}
  		else {
  			directory = resourcePath.replace(/\\/g, "/").replace(/\.\.(\/)?/g, "_$1");
  		}
  		if (directory.length === 1) {
  			directory = "";
  		} else if (directory.length > 1) {
  			folder = path.basename(directory);
  		}
  	}
  	var url = filename;
  	if(content) {
  		// Match hash template
  		url = url.replace(/\[(?:(\w+):)?hash(?::([a-z]+\d*))?(?::(\d+))?\]/ig, function() {
  			return exports.getHashDigest(content, arguments[1], arguments[2], parseInt(arguments[3], 10));
  		}).replace(/\[emoji(?::(\d+))?\]/ig, function() {
  			return encodeStringToEmoji(content, arguments[1]);
  		});
  	}
  	url = url.replace(/\[ext\]/ig, function() {
  		return ext;
  	}).replace(/\[name\]/ig, function() {
  		return basename;
  	}).replace(/\[path\]/ig, function() {
  		return directory;
  	}).replace(/\[folder\]/ig, function() {
  		return folder;
  	});
  	if(regExp && loaderContext.resourcePath) {
  		var re = new RegExp(regExp);
  		var match = loaderContext.resourcePath.match(re);
  		if(match) {
  			for (var i = 0; i < match.length; i++) {
  				var re = new RegExp("\\[" + i + "\\]", "ig");
  				url = url.replace(re, match[i]);
  			}
  		}
  	}
  	if(typeof loaderContext.options === "object" && typeof loaderContext.options.customInterpolateName === "function") {
  		url = loaderContext.options.customInterpolateName.call(loaderContext, url, name, options);
  	}
  	return url;
  };


/***/ },
/* 1078 */
/***/ function(module, exports, __webpack_require__) {

  // json5.js
  // Modern JSON. See README.md for details.
  //
  // This file is based directly off of Douglas Crockford's json_parse.js:
  // https://github.com/douglascrockford/JSON-js/blob/master/json_parse.js

  var JSON5 = ( true ? exports : {});

  JSON5.parse = (function () {
      "use strict";

  // This is a function that can parse a JSON5 text, producing a JavaScript
  // data structure. It is a simple, recursive descent parser. It does not use
  // eval or regular expressions, so it can be used as a model for implementing
  // a JSON5 parser in other languages.

  // We are defining the function inside of another function to avoid creating
  // global variables.

      var at,           // The index of the current character
          lineNumber,   // The current line number
          columnNumber, // The current column number
          ch,           // The current character
          escapee = {
              "'":  "'",
              '"':  '"',
              '\\': '\\',
              '/':  '/',
              '\n': '',       // Replace escaped newlines in strings w/ empty string
              b:    '\b',
              f:    '\f',
              n:    '\n',
              r:    '\r',
              t:    '\t'
          },
          ws = [
              ' ',
              '\t',
              '\r',
              '\n',
              '\v',
              '\f',
              '\xA0',
              '\uFEFF'
          ],
          text,

          renderChar = function (chr) {
              return chr === '' ? 'EOF' : "'" + chr + "'";
          },

          error = function (m) {

  // Call error when something is wrong.

              var error = new SyntaxError();
              // beginning of message suffix to agree with that provided by Gecko - see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse
              error.message = m + " at line " + lineNumber + " column " + columnNumber + " of the JSON5 data. Still to read: " + JSON.stringify(text.substring(at - 1, at + 19));
              error.at = at;
              // These two property names have been chosen to agree with the ones in Gecko, the only popular
              // environment which seems to supply this info on JSON.parse
              error.lineNumber = lineNumber;
              error.columnNumber = columnNumber;
              throw error;
          },

          next = function (c) {

  // If a c parameter is provided, verify that it matches the current character.

              if (c && c !== ch) {
                  error("Expected " + renderChar(c) + " instead of " + renderChar(ch));
              }

  // Get the next character. When there are no more characters,
  // return the empty string.

              ch = text.charAt(at);
              at++;
              columnNumber++;
              if (ch === '\n' || ch === '\r' && peek() !== '\n') {
                  lineNumber++;
                  columnNumber = 0;
              }
              return ch;
          },

          peek = function () {

  // Get the next character without consuming it or
  // assigning it to the ch varaible.

              return text.charAt(at);
          },

          identifier = function () {

  // Parse an identifier. Normally, reserved words are disallowed here, but we
  // only use this for unquoted object keys, where reserved words are allowed,
  // so we don't check for those here. References:
  // - http://es5.github.com/#x7.6
  // - https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Core_Language_Features#Variables
  // - http://docstore.mik.ua/orelly/webprog/jscript/ch02_07.htm
  // TODO Identifiers can have Unicode "letters" in them; add support for those.

              var key = ch;

              // Identifiers must start with a letter, _ or $.
              if ((ch !== '_' && ch !== '$') &&
                      (ch < 'a' || ch > 'z') &&
                      (ch < 'A' || ch > 'Z')) {
                  error("Bad identifier as unquoted key");
              }

              // Subsequent characters can contain digits.
              while (next() && (
                      ch === '_' || ch === '$' ||
                      (ch >= 'a' && ch <= 'z') ||
                      (ch >= 'A' && ch <= 'Z') ||
                      (ch >= '0' && ch <= '9'))) {
                  key += ch;
              }

              return key;
          },

          number = function () {

  // Parse a number value.

              var number,
                  sign = '',
                  string = '',
                  base = 10;

              if (ch === '-' || ch === '+') {
                  sign = ch;
                  next(ch);
              }

              // support for Infinity (could tweak to allow other words):
              if (ch === 'I') {
                  number = word();
                  if (typeof number !== 'number' || isNaN(number)) {
                      error('Unexpected word for number');
                  }
                  return (sign === '-') ? -number : number;
              }

              // support for NaN
              if (ch === 'N' ) {
                number = word();
                if (!isNaN(number)) {
                  error('expected word to be NaN');
                }
                // ignore sign as -NaN also is NaN
                return number;
              }

              if (ch === '0') {
                  string += ch;
                  next();
                  if (ch === 'x' || ch === 'X') {
                      string += ch;
                      next();
                      base = 16;
                  } else if (ch >= '0' && ch <= '9') {
                      error('Octal literal');
                  }
              }

              switch (base) {
              case 10:
                  while (ch >= '0' && ch <= '9' ) {
                      string += ch;
                      next();
                  }
                  if (ch === '.') {
                      string += '.';
                      while (next() && ch >= '0' && ch <= '9') {
                          string += ch;
                      }
                  }
                  if (ch === 'e' || ch === 'E') {
                      string += ch;
                      next();
                      if (ch === '-' || ch === '+') {
                          string += ch;
                          next();
                      }
                      while (ch >= '0' && ch <= '9') {
                          string += ch;
                          next();
                      }
                  }
                  break;
              case 16:
                  while (ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'F' || ch >= 'a' && ch <= 'f') {
                      string += ch;
                      next();
                  }
                  break;
              }

              if(sign === '-') {
                  number = -string;
              } else {
                  number = +string;
              }

              if (!isFinite(number)) {
                  error("Bad number");
              } else {
                  return number;
              }
          },

          string = function () {

  // Parse a string value.

              var hex,
                  i,
                  string = '',
                  delim,      // double quote or single quote
                  uffff;

  // When parsing for string values, we must look for ' or " and \ characters.

              if (ch === '"' || ch === "'") {
                  delim = ch;
                  while (next()) {
                      if (ch === delim) {
                          next();
                          return string;
                      } else if (ch === '\\') {
                          next();
                          if (ch === 'u') {
                              uffff = 0;
                              for (i = 0; i < 4; i += 1) {
                                  hex = parseInt(next(), 16);
                                  if (!isFinite(hex)) {
                                      break;
                                  }
                                  uffff = uffff * 16 + hex;
                              }
                              string += String.fromCharCode(uffff);
                          } else if (ch === '\r') {
                              if (peek() === '\n') {
                                  next();
                              }
                          } else if (typeof escapee[ch] === 'string') {
                              string += escapee[ch];
                          } else {
                              break;
                          }
                      } else if (ch === '\n') {
                          // unescaped newlines are invalid; see:
                          // https://github.com/aseemk/json5/issues/24
                          // TODO this feels special-cased; are there other
                          // invalid unescaped chars?
                          break;
                      } else {
                          string += ch;
                      }
                  }
              }
              error("Bad string");
          },

          inlineComment = function () {

  // Skip an inline comment, assuming this is one. The current character should
  // be the second / character in the // pair that begins this inline comment.
  // To finish the inline comment, we look for a newline or the end of the text.

              if (ch !== '/') {
                  error("Not an inline comment");
              }

              do {
                  next();
                  if (ch === '\n' || ch === '\r') {
                      next();
                      return;
                  }
              } while (ch);
          },

          blockComment = function () {

  // Skip a block comment, assuming this is one. The current character should be
  // the * character in the /* pair that begins this block comment.
  // To finish the block comment, we look for an ending */ pair of characters,
  // but we also watch for the end of text before the comment is terminated.

              if (ch !== '*') {
                  error("Not a block comment");
              }

              do {
                  next();
                  while (ch === '*') {
                      next('*');
                      if (ch === '/') {
                          next('/');
                          return;
                      }
                  }
              } while (ch);

              error("Unterminated block comment");
          },

          comment = function () {

  // Skip a comment, whether inline or block-level, assuming this is one.
  // Comments always begin with a / character.

              if (ch !== '/') {
                  error("Not a comment");
              }

              next('/');

              if (ch === '/') {
                  inlineComment();
              } else if (ch === '*') {
                  blockComment();
              } else {
                  error("Unrecognized comment");
              }
          },

          white = function () {

  // Skip whitespace and comments.
  // Note that we're detecting comments by only a single / character.
  // This works since regular expressions are not valid JSON(5), but this will
  // break if there are other valid values that begin with a / character!

              while (ch) {
                  if (ch === '/') {
                      comment();
                  } else if (ws.indexOf(ch) >= 0) {
                      next();
                  } else {
                      return;
                  }
              }
          },

          word = function () {

  // true, false, or null.

              switch (ch) {
              case 't':
                  next('t');
                  next('r');
                  next('u');
                  next('e');
                  return true;
              case 'f':
                  next('f');
                  next('a');
                  next('l');
                  next('s');
                  next('e');
                  return false;
              case 'n':
                  next('n');
                  next('u');
                  next('l');
                  next('l');
                  return null;
              case 'I':
                  next('I');
                  next('n');
                  next('f');
                  next('i');
                  next('n');
                  next('i');
                  next('t');
                  next('y');
                  return Infinity;
              case 'N':
                next( 'N' );
                next( 'a' );
                next( 'N' );
                return NaN;
              }
              error("Unexpected " + renderChar(ch));
          },

          value,  // Place holder for the value function.

          array = function () {

  // Parse an array value.

              var array = [];

              if (ch === '[') {
                  next('[');
                  white();
                  while (ch) {
                      if (ch === ']') {
                          next(']');
                          return array;   // Potentially empty array
                      }
                      // ES5 allows omitting elements in arrays, e.g. [,] and
                      // [,null]. We don't allow this in JSON5.
                      if (ch === ',') {
                          error("Missing array element");
                      } else {
                          array.push(value());
                      }
                      white();
                      // If there's no comma after this value, this needs to
                      // be the end of the array.
                      if (ch !== ',') {
                          next(']');
                          return array;
                      }
                      next(',');
                      white();
                  }
              }
              error("Bad array");
          },

          object = function () {

  // Parse an object value.

              var key,
                  object = {};

              if (ch === '{') {
                  next('{');
                  white();
                  while (ch) {
                      if (ch === '}') {
                          next('}');
                          return object;   // Potentially empty object
                      }

                      // Keys can be unquoted. If they are, they need to be
                      // valid JS identifiers.
                      if (ch === '"' || ch === "'") {
                          key = string();
                      } else {
                          key = identifier();
                      }

                      white();
                      next(':');
                      object[key] = value();
                      white();
                      // If there's no comma after this pair, this needs to be
                      // the end of the object.
                      if (ch !== ',') {
                          next('}');
                          return object;
                      }
                      next(',');
                      white();
                  }
              }
              error("Bad object");
          };

      value = function () {

  // Parse a JSON value. It could be an object, an array, a string, a number,
  // or a word.

          white();
          switch (ch) {
          case '{':
              return object();
          case '[':
              return array();
          case '"':
          case "'":
              return string();
          case '-':
          case '+':
          case '.':
              return number();
          default:
              return ch >= '0' && ch <= '9' ? number() : word();
          }
      };

  // Return the json_parse function. It will have access to all of the above
  // functions and variables.

      return function (source, reviver) {
          var result;

          text = String(source);
          at = 0;
          lineNumber = 1;
          columnNumber = 1;
          ch = ' ';
          result = value();
          white();
          if (ch) {
              error("Syntax error");
          }

  // If there is a reviver function, we recursively walk the new structure,
  // passing each name/value pair to the reviver function for possible
  // transformation, starting with a temporary root object that holds the result
  // in an empty key. If there is not a reviver function, we simply return the
  // result.

          return typeof reviver === 'function' ? (function walk(holder, key) {
              var k, v, value = holder[key];
              if (value && typeof value === 'object') {
                  for (k in value) {
                      if (Object.prototype.hasOwnProperty.call(value, k)) {
                          v = walk(value, k);
                          if (v !== undefined) {
                              value[k] = v;
                          } else {
                              delete value[k];
                          }
                      }
                  }
              }
              return reviver.call(holder, key, value);
          }({'': result}, '')) : result;
      };
  }());

  // JSON5 stringify will not quote keys where appropriate
  JSON5.stringify = function (obj, replacer, space) {
      if (replacer && (typeof(replacer) !== "function" && !isArray(replacer))) {
          throw new Error('Replacer must be a function or an array');
      }
      var getReplacedValueOrUndefined = function(holder, key, isTopLevel) {
          var value = holder[key];

          // Replace the value with its toJSON value first, if possible
          if (value && value.toJSON && typeof value.toJSON === "function") {
              value = value.toJSON();
          }

          // If the user-supplied replacer if a function, call it. If it's an array, check objects' string keys for
          // presence in the array (removing the key/value pair from the resulting JSON if the key is missing).
          if (typeof(replacer) === "function") {
              return replacer.call(holder, key, value);
          } else if(replacer) {
              if (isTopLevel || isArray(holder) || replacer.indexOf(key) >= 0) {
                  return value;
              } else {
                  return undefined;
              }
          } else {
              return value;
          }
      };

      function isWordChar(c) {
          return (c >= 'a' && c <= 'z') ||
              (c >= 'A' && c <= 'Z') ||
              (c >= '0' && c <= '9') ||
              c === '_' || c === '$';
      }

      function isWordStart(c) {
          return (c >= 'a' && c <= 'z') ||
              (c >= 'A' && c <= 'Z') ||
              c === '_' || c === '$';
      }

      function isWord(key) {
          if (typeof key !== 'string') {
              return false;
          }
          if (!isWordStart(key[0])) {
              return false;
          }
          var i = 1, length = key.length;
          while (i < length) {
              if (!isWordChar(key[i])) {
                  return false;
              }
              i++;
          }
          return true;
      }

      // export for use in tests
      JSON5.isWord = isWord;

      // polyfills
      function isArray(obj) {
          if (Array.isArray) {
              return Array.isArray(obj);
          } else {
              return Object.prototype.toString.call(obj) === '[object Array]';
          }
      }

      function isDate(obj) {
          return Object.prototype.toString.call(obj) === '[object Date]';
      }

      var objStack = [];
      function checkForCircular(obj) {
          for (var i = 0; i < objStack.length; i++) {
              if (objStack[i] === obj) {
                  throw new TypeError("Converting circular structure to JSON");
              }
          }
      }

      function makeIndent(str, num, noNewLine) {
          if (!str) {
              return "";
          }
          // indentation no more than 10 chars
          if (str.length > 10) {
              str = str.substring(0, 10);
          }

          var indent = noNewLine ? "" : "\n";
          for (var i = 0; i < num; i++) {
              indent += str;
          }

          return indent;
      }

      var indentStr;
      if (space) {
          if (typeof space === "string") {
              indentStr = space;
          } else if (typeof space === "number" && space >= 0) {
              indentStr = makeIndent(" ", space, true);
          } else {
              // ignore space parameter
          }
      }

      // Copied from Crokford's implementation of JSON
      // See https://github.com/douglascrockford/JSON-js/blob/e39db4b7e6249f04a195e7dd0840e610cc9e941e/json2.js#L195
      // Begin
      var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
          escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
          meta = { // table of character substitutions
          '\b': '\\b',
          '\t': '\\t',
          '\n': '\\n',
          '\f': '\\f',
          '\r': '\\r',
          '"' : '\\"',
          '\\': '\\\\'
      };
      function escapeString(string) {

  // If the string contains no control characters, no quote characters, and no
  // backslash characters, then we can safely slap some quotes around it.
  // Otherwise we must also replace the offending characters with safe escape
  // sequences.
          escapable.lastIndex = 0;
          return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
              var c = meta[a];
              return typeof c === 'string' ?
                  c :
                  '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
          }) + '"' : '"' + string + '"';
      }
      // End

      function internalStringify(holder, key, isTopLevel) {
          var buffer, res;

          // Replace the value, if necessary
          var obj_part = getReplacedValueOrUndefined(holder, key, isTopLevel);

          if (obj_part && !isDate(obj_part)) {
              // unbox objects
              // don't unbox dates, since will turn it into number
              obj_part = obj_part.valueOf();
          }
          switch(typeof obj_part) {
              case "boolean":
                  return obj_part.toString();

              case "number":
                  if (isNaN(obj_part) || !isFinite(obj_part)) {
                      return "null";
                  }
                  return obj_part.toString();

              case "string":
                  return escapeString(obj_part.toString());

              case "object":
                  if (obj_part === null) {
                      return "null";
                  } else if (isArray(obj_part)) {
                      checkForCircular(obj_part);
                      buffer = "[";
                      objStack.push(obj_part);

                      for (var i = 0; i < obj_part.length; i++) {
                          res = internalStringify(obj_part, i, false);
                          buffer += makeIndent(indentStr, objStack.length);
                          if (res === null || typeof res === "undefined") {
                              buffer += "null";
                          } else {
                              buffer += res;
                          }
                          if (i < obj_part.length-1) {
                              buffer += ",";
                          } else if (indentStr) {
                              buffer += "\n";
                          }
                      }
                      objStack.pop();
                      buffer += makeIndent(indentStr, objStack.length, true) + "]";
                  } else {
                      checkForCircular(obj_part);
                      buffer = "{";
                      var nonEmpty = false;
                      objStack.push(obj_part);
                      for (var prop in obj_part) {
                          if (obj_part.hasOwnProperty(prop)) {
                              var value = internalStringify(obj_part, prop, false);
                              isTopLevel = false;
                              if (typeof value !== "undefined" && value !== null) {
                                  buffer += makeIndent(indentStr, objStack.length);
                                  nonEmpty = true;
                                  key = isWord(prop) ? prop : escapeString(prop);
                                  buffer += key + ":" + (indentStr ? ' ' : '') + value + ",";
                              }
                          }
                      }
                      objStack.pop();
                      if (nonEmpty) {
                          buffer = buffer.substring(0, buffer.length-1) + makeIndent(indentStr, objStack.length) + "}";
                      } else {
                          buffer = '{}';
                      }
                  }
                  return buffer;
              default:
                  // functions and undefined should be ignored
                  return undefined;
          }
      }

      // special case...when undefined is used inside of
      // a compound object/array, return null.
      // but when top-level, return undefined
      var topLevelHolder = {"":obj};
      if (obj === undefined) {
          return getReplacedValueOrUndefined(topLevelHolder, '', true);
      }
      return internalStringify(topLevelHolder, '', true);
  };


/***/ },
/* 1079 */
/***/ function(module, exports, __webpack_require__) {

  var getNative = __webpack_require__(198),
      root = __webpack_require__(146);

  /* Built-in method references that are verified to be native. */
  var DataView = getNative(root, 'DataView');

  module.exports = DataView;


/***/ },
/* 1080 */
/***/ function(module, exports, __webpack_require__) {

  var hashClear = __webpack_require__(1140),
      hashDelete = __webpack_require__(1141),
      hashGet = __webpack_require__(1142),
      hashHas = __webpack_require__(1143),
      hashSet = __webpack_require__(1144);

  /**
   * Creates a hash object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Hash(entries) {
    var index = -1,
        length = entries ? entries.length : 0;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `Hash`.
  Hash.prototype.clear = hashClear;
  Hash.prototype['delete'] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;

  module.exports = Hash;


/***/ },
/* 1081 */
/***/ function(module, exports, __webpack_require__) {

  var getNative = __webpack_require__(198),
      root = __webpack_require__(146);

  /* Built-in method references that are verified to be native. */
  var Promise = getNative(root, 'Promise');

  module.exports = Promise;


/***/ },
/* 1082 */
/***/ function(module, exports, __webpack_require__) {

  var root = __webpack_require__(146);

  /** Built-in value references. */
  var Reflect = root.Reflect;

  module.exports = Reflect;


/***/ },
/* 1083 */
/***/ function(module, exports, __webpack_require__) {

  var getNative = __webpack_require__(198),
      root = __webpack_require__(146);

  /* Built-in method references that are verified to be native. */
  var WeakMap = getNative(root, 'WeakMap');

  module.exports = WeakMap;


/***/ },
/* 1084 */
/***/ function(module, exports) {

  /**
   * Adds the key-value `pair` to `map`.
   *
   * @private
   * @param {Object} map The map to modify.
   * @param {Array} pair The key-value pair to add.
   * @returns {Object} Returns `map`.
   */
  function addMapEntry(map, pair) {
    // Don't return `Map#set` because it doesn't return the map instance in IE 11.
    map.set(pair[0], pair[1]);
    return map;
  }

  module.exports = addMapEntry;


/***/ },
/* 1085 */
/***/ function(module, exports) {

  /**
   * Adds `value` to `set`.
   *
   * @private
   * @param {Object} set The set to modify.
   * @param {*} value The value to add.
   * @returns {Object} Returns `set`.
   */
  function addSetEntry(set, value) {
    set.add(value);
    return set;
  }

  module.exports = addSetEntry;


/***/ },
/* 1086 */
/***/ function(module, exports, __webpack_require__) {

  var baseIndexOf = __webpack_require__(345);

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to search.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array ? array.length : 0;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  module.exports = arrayIncludes;


/***/ },
/* 1087 */
/***/ function(module, exports) {

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to search.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  module.exports = arrayIncludesWith;


/***/ },
/* 1088 */
/***/ function(module, exports) {

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  module.exports = arraySome;


/***/ },
/* 1089 */
/***/ function(module, exports, __webpack_require__) {

  var eq = __webpack_require__(215);

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * Used by `_.defaults` to customize its `_.assignIn` use.
   *
   * @private
   * @param {*} objValue The destination value.
   * @param {*} srcValue The source value.
   * @param {string} key The key of the property to assign.
   * @param {Object} object The parent object of `objValue`.
   * @returns {*} Returns the value to assign.
   */
  function assignInDefaults(objValue, srcValue, key, object) {
    if (objValue === undefined ||
        (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
      return srcValue;
    }
    return objValue;
  }

  module.exports = assignInDefaults;


/***/ },
/* 1090 */
/***/ function(module, exports, __webpack_require__) {

  var copyObject = __webpack_require__(214),
      keys = __webpack_require__(165);

  /**
   * The base implementation of `_.assign` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */
  function baseAssign(object, source) {
    return object && copyObject(source, keys(source), object);
  }

  module.exports = baseAssign;


/***/ },
/* 1091 */
/***/ function(module, exports) {

  /**
   * The base implementation of `_.clamp` which doesn't coerce arguments to numbers.
   *
   * @private
   * @param {number} number The number to clamp.
   * @param {number} [lower] The lower bound.
   * @param {number} upper The upper bound.
   * @returns {number} Returns the clamped number.
   */
  function baseClamp(number, lower, upper) {
    if (number === number) {
      if (upper !== undefined) {
        number = number <= upper ? number : upper;
      }
      if (lower !== undefined) {
        number = number >= lower ? number : lower;
      }
    }
    return number;
  }

  module.exports = baseClamp;


/***/ },
/* 1092 */
/***/ function(module, exports, __webpack_require__) {

  var isObject = __webpack_require__(133);

  /** Built-in value references. */
  var objectCreate = Object.create;

  /**
   * The base implementation of `_.create` without support for assigning
   * properties to the created object.
   *
   * @private
   * @param {Object} prototype The object to inherit from.
   * @returns {Object} Returns the new object.
   */
  function baseCreate(proto) {
    return isObject(proto) ? objectCreate(proto) : {};
  }

  module.exports = baseCreate;


/***/ },
/* 1093 */
/***/ function(module, exports, __webpack_require__) {

  var arrayPush = __webpack_require__(457),
      isFlattenable = __webpack_require__(1149);

  /**
   * The base implementation of `_.flatten` with support for restricting flattening.
   *
   * @private
   * @param {Array} array The array to flatten.
   * @param {number} depth The maximum recursion depth.
   * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
   * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
   * @param {Array} [result=[]] The initial result value.
   * @returns {Array} Returns the new flattened array.
   */
  function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1,
        length = array.length;

    predicate || (predicate = isFlattenable);
    result || (result = []);

    while (++index < length) {
      var value = array[index];
      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          // Recursively flatten arrays (susceptible to call stack limits).
          baseFlatten(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }
    return result;
  }

  module.exports = baseFlatten;


/***/ },
/* 1094 */
/***/ function(module, exports, __webpack_require__) {

  var createBaseFor = __webpack_require__(1132);

  /**
   * The base implementation of `baseForOwn` which iterates over `object`
   * properties returned by `keysFunc` and invokes `iteratee` for each property.
   * Iteratee functions may exit iteration early by explicitly returning `false`.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @returns {Object} Returns `object`.
   */
  var baseFor = createBaseFor();

  module.exports = baseFor;


/***/ },
/* 1095 */
/***/ function(module, exports, __webpack_require__) {

  var baseFor = __webpack_require__(1094),
      keys = __webpack_require__(165);

  /**
   * The base implementation of `_.forOwn` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Object} Returns `object`.
   */
  function baseForOwn(object, iteratee) {
    return object && baseFor(object, iteratee, keys);
  }

  module.exports = baseForOwn;


/***/ },
/* 1096 */
/***/ function(module, exports, __webpack_require__) {

  var arrayPush = __webpack_require__(457),
      isArray = __webpack_require__(114);

  /**
   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
   * `keysFunc` and `symbolsFunc` to get the enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @param {Function} symbolsFunc The function to get the symbols of `object`.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
  }

  module.exports = baseGetAllKeys;


/***/ },
/* 1097 */
/***/ function(module, exports) {

  /**
   * The base implementation of `_.hasIn` without support for deep paths.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {Array|string} key The key to check.
   * @returns {boolean} Returns `true` if `key` exists, else `false`.
   */
  function baseHasIn(object, key) {
    return object != null && key in Object(object);
  }

  module.exports = baseHasIn;


/***/ },
/* 1098 */
/***/ function(module, exports, __webpack_require__) {

  var Stack = __webpack_require__(253),
      equalArrays = __webpack_require__(467),
      equalByTag = __webpack_require__(1134),
      equalObjects = __webpack_require__(1135),
      getTag = __webpack_require__(469),
      isArray = __webpack_require__(114),
      isHostObject = __webpack_require__(257),
      isTypedArray = __webpack_require__(354);

  /** Used to compose bitmasks for comparison styles. */
  var PARTIAL_COMPARE_FLAG = 2;

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      objectTag = '[object Object]';

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * A specialized version of `baseIsEqual` for arrays and objects which performs
   * deep comparisons and tracks traversed objects enabling objects with circular
   * references to be compared.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Function} [customizer] The function to customize comparisons.
   * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
   *  for more details.
   * @param {Object} [stack] Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
    var objIsArr = isArray(object),
        othIsArr = isArray(other),
        objTag = arrayTag,
        othTag = arrayTag;

    if (!objIsArr) {
      objTag = getTag(object);
      objTag = objTag == argsTag ? objectTag : objTag;
    }
    if (!othIsArr) {
      othTag = getTag(other);
      othTag = othTag == argsTag ? objectTag : othTag;
    }
    var objIsObj = objTag == objectTag && !isHostObject(object),
        othIsObj = othTag == objectTag && !isHostObject(other),
        isSameTag = objTag == othTag;

    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack);
      return (objIsArr || isTypedArray(object))
        ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
        : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
    }
    if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
      var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
            othUnwrapped = othIsWrapped ? other.value() : other;

        stack || (stack = new Stack);
        return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
      }
    }
    if (!isSameTag) {
      return false;
    }
    stack || (stack = new Stack);
    return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
  }

  module.exports = baseIsEqualDeep;


/***/ },
/* 1099 */
/***/ function(module, exports, __webpack_require__) {

  var Stack = __webpack_require__(253),
      baseIsEqual = __webpack_require__(462);

  /** Used to compose bitmasks for comparison styles. */
  var UNORDERED_COMPARE_FLAG = 1,
      PARTIAL_COMPARE_FLAG = 2;

  /**
   * The base implementation of `_.isMatch` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The object to inspect.
   * @param {Object} source The object of property values to match.
   * @param {Array} matchData The property names, values, and compare flags to match.
   * @param {Function} [customizer] The function to customize comparisons.
   * @returns {boolean} Returns `true` if `object` is a match, else `false`.
   */
  function baseIsMatch(object, source, matchData, customizer) {
    var index = matchData.length,
        length = index,
        noCustomizer = !customizer;

    if (object == null) {
      return !length;
    }
    object = Object(object);
    while (index--) {
      var data = matchData[index];
      if ((noCustomizer && data[2])
            ? data[1] !== object[data[0]]
            : !(data[0] in object)
          ) {
        return false;
      }
    }
    while (++index < length) {
      data = matchData[index];
      var key = data[0],
          objValue = object[key],
          srcValue = data[1];

      if (noCustomizer && data[2]) {
        if (objValue === undefined && !(key in object)) {
          return false;
        }
      } else {
        var stack = new Stack;
        if (customizer) {
          var result = customizer(objValue, srcValue, key, object, source, stack);
        }
        if (!(result === undefined
              ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
              : result
            )) {
          return false;
        }
      }
    }
    return true;
  }

  module.exports = baseIsMatch;


/***/ },
/* 1100 */
/***/ function(module, exports, __webpack_require__) {

  var isFunction = __webpack_require__(199),
      isHostObject = __webpack_require__(257),
      isMasked = __webpack_require__(1152),
      isObject = __webpack_require__(133),
      toSource = __webpack_require__(475);

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString = Function.prototype.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /** Used to detect if a method is native. */
  var reIsNative = RegExp('^' +
    funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
    .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
  );

  /**
   * The base implementation of `_.isNative` without bad shim checks.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function,
   *  else `false`.
   */
  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }
    var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }

  module.exports = baseIsNative;


/***/ },
/* 1101 */
/***/ function(module, exports) {

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeKeys = Object.keys;

  /**
   * The base implementation of `_.keys` which doesn't skip the constructor
   * property of prototypes or treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeys(object) {
    return nativeKeys(Object(object));
  }

  module.exports = baseKeys;


/***/ },
/* 1102 */
/***/ function(module, exports, __webpack_require__) {

  var Reflect = __webpack_require__(1082),
      iteratorToArray = __webpack_require__(1153);

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Built-in value references. */
  var enumerate = Reflect ? Reflect.enumerate : undefined,
      propertyIsEnumerable = objectProto.propertyIsEnumerable;

  /**
   * The base implementation of `_.keysIn` which doesn't skip the constructor
   * property of prototypes or treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeysIn(object) {
    object = object == null ? object : Object(object);

    var result = [];
    for (var key in object) {
      result.push(key);
    }
    return result;
  }

  // Fallback for IE < 9 with es6-shim.
  if (enumerate && !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf')) {
    baseKeysIn = function(object) {
      return iteratorToArray(enumerate(object));
    };
  }

  module.exports = baseKeysIn;


/***/ },
/* 1103 */
/***/ function(module, exports, __webpack_require__) {

  var baseIsMatch = __webpack_require__(1099),
      getMatchData = __webpack_require__(1138),
      matchesStrictComparable = __webpack_require__(474);

  /**
   * The base implementation of `_.matches` which doesn't clone `source`.
   *
   * @private
   * @param {Object} source The object of property values to match.
   * @returns {Function} Returns the new spec function.
   */
  function baseMatches(source) {
    var matchData = getMatchData(source);
    if (matchData.length == 1 && matchData[0][2]) {
      return matchesStrictComparable(matchData[0][0], matchData[0][1]);
    }
    return function(object) {
      return object === source || baseIsMatch(object, source, matchData);
    };
  }

  module.exports = baseMatches;


/***/ },
/* 1104 */
/***/ function(module, exports, __webpack_require__) {

  var baseIsEqual = __webpack_require__(462),
      get = __webpack_require__(1179),
      hasIn = __webpack_require__(1181),
      isKey = __webpack_require__(259),
      isStrictComparable = __webpack_require__(472),
      matchesStrictComparable = __webpack_require__(474),
      toKey = __webpack_require__(263);

  /** Used to compose bitmasks for comparison styles. */
  var UNORDERED_COMPARE_FLAG = 1,
      PARTIAL_COMPARE_FLAG = 2;

  /**
   * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
   *
   * @private
   * @param {string} path The path of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new spec function.
   */
  function baseMatchesProperty(path, srcValue) {
    if (isKey(path) && isStrictComparable(srcValue)) {
      return matchesStrictComparable(toKey(path), srcValue);
    }
    return function(object) {
      var objValue = get(object, path);
      return (objValue === undefined && objValue === srcValue)
        ? hasIn(object, path)
        : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
    };
  }

  module.exports = baseMatchesProperty;


/***/ },
/* 1105 */
/***/ function(module, exports, __webpack_require__) {

  var Stack = __webpack_require__(253),
      arrayEach = __webpack_require__(341),
      assignMergeValue = __webpack_require__(459),
      baseMergeDeep = __webpack_require__(1106),
      isArray = __webpack_require__(114),
      isObject = __webpack_require__(133),
      isTypedArray = __webpack_require__(354),
      keysIn = __webpack_require__(355);

  /**
   * The base implementation of `_.merge` without support for multiple sources.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {number} srcIndex The index of `source`.
   * @param {Function} [customizer] The function to customize merged values.
   * @param {Object} [stack] Tracks traversed source values and their merged
   *  counterparts.
   */
  function baseMerge(object, source, srcIndex, customizer, stack) {
    if (object === source) {
      return;
    }
    if (!(isArray(source) || isTypedArray(source))) {
      var props = keysIn(source);
    }
    arrayEach(props || source, function(srcValue, key) {
      if (props) {
        key = srcValue;
        srcValue = source[key];
      }
      if (isObject(srcValue)) {
        stack || (stack = new Stack);
        baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
      }
      else {
        var newValue = customizer
          ? customizer(object[key], srcValue, (key + ''), object, source, stack)
          : undefined;

        if (newValue === undefined) {
          newValue = srcValue;
        }
        assignMergeValue(object, key, newValue);
      }
    });
  }

  module.exports = baseMerge;


/***/ },
/* 1106 */
/***/ function(module, exports, __webpack_require__) {

  var assignMergeValue = __webpack_require__(459),
      baseClone = __webpack_require__(255),
      copyArray = __webpack_require__(466),
      isArguments = __webpack_require__(266),
      isArray = __webpack_require__(114),
      isArrayLikeObject = __webpack_require__(478),
      isFunction = __webpack_require__(199),
      isObject = __webpack_require__(133),
      isPlainObject = __webpack_require__(481),
      isTypedArray = __webpack_require__(354),
      toPlainObject = __webpack_require__(1195);

  /**
   * A specialized version of `baseMerge` for arrays and objects which performs
   * deep merges and tracks traversed objects enabling objects with circular
   * references to be merged.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {string} key The key of the value to merge.
   * @param {number} srcIndex The index of `source`.
   * @param {Function} mergeFunc The function to merge values.
   * @param {Function} [customizer] The function to customize assigned values.
   * @param {Object} [stack] Tracks traversed source values and their merged
   *  counterparts.
   */
  function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    var objValue = object[key],
        srcValue = source[key],
        stacked = stack.get(srcValue);

    if (stacked) {
      assignMergeValue(object, key, stacked);
      return;
    }
    var newValue = customizer
      ? customizer(objValue, srcValue, (key + ''), object, source, stack)
      : undefined;

    var isCommon = newValue === undefined;

    if (isCommon) {
      newValue = srcValue;
      if (isArray(srcValue) || isTypedArray(srcValue)) {
        if (isArray(objValue)) {
          newValue = objValue;
        }
        else if (isArrayLikeObject(objValue)) {
          newValue = copyArray(objValue);
        }
        else {
          isCommon = false;
          newValue = baseClone(srcValue, true);
        }
      }
      else if (isPlainObject(srcValue) || isArguments(srcValue)) {
        if (isArguments(objValue)) {
          newValue = toPlainObject(objValue);
        }
        else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
          isCommon = false;
          newValue = baseClone(srcValue, true);
        }
        else {
          newValue = objValue;
        }
      }
      else {
        isCommon = false;
      }
    }
    stack.set(srcValue, newValue);

    if (isCommon) {
      // Recursively merge objects and arrays (susceptible to call stack limits).
      mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    }
    stack['delete'](srcValue);
    assignMergeValue(object, key, newValue);
  }

  module.exports = baseMergeDeep;


/***/ },
/* 1107 */
/***/ function(module, exports, __webpack_require__) {

  var arrayMap = __webpack_require__(342),
      baseIteratee = __webpack_require__(346),
      baseMap = __webpack_require__(463),
      baseSortBy = __webpack_require__(1111),
      baseUnary = __webpack_require__(1113),
      compareMultiple = __webpack_require__(1128),
      identity = __webpack_require__(477);

  /**
   * The base implementation of `_.orderBy` without param guards.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
   * @param {string[]} orders The sort orders of `iteratees`.
   * @returns {Array} Returns the new sorted array.
   */
  function baseOrderBy(collection, iteratees, orders) {
    var index = -1;
    iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(baseIteratee));

    var result = baseMap(collection, function(value, key, collection) {
      var criteria = arrayMap(iteratees, function(iteratee) {
        return iteratee(value);
      });
      return { 'criteria': criteria, 'index': ++index, 'value': value };
    });

    return baseSortBy(result, function(object, other) {
      return compareMultiple(object, other, orders);
    });
  }

  module.exports = baseOrderBy;


/***/ },
/* 1108 */
/***/ function(module, exports, __webpack_require__) {

  var baseGet = __webpack_require__(461);

  /**
   * A specialized version of `baseProperty` which supports deep paths.
   *
   * @private
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyDeep(path) {
    return function(object) {
      return baseGet(object, path);
    };
  }

  module.exports = basePropertyDeep;


/***/ },
/* 1109 */
/***/ function(module, exports) {

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER = 9007199254740991;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeFloor = Math.floor;

  /**
   * The base implementation of `_.repeat` which doesn't coerce arguments.
   *
   * @private
   * @param {string} string The string to repeat.
   * @param {number} n The number of times to repeat the string.
   * @returns {string} Returns the repeated string.
   */
  function baseRepeat(string, n) {
    var result = '';
    if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
      return result;
    }
    // Leverage the exponentiation by squaring algorithm for a faster repeat.
    // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
    do {
      if (n % 2) {
        result += string;
      }
      n = nativeFloor(n / 2);
      if (n) {
        string += string;
      }
    } while (n);

    return result;
  }

  module.exports = baseRepeat;


/***/ },
/* 1110 */
/***/ function(module, exports) {

  /**
   * The base implementation of `_.slice` without an iteratee call guard.
   *
   * @private
   * @param {Array} array The array to slice.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the slice of `array`.
   */
  function baseSlice(array, start, end) {
    var index = -1,
        length = array.length;

    if (start < 0) {
      start = -start > length ? 0 : (length + start);
    }
    end = end > length ? length : end;
    if (end < 0) {
      end += length;
    }
    length = start > end ? 0 : ((end - start) >>> 0);
    start >>>= 0;

    var result = Array(length);
    while (++index < length) {
      result[index] = array[index + start];
    }
    return result;
  }

  module.exports = baseSlice;


/***/ },
/* 1111 */
/***/ function(module, exports) {

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  module.exports = baseSortBy;


/***/ },
/* 1112 */
/***/ function(module, exports) {

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  module.exports = baseTimes;


/***/ },
/* 1113 */
/***/ function(module, exports) {

  /**
   * The base implementation of `_.unary` without support for storing wrapper metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  module.exports = baseUnary;


/***/ },
/* 1114 */
/***/ function(module, exports, __webpack_require__) {

  var SetCache = __webpack_require__(454),
      arrayIncludes = __webpack_require__(1086),
      arrayIncludesWith = __webpack_require__(1087),
      cacheHas = __webpack_require__(1116),
      createSet = __webpack_require__(1133),
      setToArray = __webpack_require__(262);

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /**
   * The base implementation of `_.uniqBy` without support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} [iteratee] The iteratee invoked per element.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new duplicate free array.
   */
  function baseUniq(array, iteratee, comparator) {
    var index = -1,
        includes = arrayIncludes,
        length = array.length,
        isCommon = true,
        result = [],
        seen = result;

    if (comparator) {
      isCommon = false;
      includes = arrayIncludesWith;
    }
    else if (length >= LARGE_ARRAY_SIZE) {
      var set = iteratee ? null : createSet(array);
      if (set) {
        return setToArray(set);
      }
      isCommon = false;
      includes = cacheHas;
      seen = new SetCache;
    }
    else {
      seen = iteratee ? [] : result;
    }
    outer:
    while (++index < length) {
      var value = array[index],
          computed = iteratee ? iteratee(value) : value;

      value = (comparator || value !== 0) ? value : 0;
      if (isCommon && computed === computed) {
        var seenIndex = seen.length;
        while (seenIndex--) {
          if (seen[seenIndex] === computed) {
            continue outer;
          }
        }
        if (iteratee) {
          seen.push(computed);
        }
        result.push(value);
      }
      else if (!includes(seen, computed, comparator)) {
        if (seen !== result) {
          seen.push(computed);
        }
        result.push(value);
      }
    }
    return result;
  }

  module.exports = baseUniq;


/***/ },
/* 1115 */
/***/ function(module, exports, __webpack_require__) {

  var arrayMap = __webpack_require__(342);

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  module.exports = baseValues;


/***/ },
/* 1116 */
/***/ function(module, exports) {

  /**
   * Checks if a cache value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  module.exports = cacheHas;


/***/ },
/* 1117 */
/***/ function(module, exports, __webpack_require__) {

  var baseSlice = __webpack_require__(1110);

  /**
   * Casts `array` to a slice if it's needed.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {number} start The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the cast slice.
   */
  function castSlice(array, start, end) {
    var length = array.length;
    end = end === undefined ? length : end;
    return (!start && end >= length) ? array : baseSlice(array, start, end);
  }

  module.exports = castSlice;


/***/ },
/* 1118 */
/***/ function(module, exports, __webpack_require__) {

  var baseIndexOf = __webpack_require__(345);

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  module.exports = charsEndIndex;


/***/ },
/* 1119 */
/***/ function(module, exports) {

  /**
   * Checks if `value` is a global object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {null|Object} Returns `value` if it's a global object, else `null`.
   */
  function checkGlobal(value) {
    return (value && value.Object === Object) ? value : null;
  }

  module.exports = checkGlobal;


/***/ },
/* 1120 */
/***/ function(module, exports) {

  /**
   * Creates a clone of  `buffer`.
   *
   * @private
   * @param {Buffer} buffer The buffer to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Buffer} Returns the cloned buffer.
   */
  function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }
    var result = new buffer.constructor(buffer.length);
    buffer.copy(result);
    return result;
  }

  module.exports = cloneBuffer;


/***/ },
/* 1121 */
/***/ function(module, exports, __webpack_require__) {

  var cloneArrayBuffer = __webpack_require__(348);

  /**
   * Creates a clone of `dataView`.
   *
   * @private
   * @param {Object} dataView The data view to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned data view.
   */
  function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }

  module.exports = cloneDataView;


/***/ },
/* 1122 */
/***/ function(module, exports, __webpack_require__) {

  var addMapEntry = __webpack_require__(1084),
      arrayReduce = __webpack_require__(458),
      mapToArray = __webpack_require__(473);

  /**
   * Creates a clone of `map`.
   *
   * @private
   * @param {Object} map The map to clone.
   * @param {Function} cloneFunc The function to clone values.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned map.
   */
  function cloneMap(map, isDeep, cloneFunc) {
    var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
    return arrayReduce(array, addMapEntry, new map.constructor);
  }

  module.exports = cloneMap;


/***/ },
/* 1123 */
/***/ function(module, exports) {

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /**
   * Creates a clone of `regexp`.
   *
   * @private
   * @param {Object} regexp The regexp to clone.
   * @returns {Object} Returns the cloned regexp.
   */
  function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }

  module.exports = cloneRegExp;


/***/ },
/* 1124 */
/***/ function(module, exports, __webpack_require__) {

  var addSetEntry = __webpack_require__(1085),
      arrayReduce = __webpack_require__(458),
      setToArray = __webpack_require__(262);

  /**
   * Creates a clone of `set`.
   *
   * @private
   * @param {Object} set The set to clone.
   * @param {Function} cloneFunc The function to clone values.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned set.
   */
  function cloneSet(set, isDeep, cloneFunc) {
    var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
    return arrayReduce(array, addSetEntry, new set.constructor);
  }

  module.exports = cloneSet;


/***/ },
/* 1125 */
/***/ function(module, exports, __webpack_require__) {

  var Symbol = __webpack_require__(340);

  /** Used to convert symbols to primitives and strings. */
  var symbolProto = Symbol ? Symbol.prototype : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

  /**
   * Creates a clone of the `symbol` object.
   *
   * @private
   * @param {Object} symbol The symbol object to clone.
   * @returns {Object} Returns the cloned symbol object.
   */
  function cloneSymbol(symbol) {
    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
  }

  module.exports = cloneSymbol;


/***/ },
/* 1126 */
/***/ function(module, exports, __webpack_require__) {

  var cloneArrayBuffer = __webpack_require__(348);

  /**
   * Creates a clone of `typedArray`.
   *
   * @private
   * @param {Object} typedArray The typed array to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned typed array.
   */
  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }

  module.exports = cloneTypedArray;


/***/ },
/* 1127 */
/***/ function(module, exports, __webpack_require__) {

  var isSymbol = __webpack_require__(217);

  /**
   * Compares values to sort them in ascending order.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {number} Returns the sort order indicator for `value`.
   */
  function compareAscending(value, other) {
    if (value !== other) {
      var valIsDefined = value !== undefined,
          valIsNull = value === null,
          valIsReflexive = value === value,
          valIsSymbol = isSymbol(value);

      var othIsDefined = other !== undefined,
          othIsNull = other === null,
          othIsReflexive = other === other,
          othIsSymbol = isSymbol(other);

      if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
          (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
          (valIsNull && othIsDefined && othIsReflexive) ||
          (!valIsDefined && othIsReflexive) ||
          !valIsReflexive) {
        return 1;
      }
      if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
          (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
          (othIsNull && valIsDefined && valIsReflexive) ||
          (!othIsDefined && valIsReflexive) ||
          !othIsReflexive) {
        return -1;
      }
    }
    return 0;
  }

  module.exports = compareAscending;


/***/ },
/* 1128 */
/***/ function(module, exports, __webpack_require__) {

  var compareAscending = __webpack_require__(1127);

  /**
   * Used by `_.orderBy` to compare multiple properties of a value to another
   * and stable sort them.
   *
   * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
   * specify an order of "desc" for descending or "asc" for ascending sort order
   * of corresponding values.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {boolean[]|string[]} orders The order to sort by for each property.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareMultiple(object, other, orders) {
    var index = -1,
        objCriteria = object.criteria,
        othCriteria = other.criteria,
        length = objCriteria.length,
        ordersLength = orders.length;

    while (++index < length) {
      var result = compareAscending(objCriteria[index], othCriteria[index]);
      if (result) {
        if (index >= ordersLength) {
          return result;
        }
        var order = orders[index];
        return result * (order == 'desc' ? -1 : 1);
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to provide the same value for
    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
    // for more details.
    //
    // This also ensures a stable sort in V8 and other engines.
    // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
    return object.index - other.index;
  }

  module.exports = compareMultiple;


/***/ },
/* 1129 */
/***/ function(module, exports, __webpack_require__) {

  var copyObject = __webpack_require__(214),
      getSymbols = __webpack_require__(468);

  /**
   * Copies own symbol properties of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */
  function copySymbols(source, object) {
    return copyObject(source, getSymbols(source), object);
  }

  module.exports = copySymbols;


/***/ },
/* 1130 */
/***/ function(module, exports, __webpack_require__) {

  var root = __webpack_require__(146);

  /** Used to detect overreaching core-js shims. */
  var coreJsData = root['__core-js_shared__'];

  module.exports = coreJsData;


/***/ },
/* 1131 */
/***/ function(module, exports, __webpack_require__) {

  var isArrayLike = __webpack_require__(186);

  /**
   * Creates a `baseEach` or `baseEachRight` function.
   *
   * @private
   * @param {Function} eachFunc The function to iterate over a collection.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseEach(eachFunc, fromRight) {
    return function(collection, iteratee) {
      if (collection == null) {
        return collection;
      }
      if (!isArrayLike(collection)) {
        return eachFunc(collection, iteratee);
      }
      var length = collection.length,
          index = fromRight ? length : -1,
          iterable = Object(collection);

      while ((fromRight ? index-- : ++index < length)) {
        if (iteratee(iterable[index], index, iterable) === false) {
          break;
        }
      }
      return collection;
    };
  }

  module.exports = createBaseEach;


/***/ },
/* 1132 */
/***/ function(module, exports) {

  /**
   * Creates a base function for methods like `_.forIn` and `_.forOwn`.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
      var index = -1,
          iterable = Object(object),
          props = keysFunc(object),
          length = props.length;

      while (length--) {
        var key = props[fromRight ? length : ++index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    };
  }

  module.exports = createBaseFor;


/***/ },
/* 1133 */
/***/ function(module, exports, __webpack_require__) {

  var Set = __webpack_require__(453),
      noop = __webpack_require__(1187),
      setToArray = __webpack_require__(262);

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0;

  /**
   * Creates a set of `values`.
   *
   * @private
   * @param {Array} values The values to add to the set.
   * @returns {Object} Returns the new set.
   */
  var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
    return new Set(values);
  };

  module.exports = createSet;


/***/ },
/* 1134 */
/***/ function(module, exports, __webpack_require__) {

  var Symbol = __webpack_require__(340),
      Uint8Array = __webpack_require__(455),
      equalArrays = __webpack_require__(467),
      mapToArray = __webpack_require__(473),
      setToArray = __webpack_require__(262);

  /** Used to compose bitmasks for comparison styles. */
  var UNORDERED_COMPARE_FLAG = 1,
      PARTIAL_COMPARE_FLAG = 2;

  /** `Object#toString` result references. */
  var boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]';

  /** Used to convert symbols to primitives and strings. */
  var symbolProto = Symbol ? Symbol.prototype : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

  /**
   * A specialized version of `baseIsEqualDeep` for comparing objects of
   * the same `toStringTag`.
   *
   * **Note:** This function only supports comparing values with tags of
   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {string} tag The `toStringTag` of the objects to compare.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Function} customizer The function to customize comparisons.
   * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
   *  for more details.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
    switch (tag) {
      case dataViewTag:
        if ((object.byteLength != other.byteLength) ||
            (object.byteOffset != other.byteOffset)) {
          return false;
        }
        object = object.buffer;
        other = other.buffer;

      case arrayBufferTag:
        if ((object.byteLength != other.byteLength) ||
            !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
          return false;
        }
        return true;

      case boolTag:
      case dateTag:
        // Coerce dates and booleans to numbers, dates to milliseconds and
        // booleans to `1` or `0` treating invalid dates coerced to `NaN` as
        // not equal.
        return +object == +other;

      case errorTag:
        return object.name == other.name && object.message == other.message;

      case numberTag:
        // Treat `NaN` vs. `NaN` as equal.
        return (object != +object) ? other != +other : object == +other;

      case regexpTag:
      case stringTag:
        // Coerce regexes to strings and treat strings, primitives and objects,
        // as equal. See http://www.ecma-international.org/ecma-262/6.0/#sec-regexp.prototype.tostring
        // for more details.
        return object == (other + '');

      case mapTag:
        var convert = mapToArray;

      case setTag:
        var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
        convert || (convert = setToArray);

        if (object.size != other.size && !isPartial) {
          return false;
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(object);
        if (stacked) {
          return stacked == other;
        }
        bitmask |= UNORDERED_COMPARE_FLAG;
        stack.set(object, other);

        // Recursively compare objects (susceptible to call stack limits).
        return equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);

      case symbolTag:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }
    }
    return false;
  }

  module.exports = equalByTag;


/***/ },
/* 1135 */
/***/ function(module, exports, __webpack_require__) {

  var baseHas = __webpack_require__(344),
      keys = __webpack_require__(165);

  /** Used to compose bitmasks for comparison styles. */
  var PARTIAL_COMPARE_FLAG = 2;

  /**
   * A specialized version of `baseIsEqualDeep` for objects with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Function} customizer The function to customize comparisons.
   * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
   *  for more details.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
    var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
        objProps = keys(object),
        objLength = objProps.length,
        othProps = keys(other),
        othLength = othProps.length;

    if (objLength != othLength && !isPartial) {
      return false;
    }
    var index = objLength;
    while (index--) {
      var key = objProps[index];
      if (!(isPartial ? key in other : baseHas(other, key))) {
        return false;
      }
    }
    // Assume cyclic values are equal.
    var stacked = stack.get(object);
    if (stacked) {
      return stacked == other;
    }
    var result = true;
    stack.set(object, other);

    var skipCtor = isPartial;
    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key];

      if (customizer) {
        var compared = isPartial
          ? customizer(othValue, objValue, key, other, object, stack)
          : customizer(objValue, othValue, key, object, other, stack);
      }
      // Recursively compare objects (susceptible to call stack limits).
      if (!(compared === undefined
            ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
            : compared
          )) {
        result = false;
        break;
      }
      skipCtor || (skipCtor = key == 'constructor');
    }
    if (result && !skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor;

      // Non `Object` object instances with different constructors are not equal.
      if (objCtor != othCtor &&
          ('constructor' in object && 'constructor' in other) &&
          !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
            typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }
    stack['delete'](object);
    return result;
  }

  module.exports = equalObjects;


/***/ },
/* 1136 */
/***/ function(module, exports, __webpack_require__) {

  var baseGetAllKeys = __webpack_require__(1096),
      getSymbols = __webpack_require__(468),
      keys = __webpack_require__(165);

  /**
   * Creates an array of own enumerable property names and symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function getAllKeys(object) {
    return baseGetAllKeys(object, keys, getSymbols);
  }

  module.exports = getAllKeys;


/***/ },
/* 1137 */
/***/ function(module, exports, __webpack_require__) {

  var baseProperty = __webpack_require__(464);

  /**
   * Gets the "length" property value of `object`.
   *
   * **Note:** This function is used to avoid a
   * [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792) that affects
   * Safari on at least iOS 8.1-8.3 ARM64.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {*} Returns the "length" value.
   */
  var getLength = baseProperty('length');

  module.exports = getLength;


/***/ },
/* 1138 */
/***/ function(module, exports, __webpack_require__) {

  var isStrictComparable = __webpack_require__(472),
      keys = __webpack_require__(165);

  /**
   * Gets the property names, values, and compare flags of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the match data of `object`.
   */
  function getMatchData(object) {
    var result = keys(object),
        length = result.length;

    while (length--) {
      var key = result[length],
          value = object[key];

      result[length] = [key, value, isStrictComparable(value)];
    }
    return result;
  }

  module.exports = getMatchData;


/***/ },
/* 1139 */
/***/ function(module, exports) {

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  module.exports = getValue;


/***/ },
/* 1140 */
/***/ function(module, exports, __webpack_require__) {

  var nativeCreate = __webpack_require__(261);

  /**
   * Removes all key-value entries from the hash.
   *
   * @private
   * @name clear
   * @memberOf Hash
   */
  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
  }

  module.exports = hashClear;


/***/ },
/* 1141 */
/***/ function(module, exports) {

  /**
   * Removes `key` and its value from the hash.
   *
   * @private
   * @name delete
   * @memberOf Hash
   * @param {Object} hash The hash to modify.
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function hashDelete(key) {
    return this.has(key) && delete this.__data__[key];
  }

  module.exports = hashDelete;


/***/ },
/* 1142 */
/***/ function(module, exports, __webpack_require__) {

  var nativeCreate = __webpack_require__(261);

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * Gets the hash value for `key`.
   *
   * @private
   * @name get
   * @memberOf Hash
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }
    return hasOwnProperty.call(data, key) ? data[key] : undefined;
  }

  module.exports = hashGet;


/***/ },
/* 1143 */
/***/ function(module, exports, __webpack_require__) {

  var nativeCreate = __webpack_require__(261);

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * Checks if a hash value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Hash
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
  }

  module.exports = hashHas;


/***/ },
/* 1144 */
/***/ function(module, exports, __webpack_require__) {

  var nativeCreate = __webpack_require__(261);

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /**
   * Sets the hash `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Hash
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the hash instance.
   */
  function hashSet(key, value) {
    var data = this.__data__;
    data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
    return this;
  }

  module.exports = hashSet;


/***/ },
/* 1145 */
/***/ function(module, exports) {

  /**
   * Gets the index at which the first occurrence of `NaN` is found in `array`.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
   */
  function indexOfNaN(array, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      var other = array[index];
      if (other !== other) {
        return index;
      }
    }
    return -1;
  }

  module.exports = indexOfNaN;


/***/ },
/* 1146 */
/***/ function(module, exports) {

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * Initializes an array clone.
   *
   * @private
   * @param {Array} array The array to clone.
   * @returns {Array} Returns the initialized clone.
   */
  function initCloneArray(array) {
    var length = array.length,
        result = array.constructor(length);

    // Add properties assigned by `RegExp#exec`.
    if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
      result.index = array.index;
      result.input = array.input;
    }
    return result;
  }

  module.exports = initCloneArray;


/***/ },
/* 1147 */
/***/ function(module, exports, __webpack_require__) {

  var cloneArrayBuffer = __webpack_require__(348),
      cloneDataView = __webpack_require__(1121),
      cloneMap = __webpack_require__(1122),
      cloneRegExp = __webpack_require__(1123),
      cloneSet = __webpack_require__(1124),
      cloneSymbol = __webpack_require__(1125),
      cloneTypedArray = __webpack_require__(1126);

  /** `Object#toString` result references. */
  var boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /**
   * Initializes an object clone based on its `toStringTag`.
   *
   * **Note:** This function only supports cloning values with tags of
   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
   *
   * @private
   * @param {Object} object The object to clone.
   * @param {string} tag The `toStringTag` of the object to clone.
   * @param {Function} cloneFunc The function to clone values.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the initialized clone.
   */
  function initCloneByTag(object, tag, cloneFunc, isDeep) {
    var Ctor = object.constructor;
    switch (tag) {
      case arrayBufferTag:
        return cloneArrayBuffer(object);

      case boolTag:
      case dateTag:
        return new Ctor(+object);

      case dataViewTag:
        return cloneDataView(object, isDeep);

      case float32Tag: case float64Tag:
      case int8Tag: case int16Tag: case int32Tag:
      case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
        return cloneTypedArray(object, isDeep);

      case mapTag:
        return cloneMap(object, isDeep, cloneFunc);

      case numberTag:
      case stringTag:
        return new Ctor(object);

      case regexpTag:
        return cloneRegExp(object);

      case setTag:
        return cloneSet(object, isDeep, cloneFunc);

      case symbolTag:
        return cloneSymbol(object);
    }
  }

  module.exports = initCloneByTag;


/***/ },
/* 1148 */
/***/ function(module, exports, __webpack_require__) {

  var baseCreate = __webpack_require__(1092),
      getPrototype = __webpack_require__(350),
      isPrototype = __webpack_require__(260);

  /**
   * Initializes an object clone.
   *
   * @private
   * @param {Object} object The object to clone.
   * @returns {Object} Returns the initialized clone.
   */
  function initCloneObject(object) {
    return (typeof object.constructor == 'function' && !isPrototype(object))
      ? baseCreate(getPrototype(object))
      : {};
  }

  module.exports = initCloneObject;


/***/ },
/* 1149 */
/***/ function(module, exports, __webpack_require__) {

  var isArguments = __webpack_require__(266),
      isArray = __webpack_require__(114);

  /**
   * Checks if `value` is a flattenable `arguments` object or array.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
   */
  function isFlattenable(value) {
    return isArray(value) || isArguments(value);
  }

  module.exports = isFlattenable;


/***/ },
/* 1150 */
/***/ function(module, exports, __webpack_require__) {

  var isArray = __webpack_require__(114),
      isFunction = __webpack_require__(199);

  /**
   * Checks if `value` is a flattenable array and not a `_.matchesProperty`
   * iteratee shorthand.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
   */
  function isFlattenableIteratee(value) {
    return isArray(value) && !(value.length == 2 && !isFunction(value[0]));
  }

  module.exports = isFlattenableIteratee;


/***/ },
/* 1151 */
/***/ function(module, exports) {

  /**
   * Checks if `value` is suitable for use as unique object key.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
   */
  function isKeyable(value) {
    var type = typeof value;
    return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
      ? (value !== '__proto__')
      : (value === null);
  }

  module.exports = isKeyable;


/***/ },
/* 1152 */
/***/ function(module, exports, __webpack_require__) {

  var coreJsData = __webpack_require__(1130);

  /** Used to detect methods masquerading as native. */
  var maskSrcKey = (function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? ('Symbol(src)_1.' + uid) : '';
  }());

  /**
   * Checks if `func` has its source masked.
   *
   * @private
   * @param {Function} func The function to check.
   * @returns {boolean} Returns `true` if `func` is masked, else `false`.
   */
  function isMasked(func) {
    return !!maskSrcKey && (maskSrcKey in func);
  }

  module.exports = isMasked;


/***/ },
/* 1153 */
/***/ function(module, exports) {

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  module.exports = iteratorToArray;


/***/ },
/* 1154 */
/***/ function(module, exports) {

  /**
   * Removes all key-value entries from the list cache.
   *
   * @private
   * @name clear
   * @memberOf ListCache
   */
  function listCacheClear() {
    this.__data__ = [];
  }

  module.exports = listCacheClear;


/***/ },
/* 1155 */
/***/ function(module, exports, __webpack_require__) {

  var assocIndexOf = __webpack_require__(254);

  /** Used for built-in method references. */
  var arrayProto = Array.prototype;

  /** Built-in value references. */
  var splice = arrayProto.splice;

  /**
   * Removes `key` and its value from the list cache.
   *
   * @private
   * @name delete
   * @memberOf ListCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function listCacheDelete(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    return true;
  }

  module.exports = listCacheDelete;


/***/ },
/* 1156 */
/***/ function(module, exports, __webpack_require__) {

  var assocIndexOf = __webpack_require__(254);

  /**
   * Gets the list cache value for `key`.
   *
   * @private
   * @name get
   * @memberOf ListCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function listCacheGet(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    return index < 0 ? undefined : data[index][1];
  }

  module.exports = listCacheGet;


/***/ },
/* 1157 */
/***/ function(module, exports, __webpack_require__) {

  var assocIndexOf = __webpack_require__(254);

  /**
   * Checks if a list cache value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf ListCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }

  module.exports = listCacheHas;


/***/ },
/* 1158 */
/***/ function(module, exports, __webpack_require__) {

  var assocIndexOf = __webpack_require__(254);

  /**
   * Sets the list cache `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf ListCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the list cache instance.
   */
  function listCacheSet(key, value) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }

  module.exports = listCacheSet;


/***/ },
/* 1159 */
/***/ function(module, exports, __webpack_require__) {

  var Hash = __webpack_require__(1080),
      ListCache = __webpack_require__(252),
      Map = __webpack_require__(452);

  /**
   * Removes all key-value entries from the map.
   *
   * @private
   * @name clear
   * @memberOf MapCache
   */
  function mapCacheClear() {
    this.__data__ = {
      'hash': new Hash,
      'map': new (Map || ListCache),
      'string': new Hash
    };
  }

  module.exports = mapCacheClear;


/***/ },
/* 1160 */
/***/ function(module, exports, __webpack_require__) {

  var getMapData = __webpack_require__(256);

  /**
   * Removes `key` and its value from the map.
   *
   * @private
   * @name delete
   * @memberOf MapCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function mapCacheDelete(key) {
    return getMapData(this, key)['delete'](key);
  }

  module.exports = mapCacheDelete;


/***/ },
/* 1161 */
/***/ function(module, exports, __webpack_require__) {

  var getMapData = __webpack_require__(256);

  /**
   * Gets the map value for `key`.
   *
   * @private
   * @name get
   * @memberOf MapCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }

  module.exports = mapCacheGet;


/***/ },
/* 1162 */
/***/ function(module, exports, __webpack_require__) {

  var getMapData = __webpack_require__(256);

  /**
   * Checks if a map value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf MapCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }

  module.exports = mapCacheHas;


/***/ },
/* 1163 */
/***/ function(module, exports, __webpack_require__) {

  var getMapData = __webpack_require__(256);

  /**
   * Sets the map `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf MapCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the map cache instance.
   */
  function mapCacheSet(key, value) {
    getMapData(this, key).set(key, value);
    return this;
  }

  module.exports = mapCacheSet;


/***/ },
/* 1164 */
/***/ function(module, exports) {

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /**
   * Adds `value` to the array cache.
   *
   * @private
   * @name add
   * @memberOf SetCache
   * @alias push
   * @param {*} value The value to cache.
   * @returns {Object} Returns the cache instance.
   */
  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);
    return this;
  }

  module.exports = setCacheAdd;


/***/ },
/* 1165 */
/***/ function(module, exports) {

  /**
   * Checks if `value` is in the array cache.
   *
   * @private
   * @name has
   * @memberOf SetCache
   * @param {*} value The value to search for.
   * @returns {number} Returns `true` if `value` is found, else `false`.
   */
  function setCacheHas(value) {
    return this.__data__.has(value);
  }

  module.exports = setCacheHas;


/***/ },
/* 1166 */
/***/ function(module, exports, __webpack_require__) {

  var ListCache = __webpack_require__(252);

  /**
   * Removes all key-value entries from the stack.
   *
   * @private
   * @name clear
   * @memberOf Stack
   */
  function stackClear() {
    this.__data__ = new ListCache;
  }

  module.exports = stackClear;


/***/ },
/* 1167 */
/***/ function(module, exports) {

  /**
   * Removes `key` and its value from the stack.
   *
   * @private
   * @name delete
   * @memberOf Stack
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function stackDelete(key) {
    return this.__data__['delete'](key);
  }

  module.exports = stackDelete;


/***/ },
/* 1168 */
/***/ function(module, exports) {

  /**
   * Gets the stack value for `key`.
   *
   * @private
   * @name get
   * @memberOf Stack
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function stackGet(key) {
    return this.__data__.get(key);
  }

  module.exports = stackGet;


/***/ },
/* 1169 */
/***/ function(module, exports) {

  /**
   * Checks if a stack value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Stack
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function stackHas(key) {
    return this.__data__.has(key);
  }

  module.exports = stackHas;


/***/ },
/* 1170 */
/***/ function(module, exports, __webpack_require__) {

  var ListCache = __webpack_require__(252),
      MapCache = __webpack_require__(339);

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /**
   * Sets the stack `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Stack
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the stack cache instance.
   */
  function stackSet(key, value) {
    var cache = this.__data__;
    if (cache instanceof ListCache && cache.__data__.length == LARGE_ARRAY_SIZE) {
      cache = this.__data__ = new MapCache(cache.__data__);
    }
    cache.set(key, value);
    return this;
  }

  module.exports = stackSet;


/***/ },
/* 1171 */
/***/ function(module, exports) {

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
      rsComboSymbolsRange = '\\u20d0-\\u20f0',
      rsVarRange = '\\ufe0e\\ufe0f';

  /** Used to compose unicode capture groups. */
  var rsAstral = '[' + rsAstralRange + ']',
      rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reComplexSymbol = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return string.match(reComplexSymbol);
  }

  module.exports = stringToArray;


/***/ },
/* 1172 */
/***/ function(module, exports, __webpack_require__) {

  var memoize = __webpack_require__(1185),
      toString = __webpack_require__(219);

  /** Used to match property names within property paths. */
  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(\.|\[\])(?:\4|$))/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Converts `string` to a property path array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the property path array.
   */
  var stringToPath = memoize(function(string) {
    var result = [];
    toString(string).replace(rePropName, function(match, number, quote, string) {
      result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
    });
    return result;
  });

  module.exports = stringToPath;


/***/ },
/* 1173 */
/***/ function(module, exports, __webpack_require__) {

  var copyObject = __webpack_require__(214),
      createAssigner = __webpack_require__(349),
      keysIn = __webpack_require__(355);

  /**
   * This method is like `_.assignIn` except that it accepts `customizer`
   * which is invoked to produce the assigned values. If `customizer` returns
   * `undefined`, assignment is handled by the method instead. The `customizer`
   * is invoked with five arguments: (objValue, srcValue, key, object, source).
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @alias extendWith
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} sources The source objects.
   * @param {Function} [customizer] The function to customize assigned values.
   * @returns {Object} Returns `object`.
   * @see _.assignWith
   * @example
   *
   * function customizer(objValue, srcValue) {
   *   return _.isUndefined(objValue) ? srcValue : objValue;
   * }
   *
   * var defaults = _.partialRight(_.assignInWith, customizer);
   *
   * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
   * // => { 'a': 1, 'b': 2 }
   */
  var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
    copyObject(source, keysIn(source), object, customizer);
  });

  module.exports = assignInWith;


/***/ },
/* 1174 */
/***/ function(module, exports, __webpack_require__) {

  var baseClone = __webpack_require__(255);

  /**
   * This method is like `_.clone` except that it recursively clones `value`.
   *
   * @static
   * @memberOf _
   * @since 1.0.0
   * @category Lang
   * @param {*} value The value to recursively clone.
   * @returns {*} Returns the deep cloned value.
   * @see _.clone
   * @example
   *
   * var objects = [{ 'a': 1 }, { 'b': 2 }];
   *
   * var deep = _.cloneDeep(objects);
   * console.log(deep[0] === objects[0]);
   * // => false
   */
  function cloneDeep(value) {
    return baseClone(value, true, true);
  }

  module.exports = cloneDeep;


/***/ },
/* 1175 */
/***/ function(module, exports, __webpack_require__) {

  var baseClone = __webpack_require__(255);

  /**
   * This method is like `_.cloneWith` except that it recursively clones `value`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to recursively clone.
   * @param {Function} [customizer] The function to customize cloning.
   * @returns {*} Returns the deep cloned value.
   * @see _.cloneWith
   * @example
   *
   * function customizer(value) {
   *   if (_.isElement(value)) {
   *     return value.cloneNode(true);
   *   }
   * }
   *
   * var el = _.cloneDeepWith(document.body, customizer);
   *
   * console.log(el === document.body);
   * // => false
   * console.log(el.nodeName);
   * // => 'BODY'
   * console.log(el.childNodes.length);
   * // => 20
   */
  function cloneDeepWith(value, customizer) {
    return baseClone(value, true, true, customizer);
  }

  module.exports = cloneDeepWith;


/***/ },
/* 1176 */
/***/ function(module, exports) {

  /**
   * Creates an array with all falsey values removed. The values `false`, `null`,
   * `0`, `""`, `undefined`, and `NaN` are falsey.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to compact.
   * @returns {Array} Returns the new array of filtered values.
   * @example
   *
   * _.compact([0, 1, false, 2, '', 3]);
   * // => [1, 2, 3]
   */
  function compact(array) {
    var index = -1,
        length = array ? array.length : 0,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  module.exports = compact;


/***/ },
/* 1177 */
/***/ function(module, exports, __webpack_require__) {

  var toString = __webpack_require__(219);

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /**
   * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
   * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to escape.
   * @returns {string} Returns the escaped string.
   * @example
   *
   * _.escapeRegExp('[lodash](https://lodash.com/)');
   * // => '\[lodash\]\(https://lodash\.com/\)'
   */
  function escapeRegExp(string) {
    string = toString(string);
    return (string && reHasRegExpChar.test(string))
      ? string.replace(reRegExpChar, '\\$&')
      : string;
  }

  module.exports = escapeRegExp;


/***/ },
/* 1178 */
/***/ function(module, exports, __webpack_require__) {

  var arrayEach = __webpack_require__(341),
      baseEach = __webpack_require__(460),
      baseIteratee = __webpack_require__(346),
      isArray = __webpack_require__(114);

  /**
   * Iterates over elements of `collection` and invokes `iteratee` for each element.
   * The iteratee is invoked with three arguments: (value, index|key, collection).
   * Iteratee functions may exit iteration early by explicitly returning `false`.
   *
   * **Note:** As with other "Collections" methods, objects with a "length"
   * property are iterated like arrays. To avoid this behavior use `_.forIn`
   * or `_.forOwn` for object iteration.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @alias each
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @returns {Array|Object} Returns `collection`.
   * @see _.forEachRight
   * @example
   *
   * _([1, 2]).forEach(function(value) {
   *   console.log(value);
   * });
   * // => Logs `1` then `2`.
   *
   * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
   *   console.log(key);
   * });
   * // => Logs 'a' then 'b' (iteration order is not guaranteed).
   */
  function forEach(collection, iteratee) {
    var func = isArray(collection) ? arrayEach : baseEach;
    return func(collection, baseIteratee(iteratee, 3));
  }

  module.exports = forEach;


/***/ },
/* 1179 */
/***/ function(module, exports, __webpack_require__) {

  var baseGet = __webpack_require__(461);

  /**
   * Gets the value at `path` of `object`. If the resolved value is
   * `undefined`, the `defaultValue` is used in its place.
   *
   * @static
   * @memberOf _
   * @since 3.7.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @param {*} [defaultValue] The value returned for `undefined` resolved values.
   * @returns {*} Returns the resolved value.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
   *
   * _.get(object, 'a[0].b.c');
   * // => 3
   *
   * _.get(object, ['a', '0', 'b', 'c']);
   * // => 3
   *
   * _.get(object, 'a.b.c', 'default');
   * // => 'default'
   */
  function get(object, path, defaultValue) {
    var result = object == null ? undefined : baseGet(object, path);
    return result === undefined ? defaultValue : result;
  }

  module.exports = get;


/***/ },
/* 1180 */
/***/ function(module, exports, __webpack_require__) {

  var baseHas = __webpack_require__(344),
      hasPath = __webpack_require__(470);

  /**
   * Checks if `path` is a direct property of `object`.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   * @example
   *
   * var object = { 'a': { 'b': 2 } };
   * var other = _.create({ 'a': _.create({ 'b': 2 }) });
   *
   * _.has(object, 'a');
   * // => true
   *
   * _.has(object, 'a.b');
   * // => true
   *
   * _.has(object, ['a', 'b']);
   * // => true
   *
   * _.has(other, 'a');
   * // => false
   */
  function has(object, path) {
    return object != null && hasPath(object, path, baseHas);
  }

  module.exports = has;


/***/ },
/* 1181 */
/***/ function(module, exports, __webpack_require__) {

  var baseHasIn = __webpack_require__(1097),
      hasPath = __webpack_require__(470);

  /**
   * Checks if `path` is a direct or inherited property of `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   * @example
   *
   * var object = _.create({ 'a': _.create({ 'b': 2 }) });
   *
   * _.hasIn(object, 'a');
   * // => true
   *
   * _.hasIn(object, 'a.b');
   * // => true
   *
   * _.hasIn(object, ['a', 'b']);
   * // => true
   *
   * _.hasIn(object, 'b');
   * // => false
   */
  function hasIn(object, path) {
    return object != null && hasPath(object, path, baseHasIn);
  }

  module.exports = hasIn;


/***/ },
/* 1182 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(146),
      stubFalse = __webpack_require__(1192);

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Built-in value references. */
  var Buffer = moduleExports ? root.Buffer : undefined;

  /**
   * Checks if `value` is a buffer.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
   * @example
   *
   * _.isBuffer(new Buffer(2));
   * // => true
   *
   * _.isBuffer(new Uint8Array(2));
   * // => false
   */
  var isBuffer = !Buffer ? stubFalse : function(value) {
    return value instanceof Buffer;
  };

  module.exports = isBuffer;

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(521)(module)))

/***/ },
/* 1183 */
/***/ function(module, exports, __webpack_require__) {

  var toInteger = __webpack_require__(218);

  /**
   * Checks if `value` is an integer.
   *
   * **Note:** This method is based on
   * [`Number.isInteger`](https://mdn.io/Number/isInteger).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
   * @example
   *
   * _.isInteger(3);
   * // => true
   *
   * _.isInteger(Number.MIN_VALUE);
   * // => false
   *
   * _.isInteger(Infinity);
   * // => false
   *
   * _.isInteger('3');
   * // => false
   */
  function isInteger(value) {
    return typeof value == 'number' && value == toInteger(value);
  }

  module.exports = isInteger;


/***/ },
/* 1184 */
/***/ function(module, exports, __webpack_require__) {

  var arrayMap = __webpack_require__(342),
      baseIteratee = __webpack_require__(346),
      baseMap = __webpack_require__(463),
      isArray = __webpack_require__(114);

  /**
   * Creates an array of values by running each element in `collection` thru
   * `iteratee`. The iteratee is invoked with three arguments:
   * (value, index|key, collection).
   *
   * Many lodash methods are guarded to work as iteratees for methods like
   * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
   *
   * The guarded methods are:
   * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
   * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
   * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
   * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Array|Function|Object|string} [iteratee=_.identity]
   *  The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   * @example
   *
   * function square(n) {
   *   return n * n;
   * }
   *
   * _.map([4, 8], square);
   * // => [16, 64]
   *
   * _.map({ 'a': 4, 'b': 8 }, square);
   * // => [16, 64] (iteration order is not guaranteed)
   *
   * var users = [
   *   { 'user': 'barney' },
   *   { 'user': 'fred' }
   * ];
   *
   * // The `_.property` iteratee shorthand.
   * _.map(users, 'user');
   * // => ['barney', 'fred']
   */
  function map(collection, iteratee) {
    var func = isArray(collection) ? arrayMap : baseMap;
    return func(collection, baseIteratee(iteratee, 3));
  }

  module.exports = map;


/***/ },
/* 1185 */
/***/ function(module, exports, __webpack_require__) {

  var MapCache = __webpack_require__(339);

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /**
   * Creates a function that memoizes the result of `func`. If `resolver` is
   * provided, it determines the cache key for storing the result based on the
   * arguments provided to the memoized function. By default, the first argument
   * provided to the memoized function is used as the map cache key. The `func`
   * is invoked with the `this` binding of the memoized function.
   *
   * **Note:** The cache is exposed as the `cache` property on the memoized
   * function. Its creation may be customized by replacing the `_.memoize.Cache`
   * constructor with one whose instances implement the
   * [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
   * method interface of `delete`, `get`, `has`, and `set`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to have its output memoized.
   * @param {Function} [resolver] The function to resolve the cache key.
   * @returns {Function} Returns the new memoized function.
   * @example
   *
   * var object = { 'a': 1, 'b': 2 };
   * var other = { 'c': 3, 'd': 4 };
   *
   * var values = _.memoize(_.values);
   * values(object);
   * // => [1, 2]
   *
   * values(other);
   * // => [3, 4]
   *
   * object.a = 2;
   * values(object);
   * // => [1, 2]
   *
   * // Modify the result cache.
   * values.cache.set(object, ['a', 'b']);
   * values(object);
   * // => ['a', 'b']
   *
   * // Replace `_.memoize.Cache`.
   * _.memoize.Cache = WeakMap;
   */
  function memoize(func, resolver) {
    if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    var memoized = function() {
      var args = arguments,
          key = resolver ? resolver.apply(this, args) : args[0],
          cache = memoized.cache;

      if (cache.has(key)) {
        return cache.get(key);
      }
      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result);
      return result;
    };
    memoized.cache = new (memoize.Cache || MapCache);
    return memoized;
  }

  // Assign cache to `_.memoize`.
  memoize.Cache = MapCache;

  module.exports = memoize;


/***/ },
/* 1186 */
/***/ function(module, exports, __webpack_require__) {

  var baseMerge = __webpack_require__(1105),
      createAssigner = __webpack_require__(349);

  /**
   * This method is like `_.merge` except that it accepts `customizer` which
   * is invoked to produce the merged values of the destination and source
   * properties. If `customizer` returns `undefined`, merging is handled by the
   * method instead. The `customizer` is invoked with seven arguments:
   * (objValue, srcValue, key, object, source, stack).
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} sources The source objects.
   * @param {Function} customizer The function to customize assigned values.
   * @returns {Object} Returns `object`.
   * @example
   *
   * function customizer(objValue, srcValue) {
   *   if (_.isArray(objValue)) {
   *     return objValue.concat(srcValue);
   *   }
   * }
   *
   * var object = {
   *   'fruits': ['apple'],
   *   'vegetables': ['beet']
   * };
   *
   * var other = {
   *   'fruits': ['banana'],
   *   'vegetables': ['carrot']
   * };
   *
   * _.mergeWith(object, other, customizer);
   * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
   */
  var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
    baseMerge(object, source, srcIndex, customizer);
  });

  module.exports = mergeWith;


/***/ },
/* 1187 */
/***/ function(module, exports) {

  /**
   * A method that returns `undefined`.
   *
   * @static
   * @memberOf _
   * @since 2.3.0
   * @category Util
   * @example
   *
   * _.times(2, _.noop);
   * // => [undefined, undefined]
   */
  function noop() {
    // No operation performed.
  }

  module.exports = noop;


/***/ },
/* 1188 */
/***/ function(module, exports, __webpack_require__) {

  var baseProperty = __webpack_require__(464),
      basePropertyDeep = __webpack_require__(1108),
      isKey = __webpack_require__(259),
      toKey = __webpack_require__(263);

  /**
   * Creates a function that returns the value at `path` of a given object.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new accessor function.
   * @example
   *
   * var objects = [
   *   { 'a': { 'b': 2 } },
   *   { 'a': { 'b': 1 } }
   * ];
   *
   * _.map(objects, _.property('a.b'));
   * // => [2, 1]
   *
   * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
   * // => [1, 2]
   */
  function property(path) {
    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
  }

  module.exports = property;


/***/ },
/* 1189 */
/***/ function(module, exports, __webpack_require__) {

  var baseFlatten = __webpack_require__(1093),
      baseOrderBy = __webpack_require__(1107),
      isArray = __webpack_require__(114),
      isFlattenableIteratee = __webpack_require__(1150),
      isIterateeCall = __webpack_require__(351),
      rest = __webpack_require__(356);

  /**
   * Creates an array of elements, sorted in ascending order by the results of
   * running each element in a collection thru each iteratee. This method
   * performs a stable sort, that is, it preserves the original sort order of
   * equal elements. The iteratees are invoked with one argument: (value).
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {...(Array|Array[]|Function|Function[]|Object|Object[]|string|string[])}
   *  [iteratees=[_.identity]] The iteratees to sort by.
   * @returns {Array} Returns the new sorted array.
   * @example
   *
   * var users = [
   *   { 'user': 'fred',   'age': 48 },
   *   { 'user': 'barney', 'age': 36 },
   *   { 'user': 'fred',   'age': 40 },
   *   { 'user': 'barney', 'age': 34 }
   * ];
   *
   * _.sortBy(users, function(o) { return o.user; });
   * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
   *
   * _.sortBy(users, ['user', 'age']);
   * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
   *
   * _.sortBy(users, 'user', function(o) {
   *   return Math.floor(o.age / 10);
   * });
   * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
   */
  var sortBy = rest(function(collection, iteratees) {
    if (collection == null) {
      return [];
    }
    var length = iteratees.length;
    if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
      iteratees = [];
    } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
      iteratees = [iteratees[0]];
    }
    iteratees = (iteratees.length == 1 && isArray(iteratees[0]))
      ? iteratees[0]
      : baseFlatten(iteratees, 1, isFlattenableIteratee);

    return baseOrderBy(collection, iteratees, []);
  });

  module.exports = sortBy;


/***/ },
/* 1190 */
/***/ function(module, exports, __webpack_require__) {

  var baseClamp = __webpack_require__(1091),
      baseToString = __webpack_require__(347),
      toInteger = __webpack_require__(218),
      toString = __webpack_require__(219);

  /**
   * Checks if `string` starts with the given target string.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to search.
   * @param {string} [target] The string to search for.
   * @param {number} [position=0] The position to search from.
   * @returns {boolean} Returns `true` if `string` starts with `target`,
   *  else `false`.
   * @example
   *
   * _.startsWith('abc', 'a');
   * // => true
   *
   * _.startsWith('abc', 'b');
   * // => false
   *
   * _.startsWith('abc', 'b', 1);
   * // => true
   */
  function startsWith(string, target, position) {
    string = toString(string);
    position = baseClamp(toInteger(position), 0, string.length);
    return string.lastIndexOf(baseToString(target), position) == position;
  }

  module.exports = startsWith;


/***/ },
/* 1191 */
/***/ function(module, exports) {

  /**
   * A method that returns a new empty array.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {Array} Returns the new empty array.
   * @example
   *
   * var arrays = _.times(2, _.stubArray);
   *
   * console.log(arrays);
   * // => [[], []]
   *
   * console.log(arrays[0] === arrays[1]);
   * // => false
   */
  function stubArray() {
    return [];
  }

  module.exports = stubArray;


/***/ },
/* 1192 */
/***/ function(module, exports) {

  /**
   * A method that returns `false`.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {boolean} Returns `false`.
   * @example
   *
   * _.times(2, _.stubFalse);
   * // => [false, false]
   */
  function stubFalse() {
    return false;
  }

  module.exports = stubFalse;


/***/ },
/* 1193 */
/***/ function(module, exports, __webpack_require__) {

  var toNumber = __webpack_require__(1194);

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_INTEGER = 1.7976931348623157e+308;

  /**
   * Converts `value` to a finite number.
   *
   * @static
   * @memberOf _
   * @since 4.12.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted number.
   * @example
   *
   * _.toFinite(3.2);
   * // => 3.2
   *
   * _.toFinite(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toFinite(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toFinite('3.2');
   * // => 3.2
   */
  function toFinite(value) {
    if (!value) {
      return value === 0 ? value : 0;
    }
    value = toNumber(value);
    if (value === INFINITY || value === -INFINITY) {
      var sign = (value < 0 ? -1 : 1);
      return sign * MAX_INTEGER;
    }
    return value === value ? value : 0;
  }

  module.exports = toFinite;


/***/ },
/* 1194 */
/***/ function(module, exports, __webpack_require__) {

  var isFunction = __webpack_require__(199),
      isObject = __webpack_require__(133),
      isSymbol = __webpack_require__(217);

  /** Used as references for various `Number` constants. */
  var NAN = 0 / 0;

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Built-in method references without a dependency on `root`. */
  var freeParseInt = parseInt;

  /**
   * Converts `value` to a number.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to process.
   * @returns {number} Returns the number.
   * @example
   *
   * _.toNumber(3.2);
   * // => 3.2
   *
   * _.toNumber(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toNumber(Infinity);
   * // => Infinity
   *
   * _.toNumber('3.2');
   * // => 3.2
   */
  function toNumber(value) {
    if (typeof value == 'number') {
      return value;
    }
    if (isSymbol(value)) {
      return NAN;
    }
    if (isObject(value)) {
      var other = isFunction(value.valueOf) ? value.valueOf() : value;
      value = isObject(other) ? (other + '') : other;
    }
    if (typeof value != 'string') {
      return value === 0 ? value : +value;
    }
    value = value.replace(reTrim, '');
    var isBinary = reIsBinary.test(value);
    return (isBinary || reIsOctal.test(value))
      ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
      : (reIsBadHex.test(value) ? NAN : +value);
  }

  module.exports = toNumber;


/***/ },
/* 1195 */
/***/ function(module, exports, __webpack_require__) {

  var copyObject = __webpack_require__(214),
      keysIn = __webpack_require__(355);

  /**
   * Converts `value` to a plain object flattening inherited enumerable string
   * keyed properties of `value` to own properties of the plain object.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {Object} Returns the converted plain object.
   * @example
   *
   * function Foo() {
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.assign({ 'a': 1 }, new Foo);
   * // => { 'a': 1, 'b': 2 }
   *
   * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
   * // => { 'a': 1, 'b': 2, 'c': 3 }
   */
  function toPlainObject(value) {
    return copyObject(value, keysIn(value));
  }

  module.exports = toPlainObject;


/***/ },
/* 1196 */
/***/ function(module, exports, __webpack_require__) {

  var baseToString = __webpack_require__(347),
      castSlice = __webpack_require__(1117),
      charsEndIndex = __webpack_require__(1118),
      stringToArray = __webpack_require__(1171),
      toString = __webpack_require__(219);

  /** Used to match leading and trailing whitespace. */
  var reTrimEnd = /\s+$/;

  /**
   * Removes trailing whitespace or specified characters from `string`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to trim.
   * @param {string} [chars=whitespace] The characters to trim.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {string} Returns the trimmed string.
   * @example
   *
   * _.trimEnd('  abc  ');
   * // => '  abc'
   *
   * _.trimEnd('-_-abc-_-', '_-');
   * // => '-_-abc'
   */
  function trimEnd(string, chars, guard) {
    string = toString(string);
    if (string && (guard || chars === undefined)) {
      return string.replace(reTrimEnd, '');
    }
    if (!string || !(chars = baseToString(chars))) {
      return string;
    }
    var strSymbols = stringToArray(string),
        end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

    return castSlice(strSymbols, 0, end).join('');
  }

  module.exports = trimEnd;


/***/ },
/* 1197 */
/***/ function(module, exports, __webpack_require__) {

  var baseUniq = __webpack_require__(1114);

  /**
   * Creates a duplicate-free version of an array, using
   * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
   * for equality comparisons, in which only the first occurrence of each
   * element is kept.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @returns {Array} Returns the new duplicate free array.
   * @example
   *
   * _.uniq([2, 1, 2]);
   * // => [2, 1]
   */
  function uniq(array) {
    return (array && array.length)
      ? baseUniq(array)
      : [];
  }

  module.exports = uniq;


/***/ },
/* 1198 */
/***/ function(module, exports, __webpack_require__) {

  var baseValues = __webpack_require__(1115),
      keys = __webpack_require__(165);

  /**
   * Creates an array of the own enumerable string keyed property values of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property values.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.values(new Foo);
   * // => [1, 2] (iteration order is not guaranteed)
   *
   * _.values('hi');
   * // => ['h', 'i']
   */
  function values(object) {
    return object ? baseValues(object, keys(object)) : [];
  }

  module.exports = values;


/***/ },
/* 1199 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = minimatch
  minimatch.Minimatch = Minimatch

  var path = { sep: '/' }
  try {
    path = __webpack_require__(134)
  } catch (er) {}

  var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}
  var expand = __webpack_require__(788)

  // any single thing other than /
  // don't need to escape / when using new RegExp()
  var qmark = '[^/]'

  // * => any number of characters
  var star = qmark + '*?'

  // ** when dots are allowed.  Anything goes, except .. and .
  // not (^ or / followed by one or two dots followed by $ or /),
  // followed by anything, any number of times.
  var twoStarDot = '(?:(?!(?:\\\/|^)(?:\\.{1,2})($|\\\/)).)*?'

  // not a ^ or / followed by a dot,
  // followed by anything, any number of times.
  var twoStarNoDot = '(?:(?!(?:\\\/|^)\\.).)*?'

  // characters that need to be escaped in RegExp.
  var reSpecials = charSet('().*{}+?[]^$\\!')

  // "abc" -> { a:true, b:true, c:true }
  function charSet (s) {
    return s.split('').reduce(function (set, c) {
      set[c] = true
      return set
    }, {})
  }

  // normalizes slashes.
  var slashSplit = /\/+/

  minimatch.filter = filter
  function filter (pattern, options) {
    options = options || {}
    return function (p, i, list) {
      return minimatch(p, pattern, options)
    }
  }

  function ext (a, b) {
    a = a || {}
    b = b || {}
    var t = {}
    Object.keys(b).forEach(function (k) {
      t[k] = b[k]
    })
    Object.keys(a).forEach(function (k) {
      t[k] = a[k]
    })
    return t
  }

  minimatch.defaults = function (def) {
    if (!def || !Object.keys(def).length) return minimatch

    var orig = minimatch

    var m = function minimatch (p, pattern, options) {
      return orig.minimatch(p, pattern, ext(def, options))
    }

    m.Minimatch = function Minimatch (pattern, options) {
      return new orig.Minimatch(pattern, ext(def, options))
    }

    return m
  }

  Minimatch.defaults = function (def) {
    if (!def || !Object.keys(def).length) return Minimatch
    return minimatch.defaults(def).Minimatch
  }

  function minimatch (p, pattern, options) {
    if (typeof pattern !== 'string') {
      throw new TypeError('glob pattern string required')
    }

    if (!options) options = {}

    // shortcut: comments match nothing.
    if (!options.nocomment && pattern.charAt(0) === '#') {
      return false
    }

    // "" only matches ""
    if (pattern.trim() === '') return p === ''

    return new Minimatch(pattern, options).match(p)
  }

  function Minimatch (pattern, options) {
    if (!(this instanceof Minimatch)) {
      return new Minimatch(pattern, options)
    }

    if (typeof pattern !== 'string') {
      throw new TypeError('glob pattern string required')
    }

    if (!options) options = {}
    pattern = pattern.trim()

    // windows support: need to use /, not \
    if (path.sep !== '/') {
      pattern = pattern.split(path.sep).join('/')
    }

    this.options = options
    this.set = []
    this.pattern = pattern
    this.regexp = null
    this.negate = false
    this.comment = false
    this.empty = false

    // make the set of regexps etc.
    this.make()
  }

  Minimatch.prototype.debug = function () {}

  Minimatch.prototype.make = make
  function make () {
    // don't do it more than once.
    if (this._made) return

    var pattern = this.pattern
    var options = this.options

    // empty patterns and comments match nothing.
    if (!options.nocomment && pattern.charAt(0) === '#') {
      this.comment = true
      return
    }
    if (!pattern) {
      this.empty = true
      return
    }

    // step 1: figure out negation, etc.
    this.parseNegate()

    // step 2: expand braces
    var set = this.globSet = this.braceExpand()

    if (options.debug) this.debug = console.error

    this.debug(this.pattern, set)

    // step 3: now we have a set, so turn each one into a series of path-portion
    // matching patterns.
    // These will be regexps, except in the case of "**", which is
    // set to the GLOBSTAR object for globstar behavior,
    // and will not contain any / characters
    set = this.globParts = set.map(function (s) {
      return s.split(slashSplit)
    })

    this.debug(this.pattern, set)

    // glob --> regexps
    set = set.map(function (s, si, set) {
      return s.map(this.parse, this)
    }, this)

    this.debug(this.pattern, set)

    // filter out everything that didn't compile properly.
    set = set.filter(function (s) {
      return s.indexOf(false) === -1
    })

    this.debug(this.pattern, set)

    this.set = set
  }

  Minimatch.prototype.parseNegate = parseNegate
  function parseNegate () {
    var pattern = this.pattern
    var negate = false
    var options = this.options
    var negateOffset = 0

    if (options.nonegate) return

    for (var i = 0, l = pattern.length
      ; i < l && pattern.charAt(i) === '!'
      ; i++) {
      negate = !negate
      negateOffset++
    }

    if (negateOffset) this.pattern = pattern.substr(negateOffset)
    this.negate = negate
  }

  // Brace expansion:
  // a{b,c}d -> abd acd
  // a{b,}c -> abc ac
  // a{0..3}d -> a0d a1d a2d a3d
  // a{b,c{d,e}f}g -> abg acdfg acefg
  // a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg
  //
  // Invalid sets are not expanded.
  // a{2..}b -> a{2..}b
  // a{b}c -> a{b}c
  minimatch.braceExpand = function (pattern, options) {
    return braceExpand(pattern, options)
  }

  Minimatch.prototype.braceExpand = braceExpand

  function braceExpand (pattern, options) {
    if (!options) {
      if (this instanceof Minimatch) {
        options = this.options
      } else {
        options = {}
      }
    }

    pattern = typeof pattern === 'undefined'
      ? this.pattern : pattern

    if (typeof pattern === 'undefined') {
      throw new Error('undefined pattern')
    }

    if (options.nobrace ||
      !pattern.match(/\{.*\}/)) {
      // shortcut. no need to expand.
      return [pattern]
    }

    return expand(pattern)
  }

  // parse a component of the expanded set.
  // At this point, no pattern may contain "/" in it
  // so we're going to return a 2d array, where each entry is the full
  // pattern, split on '/', and then turned into a regular expression.
  // A regexp is made at the end which joins each array with an
  // escaped /, and another full one which joins each regexp with |.
  //
  // Following the lead of Bash 4.1, note that "**" only has special meaning
  // when it is the *only* thing in a path portion.  Otherwise, any series
  // of * is equivalent to a single *.  Globstar behavior is enabled by
  // default, and can be disabled by setting options.noglobstar.
  Minimatch.prototype.parse = parse
  var SUBPARSE = {}
  function parse (pattern, isSub) {
    var options = this.options

    // shortcuts
    if (!options.noglobstar && pattern === '**') return GLOBSTAR
    if (pattern === '') return ''

    var re = ''
    var hasMagic = !!options.nocase
    var escaping = false
    // ? => one single character
    var patternListStack = []
    var negativeLists = []
    var plType
    var stateChar
    var inClass = false
    var reClassStart = -1
    var classStart = -1
    // . and .. never match anything that doesn't start with .,
    // even when options.dot is set.
    var patternStart = pattern.charAt(0) === '.' ? '' // anything
    // not (start or / followed by . or .. followed by / or end)
    : options.dot ? '(?!(?:^|\\\/)\\.{1,2}(?:$|\\\/))'
    : '(?!\\.)'
    var self = this

    function clearStateChar () {
      if (stateChar) {
        // we had some state-tracking character
        // that wasn't consumed by this pass.
        switch (stateChar) {
          case '*':
            re += star
            hasMagic = true
          break
          case '?':
            re += qmark
            hasMagic = true
          break
          default:
            re += '\\' + stateChar
          break
        }
        self.debug('clearStateChar %j %j', stateChar, re)
        stateChar = false
      }
    }

    for (var i = 0, len = pattern.length, c
      ; (i < len) && (c = pattern.charAt(i))
      ; i++) {
      this.debug('%s\t%s %s %j', pattern, i, re, c)

      // skip over any that are escaped.
      if (escaping && reSpecials[c]) {
        re += '\\' + c
        escaping = false
        continue
      }

      switch (c) {
        case '/':
          // completely not allowed, even escaped.
          // Should already be path-split by now.
          return false

        case '\\':
          clearStateChar()
          escaping = true
        continue

        // the various stateChar values
        // for the "extglob" stuff.
        case '?':
        case '*':
        case '+':
        case '@':
        case '!':
          this.debug('%s\t%s %s %j <-- stateChar', pattern, i, re, c)

          // all of those are literals inside a class, except that
          // the glob [!a] means [^a] in regexp
          if (inClass) {
            this.debug('  in class')
            if (c === '!' && i === classStart + 1) c = '^'
            re += c
            continue
          }

          // if we already have a stateChar, then it means
          // that there was something like ** or +? in there.
          // Handle the stateChar, then proceed with this one.
          self.debug('call clearStateChar %j', stateChar)
          clearStateChar()
          stateChar = c
          // if extglob is disabled, then +(asdf|foo) isn't a thing.
          // just clear the statechar *now*, rather than even diving into
          // the patternList stuff.
          if (options.noext) clearStateChar()
        continue

        case '(':
          if (inClass) {
            re += '('
            continue
          }

          if (!stateChar) {
            re += '\\('
            continue
          }

          plType = stateChar
          patternListStack.push({
            type: plType,
            start: i - 1,
            reStart: re.length
          })
          // negation is (?:(?!js)[^/]*)
          re += stateChar === '!' ? '(?:(?!(?:' : '(?:'
          this.debug('plType %j %j', stateChar, re)
          stateChar = false
        continue

        case ')':
          if (inClass || !patternListStack.length) {
            re += '\\)'
            continue
          }

          clearStateChar()
          hasMagic = true
          re += ')'
          var pl = patternListStack.pop()
          plType = pl.type
          // negation is (?:(?!js)[^/]*)
          // The others are (?:<pattern>)<type>
          switch (plType) {
            case '!':
              negativeLists.push(pl)
              re += ')[^/]*?)'
              pl.reEnd = re.length
              break
            case '?':
            case '+':
            case '*':
              re += plType
              break
            case '@': break // the default anyway
          }
        continue

        case '|':
          if (inClass || !patternListStack.length || escaping) {
            re += '\\|'
            escaping = false
            continue
          }

          clearStateChar()
          re += '|'
        continue

        // these are mostly the same in regexp and glob
        case '[':
          // swallow any state-tracking char before the [
          clearStateChar()

          if (inClass) {
            re += '\\' + c
            continue
          }

          inClass = true
          classStart = i
          reClassStart = re.length
          re += c
        continue

        case ']':
          //  a right bracket shall lose its special
          //  meaning and represent itself in
          //  a bracket expression if it occurs
          //  first in the list.  -- POSIX.2 2.8.3.2
          if (i === classStart + 1 || !inClass) {
            re += '\\' + c
            escaping = false
            continue
          }

          // handle the case where we left a class open.
          // "[z-a]" is valid, equivalent to "\[z-a\]"
          if (inClass) {
            // split where the last [ was, make sure we don't have
            // an invalid re. if so, re-walk the contents of the
            // would-be class to re-translate any characters that
            // were passed through as-is
            // TODO: It would probably be faster to determine this
            // without a try/catch and a new RegExp, but it's tricky
            // to do safely.  For now, this is safe and works.
            var cs = pattern.substring(classStart + 1, i)
            try {
              RegExp('[' + cs + ']')
            } catch (er) {
              // not a valid class!
              var sp = this.parse(cs, SUBPARSE)
              re = re.substr(0, reClassStart) + '\\[' + sp[0] + '\\]'
              hasMagic = hasMagic || sp[1]
              inClass = false
              continue
            }
          }

          // finish up the class.
          hasMagic = true
          inClass = false
          re += c
        continue

        default:
          // swallow any state char that wasn't consumed
          clearStateChar()

          if (escaping) {
            // no need
            escaping = false
          } else if (reSpecials[c]
            && !(c === '^' && inClass)) {
            re += '\\'
          }

          re += c

      } // switch
    } // for

    // handle the case where we left a class open.
    // "[abc" is valid, equivalent to "\[abc"
    if (inClass) {
      // split where the last [ was, and escape it
      // this is a huge pita.  We now have to re-walk
      // the contents of the would-be class to re-translate
      // any characters that were passed through as-is
      cs = pattern.substr(classStart + 1)
      sp = this.parse(cs, SUBPARSE)
      re = re.substr(0, reClassStart) + '\\[' + sp[0]
      hasMagic = hasMagic || sp[1]
    }

    // handle the case where we had a +( thing at the *end*
    // of the pattern.
    // each pattern list stack adds 3 chars, and we need to go through
    // and escape any | chars that were passed through as-is for the regexp.
    // Go through and escape them, taking care not to double-escape any
    // | chars that were already escaped.
    for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
      var tail = re.slice(pl.reStart + 3)
      // maybe some even number of \, then maybe 1 \, followed by a |
      tail = tail.replace(/((?:\\{2})*)(\\?)\|/g, function (_, $1, $2) {
        if (!$2) {
          // the | isn't already escaped, so escape it.
          $2 = '\\'
        }

        // need to escape all those slashes *again*, without escaping the
        // one that we need for escaping the | character.  As it works out,
        // escaping an even number of slashes can be done by simply repeating
        // it exactly after itself.  That's why this trick works.
        //
        // I am sorry that you have to see this.
        return $1 + $1 + $2 + '|'
      })

      this.debug('tail=%j\n   %s', tail, tail)
      var t = pl.type === '*' ? star
        : pl.type === '?' ? qmark
        : '\\' + pl.type

      hasMagic = true
      re = re.slice(0, pl.reStart) + t + '\\(' + tail
    }

    // handle trailing things that only matter at the very end.
    clearStateChar()
    if (escaping) {
      // trailing \\
      re += '\\\\'
    }

    // only need to apply the nodot start if the re starts with
    // something that could conceivably capture a dot
    var addPatternStart = false
    switch (re.charAt(0)) {
      case '.':
      case '[':
      case '(': addPatternStart = true
    }

    // Hack to work around lack of negative lookbehind in JS
    // A pattern like: *.!(x).!(y|z) needs to ensure that a name
    // like 'a.xyz.yz' doesn't match.  So, the first negative
    // lookahead, has to look ALL the way ahead, to the end of
    // the pattern.
    for (var n = negativeLists.length - 1; n > -1; n--) {
      var nl = negativeLists[n]

      var nlBefore = re.slice(0, nl.reStart)
      var nlFirst = re.slice(nl.reStart, nl.reEnd - 8)
      var nlLast = re.slice(nl.reEnd - 8, nl.reEnd)
      var nlAfter = re.slice(nl.reEnd)

      nlLast += nlAfter

      // Handle nested stuff like *(*.js|!(*.json)), where open parens
      // mean that we should *not* include the ) in the bit that is considered
      // "after" the negated section.
      var openParensBefore = nlBefore.split('(').length - 1
      var cleanAfter = nlAfter
      for (i = 0; i < openParensBefore; i++) {
        cleanAfter = cleanAfter.replace(/\)[+*?]?/, '')
      }
      nlAfter = cleanAfter

      var dollar = ''
      if (nlAfter === '' && isSub !== SUBPARSE) {
        dollar = '$'
      }
      var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast
      re = newRe
    }

    // if the re is not "" at this point, then we need to make sure
    // it doesn't match against an empty path part.
    // Otherwise a/* will match a/, which it should not.
    if (re !== '' && hasMagic) {
      re = '(?=.)' + re
    }

    if (addPatternStart) {
      re = patternStart + re
    }

    // parsing just a piece of a larger pattern.
    if (isSub === SUBPARSE) {
      return [re, hasMagic]
    }

    // skip the regexp for non-magical patterns
    // unescape anything in it, though, so that it'll be
    // an exact match against a file etc.
    if (!hasMagic) {
      return globUnescape(pattern)
    }

    var flags = options.nocase ? 'i' : ''
    var regExp = new RegExp('^' + re + '$', flags)

    regExp._glob = pattern
    regExp._src = re

    return regExp
  }

  minimatch.makeRe = function (pattern, options) {
    return new Minimatch(pattern, options || {}).makeRe()
  }

  Minimatch.prototype.makeRe = makeRe
  function makeRe () {
    if (this.regexp || this.regexp === false) return this.regexp

    // at this point, this.set is a 2d array of partial
    // pattern strings, or "**".
    //
    // It's better to use .match().  This function shouldn't
    // be used, really, but it's pretty convenient sometimes,
    // when you just want to work with a regex.
    var set = this.set

    if (!set.length) {
      this.regexp = false
      return this.regexp
    }
    var options = this.options

    var twoStar = options.noglobstar ? star
      : options.dot ? twoStarDot
      : twoStarNoDot
    var flags = options.nocase ? 'i' : ''

    var re = set.map(function (pattern) {
      return pattern.map(function (p) {
        return (p === GLOBSTAR) ? twoStar
        : (typeof p === 'string') ? regExpEscape(p)
        : p._src
      }).join('\\\/')
    }).join('|')

    // must match entire pattern
    // ending in a * or ** will make it less strict.
    re = '^(?:' + re + ')$'

    // can match anything, as long as it's not this.
    if (this.negate) re = '^(?!' + re + ').*$'

    try {
      this.regexp = new RegExp(re, flags)
    } catch (ex) {
      this.regexp = false
    }
    return this.regexp
  }

  minimatch.match = function (list, pattern, options) {
    options = options || {}
    var mm = new Minimatch(pattern, options)
    list = list.filter(function (f) {
      return mm.match(f)
    })
    if (mm.options.nonull && !list.length) {
      list.push(pattern)
    }
    return list
  }

  Minimatch.prototype.match = match
  function match (f, partial) {
    this.debug('match', f, this.pattern)
    // short-circuit in the case of busted things.
    // comments, etc.
    if (this.comment) return false
    if (this.empty) return f === ''

    if (f === '/' && partial) return true

    var options = this.options

    // windows: need to use /, not \
    if (path.sep !== '/') {
      f = f.split(path.sep).join('/')
    }

    // treat the test path as a set of pathparts.
    f = f.split(slashSplit)
    this.debug(this.pattern, 'split', f)

    // just ONE of the pattern sets in this.set needs to match
    // in order for it to be valid.  If negating, then just one
    // match means that we have failed.
    // Either way, return on the first hit.

    var set = this.set
    this.debug(this.pattern, 'set', set)

    // Find the basename of the path by looking for the last non-empty segment
    var filename
    var i
    for (i = f.length - 1; i >= 0; i--) {
      filename = f[i]
      if (filename) break
    }

    for (i = 0; i < set.length; i++) {
      var pattern = set[i]
      var file = f
      if (options.matchBase && pattern.length === 1) {
        file = [filename]
      }
      var hit = this.matchOne(file, pattern, partial)
      if (hit) {
        if (options.flipNegate) return true
        return !this.negate
      }
    }

    // didn't get any hits.  this is success if it's a negative
    // pattern, failure otherwise.
    if (options.flipNegate) return false
    return this.negate
  }

  // set partial to true to test if, for example,
  // "/a/b" matches the start of "/*/b/*/d"
  // Partial means, if you run out of file before you run
  // out of pattern, then that's fine, as long as all
  // the parts match.
  Minimatch.prototype.matchOne = function (file, pattern, partial) {
    var options = this.options

    this.debug('matchOne',
      { 'this': this, file: file, pattern: pattern })

    this.debug('matchOne', file.length, pattern.length)

    for (var fi = 0,
        pi = 0,
        fl = file.length,
        pl = pattern.length
        ; (fi < fl) && (pi < pl)
        ; fi++, pi++) {
      this.debug('matchOne loop')
      var p = pattern[pi]
      var f = file[fi]

      this.debug(pattern, p, f)

      // should be impossible.
      // some invalid regexp stuff in the set.
      if (p === false) return false

      if (p === GLOBSTAR) {
        this.debug('GLOBSTAR', [pattern, p, f])

        // "**"
        // a/**/b/**/c would match the following:
        // a/b/x/y/z/c
        // a/x/y/z/b/c
        // a/b/x/b/x/c
        // a/b/c
        // To do this, take the rest of the pattern after
        // the **, and see if it would match the file remainder.
        // If so, return success.
        // If not, the ** "swallows" a segment, and try again.
        // This is recursively awful.
        //
        // a/**/b/**/c matching a/b/x/y/z/c
        // - a matches a
        // - doublestar
        //   - matchOne(b/x/y/z/c, b/**/c)
        //     - b matches b
        //     - doublestar
        //       - matchOne(x/y/z/c, c) -> no
        //       - matchOne(y/z/c, c) -> no
        //       - matchOne(z/c, c) -> no
        //       - matchOne(c, c) yes, hit
        var fr = fi
        var pr = pi + 1
        if (pr === pl) {
          this.debug('** at the end')
          // a ** at the end will just swallow the rest.
          // We have found a match.
          // however, it will not swallow /.x, unless
          // options.dot is set.
          // . and .. are *never* matched by **, for explosively
          // exponential reasons.
          for (; fi < fl; fi++) {
            if (file[fi] === '.' || file[fi] === '..' ||
              (!options.dot && file[fi].charAt(0) === '.')) return false
          }
          return true
        }

        // ok, let's see if we can swallow whatever we can.
        while (fr < fl) {
          var swallowee = file[fr]

          this.debug('\nglobstar while', file, fr, pattern, pr, swallowee)

          // XXX remove this slice.  Just pass the start index.
          if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
            this.debug('globstar found match!', fr, fl, swallowee)
            // found a match.
            return true
          } else {
            // can't swallow "." or ".." ever.
            // can only swallow ".foo" when explicitly asked.
            if (swallowee === '.' || swallowee === '..' ||
              (!options.dot && swallowee.charAt(0) === '.')) {
              this.debug('dot detected!', file, fr, pattern, pr)
              break
            }

            // ** swallows a segment, and continue.
            this.debug('globstar swallow a segment, and continue')
            fr++
          }
        }

        // no match was found.
        // However, in partial mode, we can't say this is necessarily over.
        // If there's more *pattern* left, then
        if (partial) {
          // ran out of file
          this.debug('\n>>> no match, partial?', file, fr, pattern, pr)
          if (fr === fl) return true
        }
        return false
      }

      // something other than **
      // non-magic patterns just have to match exactly
      // patterns with magic have been turned into regexps.
      var hit
      if (typeof p === 'string') {
        if (options.nocase) {
          hit = f.toLowerCase() === p.toLowerCase()
        } else {
          hit = f === p
        }
        this.debug('string match', p, f, hit)
      } else {
        hit = f.match(p)
        this.debug('pattern match', p, f, hit)
      }

      if (!hit) return false
    }

    // Note: ending in / means that we'll get a final ""
    // at the end of the pattern.  This can only match a
    // corresponding "" at the end of the file.
    // If the file ends in /, then it can only match a
    // a pattern that ends in /, unless the pattern just
    // doesn't have any more for it. But, a/b/ should *not*
    // match "a/b/*", even though "" matches against the
    // [^/]*? pattern, except in partial mode, where it might
    // simply not be reached yet.
    // However, a/b/ should still satisfy a/*

    // now either we fell off the end of the pattern, or we're done.
    if (fi === fl && pi === pl) {
      // ran out of pattern and filename at the same time.
      // an exact hit!
      return true
    } else if (fi === fl) {
      // ran out of file, but still had pattern left.
      // this is ok if we're doing the match as part of
      // a glob fs traversal.
      return partial
    } else if (pi === pl) {
      // ran out of pattern, still have file left.
      // this is only acceptable if we're on the very last
      // empty segment of a file with a trailing slash.
      // a/* should match a/b/
      var emptyFileEnd = (fi === fl - 1) && (file[fi] === '')
      return emptyFileEnd
    }

    // should be unreachable.
    throw new Error('wtf?')
  }

  // replace stuff like \* with *
  function globUnescape (s) {
    return s.replace(/\\(.)/g, '$1')
  }

  function regExpEscape (s) {
    return s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
  }


/***/ },
/* 1200 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(process) {var path = __webpack_require__(134);
  var fs = __webpack_require__(126);
  var _0777 = parseInt('0777', 8);

  module.exports = mkdirP.mkdirp = mkdirP.mkdirP = mkdirP;

  function mkdirP (p, opts, f, made) {
      if (typeof opts === 'function') {
          f = opts;
          opts = {};
      }
      else if (!opts || typeof opts !== 'object') {
          opts = { mode: opts };
      }
      
      var mode = opts.mode;
      var xfs = opts.fs || fs;
      
      if (mode === undefined) {
          mode = _0777 & (~process.umask());
      }
      if (!made) made = null;
      
      var cb = f || function () {};
      p = path.resolve(p);
      
      xfs.mkdir(p, mode, function (er) {
          if (!er) {
              made = made || p;
              return cb(null, made);
          }
          switch (er.code) {
              case 'ENOENT':
                  mkdirP(path.dirname(p), opts, function (er, made) {
                      if (er) cb(er, made);
                      else mkdirP(p, opts, cb, made);
                  });
                  break;

              // In the case of any other error, just see if there's a dir
              // there already.  If so, then hooray!  If not, then something
              // is borked.
              default:
                  xfs.stat(p, function (er2, stat) {
                      // if the stat fails, then that's super weird.
                      // let the original error be the failure reason.
                      if (er2 || !stat.isDirectory()) cb(er, made)
                      else cb(null, made);
                  });
                  break;
          }
      });
  }

  mkdirP.sync = function sync (p, opts, made) {
      if (!opts || typeof opts !== 'object') {
          opts = { mode: opts };
      }
      
      var mode = opts.mode;
      var xfs = opts.fs || fs;
      
      if (mode === undefined) {
          mode = _0777 & (~process.umask());
      }
      if (!made) made = null;

      p = path.resolve(p);

      try {
          xfs.mkdirSync(p, mode);
          made = made || p;
      }
      catch (err0) {
          switch (err0.code) {
              case 'ENOENT' :
                  made = sync(path.dirname(p), opts, made);
                  sync(p, opts, made);
                  break;

              // In the case of any other error, just see if there's a dir
              // there already.  If so, then hooray!  If not, then something
              // is borked.
              default:
                  var stat;
                  try {
                      stat = xfs.statSync(p);
                  }
                  catch (err1) {
                      throw err0;
                  }
                  if (!stat.isDirectory()) throw err0;
                  break;
          }
      }

      return made;
  };

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(111)))

/***/ },
/* 1201 */
/***/ function(module, exports) {

  /**
   * Helpers.
   */

  var s = 1000;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var y = d * 365.25;

  /**
   * Parse or format the given `val`.
   *
   * Options:
   *
   *  - `long` verbose formatting [false]
   *
   * @param {String|Number} val
   * @param {Object} options
   * @return {String|Number}
   * @api public
   */

  module.exports = function(val, options){
    options = options || {};
    if ('string' == typeof val) return parse(val);
    return options.long
      ? long(val)
      : short(val);
  };

  /**
   * Parse the given `str` and return milliseconds.
   *
   * @param {String} str
   * @return {Number}
   * @api private
   */

  function parse(str) {
    str = '' + str;
    if (str.length > 10000) return;
    var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
    if (!match) return;
    var n = parseFloat(match[1]);
    var type = (match[2] || 'ms').toLowerCase();
    switch (type) {
      case 'years':
      case 'year':
      case 'yrs':
      case 'yr':
      case 'y':
        return n * y;
      case 'days':
      case 'day':
      case 'd':
        return n * d;
      case 'hours':
      case 'hour':
      case 'hrs':
      case 'hr':
      case 'h':
        return n * h;
      case 'minutes':
      case 'minute':
      case 'mins':
      case 'min':
      case 'm':
        return n * m;
      case 'seconds':
      case 'second':
      case 'secs':
      case 'sec':
      case 's':
        return n * s;
      case 'milliseconds':
      case 'millisecond':
      case 'msecs':
      case 'msec':
      case 'ms':
        return n;
    }
  }

  /**
   * Short format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function short(ms) {
    if (ms >= d) return Math.round(ms / d) + 'd';
    if (ms >= h) return Math.round(ms / h) + 'h';
    if (ms >= m) return Math.round(ms / m) + 'm';
    if (ms >= s) return Math.round(ms / s) + 's';
    return ms + 'ms';
  }

  /**
   * Long format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function long(ms) {
    return plural(ms, d, 'day')
      || plural(ms, h, 'hour')
      || plural(ms, m, 'minute')
      || plural(ms, s, 'second')
      || ms + ' ms';
  }

  /**
   * Pluralization helper.
   */

  function plural(ms, n, name) {
    if (ms < n) return;
    if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
    return Math.ceil(ms / n) + ' ' + name + 's';
  }


/***/ },
/* 1202 */
/***/ function(module, exports) {

  'use strict';
  module.exports = Number.isNaN || function (x) {
  	return x !== x;
  };


/***/ },
/* 1203 */
/***/ function(module, exports) {

  module.exports = {

    /* Allowed flush values; see deflate() and inflate() below for details */
    Z_NO_FLUSH:         0,
    Z_PARTIAL_FLUSH:    1,
    Z_SYNC_FLUSH:       2,
    Z_FULL_FLUSH:       3,
    Z_FINISH:           4,
    Z_BLOCK:            5,
    Z_TREES:            6,

    /* Return codes for the compression/decompression functions. Negative values
    * are errors, positive values are used for special but normal events.
    */
    Z_OK:               0,
    Z_STREAM_END:       1,
    Z_NEED_DICT:        2,
    Z_ERRNO:           -1,
    Z_STREAM_ERROR:    -2,
    Z_DATA_ERROR:      -3,
    //Z_MEM_ERROR:     -4,
    Z_BUF_ERROR:       -5,
    //Z_VERSION_ERROR: -6,

    /* compression levels */
    Z_NO_COMPRESSION:         0,
    Z_BEST_SPEED:             1,
    Z_BEST_COMPRESSION:       9,
    Z_DEFAULT_COMPRESSION:   -1,


    Z_FILTERED:               1,
    Z_HUFFMAN_ONLY:           2,
    Z_RLE:                    3,
    Z_FIXED:                  4,
    Z_DEFAULT_STRATEGY:       0,

    /* Possible values of the data_type field (though see inflate()) */
    Z_BINARY:                 0,
    Z_TEXT:                   1,
    //Z_ASCII:                1, // = Z_TEXT (deprecated)
    Z_UNKNOWN:                2,

    /* The deflate compression method */
    Z_DEFLATED:               8
    //Z_NULL:                 null // Use -1 or null inline, depending on var type
  };


/***/ },
/* 1204 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var utils   = __webpack_require__(269);
  var trees   = __webpack_require__(1208);
  var adler32 = __webpack_require__(483);
  var crc32   = __webpack_require__(484);
  var msg   = __webpack_require__(485);

  /* Public constants ==========================================================*/
  /* ===========================================================================*/


  /* Allowed flush values; see deflate() and inflate() below for details */
  var Z_NO_FLUSH      = 0;
  var Z_PARTIAL_FLUSH = 1;
  //var Z_SYNC_FLUSH    = 2;
  var Z_FULL_FLUSH    = 3;
  var Z_FINISH        = 4;
  var Z_BLOCK         = 5;
  //var Z_TREES         = 6;


  /* Return codes for the compression/decompression functions. Negative values
   * are errors, positive values are used for special but normal events.
   */
  var Z_OK            = 0;
  var Z_STREAM_END    = 1;
  //var Z_NEED_DICT     = 2;
  //var Z_ERRNO         = -1;
  var Z_STREAM_ERROR  = -2;
  var Z_DATA_ERROR    = -3;
  //var Z_MEM_ERROR     = -4;
  var Z_BUF_ERROR     = -5;
  //var Z_VERSION_ERROR = -6;


  /* compression levels */
  //var Z_NO_COMPRESSION      = 0;
  //var Z_BEST_SPEED          = 1;
  //var Z_BEST_COMPRESSION    = 9;
  var Z_DEFAULT_COMPRESSION = -1;


  var Z_FILTERED            = 1;
  var Z_HUFFMAN_ONLY        = 2;
  var Z_RLE                 = 3;
  var Z_FIXED               = 4;
  var Z_DEFAULT_STRATEGY    = 0;

  /* Possible values of the data_type field (though see inflate()) */
  //var Z_BINARY              = 0;
  //var Z_TEXT                = 1;
  //var Z_ASCII               = 1; // = Z_TEXT
  var Z_UNKNOWN             = 2;


  /* The deflate compression method */
  var Z_DEFLATED  = 8;

  /*============================================================================*/


  var MAX_MEM_LEVEL = 9;
  /* Maximum value for memLevel in deflateInit2 */
  var MAX_WBITS = 15;
  /* 32K LZ77 window */
  var DEF_MEM_LEVEL = 8;


  var LENGTH_CODES  = 29;
  /* number of length codes, not counting the special END_BLOCK code */
  var LITERALS      = 256;
  /* number of literal bytes 0..255 */
  var L_CODES       = LITERALS + 1 + LENGTH_CODES;
  /* number of Literal or Length codes, including the END_BLOCK code */
  var D_CODES       = 30;
  /* number of distance codes */
  var BL_CODES      = 19;
  /* number of codes used to transfer the bit lengths */
  var HEAP_SIZE     = 2*L_CODES + 1;
  /* maximum heap size */
  var MAX_BITS  = 15;
  /* All codes must not exceed MAX_BITS bits */

  var MIN_MATCH = 3;
  var MAX_MATCH = 258;
  var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

  var PRESET_DICT = 0x20;

  var INIT_STATE = 42;
  var EXTRA_STATE = 69;
  var NAME_STATE = 73;
  var COMMENT_STATE = 91;
  var HCRC_STATE = 103;
  var BUSY_STATE = 113;
  var FINISH_STATE = 666;

  var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
  var BS_BLOCK_DONE     = 2; /* block flush performed */
  var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
  var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

  var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

  function err(strm, errorCode) {
    strm.msg = msg[errorCode];
    return errorCode;
  }

  function rank(f) {
    return ((f) << 1) - ((f) > 4 ? 9 : 0);
  }

  function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


  /* =========================================================================
   * Flush as much pending output as possible. All deflate() output goes
   * through this function so some applications may wish to modify it
   * to avoid allocating a large strm->output buffer and copying into it.
   * (See also read_buf()).
   */
  function flush_pending(strm) {
    var s = strm.state;

    //_tr_flush_bits(s);
    var len = s.pending;
    if (len > strm.avail_out) {
      len = strm.avail_out;
    }
    if (len === 0) { return; }

    utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
    strm.next_out += len;
    s.pending_out += len;
    strm.total_out += len;
    strm.avail_out -= len;
    s.pending -= len;
    if (s.pending === 0) {
      s.pending_out = 0;
    }
  }


  function flush_block_only (s, last) {
    trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
    s.block_start = s.strstart;
    flush_pending(s.strm);
  }


  function put_byte(s, b) {
    s.pending_buf[s.pending++] = b;
  }


  /* =========================================================================
   * Put a short in the pending buffer. The 16-bit value is put in MSB order.
   * IN assertion: the stream state is correct and there is enough room in
   * pending_buf.
   */
  function putShortMSB(s, b) {
  //  put_byte(s, (Byte)(b >> 8));
  //  put_byte(s, (Byte)(b & 0xff));
    s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
    s.pending_buf[s.pending++] = b & 0xff;
  }


  /* ===========================================================================
   * Read a new buffer from the current input stream, update the adler32
   * and total number of bytes read.  All deflate() input goes through
   * this function so some applications may wish to modify it to avoid
   * allocating a large strm->input buffer and copying from it.
   * (See also flush_pending()).
   */
  function read_buf(strm, buf, start, size) {
    var len = strm.avail_in;

    if (len > size) { len = size; }
    if (len === 0) { return 0; }

    strm.avail_in -= len;

    utils.arraySet(buf, strm.input, strm.next_in, len, start);
    if (strm.state.wrap === 1) {
      strm.adler = adler32(strm.adler, buf, len, start);
    }

    else if (strm.state.wrap === 2) {
      strm.adler = crc32(strm.adler, buf, len, start);
    }

    strm.next_in += len;
    strm.total_in += len;

    return len;
  }


  /* ===========================================================================
   * Set match_start to the longest match starting at the given string and
   * return its length. Matches shorter or equal to prev_length are discarded,
   * in which case the result is equal to prev_length and match_start is
   * garbage.
   * IN assertions: cur_match is the head of the hash chain for the current
   *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
   * OUT assertion: the match length is not greater than s->lookahead.
   */
  function longest_match(s, cur_match) {
    var chain_length = s.max_chain_length;      /* max hash chain length */
    var scan = s.strstart; /* current string */
    var match;                       /* matched string */
    var len;                           /* length of current match */
    var best_len = s.prev_length;              /* best match length so far */
    var nice_match = s.nice_match;             /* stop if match long enough */
    var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
        s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

    var _win = s.window; // shortcut

    var wmask = s.w_mask;
    var prev  = s.prev;

    /* Stop when cur_match becomes <= limit. To simplify the code,
     * we prevent matches with the string of window index 0.
     */

    var strend = s.strstart + MAX_MATCH;
    var scan_end1  = _win[scan + best_len - 1];
    var scan_end   = _win[scan + best_len];

    /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
     * It is easy to get rid of this optimization if necessary.
     */
    // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

    /* Do not waste too much time if we already have a good match: */
    if (s.prev_length >= s.good_match) {
      chain_length >>= 2;
    }
    /* Do not look for matches beyond the end of the input. This is necessary
     * to make deflate deterministic.
     */
    if (nice_match > s.lookahead) { nice_match = s.lookahead; }

    // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

    do {
      // Assert(cur_match < s->strstart, "no future");
      match = cur_match;

      /* Skip to next match if the match length cannot increase
       * or if the match length is less than 2.  Note that the checks below
       * for insufficient lookahead only occur occasionally for performance
       * reasons.  Therefore uninitialized memory will be accessed, and
       * conditional jumps will be made that depend on those values.
       * However the length of the match is limited to the lookahead, so
       * the output of deflate is not affected by the uninitialized values.
       */

      if (_win[match + best_len]     !== scan_end  ||
          _win[match + best_len - 1] !== scan_end1 ||
          _win[match]                !== _win[scan] ||
          _win[++match]              !== _win[scan + 1]) {
        continue;
      }

      /* The check at best_len-1 can be removed because it will be made
       * again later. (This heuristic is not always a win.)
       * It is not necessary to compare scan[2] and match[2] since they
       * are always equal when the other bytes match, given that
       * the hash keys are equal and that HASH_BITS >= 8.
       */
      scan += 2;
      match++;
      // Assert(*scan == *match, "match[2]?");

      /* We check for insufficient lookahead only every 8th comparison;
       * the 256th check will be made at strstart+258.
       */
      do {
        /*jshint noempty:false*/
      } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
               _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
               _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
               _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
               scan < strend);

      // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

      len = MAX_MATCH - (strend - scan);
      scan = strend - MAX_MATCH;

      if (len > best_len) {
        s.match_start = cur_match;
        best_len = len;
        if (len >= nice_match) {
          break;
        }
        scan_end1  = _win[scan + best_len - 1];
        scan_end   = _win[scan + best_len];
      }
    } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

    if (best_len <= s.lookahead) {
      return best_len;
    }
    return s.lookahead;
  }


  /* ===========================================================================
   * Fill the window when the lookahead becomes insufficient.
   * Updates strstart and lookahead.
   *
   * IN assertion: lookahead < MIN_LOOKAHEAD
   * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
   *    At least one byte has been read, or avail_in == 0; reads are
   *    performed for at least two bytes (required for the zip translate_eol
   *    option -- not supported here).
   */
  function fill_window(s) {
    var _w_size = s.w_size;
    var p, n, m, more, str;

    //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

    do {
      more = s.window_size - s.lookahead - s.strstart;

      // JS ints have 32 bit, block below not needed
      /* Deal with !@#$% 64K limit: */
      //if (sizeof(int) <= 2) {
      //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
      //        more = wsize;
      //
      //  } else if (more == (unsigned)(-1)) {
      //        /* Very unlikely, but possible on 16 bit machine if
      //         * strstart == 0 && lookahead == 1 (input done a byte at time)
      //         */
      //        more--;
      //    }
      //}


      /* If the window is almost full and there is insufficient lookahead,
       * move the upper half to the lower one to make room in the upper half.
       */
      if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

        utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
        s.match_start -= _w_size;
        s.strstart -= _w_size;
        /* we now have strstart >= MAX_DIST */
        s.block_start -= _w_size;

        /* Slide the hash table (could be avoided with 32 bit values
         at the expense of memory usage). We slide even when level == 0
         to keep the hash table consistent if we switch back to level > 0
         later. (Using level 0 permanently is not an optimal usage of
         zlib, so we don't care about this pathological case.)
         */

        n = s.hash_size;
        p = n;
        do {
          m = s.head[--p];
          s.head[p] = (m >= _w_size ? m - _w_size : 0);
        } while (--n);

        n = _w_size;
        p = n;
        do {
          m = s.prev[--p];
          s.prev[p] = (m >= _w_size ? m - _w_size : 0);
          /* If n is not on any hash chain, prev[n] is garbage but
           * its value will never be used.
           */
        } while (--n);

        more += _w_size;
      }
      if (s.strm.avail_in === 0) {
        break;
      }

      /* If there was no sliding:
       *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
       *    more == window_size - lookahead - strstart
       * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
       * => more >= window_size - 2*WSIZE + 2
       * In the BIG_MEM or MMAP case (not yet supported),
       *   window_size == input_size + MIN_LOOKAHEAD  &&
       *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
       * Otherwise, window_size == 2*WSIZE so more >= 2.
       * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
       */
      //Assert(more >= 2, "more < 2");
      n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
      s.lookahead += n;

      /* Initialize the hash value now that we have some input: */
      if (s.lookahead + s.insert >= MIN_MATCH) {
        str = s.strstart - s.insert;
        s.ins_h = s.window[str];

        /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
  //#if MIN_MATCH != 3
  //        Call update_hash() MIN_MATCH-3 more times
  //#endif
        while (s.insert) {
          /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH-1]) & s.hash_mask;

          s.prev[str & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = str;
          str++;
          s.insert--;
          if (s.lookahead + s.insert < MIN_MATCH) {
            break;
          }
        }
      }
      /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
       * but this is not important since only literal bytes will be emitted.
       */

    } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

    /* If the WIN_INIT bytes after the end of the current data have never been
     * written, then zero those bytes in order to avoid memory check reports of
     * the use of uninitialized (or uninitialised as Julian writes) bytes by
     * the longest match routines.  Update the high water mark for the next
     * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
     * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
     */
  //  if (s.high_water < s.window_size) {
  //    var curr = s.strstart + s.lookahead;
  //    var init = 0;
  //
  //    if (s.high_water < curr) {
  //      /* Previous high water mark below current data -- zero WIN_INIT
  //       * bytes or up to end of window, whichever is less.
  //       */
  //      init = s.window_size - curr;
  //      if (init > WIN_INIT)
  //        init = WIN_INIT;
  //      zmemzero(s->window + curr, (unsigned)init);
  //      s->high_water = curr + init;
  //    }
  //    else if (s->high_water < (ulg)curr + WIN_INIT) {
  //      /* High water mark at or above current data, but below current data
  //       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
  //       * to end of window, whichever is less.
  //       */
  //      init = (ulg)curr + WIN_INIT - s->high_water;
  //      if (init > s->window_size - s->high_water)
  //        init = s->window_size - s->high_water;
  //      zmemzero(s->window + s->high_water, (unsigned)init);
  //      s->high_water += init;
  //    }
  //  }
  //
  //  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
  //    "not enough room for search");
  }

  /* ===========================================================================
   * Copy without compression as much as possible from the input stream, return
   * the current block state.
   * This function does not insert new strings in the dictionary since
   * uncompressible data is probably not useful. This function is used
   * only for the level=0 compression option.
   * NOTE: this function should be optimized to avoid extra copying from
   * window to pending_buf.
   */
  function deflate_stored(s, flush) {
    /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
     * to pending_buf_size, and each stored block has a 5 byte header:
     */
    var max_block_size = 0xffff;

    if (max_block_size > s.pending_buf_size - 5) {
      max_block_size = s.pending_buf_size - 5;
    }

    /* Copy as much as possible from input to output: */
    for (;;) {
      /* Fill the window as much as possible: */
      if (s.lookahead <= 1) {

        //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
        //  s->block_start >= (long)s->w_size, "slide too late");
  //      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
  //        s.block_start >= s.w_size)) {
  //        throw  new Error("slide too late");
  //      }

        fill_window(s);
        if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }

        if (s.lookahead === 0) {
          break;
        }
        /* flush the current block */
      }
      //Assert(s->block_start >= 0L, "block gone");
  //    if (s.block_start < 0) throw new Error("block gone");

      s.strstart += s.lookahead;
      s.lookahead = 0;

      /* Emit a stored block if pending_buf will be full: */
      var max_start = s.block_start + max_block_size;

      if (s.strstart === 0 || s.strstart >= max_start) {
        /* strstart == 0 is possible when wraparound on 16-bit machine */
        s.lookahead = s.strstart - max_start;
        s.strstart = max_start;
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/


      }
      /* Flush if we may have to slide, otherwise block_start may become
       * negative and the data will be gone:
       */
      if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
    }

    s.insert = 0;

    if (flush === Z_FINISH) {
      /*** FLUSH_BLOCK(s, 1); ***/
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      /***/
      return BS_FINISH_DONE;
    }

    if (s.strstart > s.block_start) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }

    return BS_NEED_MORE;
  }

  /* ===========================================================================
   * Compress as much as possible from the input stream, return the current
   * block state.
   * This function does not perform lazy evaluation of matches and inserts
   * new strings in the dictionary only for unmatched strings or for short
   * matches. It is used only for the fast compression options.
   */
  function deflate_fast(s, flush) {
    var hash_head;        /* head of the hash chain */
    var bflush;           /* set if current block must be flushed */

    for (;;) {
      /* Make sure that we always have enough lookahead, except
       * at the end of the input file. We need MAX_MATCH bytes
       * for the next match, plus MIN_MATCH bytes to insert the
       * string following the next match.
       */
      if (s.lookahead < MIN_LOOKAHEAD) {
        fill_window(s);
        if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        if (s.lookahead === 0) {
          break; /* flush the current block */
        }
      }

      /* Insert the string window[strstart .. strstart+2] in the
       * dictionary, and set hash_head to the head of the hash chain:
       */
      hash_head = 0/*NIL*/;
      if (s.lookahead >= MIN_MATCH) {
        /*** INSERT_STRING(s, s.strstart, hash_head); ***/
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
        hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = s.strstart;
        /***/
      }

      /* Find the longest match, discarding those <= prev_length.
       * At this point we have always match_length < MIN_MATCH
       */
      if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
        /* To simplify the code, we prevent matches with the string
         * of window index 0 (in particular we have to avoid a match
         * of the string with itself at the start of the input file).
         */
        s.match_length = longest_match(s, hash_head);
        /* longest_match() sets match_start */
      }
      if (s.match_length >= MIN_MATCH) {
        // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

        /*** _tr_tally_dist(s, s.strstart - s.match_start,
                       s.match_length - MIN_MATCH, bflush); ***/
        bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

        s.lookahead -= s.match_length;

        /* Insert new strings in the hash table only if the match length
         * is not too large. This saves time but degrades compression.
         */
        if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
          s.match_length--; /* string at strstart already in table */
          do {
            s.strstart++;
            /*** INSERT_STRING(s, s.strstart, hash_head); ***/
            s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = s.strstart;
            /***/
            /* strstart never exceeds WSIZE-MAX_MATCH, so there are
             * always MIN_MATCH bytes ahead.
             */
          } while (--s.match_length !== 0);
          s.strstart++;
        } else
        {
          s.strstart += s.match_length;
          s.match_length = 0;
          s.ins_h = s.window[s.strstart];
          /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

  //#if MIN_MATCH != 3
  //                Call UPDATE_HASH() MIN_MATCH-3 more times
  //#endif
          /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
           * matter since it will be recomputed at next deflate call.
           */
        }
      } else {
        /* No match, output a literal byte */
        //Tracevv((stderr,"%c", s.window[s.strstart]));
        /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
        bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

        s.lookahead--;
        s.strstart++;
      }
      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
    }
    s.insert = ((s.strstart < (MIN_MATCH-1)) ? s.strstart : MIN_MATCH-1);
    if (flush === Z_FINISH) {
      /*** FLUSH_BLOCK(s, 1); ***/
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      /***/
      return BS_FINISH_DONE;
    }
    if (s.last_lit) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
    return BS_BLOCK_DONE;
  }

  /* ===========================================================================
   * Same as above, but achieves better compression. We use a lazy
   * evaluation for matches: a match is finally adopted only if there is
   * no better match at the next window position.
   */
  function deflate_slow(s, flush) {
    var hash_head;          /* head of hash chain */
    var bflush;              /* set if current block must be flushed */

    var max_insert;

    /* Process the input block. */
    for (;;) {
      /* Make sure that we always have enough lookahead, except
       * at the end of the input file. We need MAX_MATCH bytes
       * for the next match, plus MIN_MATCH bytes to insert the
       * string following the next match.
       */
      if (s.lookahead < MIN_LOOKAHEAD) {
        fill_window(s);
        if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        if (s.lookahead === 0) { break; } /* flush the current block */
      }

      /* Insert the string window[strstart .. strstart+2] in the
       * dictionary, and set hash_head to the head of the hash chain:
       */
      hash_head = 0/*NIL*/;
      if (s.lookahead >= MIN_MATCH) {
        /*** INSERT_STRING(s, s.strstart, hash_head); ***/
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
        hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = s.strstart;
        /***/
      }

      /* Find the longest match, discarding those <= prev_length.
       */
      s.prev_length = s.match_length;
      s.prev_match = s.match_start;
      s.match_length = MIN_MATCH-1;

      if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
          s.strstart - hash_head <= (s.w_size-MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
        /* To simplify the code, we prevent matches with the string
         * of window index 0 (in particular we have to avoid a match
         * of the string with itself at the start of the input file).
         */
        s.match_length = longest_match(s, hash_head);
        /* longest_match() sets match_start */

        if (s.match_length <= 5 &&
           (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

          /* If prev_match is also MIN_MATCH, match_start is garbage
           * but we will ignore the current match anyway.
           */
          s.match_length = MIN_MATCH-1;
        }
      }
      /* If there was a match at the previous step and the current
       * match is not better, output the previous match:
       */
      if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
        max_insert = s.strstart + s.lookahead - MIN_MATCH;
        /* Do not insert strings in hash table beyond this. */

        //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

        /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                       s.prev_length - MIN_MATCH, bflush);***/
        bflush = trees._tr_tally(s, s.strstart - 1- s.prev_match, s.prev_length - MIN_MATCH);
        /* Insert in hash table all strings up to the end of the match.
         * strstart-1 and strstart are already inserted. If there is not
         * enough lookahead, the last two strings are not inserted in
         * the hash table.
         */
        s.lookahead -= s.prev_length-1;
        s.prev_length -= 2;
        do {
          if (++s.strstart <= max_insert) {
            /*** INSERT_STRING(s, s.strstart, hash_head); ***/
            s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = s.strstart;
            /***/
          }
        } while (--s.prev_length !== 0);
        s.match_available = 0;
        s.match_length = MIN_MATCH-1;
        s.strstart++;

        if (bflush) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/
        }

      } else if (s.match_available) {
        /* If there was no match at the previous position, output a
         * single literal. If there was a match but the current match
         * is longer, truncate the previous match to a single literal.
         */
        //Tracevv((stderr,"%c", s->window[s->strstart-1]));
        /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
        bflush = trees._tr_tally(s, 0, s.window[s.strstart-1]);

        if (bflush) {
          /*** FLUSH_BLOCK_ONLY(s, 0) ***/
          flush_block_only(s, false);
          /***/
        }
        s.strstart++;
        s.lookahead--;
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      } else {
        /* There is no previous match to compare with, wait for
         * the next step to decide.
         */
        s.match_available = 1;
        s.strstart++;
        s.lookahead--;
      }
    }
    //Assert (flush != Z_NO_FLUSH, "no flush?");
    if (s.match_available) {
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart-1]);

      s.match_available = 0;
    }
    s.insert = s.strstart < MIN_MATCH-1 ? s.strstart : MIN_MATCH-1;
    if (flush === Z_FINISH) {
      /*** FLUSH_BLOCK(s, 1); ***/
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      /***/
      return BS_FINISH_DONE;
    }
    if (s.last_lit) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }

    return BS_BLOCK_DONE;
  }


  /* ===========================================================================
   * For Z_RLE, simply look for runs of bytes, generate matches only of distance
   * one.  Do not maintain a hash table.  (It will be regenerated if this run of
   * deflate switches away from Z_RLE.)
   */
  function deflate_rle(s, flush) {
    var bflush;            /* set if current block must be flushed */
    var prev;              /* byte at distance one to match */
    var scan, strend;      /* scan goes up to strend for length of run */

    var _win = s.window;

    for (;;) {
      /* Make sure that we always have enough lookahead, except
       * at the end of the input file. We need MAX_MATCH bytes
       * for the longest run, plus one for the unrolled loop.
       */
      if (s.lookahead <= MAX_MATCH) {
        fill_window(s);
        if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        if (s.lookahead === 0) { break; } /* flush the current block */
      }

      /* See how many times the previous byte repeats */
      s.match_length = 0;
      if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
        scan = s.strstart - 1;
        prev = _win[scan];
        if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
          strend = s.strstart + MAX_MATCH;
          do {
            /*jshint noempty:false*/
          } while (prev === _win[++scan] && prev === _win[++scan] &&
                   prev === _win[++scan] && prev === _win[++scan] &&
                   prev === _win[++scan] && prev === _win[++scan] &&
                   prev === _win[++scan] && prev === _win[++scan] &&
                   scan < strend);
          s.match_length = MAX_MATCH - (strend - scan);
          if (s.match_length > s.lookahead) {
            s.match_length = s.lookahead;
          }
        }
        //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
      }

      /* Emit match if have run of MIN_MATCH or longer, else emit literal */
      if (s.match_length >= MIN_MATCH) {
        //check_match(s, s.strstart, s.strstart - 1, s.match_length);

        /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
        bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

        s.lookahead -= s.match_length;
        s.strstart += s.match_length;
        s.match_length = 0;
      } else {
        /* No match, output a literal byte */
        //Tracevv((stderr,"%c", s->window[s->strstart]));
        /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
        bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

        s.lookahead--;
        s.strstart++;
      }
      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
    }
    s.insert = 0;
    if (flush === Z_FINISH) {
      /*** FLUSH_BLOCK(s, 1); ***/
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      /***/
      return BS_FINISH_DONE;
    }
    if (s.last_lit) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
    return BS_BLOCK_DONE;
  }

  /* ===========================================================================
   * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
   * (It will be regenerated if this run of deflate switches away from Huffman.)
   */
  function deflate_huff(s, flush) {
    var bflush;             /* set if current block must be flushed */

    for (;;) {
      /* Make sure that we have a literal to write. */
      if (s.lookahead === 0) {
        fill_window(s);
        if (s.lookahead === 0) {
          if (flush === Z_NO_FLUSH) {
            return BS_NEED_MORE;
          }
          break;      /* flush the current block */
        }
      }

      /* Output a literal byte */
      s.match_length = 0;
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
      s.lookahead--;
      s.strstart++;
      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
    }
    s.insert = 0;
    if (flush === Z_FINISH) {
      /*** FLUSH_BLOCK(s, 1); ***/
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      /***/
      return BS_FINISH_DONE;
    }
    if (s.last_lit) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
    return BS_BLOCK_DONE;
  }

  /* Values for max_lazy_match, good_match and max_chain_length, depending on
   * the desired pack level (0..9). The values given below have been tuned to
   * exclude worst case performance for pathological files. Better values may be
   * found for specific files.
   */
  var Config = function (good_length, max_lazy, nice_length, max_chain, func) {
    this.good_length = good_length;
    this.max_lazy = max_lazy;
    this.nice_length = nice_length;
    this.max_chain = max_chain;
    this.func = func;
  };

  var configuration_table;

  configuration_table = [
    /*      good lazy nice chain */
    new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
    new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
    new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
    new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

    new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
    new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
    new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
    new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
    new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
    new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
  ];


  /* ===========================================================================
   * Initialize the "longest match" routines for a new zlib stream
   */
  function lm_init(s) {
    s.window_size = 2 * s.w_size;

    /*** CLEAR_HASH(s); ***/
    zero(s.head); // Fill with NIL (= 0);

    /* Set the default configuration parameters:
     */
    s.max_lazy_match = configuration_table[s.level].max_lazy;
    s.good_match = configuration_table[s.level].good_length;
    s.nice_match = configuration_table[s.level].nice_length;
    s.max_chain_length = configuration_table[s.level].max_chain;

    s.strstart = 0;
    s.block_start = 0;
    s.lookahead = 0;
    s.insert = 0;
    s.match_length = s.prev_length = MIN_MATCH - 1;
    s.match_available = 0;
    s.ins_h = 0;
  }


  function DeflateState() {
    this.strm = null;            /* pointer back to this zlib stream */
    this.status = 0;            /* as the name implies */
    this.pending_buf = null;      /* output still pending */
    this.pending_buf_size = 0;  /* size of pending_buf */
    this.pending_out = 0;       /* next pending byte to output to the stream */
    this.pending = 0;           /* nb of bytes in the pending buffer */
    this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
    this.gzhead = null;         /* gzip header information to write */
    this.gzindex = 0;           /* where in extra, name, or comment */
    this.method = Z_DEFLATED; /* can only be DEFLATED */
    this.last_flush = -1;   /* value of flush param for previous deflate call */

    this.w_size = 0;  /* LZ77 window size (32K by default) */
    this.w_bits = 0;  /* log2(w_size)  (8..16) */
    this.w_mask = 0;  /* w_size - 1 */

    this.window = null;
    /* Sliding window. Input bytes are read into the second half of the window,
     * and move to the first half later to keep a dictionary of at least wSize
     * bytes. With this organization, matches are limited to a distance of
     * wSize-MAX_MATCH bytes, but this ensures that IO is always
     * performed with a length multiple of the block size.
     */

    this.window_size = 0;
    /* Actual size of window: 2*wSize, except when the user input buffer
     * is directly used as sliding window.
     */

    this.prev = null;
    /* Link to older string with same hash index. To limit the size of this
     * array to 64K, this link is maintained only for the last 32K strings.
     * An index in this array is thus a window index modulo 32K.
     */

    this.head = null;   /* Heads of the hash chains or NIL. */

    this.ins_h = 0;       /* hash index of string to be inserted */
    this.hash_size = 0;   /* number of elements in hash table */
    this.hash_bits = 0;   /* log2(hash_size) */
    this.hash_mask = 0;   /* hash_size-1 */

    this.hash_shift = 0;
    /* Number of bits by which ins_h must be shifted at each input
     * step. It must be such that after MIN_MATCH steps, the oldest
     * byte no longer takes part in the hash key, that is:
     *   hash_shift * MIN_MATCH >= hash_bits
     */

    this.block_start = 0;
    /* Window position at the beginning of the current output block. Gets
     * negative when the window is moved backwards.
     */

    this.match_length = 0;      /* length of best match */
    this.prev_match = 0;        /* previous match */
    this.match_available = 0;   /* set if previous match exists */
    this.strstart = 0;          /* start of string to insert */
    this.match_start = 0;       /* start of matching string */
    this.lookahead = 0;         /* number of valid bytes ahead in window */

    this.prev_length = 0;
    /* Length of the best match at previous step. Matches not greater than this
     * are discarded. This is used in the lazy match evaluation.
     */

    this.max_chain_length = 0;
    /* To speed up deflation, hash chains are never searched beyond this
     * length.  A higher limit improves compression ratio but degrades the
     * speed.
     */

    this.max_lazy_match = 0;
    /* Attempt to find a better match only when the current match is strictly
     * smaller than this value. This mechanism is used only for compression
     * levels >= 4.
     */
    // That's alias to max_lazy_match, don't use directly
    //this.max_insert_length = 0;
    /* Insert new strings in the hash table only if the match length is not
     * greater than this length. This saves time but degrades compression.
     * max_insert_length is used only for compression levels <= 3.
     */

    this.level = 0;     /* compression level (1..9) */
    this.strategy = 0;  /* favor or force Huffman coding*/

    this.good_match = 0;
    /* Use a faster search when the previous match is longer than this */

    this.nice_match = 0; /* Stop searching when current match exceeds this */

                /* used by trees.c: */

    /* Didn't use ct_data typedef below to suppress compiler warning */

    // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
    // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
    // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

    // Use flat array of DOUBLE size, with interleaved fata,
    // because JS does not support effective
    this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
    this.dyn_dtree  = new utils.Buf16((2*D_CODES+1) * 2);
    this.bl_tree    = new utils.Buf16((2*BL_CODES+1) * 2);
    zero(this.dyn_ltree);
    zero(this.dyn_dtree);
    zero(this.bl_tree);

    this.l_desc   = null;         /* desc. for literal tree */
    this.d_desc   = null;         /* desc. for distance tree */
    this.bl_desc  = null;         /* desc. for bit length tree */

    //ush bl_count[MAX_BITS+1];
    this.bl_count = new utils.Buf16(MAX_BITS+1);
    /* number of codes at each bit length for an optimal tree */

    //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
    this.heap = new utils.Buf16(2*L_CODES+1);  /* heap used to build the Huffman trees */
    zero(this.heap);

    this.heap_len = 0;               /* number of elements in the heap */
    this.heap_max = 0;               /* element of largest frequency */
    /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
     * The same heap array is used to build all trees.
     */

    this.depth = new utils.Buf16(2*L_CODES+1); //uch depth[2*L_CODES+1];
    zero(this.depth);
    /* Depth of each subtree used as tie breaker for trees of equal frequency
     */

    this.l_buf = 0;          /* buffer index for literals or lengths */

    this.lit_bufsize = 0;
    /* Size of match buffer for literals/lengths.  There are 4 reasons for
     * limiting lit_bufsize to 64K:
     *   - frequencies can be kept in 16 bit counters
     *   - if compression is not successful for the first block, all input
     *     data is still in the window so we can still emit a stored block even
     *     when input comes from standard input.  (This can also be done for
     *     all blocks if lit_bufsize is not greater than 32K.)
     *   - if compression is not successful for a file smaller than 64K, we can
     *     even emit a stored file instead of a stored block (saving 5 bytes).
     *     This is applicable only for zip (not gzip or zlib).
     *   - creating new Huffman trees less frequently may not provide fast
     *     adaptation to changes in the input data statistics. (Take for
     *     example a binary file with poorly compressible code followed by
     *     a highly compressible string table.) Smaller buffer sizes give
     *     fast adaptation but have of course the overhead of transmitting
     *     trees more frequently.
     *   - I can't count above 4
     */

    this.last_lit = 0;      /* running index in l_buf */

    this.d_buf = 0;
    /* Buffer index for distances. To simplify the code, d_buf and l_buf have
     * the same number of elements. To use different lengths, an extra flag
     * array would be necessary.
     */

    this.opt_len = 0;       /* bit length of current block with optimal trees */
    this.static_len = 0;    /* bit length of current block with static trees */
    this.matches = 0;       /* number of string matches in current block */
    this.insert = 0;        /* bytes at end of window left to insert */


    this.bi_buf = 0;
    /* Output buffer. bits are inserted starting at the bottom (least
     * significant bits).
     */
    this.bi_valid = 0;
    /* Number of valid bits in bi_buf.  All bits above the last valid bit
     * are always zero.
     */

    // Used for window memory init. We safely ignore it for JS. That makes
    // sense only for pointers and memory check tools.
    //this.high_water = 0;
    /* High water mark offset in window for initialized bytes -- bytes above
     * this are set to zero in order to avoid memory check warnings when
     * longest match routines access bytes past the input.  This is then
     * updated to the new high water mark.
     */
  }


  function deflateResetKeep(strm) {
    var s;

    if (!strm || !strm.state) {
      return err(strm, Z_STREAM_ERROR);
    }

    strm.total_in = strm.total_out = 0;
    strm.data_type = Z_UNKNOWN;

    s = strm.state;
    s.pending = 0;
    s.pending_out = 0;

    if (s.wrap < 0) {
      s.wrap = -s.wrap;
      /* was made negative by deflate(..., Z_FINISH); */
    }
    s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
    strm.adler = (s.wrap === 2) ?
      0  // crc32(0, Z_NULL, 0)
    :
      1; // adler32(0, Z_NULL, 0)
    s.last_flush = Z_NO_FLUSH;
    trees._tr_init(s);
    return Z_OK;
  }


  function deflateReset(strm) {
    var ret = deflateResetKeep(strm);
    if (ret === Z_OK) {
      lm_init(strm.state);
    }
    return ret;
  }


  function deflateSetHeader(strm, head) {
    if (!strm || !strm.state) { return Z_STREAM_ERROR; }
    if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
    strm.state.gzhead = head;
    return Z_OK;
  }


  function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
    if (!strm) { // === Z_NULL
      return Z_STREAM_ERROR;
    }
    var wrap = 1;

    if (level === Z_DEFAULT_COMPRESSION) {
      level = 6;
    }

    if (windowBits < 0) { /* suppress zlib wrapper */
      wrap = 0;
      windowBits = -windowBits;
    }

    else if (windowBits > 15) {
      wrap = 2;           /* write gzip wrapper instead */
      windowBits -= 16;
    }


    if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
      windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
      strategy < 0 || strategy > Z_FIXED) {
      return err(strm, Z_STREAM_ERROR);
    }


    if (windowBits === 8) {
      windowBits = 9;
    }
    /* until 256-byte window bug fixed */

    var s = new DeflateState();

    strm.state = s;
    s.strm = strm;

    s.wrap = wrap;
    s.gzhead = null;
    s.w_bits = windowBits;
    s.w_size = 1 << s.w_bits;
    s.w_mask = s.w_size - 1;

    s.hash_bits = memLevel + 7;
    s.hash_size = 1 << s.hash_bits;
    s.hash_mask = s.hash_size - 1;
    s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

    s.window = new utils.Buf8(s.w_size * 2);
    s.head = new utils.Buf16(s.hash_size);
    s.prev = new utils.Buf16(s.w_size);

    // Don't need mem init magic for JS.
    //s.high_water = 0;  /* nothing written to s->window yet */

    s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

    s.pending_buf_size = s.lit_bufsize * 4;
    s.pending_buf = new utils.Buf8(s.pending_buf_size);

    s.d_buf = s.lit_bufsize >> 1;
    s.l_buf = (1 + 2) * s.lit_bufsize;

    s.level = level;
    s.strategy = strategy;
    s.method = method;

    return deflateReset(strm);
  }

  function deflateInit(strm, level) {
    return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
  }


  function deflate(strm, flush) {
    var old_flush, s;
    var beg, val; // for gzip header write only

    if (!strm || !strm.state ||
      flush > Z_BLOCK || flush < 0) {
      return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
    }

    s = strm.state;

    if (!strm.output ||
        (!strm.input && strm.avail_in !== 0) ||
        (s.status === FINISH_STATE && flush !== Z_FINISH)) {
      return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
    }

    s.strm = strm; /* just in case */
    old_flush = s.last_flush;
    s.last_flush = flush;

    /* Write the header */
    if (s.status === INIT_STATE) {

      if (s.wrap === 2) { // GZIP header
        strm.adler = 0;  //crc32(0L, Z_NULL, 0);
        put_byte(s, 31);
        put_byte(s, 139);
        put_byte(s, 8);
        if (!s.gzhead) { // s->gzhead == Z_NULL
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, s.level === 9 ? 2 :
                      (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                       4 : 0));
          put_byte(s, OS_CODE);
          s.status = BUSY_STATE;
        }
        else {
          put_byte(s, (s.gzhead.text ? 1 : 0) +
                      (s.gzhead.hcrc ? 2 : 0) +
                      (!s.gzhead.extra ? 0 : 4) +
                      (!s.gzhead.name ? 0 : 8) +
                      (!s.gzhead.comment ? 0 : 16)
                  );
          put_byte(s, s.gzhead.time & 0xff);
          put_byte(s, (s.gzhead.time >> 8) & 0xff);
          put_byte(s, (s.gzhead.time >> 16) & 0xff);
          put_byte(s, (s.gzhead.time >> 24) & 0xff);
          put_byte(s, s.level === 9 ? 2 :
                      (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                       4 : 0));
          put_byte(s, s.gzhead.os & 0xff);
          if (s.gzhead.extra && s.gzhead.extra.length) {
            put_byte(s, s.gzhead.extra.length & 0xff);
            put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
          }
          if (s.gzhead.hcrc) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
          }
          s.gzindex = 0;
          s.status = EXTRA_STATE;
        }
      }
      else // DEFLATE header
      {
        var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
        var level_flags = -1;

        if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
          level_flags = 0;
        } else if (s.level < 6) {
          level_flags = 1;
        } else if (s.level === 6) {
          level_flags = 2;
        } else {
          level_flags = 3;
        }
        header |= (level_flags << 6);
        if (s.strstart !== 0) { header |= PRESET_DICT; }
        header += 31 - (header % 31);

        s.status = BUSY_STATE;
        putShortMSB(s, header);

        /* Save the adler32 of the preset dictionary: */
        if (s.strstart !== 0) {
          putShortMSB(s, strm.adler >>> 16);
          putShortMSB(s, strm.adler & 0xffff);
        }
        strm.adler = 1; // adler32(0L, Z_NULL, 0);
      }
    }

  //#ifdef GZIP
    if (s.status === EXTRA_STATE) {
      if (s.gzhead.extra/* != Z_NULL*/) {
        beg = s.pending;  /* start of bytes to update crc */

        while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
          if (s.pending === s.pending_buf_size) {
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
            }
            flush_pending(strm);
            beg = s.pending;
            if (s.pending === s.pending_buf_size) {
              break;
            }
          }
          put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
          s.gzindex++;
        }
        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        if (s.gzindex === s.gzhead.extra.length) {
          s.gzindex = 0;
          s.status = NAME_STATE;
        }
      }
      else {
        s.status = NAME_STATE;
      }
    }
    if (s.status === NAME_STATE) {
      if (s.gzhead.name/* != Z_NULL*/) {
        beg = s.pending;  /* start of bytes to update crc */
        //int val;

        do {
          if (s.pending === s.pending_buf_size) {
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
            }
            flush_pending(strm);
            beg = s.pending;
            if (s.pending === s.pending_buf_size) {
              val = 1;
              break;
            }
          }
          // JS specific: little magic to add zero terminator to end of string
          if (s.gzindex < s.gzhead.name.length) {
            val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
          } else {
            val = 0;
          }
          put_byte(s, val);
        } while (val !== 0);

        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        if (val === 0) {
          s.gzindex = 0;
          s.status = COMMENT_STATE;
        }
      }
      else {
        s.status = COMMENT_STATE;
      }
    }
    if (s.status === COMMENT_STATE) {
      if (s.gzhead.comment/* != Z_NULL*/) {
        beg = s.pending;  /* start of bytes to update crc */
        //int val;

        do {
          if (s.pending === s.pending_buf_size) {
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
            }
            flush_pending(strm);
            beg = s.pending;
            if (s.pending === s.pending_buf_size) {
              val = 1;
              break;
            }
          }
          // JS specific: little magic to add zero terminator to end of string
          if (s.gzindex < s.gzhead.comment.length) {
            val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
          } else {
            val = 0;
          }
          put_byte(s, val);
        } while (val !== 0);

        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        if (val === 0) {
          s.status = HCRC_STATE;
        }
      }
      else {
        s.status = HCRC_STATE;
      }
    }
    if (s.status === HCRC_STATE) {
      if (s.gzhead.hcrc) {
        if (s.pending + 2 > s.pending_buf_size) {
          flush_pending(strm);
        }
        if (s.pending + 2 <= s.pending_buf_size) {
          put_byte(s, strm.adler & 0xff);
          put_byte(s, (strm.adler >> 8) & 0xff);
          strm.adler = 0; //crc32(0L, Z_NULL, 0);
          s.status = BUSY_STATE;
        }
      }
      else {
        s.status = BUSY_STATE;
      }
    }
  //#endif

    /* Flush as much pending output as possible */
    if (s.pending !== 0) {
      flush_pending(strm);
      if (strm.avail_out === 0) {
        /* Since avail_out is 0, deflate will be called again with
         * more output space, but possibly with both pending and
         * avail_in equal to zero. There won't be anything to do,
         * but this is not an error situation so make sure we
         * return OK instead of BUF_ERROR at next call of deflate:
         */
        s.last_flush = -1;
        return Z_OK;
      }

      /* Make sure there is something to do and avoid duplicate consecutive
       * flushes. For repeated and useless calls with Z_FINISH, we keep
       * returning Z_STREAM_END instead of Z_BUF_ERROR.
       */
    } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
      flush !== Z_FINISH) {
      return err(strm, Z_BUF_ERROR);
    }

    /* User must not provide more input after the first FINISH: */
    if (s.status === FINISH_STATE && strm.avail_in !== 0) {
      return err(strm, Z_BUF_ERROR);
    }

    /* Start a new block or continue the current one.
     */
    if (strm.avail_in !== 0 || s.lookahead !== 0 ||
      (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
      var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
        (s.strategy === Z_RLE ? deflate_rle(s, flush) :
          configuration_table[s.level].func(s, flush));

      if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
        s.status = FINISH_STATE;
      }
      if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
        if (strm.avail_out === 0) {
          s.last_flush = -1;
          /* avoid BUF_ERROR next call, see above */
        }
        return Z_OK;
        /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
         * of deflate should use the same flush parameter to make sure
         * that the flush is complete. So we don't have to output an
         * empty block here, this will be done at next call. This also
         * ensures that for a very small output buffer, we emit at most
         * one empty block.
         */
      }
      if (bstate === BS_BLOCK_DONE) {
        if (flush === Z_PARTIAL_FLUSH) {
          trees._tr_align(s);
        }
        else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

          trees._tr_stored_block(s, 0, 0, false);
          /* For a full flush, this empty block will be recognized
           * as a special marker by inflate_sync().
           */
          if (flush === Z_FULL_FLUSH) {
            /*** CLEAR_HASH(s); ***/             /* forget history */
            zero(s.head); // Fill with NIL (= 0);

            if (s.lookahead === 0) {
              s.strstart = 0;
              s.block_start = 0;
              s.insert = 0;
            }
          }
        }
        flush_pending(strm);
        if (strm.avail_out === 0) {
          s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
          return Z_OK;
        }
      }
    }
    //Assert(strm->avail_out > 0, "bug2");
    //if (strm.avail_out <= 0) { throw new Error("bug2");}

    if (flush !== Z_FINISH) { return Z_OK; }
    if (s.wrap <= 0) { return Z_STREAM_END; }

    /* Write the trailer */
    if (s.wrap === 2) {
      put_byte(s, strm.adler & 0xff);
      put_byte(s, (strm.adler >> 8) & 0xff);
      put_byte(s, (strm.adler >> 16) & 0xff);
      put_byte(s, (strm.adler >> 24) & 0xff);
      put_byte(s, strm.total_in & 0xff);
      put_byte(s, (strm.total_in >> 8) & 0xff);
      put_byte(s, (strm.total_in >> 16) & 0xff);
      put_byte(s, (strm.total_in >> 24) & 0xff);
    }
    else
    {
      putShortMSB(s, strm.adler >>> 16);
      putShortMSB(s, strm.adler & 0xffff);
    }

    flush_pending(strm);
    /* If avail_out is zero, the application will call deflate again
     * to flush the rest.
     */
    if (s.wrap > 0) { s.wrap = -s.wrap; }
    /* write the trailer only once! */
    return s.pending !== 0 ? Z_OK : Z_STREAM_END;
  }

  function deflateEnd(strm) {
    var status;

    if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
      return Z_STREAM_ERROR;
    }

    status = strm.state.status;
    if (status !== INIT_STATE &&
      status !== EXTRA_STATE &&
      status !== NAME_STATE &&
      status !== COMMENT_STATE &&
      status !== HCRC_STATE &&
      status !== BUSY_STATE &&
      status !== FINISH_STATE
    ) {
      return err(strm, Z_STREAM_ERROR);
    }

    strm.state = null;

    return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
  }

  /* =========================================================================
   * Copy the source state to the destination state
   */
  //function deflateCopy(dest, source) {
  //
  //}

  exports.deflateInit = deflateInit;
  exports.deflateInit2 = deflateInit2;
  exports.deflateReset = deflateReset;
  exports.deflateResetKeep = deflateResetKeep;
  exports.deflateSetHeader = deflateSetHeader;
  exports.deflate = deflate;
  exports.deflateEnd = deflateEnd;
  exports.deflateInfo = 'pako deflate (from Nodeca project)';

  /* Not implemented
  exports.deflateBound = deflateBound;
  exports.deflateCopy = deflateCopy;
  exports.deflateSetDictionary = deflateSetDictionary;
  exports.deflateParams = deflateParams;
  exports.deflatePending = deflatePending;
  exports.deflatePrime = deflatePrime;
  exports.deflateTune = deflateTune;
  */


/***/ },
/* 1205 */
/***/ function(module, exports) {

  'use strict';

  // See state defs from inflate.js
  var BAD = 30;       /* got a data error -- remain here until reset */
  var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

  /*
     Decode literal, length, and distance codes and write out the resulting
     literal and match bytes until either not enough input or output is
     available, an end-of-block is encountered, or a data error is encountered.
     When large enough input and output buffers are supplied to inflate(), for
     example, a 16K input buffer and a 64K output buffer, more than 95% of the
     inflate execution time is spent in this routine.

     Entry assumptions:

          state.mode === LEN
          strm.avail_in >= 6
          strm.avail_out >= 258
          start >= strm.avail_out
          state.bits < 8

     On return, state.mode is one of:

          LEN -- ran out of enough output space or enough available input
          TYPE -- reached end of block code, inflate() to interpret next block
          BAD -- error in block data

     Notes:

      - The maximum input bits used by a length/distance pair is 15 bits for the
        length code, 5 bits for the length extra, 15 bits for the distance code,
        and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
        Therefore if strm.avail_in >= 6, then there is enough input to avoid
        checking for available input while decoding.

      - The maximum bytes that a single length/distance pair can output is 258
        bytes, which is the maximum length that can be coded.  inflate_fast()
        requires strm.avail_out >= 258 for each loop to avoid checking for
        output space.
   */
  module.exports = function inflate_fast(strm, start) {
    var state;
    var _in;                    /* local strm.input */
    var last;                   /* have enough input while in < last */
    var _out;                   /* local strm.output */
    var beg;                    /* inflate()'s initial strm.output */
    var end;                    /* while out < end, enough space available */
  //#ifdef INFLATE_STRICT
    var dmax;                   /* maximum distance from zlib header */
  //#endif
    var wsize;                  /* window size or zero if not using window */
    var whave;                  /* valid bytes in the window */
    var wnext;                  /* window write index */
    // Use `s_window` instead `window`, avoid conflict with instrumentation tools
    var s_window;               /* allocated sliding window, if wsize != 0 */
    var hold;                   /* local strm.hold */
    var bits;                   /* local strm.bits */
    var lcode;                  /* local strm.lencode */
    var dcode;                  /* local strm.distcode */
    var lmask;                  /* mask for first level of length codes */
    var dmask;                  /* mask for first level of distance codes */
    var here;                   /* retrieved table entry */
    var op;                     /* code bits, operation, extra bits, or */
                                /*  window position, window bytes to copy */
    var len;                    /* match length, unused bytes */
    var dist;                   /* match distance */
    var from;                   /* where to copy match from */
    var from_source;


    var input, output; // JS specific, because we have no pointers

    /* copy state to local variables */
    state = strm.state;
    //here = state.here;
    _in = strm.next_in;
    input = strm.input;
    last = _in + (strm.avail_in - 5);
    _out = strm.next_out;
    output = strm.output;
    beg = _out - (start - strm.avail_out);
    end = _out + (strm.avail_out - 257);
  //#ifdef INFLATE_STRICT
    dmax = state.dmax;
  //#endif
    wsize = state.wsize;
    whave = state.whave;
    wnext = state.wnext;
    s_window = state.window;
    hold = state.hold;
    bits = state.bits;
    lcode = state.lencode;
    dcode = state.distcode;
    lmask = (1 << state.lenbits) - 1;
    dmask = (1 << state.distbits) - 1;


    /* decode literals and length/distances until end-of-block or not enough
       input data or output space */

    top:
    do {
      if (bits < 15) {
        hold += input[_in++] << bits;
        bits += 8;
        hold += input[_in++] << bits;
        bits += 8;
      }

      here = lcode[hold & lmask];

      dolen:
      for (;;) { // Goto emulation
        op = here >>> 24/*here.bits*/;
        hold >>>= op;
        bits -= op;
        op = (here >>> 16) & 0xff/*here.op*/;
        if (op === 0) {                          /* literal */
          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
          //        "inflate:         literal '%c'\n" :
          //        "inflate:         literal 0x%02x\n", here.val));
          output[_out++] = here & 0xffff/*here.val*/;
        }
        else if (op & 16) {                     /* length base */
          len = here & 0xffff/*here.val*/;
          op &= 15;                           /* number of extra bits */
          if (op) {
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
            }
            len += hold & ((1 << op) - 1);
            hold >>>= op;
            bits -= op;
          }
          //Tracevv((stderr, "inflate:         length %u\n", len));
          if (bits < 15) {
            hold += input[_in++] << bits;
            bits += 8;
            hold += input[_in++] << bits;
            bits += 8;
          }
          here = dcode[hold & dmask];

          dodist:
          for (;;) { // goto emulation
            op = here >>> 24/*here.bits*/;
            hold >>>= op;
            bits -= op;
            op = (here >>> 16) & 0xff/*here.op*/;

            if (op & 16) {                      /* distance base */
              dist = here & 0xffff/*here.val*/;
              op &= 15;                       /* number of extra bits */
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
                if (bits < op) {
                  hold += input[_in++] << bits;
                  bits += 8;
                }
              }
              dist += hold & ((1 << op) - 1);
  //#ifdef INFLATE_STRICT
              if (dist > dmax) {
                strm.msg = 'invalid distance too far back';
                state.mode = BAD;
                break top;
              }
  //#endif
              hold >>>= op;
              bits -= op;
              //Tracevv((stderr, "inflate:         distance %u\n", dist));
              op = _out - beg;                /* max distance in output */
              if (dist > op) {                /* see if copy from window */
                op = dist - op;               /* distance back in window */
                if (op > whave) {
                  if (state.sane) {
                    strm.msg = 'invalid distance too far back';
                    state.mode = BAD;
                    break top;
                  }

  // (!) This block is disabled in zlib defailts,
  // don't enable it for binary compatibility
  //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
  //                if (len <= op - whave) {
  //                  do {
  //                    output[_out++] = 0;
  //                  } while (--len);
  //                  continue top;
  //                }
  //                len -= op - whave;
  //                do {
  //                  output[_out++] = 0;
  //                } while (--op > whave);
  //                if (op === 0) {
  //                  from = _out - dist;
  //                  do {
  //                    output[_out++] = output[from++];
  //                  } while (--len);
  //                  continue top;
  //                }
  //#endif
                }
                from = 0; // window index
                from_source = s_window;
                if (wnext === 0) {           /* very common case */
                  from += wsize - op;
                  if (op < len) {         /* some from window */
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;  /* rest from output */
                    from_source = output;
                  }
                }
                else if (wnext < op) {      /* wrap around window */
                  from += wsize + wnext - op;
                  op -= wnext;
                  if (op < len) {         /* some from end of window */
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = 0;
                    if (wnext < len) {  /* some from start of window */
                      op = wnext;
                      len -= op;
                      do {
                        output[_out++] = s_window[from++];
                      } while (--op);
                      from = _out - dist;      /* rest from output */
                      from_source = output;
                    }
                  }
                }
                else {                      /* contiguous in window */
                  from += wnext - op;
                  if (op < len) {         /* some from window */
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;  /* rest from output */
                    from_source = output;
                  }
                }
                while (len > 2) {
                  output[_out++] = from_source[from++];
                  output[_out++] = from_source[from++];
                  output[_out++] = from_source[from++];
                  len -= 3;
                }
                if (len) {
                  output[_out++] = from_source[from++];
                  if (len > 1) {
                    output[_out++] = from_source[from++];
                  }
                }
              }
              else {
                from = _out - dist;          /* copy direct from output */
                do {                        /* minimum length is three */
                  output[_out++] = output[from++];
                  output[_out++] = output[from++];
                  output[_out++] = output[from++];
                  len -= 3;
                } while (len > 2);
                if (len) {
                  output[_out++] = output[from++];
                  if (len > 1) {
                    output[_out++] = output[from++];
                  }
                }
              }
            }
            else if ((op & 64) === 0) {          /* 2nd level distance code */
              here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
              continue dodist;
            }
            else {
              strm.msg = 'invalid distance code';
              state.mode = BAD;
              break top;
            }

            break; // need to emulate goto via "continue"
          }
        }
        else if ((op & 64) === 0) {              /* 2nd level length code */
          here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
          continue dolen;
        }
        else if (op & 32) {                     /* end-of-block */
          //Tracevv((stderr, "inflate:         end of block\n"));
          state.mode = TYPE;
          break top;
        }
        else {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD;
          break top;
        }

        break; // need to emulate goto via "continue"
      }
    } while (_in < last && _out < end);

    /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
    len = bits >> 3;
    _in -= len;
    bits -= len << 3;
    hold &= (1 << bits) - 1;

    /* update state and return */
    strm.next_in = _in;
    strm.next_out = _out;
    strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
    strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
    state.hold = hold;
    state.bits = bits;
    return;
  };


/***/ },
/* 1206 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';


  var utils = __webpack_require__(269);
  var adler32 = __webpack_require__(483);
  var crc32   = __webpack_require__(484);
  var inflate_fast = __webpack_require__(1205);
  var inflate_table = __webpack_require__(1207);

  var CODES = 0;
  var LENS = 1;
  var DISTS = 2;

  /* Public constants ==========================================================*/
  /* ===========================================================================*/


  /* Allowed flush values; see deflate() and inflate() below for details */
  //var Z_NO_FLUSH      = 0;
  //var Z_PARTIAL_FLUSH = 1;
  //var Z_SYNC_FLUSH    = 2;
  //var Z_FULL_FLUSH    = 3;
  var Z_FINISH        = 4;
  var Z_BLOCK         = 5;
  var Z_TREES         = 6;


  /* Return codes for the compression/decompression functions. Negative values
   * are errors, positive values are used for special but normal events.
   */
  var Z_OK            = 0;
  var Z_STREAM_END    = 1;
  var Z_NEED_DICT     = 2;
  //var Z_ERRNO         = -1;
  var Z_STREAM_ERROR  = -2;
  var Z_DATA_ERROR    = -3;
  var Z_MEM_ERROR     = -4;
  var Z_BUF_ERROR     = -5;
  //var Z_VERSION_ERROR = -6;

  /* The deflate compression method */
  var Z_DEFLATED  = 8;


  /* STATES ====================================================================*/
  /* ===========================================================================*/


  var    HEAD = 1;       /* i: waiting for magic header */
  var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
  var    TIME = 3;       /* i: waiting for modification time (gzip) */
  var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
  var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
  var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
  var    NAME = 7;       /* i: waiting for end of file name (gzip) */
  var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
  var    HCRC = 9;       /* i: waiting for header crc (gzip) */
  var    DICTID = 10;    /* i: waiting for dictionary check value */
  var    DICT = 11;      /* waiting for inflateSetDictionary() call */
  var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
  var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
  var        STORED = 14;    /* i: waiting for stored size (length and complement) */
  var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
  var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
  var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
  var        LENLENS = 18;   /* i: waiting for code length code lengths */
  var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
  var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
  var            LEN = 21;       /* i: waiting for length/lit/eob code */
  var            LENEXT = 22;    /* i: waiting for length extra bits */
  var            DIST = 23;      /* i: waiting for distance code */
  var            DISTEXT = 24;   /* i: waiting for distance extra bits */
  var            MATCH = 25;     /* o: waiting for output space to copy string */
  var            LIT = 26;       /* o: waiting for output space to write literal */
  var    CHECK = 27;     /* i: waiting for 32-bit check value */
  var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
  var    DONE = 29;      /* finished check, done -- remain here until reset */
  var    BAD = 30;       /* got a data error -- remain here until reset */
  var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
  var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

  /* ===========================================================================*/



  var ENOUGH_LENS = 852;
  var ENOUGH_DISTS = 592;
  //var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

  var MAX_WBITS = 15;
  /* 32K LZ77 window */
  var DEF_WBITS = MAX_WBITS;


  function ZSWAP32(q) {
    return  (((q >>> 24) & 0xff) +
            ((q >>> 8) & 0xff00) +
            ((q & 0xff00) << 8) +
            ((q & 0xff) << 24));
  }


  function InflateState() {
    this.mode = 0;             /* current inflate mode */
    this.last = false;          /* true if processing last block */
    this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
    this.havedict = false;      /* true if dictionary provided */
    this.flags = 0;             /* gzip header method and flags (0 if zlib) */
    this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
    this.check = 0;             /* protected copy of check value */
    this.total = 0;             /* protected copy of output count */
    // TODO: may be {}
    this.head = null;           /* where to save gzip header information */

    /* sliding window */
    this.wbits = 0;             /* log base 2 of requested window size */
    this.wsize = 0;             /* window size or zero if not using window */
    this.whave = 0;             /* valid bytes in the window */
    this.wnext = 0;             /* window write index */
    this.window = null;         /* allocated sliding window, if needed */

    /* bit accumulator */
    this.hold = 0;              /* input bit accumulator */
    this.bits = 0;              /* number of bits in "in" */

    /* for string and stored block copying */
    this.length = 0;            /* literal or length of data to copy */
    this.offset = 0;            /* distance back to copy string from */

    /* for table and code decoding */
    this.extra = 0;             /* extra bits needed */

    /* fixed and dynamic code tables */
    this.lencode = null;          /* starting table for length/literal codes */
    this.distcode = null;         /* starting table for distance codes */
    this.lenbits = 0;           /* index bits for lencode */
    this.distbits = 0;          /* index bits for distcode */

    /* dynamic table building */
    this.ncode = 0;             /* number of code length code lengths */
    this.nlen = 0;              /* number of length code lengths */
    this.ndist = 0;             /* number of distance code lengths */
    this.have = 0;              /* number of code lengths in lens[] */
    this.next = null;              /* next available space in codes[] */

    this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
    this.work = new utils.Buf16(288); /* work area for code table building */

    /*
     because we don't have pointers in js, we use lencode and distcode directly
     as buffers so we don't need codes
    */
    //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
    this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
    this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
    this.sane = 0;                   /* if false, allow invalid distance too far */
    this.back = 0;                   /* bits back of last unprocessed length/lit */
    this.was = 0;                    /* initial length of match */
  }

  function inflateResetKeep(strm) {
    var state;

    if (!strm || !strm.state) { return Z_STREAM_ERROR; }
    state = strm.state;
    strm.total_in = strm.total_out = state.total = 0;
    strm.msg = ''; /*Z_NULL*/
    if (state.wrap) {       /* to support ill-conceived Java test suite */
      strm.adler = state.wrap & 1;
    }
    state.mode = HEAD;
    state.last = 0;
    state.havedict = 0;
    state.dmax = 32768;
    state.head = null/*Z_NULL*/;
    state.hold = 0;
    state.bits = 0;
    //state.lencode = state.distcode = state.next = state.codes;
    state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
    state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

    state.sane = 1;
    state.back = -1;
    //Tracev((stderr, "inflate: reset\n"));
    return Z_OK;
  }

  function inflateReset(strm) {
    var state;

    if (!strm || !strm.state) { return Z_STREAM_ERROR; }
    state = strm.state;
    state.wsize = 0;
    state.whave = 0;
    state.wnext = 0;
    return inflateResetKeep(strm);

  }

  function inflateReset2(strm, windowBits) {
    var wrap;
    var state;

    /* get the state */
    if (!strm || !strm.state) { return Z_STREAM_ERROR; }
    state = strm.state;

    /* extract wrap request from windowBits parameter */
    if (windowBits < 0) {
      wrap = 0;
      windowBits = -windowBits;
    }
    else {
      wrap = (windowBits >> 4) + 1;
      if (windowBits < 48) {
        windowBits &= 15;
      }
    }

    /* set number of window bits, free window if different */
    if (windowBits && (windowBits < 8 || windowBits > 15)) {
      return Z_STREAM_ERROR;
    }
    if (state.window !== null && state.wbits !== windowBits) {
      state.window = null;
    }

    /* update state and reset the rest of it */
    state.wrap = wrap;
    state.wbits = windowBits;
    return inflateReset(strm);
  }

  function inflateInit2(strm, windowBits) {
    var ret;
    var state;

    if (!strm) { return Z_STREAM_ERROR; }
    //strm.msg = Z_NULL;                 /* in case we return an error */

    state = new InflateState();

    //if (state === Z_NULL) return Z_MEM_ERROR;
    //Tracev((stderr, "inflate: allocated\n"));
    strm.state = state;
    state.window = null/*Z_NULL*/;
    ret = inflateReset2(strm, windowBits);
    if (ret !== Z_OK) {
      strm.state = null/*Z_NULL*/;
    }
    return ret;
  }

  function inflateInit(strm) {
    return inflateInit2(strm, DEF_WBITS);
  }


  /*
   Return state with length and distance decoding tables and index sizes set to
   fixed code decoding.  Normally this returns fixed tables from inffixed.h.
   If BUILDFIXED is defined, then instead this routine builds the tables the
   first time it's called, and returns those tables the first time and
   thereafter.  This reduces the size of the code by about 2K bytes, in
   exchange for a little execution time.  However, BUILDFIXED should not be
   used for threaded applications, since the rewriting of the tables and virgin
   may not be thread-safe.
   */
  var virgin = true;

  var lenfix, distfix; // We have no pointers in JS, so keep tables separate

  function fixedtables(state) {
    /* build fixed huffman tables if first call (may not be thread safe) */
    if (virgin) {
      var sym;

      lenfix = new utils.Buf32(512);
      distfix = new utils.Buf32(32);

      /* literal/length table */
      sym = 0;
      while (sym < 144) { state.lens[sym++] = 8; }
      while (sym < 256) { state.lens[sym++] = 9; }
      while (sym < 280) { state.lens[sym++] = 7; }
      while (sym < 288) { state.lens[sym++] = 8; }

      inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, {bits: 9});

      /* distance table */
      sym = 0;
      while (sym < 32) { state.lens[sym++] = 5; }

      inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, {bits: 5});

      /* do this just once */
      virgin = false;
    }

    state.lencode = lenfix;
    state.lenbits = 9;
    state.distcode = distfix;
    state.distbits = 5;
  }


  /*
   Update the window with the last wsize (normally 32K) bytes written before
   returning.  If window does not exist yet, create it.  This is only called
   when a window is already in use, or when output has been written during this
   inflate call, but the end of the deflate stream has not been reached yet.
   It is also called to create a window for dictionary data when a dictionary
   is loaded.

   Providing output buffers larger than 32K to inflate() should provide a speed
   advantage, since only the last 32K of output is copied to the sliding window
   upon return from inflate(), and since all distances after the first 32K of
   output will fall in the output data, making match copies simpler and faster.
   The advantage may be dependent on the size of the processor's data caches.
   */
  function updatewindow(strm, src, end, copy) {
    var dist;
    var state = strm.state;

    /* if it hasn't been done already, allocate space for the window */
    if (state.window === null) {
      state.wsize = 1 << state.wbits;
      state.wnext = 0;
      state.whave = 0;

      state.window = new utils.Buf8(state.wsize);
    }

    /* copy state->wsize or less output bytes into the circular window */
    if (copy >= state.wsize) {
      utils.arraySet(state.window,src, end - state.wsize, state.wsize, 0);
      state.wnext = 0;
      state.whave = state.wsize;
    }
    else {
      dist = state.wsize - state.wnext;
      if (dist > copy) {
        dist = copy;
      }
      //zmemcpy(state->window + state->wnext, end - copy, dist);
      utils.arraySet(state.window,src, end - copy, dist, state.wnext);
      copy -= dist;
      if (copy) {
        //zmemcpy(state->window, end - copy, copy);
        utils.arraySet(state.window,src, end - copy, copy, 0);
        state.wnext = copy;
        state.whave = state.wsize;
      }
      else {
        state.wnext += dist;
        if (state.wnext === state.wsize) { state.wnext = 0; }
        if (state.whave < state.wsize) { state.whave += dist; }
      }
    }
    return 0;
  }

  function inflate(strm, flush) {
    var state;
    var input, output;          // input/output buffers
    var next;                   /* next input INDEX */
    var put;                    /* next output INDEX */
    var have, left;             /* available input and output */
    var hold;                   /* bit buffer */
    var bits;                   /* bits in bit buffer */
    var _in, _out;              /* save starting available input and output */
    var copy;                   /* number of stored or match bytes to copy */
    var from;                   /* where to copy match bytes from */
    var from_source;
    var here = 0;               /* current decoding table entry */
    var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
    //var last;                   /* parent table entry */
    var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
    var len;                    /* length to copy for repeats, bits to drop */
    var ret;                    /* return code */
    var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
    var opts;

    var n; // temporary var for NEED_BITS

    var order = /* permutation of code lengths */
      [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];


    if (!strm || !strm.state || !strm.output ||
        (!strm.input && strm.avail_in !== 0)) {
      return Z_STREAM_ERROR;
    }

    state = strm.state;
    if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


    //--- LOAD() ---
    put = strm.next_out;
    output = strm.output;
    left = strm.avail_out;
    next = strm.next_in;
    input = strm.input;
    have = strm.avail_in;
    hold = state.hold;
    bits = state.bits;
    //---

    _in = have;
    _out = left;
    ret = Z_OK;

    inf_leave: // goto emulation
    for (;;) {
      switch (state.mode) {
      case HEAD:
        if (state.wrap === 0) {
          state.mode = TYPEDO;
          break;
        }
        //=== NEEDBITS(16);
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
          state.check = 0/*crc32(0L, Z_NULL, 0)*/;
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//

          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = FLAGS;
          break;
        }
        state.flags = 0;           /* expect zlib header */
        if (state.head) {
          state.head.done = false;
        }
        if (!(state.wrap & 1) ||   /* check if zlib header allowed */
          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
          strm.msg = 'incorrect header check';
          state.mode = BAD;
          break;
        }
        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
        len = (hold & 0x0f)/*BITS(4)*/ + 8;
        if (state.wbits === 0) {
          state.wbits = len;
        }
        else if (len > state.wbits) {
          strm.msg = 'invalid window size';
          state.mode = BAD;
          break;
        }
        state.dmax = 1 << len;
        //Tracev((stderr, "inflate:   zlib header ok\n"));
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = hold & 0x200 ? DICTID : TYPE;
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        break;
      case FLAGS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.flags = hold;
        if ((state.flags & 0xff) !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        if (state.flags & 0xe000) {
          strm.msg = 'unknown header flags set';
          state.mode = BAD;
          break;
        }
        if (state.head) {
          state.head.text = ((hold >> 8) & 1);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = TIME;
        /* falls through */
      case TIME:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.time = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC4(state.check, hold)
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          hbuf[2] = (hold >>> 16) & 0xff;
          hbuf[3] = (hold >>> 24) & 0xff;
          state.check = crc32(state.check, hbuf, 4, 0);
          //===
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = OS;
        /* falls through */
      case OS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.xflags = (hold & 0xff);
          state.head.os = (hold >> 8);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = EXLEN;
        /* falls through */
      case EXLEN:
        if (state.flags & 0x0400) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length = hold;
          if (state.head) {
            state.head.extra_len = hold;
          }
          if (state.flags & 0x0200) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        else if (state.head) {
          state.head.extra = null/*Z_NULL*/;
        }
        state.mode = EXTRA;
        /* falls through */
      case EXTRA:
        if (state.flags & 0x0400) {
          copy = state.length;
          if (copy > have) { copy = have; }
          if (copy) {
            if (state.head) {
              len = state.head.extra_len - state.length;
              if (!state.head.extra) {
                // Use untyped array for more conveniend processing later
                state.head.extra = new Array(state.head.extra_len);
              }
              utils.arraySet(
                state.head.extra,
                input,
                next,
                // extra field is limited to 65536 bytes
                // - no need for additional size check
                copy,
                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                len
              );
              //zmemcpy(state.head.extra + len, next,
              //        len + copy > state.head.extra_max ?
              //        state.head.extra_max - len : copy);
            }
            if (state.flags & 0x0200) {
              state.check = crc32(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            state.length -= copy;
          }
          if (state.length) { break inf_leave; }
        }
        state.length = 0;
        state.mode = NAME;
        /* falls through */
      case NAME:
        if (state.flags & 0x0800) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            // TODO: 2 or 1 bytes?
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.name_max*/)) {
              state.head.name += String.fromCharCode(len);
            }
          } while (len && copy < have);

          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.name = null;
        }
        state.length = 0;
        state.mode = COMMENT;
        /* falls through */
      case COMMENT:
        if (state.flags & 0x1000) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.comm_max*/)) {
              state.head.comment += String.fromCharCode(len);
            }
          } while (len && copy < have);
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.comment = null;
        }
        state.mode = HCRC;
        /* falls through */
      case HCRC:
        if (state.flags & 0x0200) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.check & 0xffff)) {
            strm.msg = 'header crc mismatch';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        if (state.head) {
          state.head.hcrc = ((state.flags >> 9) & 1);
          state.head.done = true;
        }
        strm.adler = state.check = 0 /*crc32(0L, Z_NULL, 0)*/;
        state.mode = TYPE;
        break;
      case DICTID:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        strm.adler = state.check = ZSWAP32(hold);
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = DICT;
        /* falls through */
      case DICT:
        if (state.havedict === 0) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          return Z_NEED_DICT;
        }
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = TYPE;
        /* falls through */
      case TYPE:
        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case TYPEDO:
        if (state.last) {
          //--- BYTEBITS() ---//
          hold >>>= bits & 7;
          bits -= bits & 7;
          //---//
          state.mode = CHECK;
          break;
        }
        //=== NEEDBITS(3); */
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.last = (hold & 0x01)/*BITS(1)*/;
        //--- DROPBITS(1) ---//
        hold >>>= 1;
        bits -= 1;
        //---//

        switch ((hold & 0x03)/*BITS(2)*/) {
        case 0:                             /* stored block */
          //Tracev((stderr, "inflate:     stored block%s\n",
          //        state.last ? " (last)" : ""));
          state.mode = STORED;
          break;
        case 1:                             /* fixed block */
          fixedtables(state);
          //Tracev((stderr, "inflate:     fixed codes block%s\n",
          //        state.last ? " (last)" : ""));
          state.mode = LEN_;             /* decode codes */
          if (flush === Z_TREES) {
            //--- DROPBITS(2) ---//
            hold >>>= 2;
            bits -= 2;
            //---//
            break inf_leave;
          }
          break;
        case 2:                             /* dynamic block */
          //Tracev((stderr, "inflate:     dynamic codes block%s\n",
          //        state.last ? " (last)" : ""));
          state.mode = TABLE;
          break;
        case 3:
          strm.msg = 'invalid block type';
          state.mode = BAD;
        }
        //--- DROPBITS(2) ---//
        hold >>>= 2;
        bits -= 2;
        //---//
        break;
      case STORED:
        //--- BYTEBITS() ---// /* go to byte boundary */
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
          strm.msg = 'invalid stored block lengths';
          state.mode = BAD;
          break;
        }
        state.length = hold & 0xffff;
        //Tracev((stderr, "inflate:       stored length %u\n",
        //        state.length));
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = COPY_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case COPY_:
        state.mode = COPY;
        /* falls through */
      case COPY:
        copy = state.length;
        if (copy) {
          if (copy > have) { copy = have; }
          if (copy > left) { copy = left; }
          if (copy === 0) { break inf_leave; }
          //--- zmemcpy(put, next, copy); ---
          utils.arraySet(output, input, next, copy, put);
          //---//
          have -= copy;
          next += copy;
          left -= copy;
          put += copy;
          state.length -= copy;
          break;
        }
        //Tracev((stderr, "inflate:       stored end\n"));
        state.mode = TYPE;
        break;
      case TABLE:
        //=== NEEDBITS(14); */
        while (bits < 14) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
  //#ifndef PKZIP_BUG_WORKAROUND
        if (state.nlen > 286 || state.ndist > 30) {
          strm.msg = 'too many length or distance symbols';
          state.mode = BAD;
          break;
        }
  //#endif
        //Tracev((stderr, "inflate:       table sizes ok\n"));
        state.have = 0;
        state.mode = LENLENS;
        /* falls through */
      case LENLENS:
        while (state.have < state.ncode) {
          //=== NEEDBITS(3);
          while (bits < 3) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
          //--- DROPBITS(3) ---//
          hold >>>= 3;
          bits -= 3;
          //---//
        }
        while (state.have < 19) {
          state.lens[order[state.have++]] = 0;
        }
        // We have separate tables & no pointers. 2 commented lines below not needed.
        //state.next = state.codes;
        //state.lencode = state.next;
        // Switch to use dynamic table
        state.lencode = state.lendyn;
        state.lenbits = 7;

        opts = {bits: state.lenbits};
        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
        state.lenbits = opts.bits;

        if (ret) {
          strm.msg = 'invalid code lengths set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, "inflate:       code lengths ok\n"));
        state.have = 0;
        state.mode = CODELENS;
        /* falls through */
      case CODELENS:
        while (state.have < state.nlen + state.ndist) {
          for (;;) {
            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if (here_val < 16) {
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.lens[state.have++] = here_val;
          }
          else {
            if (here_val === 16) {
              //=== NEEDBITS(here.bits + 2);
              n = here_bits + 2;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              if (state.have === 0) {
                strm.msg = 'invalid bit length repeat';
                state.mode = BAD;
                break;
              }
              len = state.lens[state.have - 1];
              copy = 3 + (hold & 0x03);//BITS(2);
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
            }
            else if (here_val === 17) {
              //=== NEEDBITS(here.bits + 3);
              n = here_bits + 3;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 3 + (hold & 0x07);//BITS(3);
              //--- DROPBITS(3) ---//
              hold >>>= 3;
              bits -= 3;
              //---//
            }
            else {
              //=== NEEDBITS(here.bits + 7);
              n = here_bits + 7;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 11 + (hold & 0x7f);//BITS(7);
              //--- DROPBITS(7) ---//
              hold >>>= 7;
              bits -= 7;
              //---//
            }
            if (state.have + copy > state.nlen + state.ndist) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            while (copy--) {
              state.lens[state.have++] = len;
            }
          }
        }

        /* handle error breaks in while */
        if (state.mode === BAD) { break; }

        /* check for end-of-block code (better have one) */
        if (state.lens[256] === 0) {
          strm.msg = 'invalid code -- missing end-of-block';
          state.mode = BAD;
          break;
        }

        /* build code tables -- note: do not change the lenbits or distbits
           values here (9 and 6) without reading the comments in inftrees.h
           concerning the ENOUGH constants, which depend on those values */
        state.lenbits = 9;

        opts = {bits: state.lenbits};
        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.lenbits = opts.bits;
        // state.lencode = state.next;

        if (ret) {
          strm.msg = 'invalid literal/lengths set';
          state.mode = BAD;
          break;
        }

        state.distbits = 6;
        //state.distcode.copy(state.codes);
        // Switch to use dynamic table
        state.distcode = state.distdyn;
        opts = {bits: state.distbits};
        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.distbits = opts.bits;
        // state.distcode = state.next;

        if (ret) {
          strm.msg = 'invalid distances set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, 'inflate:       codes ok\n'));
        state.mode = LEN_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case LEN_:
        state.mode = LEN;
        /* falls through */
      case LEN:
        if (have >= 6 && left >= 258) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          inflate_fast(strm, _out);
          //--- LOAD() ---
          put = strm.next_out;
          output = strm.output;
          left = strm.avail_out;
          next = strm.next_in;
          input = strm.input;
          have = strm.avail_in;
          hold = state.hold;
          bits = state.bits;
          //---

          if (state.mode === TYPE) {
            state.back = -1;
          }
          break;
        }
        state.back = 0;
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) -1)];  /*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if (here_bits <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_op && (here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.lencode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) -1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        state.length = here_val;
        if (here_op === 0) {
          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
          //        "inflate:         literal '%c'\n" :
          //        "inflate:         literal 0x%02x\n", here.val));
          state.mode = LIT;
          break;
        }
        if (here_op & 32) {
          //Tracevv((stderr, "inflate:         end of block\n"));
          state.back = -1;
          state.mode = TYPE;
          break;
        }
        if (here_op & 64) {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD;
          break;
        }
        state.extra = here_op & 15;
        state.mode = LENEXT;
        /* falls through */
      case LENEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length += hold & ((1 << state.extra) -1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
        //Tracevv((stderr, "inflate:         length %u\n", state.length));
        state.was = state.length;
        state.mode = DIST;
        /* falls through */
      case DIST:
        for (;;) {
          here = state.distcode[hold & ((1 << state.distbits) -1)];/*BITS(state.distbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if ((here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.distcode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) -1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        if (here_op & 64) {
          strm.msg = 'invalid distance code';
          state.mode = BAD;
          break;
        }
        state.offset = here_val;
        state.extra = (here_op) & 15;
        state.mode = DISTEXT;
        /* falls through */
      case DISTEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.offset += hold & ((1 << state.extra) -1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
  //#ifdef INFLATE_STRICT
        if (state.offset > state.dmax) {
          strm.msg = 'invalid distance too far back';
          state.mode = BAD;
          break;
        }
  //#endif
        //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
        state.mode = MATCH;
        /* falls through */
      case MATCH:
        if (left === 0) { break inf_leave; }
        copy = _out - left;
        if (state.offset > copy) {         /* copy from window */
          copy = state.offset - copy;
          if (copy > state.whave) {
            if (state.sane) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break;
            }
  // (!) This block is disabled in zlib defailts,
  // don't enable it for binary compatibility
  //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
  //          Trace((stderr, "inflate.c too far\n"));
  //          copy -= state.whave;
  //          if (copy > state.length) { copy = state.length; }
  //          if (copy > left) { copy = left; }
  //          left -= copy;
  //          state.length -= copy;
  //          do {
  //            output[put++] = 0;
  //          } while (--copy);
  //          if (state.length === 0) { state.mode = LEN; }
  //          break;
  //#endif
          }
          if (copy > state.wnext) {
            copy -= state.wnext;
            from = state.wsize - copy;
          }
          else {
            from = state.wnext - copy;
          }
          if (copy > state.length) { copy = state.length; }
          from_source = state.window;
        }
        else {                              /* copy from output */
          from_source = output;
          from = put - state.offset;
          copy = state.length;
        }
        if (copy > left) { copy = left; }
        left -= copy;
        state.length -= copy;
        do {
          output[put++] = from_source[from++];
        } while (--copy);
        if (state.length === 0) { state.mode = LEN; }
        break;
      case LIT:
        if (left === 0) { break inf_leave; }
        output[put++] = state.length;
        left--;
        state.mode = LEN;
        break;
      case CHECK:
        if (state.wrap) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            // Use '|' insdead of '+' to make sure that result is signed
            hold |= input[next++] << bits;
            bits += 8;
          }
          //===//
          _out -= left;
          strm.total_out += _out;
          state.total += _out;
          if (_out) {
            strm.adler = state.check =
                /*UPDATE(state.check, put - _out, _out);*/
                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

          }
          _out = left;
          // NB: crc32 stored as signed 32-bit int, ZSWAP32 returns signed too
          if ((state.flags ? hold : ZSWAP32(hold)) !== state.check) {
            strm.msg = 'incorrect data check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   check matches trailer\n"));
        }
        state.mode = LENGTH;
        /* falls through */
      case LENGTH:
        if (state.wrap && state.flags) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.total & 0xffffffff)) {
            strm.msg = 'incorrect length check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   length matches trailer\n"));
        }
        state.mode = DONE;
        /* falls through */
      case DONE:
        ret = Z_STREAM_END;
        break inf_leave;
      case BAD:
        ret = Z_DATA_ERROR;
        break inf_leave;
      case MEM:
        return Z_MEM_ERROR;
      case SYNC:
        /* falls through */
      default:
        return Z_STREAM_ERROR;
      }
    }

    // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

    /*
       Return from inflate(), updating the total counts and the check value.
       If there was no progress during the inflate() call, return a buffer
       error.  Call updatewindow() to create and/or update the window state.
       Note: a memory error from inflate() is non-recoverable.
     */

    //--- RESTORE() ---
    strm.next_out = put;
    strm.avail_out = left;
    strm.next_in = next;
    strm.avail_in = have;
    state.hold = hold;
    state.bits = bits;
    //---

    if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                        (state.mode < CHECK || flush !== Z_FINISH))) {
      if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
        state.mode = MEM;
        return Z_MEM_ERROR;
      }
    }
    _in -= strm.avail_in;
    _out -= strm.avail_out;
    strm.total_in += _in;
    strm.total_out += _out;
    state.total += _out;
    if (state.wrap && _out) {
      strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
        (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
    }
    strm.data_type = state.bits + (state.last ? 64 : 0) +
                      (state.mode === TYPE ? 128 : 0) +
                      (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
    if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
      ret = Z_BUF_ERROR;
    }
    return ret;
  }

  function inflateEnd(strm) {

    if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
      return Z_STREAM_ERROR;
    }

    var state = strm.state;
    if (state.window) {
      state.window = null;
    }
    strm.state = null;
    return Z_OK;
  }

  function inflateGetHeader(strm, head) {
    var state;

    /* check state */
    if (!strm || !strm.state) { return Z_STREAM_ERROR; }
    state = strm.state;
    if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

    /* save header structure */
    state.head = head;
    head.done = false;
    return Z_OK;
  }


  exports.inflateReset = inflateReset;
  exports.inflateReset2 = inflateReset2;
  exports.inflateResetKeep = inflateResetKeep;
  exports.inflateInit = inflateInit;
  exports.inflateInit2 = inflateInit2;
  exports.inflate = inflate;
  exports.inflateEnd = inflateEnd;
  exports.inflateGetHeader = inflateGetHeader;
  exports.inflateInfo = 'pako inflate (from Nodeca project)';

  /* Not implemented
  exports.inflateCopy = inflateCopy;
  exports.inflateGetDictionary = inflateGetDictionary;
  exports.inflateMark = inflateMark;
  exports.inflatePrime = inflatePrime;
  exports.inflateSetDictionary = inflateSetDictionary;
  exports.inflateSync = inflateSync;
  exports.inflateSyncPoint = inflateSyncPoint;
  exports.inflateUndermine = inflateUndermine;
  */


/***/ },
/* 1207 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';


  var utils = __webpack_require__(269);

  var MAXBITS = 15;
  var ENOUGH_LENS = 852;
  var ENOUGH_DISTS = 592;
  //var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

  var CODES = 0;
  var LENS = 1;
  var DISTS = 2;

  var lbase = [ /* Length codes 257..285 base */
    3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
    35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
  ];

  var lext = [ /* Length codes 257..285 extra */
    16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
    19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
  ];

  var dbase = [ /* Distance codes 0..29 base */
    1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
    257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
    8193, 12289, 16385, 24577, 0, 0
  ];

  var dext = [ /* Distance codes 0..29 extra */
    16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
    23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
    28, 28, 29, 29, 64, 64
  ];

  module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
  {
    var bits = opts.bits;
        //here = opts.here; /* table entry for duplication */

    var len = 0;               /* a code's length in bits */
    var sym = 0;               /* index of code symbols */
    var min = 0, max = 0;          /* minimum and maximum code lengths */
    var root = 0;              /* number of index bits for root table */
    var curr = 0;              /* number of index bits for current table */
    var drop = 0;              /* code bits to drop for sub-table */
    var left = 0;                   /* number of prefix codes available */
    var used = 0;              /* code entries in table used */
    var huff = 0;              /* Huffman code */
    var incr;              /* for incrementing code, index */
    var fill;              /* index for replicating entries */
    var low;               /* low bits for current root entry */
    var mask;              /* mask for low root bits */
    var next;             /* next available space in table */
    var base = null;     /* base value table to use */
    var base_index = 0;
  //  var shoextra;    /* extra bits table to use */
    var end;                    /* use base and extra for symbol > end */
    var count = new utils.Buf16(MAXBITS+1); //[MAXBITS+1];    /* number of codes of each length */
    var offs = new utils.Buf16(MAXBITS+1); //[MAXBITS+1];     /* offsets in table for each length */
    var extra = null;
    var extra_index = 0;

    var here_bits, here_op, here_val;

    /*
     Process a set of code lengths to create a canonical Huffman code.  The
     code lengths are lens[0..codes-1].  Each length corresponds to the
     symbols 0..codes-1.  The Huffman code is generated by first sorting the
     symbols by length from short to long, and retaining the symbol order
     for codes with equal lengths.  Then the code starts with all zero bits
     for the first code of the shortest length, and the codes are integer
     increments for the same length, and zeros are appended as the length
     increases.  For the deflate format, these bits are stored backwards
     from their more natural integer increment ordering, and so when the
     decoding tables are built in the large loop below, the integer codes
     are incremented backwards.

     This routine assumes, but does not check, that all of the entries in
     lens[] are in the range 0..MAXBITS.  The caller must assure this.
     1..MAXBITS is interpreted as that code length.  zero means that that
     symbol does not occur in this code.

     The codes are sorted by computing a count of codes for each length,
     creating from that a table of starting indices for each length in the
     sorted table, and then entering the symbols in order in the sorted
     table.  The sorted table is work[], with that space being provided by
     the caller.

     The length counts are used for other purposes as well, i.e. finding
     the minimum and maximum length codes, determining if there are any
     codes at all, checking for a valid set of lengths, and looking ahead
     at length counts to determine sub-table sizes when building the
     decoding tables.
     */

    /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
    for (len = 0; len <= MAXBITS; len++) {
      count[len] = 0;
    }
    for (sym = 0; sym < codes; sym++) {
      count[lens[lens_index + sym]]++;
    }

    /* bound code lengths, force root to be within code lengths */
    root = bits;
    for (max = MAXBITS; max >= 1; max--) {
      if (count[max] !== 0) { break; }
    }
    if (root > max) {
      root = max;
    }
    if (max === 0) {                     /* no symbols to code at all */
      //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
      //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
      //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
      table[table_index++] = (1 << 24) | (64 << 16) | 0;


      //table.op[opts.table_index] = 64;
      //table.bits[opts.table_index] = 1;
      //table.val[opts.table_index++] = 0;
      table[table_index++] = (1 << 24) | (64 << 16) | 0;

      opts.bits = 1;
      return 0;     /* no symbols, but wait for decoding to report error */
    }
    for (min = 1; min < max; min++) {
      if (count[min] !== 0) { break; }
    }
    if (root < min) {
      root = min;
    }

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
      left <<= 1;
      left -= count[len];
      if (left < 0) {
        return -1;
      }        /* over-subscribed */
    }
    if (left > 0 && (type === CODES || max !== 1)) {
      return -1;                      /* incomplete set */
    }

    /* generate offsets into symbol table for each length for sorting */
    offs[1] = 0;
    for (len = 1; len < MAXBITS; len++) {
      offs[len + 1] = offs[len] + count[len];
    }

    /* sort symbols by length, by symbol order within each length */
    for (sym = 0; sym < codes; sym++) {
      if (lens[lens_index + sym] !== 0) {
        work[offs[lens[lens_index + sym]]++] = sym;
      }
    }

    /*
     Create and fill in decoding tables.  In this loop, the table being
     filled is at next and has curr index bits.  The code being used is huff
     with length len.  That code is converted to an index by dropping drop
     bits off of the bottom.  For codes where len is less than drop + curr,
     those top drop + curr - len bits are incremented through all values to
     fill the table with replicated entries.

     root is the number of index bits for the root table.  When len exceeds
     root, sub-tables are created pointed to by the root entry with an index
     of the low root bits of huff.  This is saved in low to check for when a
     new sub-table should be started.  drop is zero when the root table is
     being filled, and drop is root when sub-tables are being filled.

     When a new sub-table is needed, it is necessary to look ahead in the
     code lengths to determine what size sub-table is needed.  The length
     counts are used for this, and so count[] is decremented as codes are
     entered in the tables.

     used keeps track of how many table entries have been allocated from the
     provided *table space.  It is checked for LENS and DIST tables against
     the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
     the initial root table size constants.  See the comments in inftrees.h
     for more information.

     sym increments through all symbols, and the loop terminates when
     all codes of length max, i.e. all codes, have been processed.  This
     routine permits incomplete codes, so another loop after this one fills
     in the rest of the decoding tables with invalid code markers.
     */

    /* set up for code type */
    // poor man optimization - use if-else instead of switch,
    // to avoid deopts in old v8
    if (type === CODES) {
      base = extra = work;    /* dummy value--not used */
      end = 19;

    } else if (type === LENS) {
      base = lbase;
      base_index -= 257;
      extra = lext;
      extra_index -= 257;
      end = 256;

    } else {                    /* DISTS */
      base = dbase;
      extra = dext;
      end = -1;
    }

    /* initialize opts for loop */
    huff = 0;                   /* starting code */
    sym = 0;                    /* starting code symbol */
    len = min;                  /* starting code length */
    next = table_index;              /* current table to fill in */
    curr = root;                /* current table index bits */
    drop = 0;                   /* current bits to drop from code for index */
    low = -1;                   /* trigger new sub-table when len > root */
    used = 1 << root;          /* use root table entries */
    mask = used - 1;            /* mask for comparing low */

    /* check available table space */
    if ((type === LENS && used > ENOUGH_LENS) ||
      (type === DISTS && used > ENOUGH_DISTS)) {
      return 1;
    }

    var i=0;
    /* process all codes and make table entries */
    for (;;) {
      i++;
      /* create table entry */
      here_bits = len - drop;
      if (work[sym] < end) {
        here_op = 0;
        here_val = work[sym];
      }
      else if (work[sym] > end) {
        here_op = extra[extra_index + work[sym]];
        here_val = base[base_index + work[sym]];
      }
      else {
        here_op = 32 + 64;         /* end of block */
        here_val = 0;
      }

      /* replicate for those indices with low len bits equal to huff */
      incr = 1 << (len - drop);
      fill = 1 << curr;
      min = fill;                 /* save offset to next table */
      do {
        fill -= incr;
        table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
      } while (fill !== 0);

      /* backwards increment the len-bit code huff */
      incr = 1 << (len - 1);
      while (huff & incr) {
        incr >>= 1;
      }
      if (incr !== 0) {
        huff &= incr - 1;
        huff += incr;
      } else {
        huff = 0;
      }

      /* go to next symbol, update count, len */
      sym++;
      if (--count[len] === 0) {
        if (len === max) { break; }
        len = lens[lens_index + work[sym]];
      }

      /* create new sub-table if needed */
      if (len > root && (huff & mask) !== low) {
        /* if first time, transition to sub-tables */
        if (drop === 0) {
          drop = root;
        }

        /* increment past last table */
        next += min;            /* here min is 1 << curr */

        /* determine length of next table */
        curr = len - drop;
        left = 1 << curr;
        while (curr + drop < max) {
          left -= count[curr + drop];
          if (left <= 0) { break; }
          curr++;
          left <<= 1;
        }

        /* check for enough space */
        used += 1 << curr;
        if ((type === LENS && used > ENOUGH_LENS) ||
          (type === DISTS && used > ENOUGH_DISTS)) {
          return 1;
        }

        /* point entry in root table to sub-table */
        low = huff & mask;
        /*table.op[low] = curr;
        table.bits[low] = root;
        table.val[low] = next - opts.table_index;*/
        table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
      }
    }

    /* fill in remaining table entry if code is incomplete (guaranteed to have
     at most one remaining entry, since if the code is incomplete, the
     maximum code length that was allowed to get this far is one bit) */
    if (huff !== 0) {
      //table.op[next + huff] = 64;            /* invalid code marker */
      //table.bits[next + huff] = len - drop;
      //table.val[next + huff] = 0;
      table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
    }

    /* set return parameters */
    //opts.table_index += used;
    opts.bits = root;
    return 0;
  };


/***/ },
/* 1208 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';


  var utils = __webpack_require__(269);

  /* Public constants ==========================================================*/
  /* ===========================================================================*/


  //var Z_FILTERED          = 1;
  //var Z_HUFFMAN_ONLY      = 2;
  //var Z_RLE               = 3;
  var Z_FIXED               = 4;
  //var Z_DEFAULT_STRATEGY  = 0;

  /* Possible values of the data_type field (though see inflate()) */
  var Z_BINARY              = 0;
  var Z_TEXT                = 1;
  //var Z_ASCII             = 1; // = Z_TEXT
  var Z_UNKNOWN             = 2;

  /*============================================================================*/


  function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

  // From zutil.h

  var STORED_BLOCK = 0;
  var STATIC_TREES = 1;
  var DYN_TREES    = 2;
  /* The three kinds of block type */

  var MIN_MATCH    = 3;
  var MAX_MATCH    = 258;
  /* The minimum and maximum match lengths */

  // From deflate.h
  /* ===========================================================================
   * Internal compression state.
   */

  var LENGTH_CODES  = 29;
  /* number of length codes, not counting the special END_BLOCK code */

  var LITERALS      = 256;
  /* number of literal bytes 0..255 */

  var L_CODES       = LITERALS + 1 + LENGTH_CODES;
  /* number of Literal or Length codes, including the END_BLOCK code */

  var D_CODES       = 30;
  /* number of distance codes */

  var BL_CODES      = 19;
  /* number of codes used to transfer the bit lengths */

  var HEAP_SIZE     = 2*L_CODES + 1;
  /* maximum heap size */

  var MAX_BITS      = 15;
  /* All codes must not exceed MAX_BITS bits */

  var Buf_size      = 16;
  /* size of bit buffer in bi_buf */


  /* ===========================================================================
   * Constants
   */

  var MAX_BL_BITS = 7;
  /* Bit length codes must not exceed MAX_BL_BITS bits */

  var END_BLOCK   = 256;
  /* end of block literal code */

  var REP_3_6     = 16;
  /* repeat previous bit length 3-6 times (2 bits of repeat count) */

  var REPZ_3_10   = 17;
  /* repeat a zero length 3-10 times  (3 bits of repeat count) */

  var REPZ_11_138 = 18;
  /* repeat a zero length 11-138 times  (7 bits of repeat count) */

  var extra_lbits =   /* extra bits for each length code */
    [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

  var extra_dbits =   /* extra bits for each distance code */
    [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

  var extra_blbits =  /* extra bits for each bit length code */
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

  var bl_order =
    [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
  /* The lengths of the bit length codes are sent in order of decreasing
   * probability, to avoid transmitting the lengths for unused bit length codes.
   */

  /* ===========================================================================
   * Local data. These are initialized only once.
   */

  // We pre-fill arrays with 0 to avoid uninitialized gaps

  var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

  // !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
  var static_ltree  = new Array((L_CODES+2) * 2);
  zero(static_ltree);
  /* The static literal tree. Since the bit lengths are imposed, there is no
   * need for the L_CODES extra codes used during heap construction. However
   * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
   * below).
   */

  var static_dtree  = new Array(D_CODES * 2);
  zero(static_dtree);
  /* The static distance tree. (Actually a trivial tree since all codes use
   * 5 bits.)
   */

  var _dist_code    = new Array(DIST_CODE_LEN);
  zero(_dist_code);
  /* Distance codes. The first 256 values correspond to the distances
   * 3 .. 258, the last 256 values correspond to the top 8 bits of
   * the 15 bit distances.
   */

  var _length_code  = new Array(MAX_MATCH-MIN_MATCH+1);
  zero(_length_code);
  /* length code for each normalized match length (0 == MIN_MATCH) */

  var base_length   = new Array(LENGTH_CODES);
  zero(base_length);
  /* First normalized length for each code (0 = MIN_MATCH) */

  var base_dist     = new Array(D_CODES);
  zero(base_dist);
  /* First normalized distance for each code (0 = distance of 1) */


  var StaticTreeDesc = function (static_tree, extra_bits, extra_base, elems, max_length) {

    this.static_tree  = static_tree;  /* static tree or NULL */
    this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
    this.extra_base   = extra_base;   /* base index for extra_bits */
    this.elems        = elems;        /* max number of elements in the tree */
    this.max_length   = max_length;   /* max bit length for the codes */

    // show if `static_tree` has data or dummy - needed for monomorphic objects
    this.has_stree    = static_tree && static_tree.length;
  };


  var static_l_desc;
  var static_d_desc;
  var static_bl_desc;


  var TreeDesc = function(dyn_tree, stat_desc) {
    this.dyn_tree = dyn_tree;     /* the dynamic tree */
    this.max_code = 0;            /* largest code with non zero frequency */
    this.stat_desc = stat_desc;   /* the corresponding static tree */
  };



  function d_code(dist) {
    return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
  }


  /* ===========================================================================
   * Output a short LSB first on the stream.
   * IN assertion: there is enough room in pendingBuf.
   */
  function put_short (s, w) {
  //    put_byte(s, (uch)((w) & 0xff));
  //    put_byte(s, (uch)((ush)(w) >> 8));
    s.pending_buf[s.pending++] = (w) & 0xff;
    s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
  }


  /* ===========================================================================
   * Send a value on a given number of bits.
   * IN assertion: length <= 16 and value fits in length bits.
   */
  function send_bits(s, value, length) {
    if (s.bi_valid > (Buf_size - length)) {
      s.bi_buf |= (value << s.bi_valid) & 0xffff;
      put_short(s, s.bi_buf);
      s.bi_buf = value >> (Buf_size - s.bi_valid);
      s.bi_valid += length - Buf_size;
    } else {
      s.bi_buf |= (value << s.bi_valid) & 0xffff;
      s.bi_valid += length;
    }
  }


  function send_code(s, c, tree) {
    send_bits(s, tree[c*2]/*.Code*/, tree[c*2 + 1]/*.Len*/);
  }


  /* ===========================================================================
   * Reverse the first len bits of a code, using straightforward code (a faster
   * method would use a table)
   * IN assertion: 1 <= len <= 15
   */
  function bi_reverse(code, len) {
    var res = 0;
    do {
      res |= code & 1;
      code >>>= 1;
      res <<= 1;
    } while (--len > 0);
    return res >>> 1;
  }


  /* ===========================================================================
   * Flush the bit buffer, keeping at most 7 bits in it.
   */
  function bi_flush(s) {
    if (s.bi_valid === 16) {
      put_short(s, s.bi_buf);
      s.bi_buf = 0;
      s.bi_valid = 0;

    } else if (s.bi_valid >= 8) {
      s.pending_buf[s.pending++] = s.bi_buf & 0xff;
      s.bi_buf >>= 8;
      s.bi_valid -= 8;
    }
  }


  /* ===========================================================================
   * Compute the optimal bit lengths for a tree and update the total bit length
   * for the current block.
   * IN assertion: the fields freq and dad are set, heap[heap_max] and
   *    above are the tree nodes sorted by increasing frequency.
   * OUT assertions: the field len is set to the optimal bit length, the
   *     array bl_count contains the frequencies for each bit length.
   *     The length opt_len is updated; static_len is also updated if stree is
   *     not null.
   */
  function gen_bitlen(s, desc)
  //    deflate_state *s;
  //    tree_desc *desc;    /* the tree descriptor */
  {
    var tree            = desc.dyn_tree;
    var max_code        = desc.max_code;
    var stree           = desc.stat_desc.static_tree;
    var has_stree       = desc.stat_desc.has_stree;
    var extra           = desc.stat_desc.extra_bits;
    var base            = desc.stat_desc.extra_base;
    var max_length      = desc.stat_desc.max_length;
    var h;              /* heap index */
    var n, m;           /* iterate over the tree elements */
    var bits;           /* bit length */
    var xbits;          /* extra bits */
    var f;              /* frequency */
    var overflow = 0;   /* number of elements with bit length too large */

    for (bits = 0; bits <= MAX_BITS; bits++) {
      s.bl_count[bits] = 0;
    }

    /* In a first pass, compute the optimal bit lengths (which may
     * overflow in the case of the bit length tree).
     */
    tree[s.heap[s.heap_max]*2 + 1]/*.Len*/ = 0; /* root of the heap */

    for (h = s.heap_max+1; h < HEAP_SIZE; h++) {
      n = s.heap[h];
      bits = tree[tree[n*2 +1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
      if (bits > max_length) {
        bits = max_length;
        overflow++;
      }
      tree[n*2 + 1]/*.Len*/ = bits;
      /* We overwrite tree[n].Dad which is no longer needed */

      if (n > max_code) { continue; } /* not a leaf node */

      s.bl_count[bits]++;
      xbits = 0;
      if (n >= base) {
        xbits = extra[n-base];
      }
      f = tree[n * 2]/*.Freq*/;
      s.opt_len += f * (bits + xbits);
      if (has_stree) {
        s.static_len += f * (stree[n*2 + 1]/*.Len*/ + xbits);
      }
    }
    if (overflow === 0) { return; }

    // Trace((stderr,"\nbit length overflow\n"));
    /* This happens for example on obj2 and pic of the Calgary corpus */

    /* Find the first bit length which could increase: */
    do {
      bits = max_length-1;
      while (s.bl_count[bits] === 0) { bits--; }
      s.bl_count[bits]--;      /* move one leaf down the tree */
      s.bl_count[bits+1] += 2; /* move one overflow item as its brother */
      s.bl_count[max_length]--;
      /* The brother of the overflow item also moves one step up,
       * but this does not affect bl_count[max_length]
       */
      overflow -= 2;
    } while (overflow > 0);

    /* Now recompute all bit lengths, scanning in increasing frequency.
     * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
     * lengths instead of fixing only the wrong ones. This idea is taken
     * from 'ar' written by Haruhiko Okumura.)
     */
    for (bits = max_length; bits !== 0; bits--) {
      n = s.bl_count[bits];
      while (n !== 0) {
        m = s.heap[--h];
        if (m > max_code) { continue; }
        if (tree[m*2 + 1]/*.Len*/ !== bits) {
          // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
          s.opt_len += (bits - tree[m*2 + 1]/*.Len*/)*tree[m*2]/*.Freq*/;
          tree[m*2 + 1]/*.Len*/ = bits;
        }
        n--;
      }
    }
  }


  /* ===========================================================================
   * Generate the codes for a given tree and bit counts (which need not be
   * optimal).
   * IN assertion: the array bl_count contains the bit length statistics for
   * the given tree and the field len is set for all tree elements.
   * OUT assertion: the field code is set for all tree elements of non
   *     zero code length.
   */
  function gen_codes(tree, max_code, bl_count)
  //    ct_data *tree;             /* the tree to decorate */
  //    int max_code;              /* largest code with non zero frequency */
  //    ushf *bl_count;            /* number of codes at each bit length */
  {
    var next_code = new Array(MAX_BITS+1); /* next code value for each bit length */
    var code = 0;              /* running code value */
    var bits;                  /* bit index */
    var n;                     /* code index */

    /* The distribution counts are first used to generate the code values
     * without bit reversal.
     */
    for (bits = 1; bits <= MAX_BITS; bits++) {
      next_code[bits] = code = (code + bl_count[bits-1]) << 1;
    }
    /* Check that the bit counts in bl_count are consistent. The last code
     * must be all ones.
     */
    //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
    //        "inconsistent bit counts");
    //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

    for (n = 0;  n <= max_code; n++) {
      var len = tree[n*2 + 1]/*.Len*/;
      if (len === 0) { continue; }
      /* Now reverse the bits */
      tree[n*2]/*.Code*/ = bi_reverse(next_code[len]++, len);

      //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
      //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
    }
  }


  /* ===========================================================================
   * Initialize the various 'constant' tables.
   */
  function tr_static_init() {
    var n;        /* iterates over tree elements */
    var bits;     /* bit counter */
    var length;   /* length value */
    var code;     /* code value */
    var dist;     /* distance index */
    var bl_count = new Array(MAX_BITS+1);
    /* number of codes at each bit length for an optimal tree */

    // do check in _tr_init()
    //if (static_init_done) return;

    /* For some embedded targets, global variables are not initialized: */
  /*#ifdef NO_INIT_GLOBAL_POINTERS
    static_l_desc.static_tree = static_ltree;
    static_l_desc.extra_bits = extra_lbits;
    static_d_desc.static_tree = static_dtree;
    static_d_desc.extra_bits = extra_dbits;
    static_bl_desc.extra_bits = extra_blbits;
  #endif*/

    /* Initialize the mapping length (0..255) -> length code (0..28) */
    length = 0;
    for (code = 0; code < LENGTH_CODES-1; code++) {
      base_length[code] = length;
      for (n = 0; n < (1<<extra_lbits[code]); n++) {
        _length_code[length++] = code;
      }
    }
    //Assert (length == 256, "tr_static_init: length != 256");
    /* Note that the length 255 (match length 258) can be represented
     * in two different ways: code 284 + 5 bits or code 285, so we
     * overwrite length_code[255] to use the best encoding:
     */
    _length_code[length-1] = code;

    /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
    dist = 0;
    for (code = 0 ; code < 16; code++) {
      base_dist[code] = dist;
      for (n = 0; n < (1<<extra_dbits[code]); n++) {
        _dist_code[dist++] = code;
      }
    }
    //Assert (dist == 256, "tr_static_init: dist != 256");
    dist >>= 7; /* from now on, all distances are divided by 128 */
    for (; code < D_CODES; code++) {
      base_dist[code] = dist << 7;
      for (n = 0; n < (1<<(extra_dbits[code]-7)); n++) {
        _dist_code[256 + dist++] = code;
      }
    }
    //Assert (dist == 256, "tr_static_init: 256+dist != 512");

    /* Construct the codes of the static literal tree */
    for (bits = 0; bits <= MAX_BITS; bits++) {
      bl_count[bits] = 0;
    }

    n = 0;
    while (n <= 143) {
      static_ltree[n*2 + 1]/*.Len*/ = 8;
      n++;
      bl_count[8]++;
    }
    while (n <= 255) {
      static_ltree[n*2 + 1]/*.Len*/ = 9;
      n++;
      bl_count[9]++;
    }
    while (n <= 279) {
      static_ltree[n*2 + 1]/*.Len*/ = 7;
      n++;
      bl_count[7]++;
    }
    while (n <= 287) {
      static_ltree[n*2 + 1]/*.Len*/ = 8;
      n++;
      bl_count[8]++;
    }
    /* Codes 286 and 287 do not exist, but we must include them in the
     * tree construction to get a canonical Huffman tree (longest code
     * all ones)
     */
    gen_codes(static_ltree, L_CODES+1, bl_count);

    /* The static distance tree is trivial: */
    for (n = 0; n < D_CODES; n++) {
      static_dtree[n*2 + 1]/*.Len*/ = 5;
      static_dtree[n*2]/*.Code*/ = bi_reverse(n, 5);
    }

    // Now data ready and we can init static trees
    static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS+1, L_CODES, MAX_BITS);
    static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
    static_bl_desc =new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

    //static_init_done = true;
  }


  /* ===========================================================================
   * Initialize a new block.
   */
  function init_block(s) {
    var n; /* iterates over tree elements */

    /* Initialize the trees. */
    for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n*2]/*.Freq*/ = 0; }
    for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n*2]/*.Freq*/ = 0; }
    for (n = 0; n < BL_CODES; n++) { s.bl_tree[n*2]/*.Freq*/ = 0; }

    s.dyn_ltree[END_BLOCK*2]/*.Freq*/ = 1;
    s.opt_len = s.static_len = 0;
    s.last_lit = s.matches = 0;
  }


  /* ===========================================================================
   * Flush the bit buffer and align the output on a byte boundary
   */
  function bi_windup(s)
  {
    if (s.bi_valid > 8) {
      put_short(s, s.bi_buf);
    } else if (s.bi_valid > 0) {
      //put_byte(s, (Byte)s->bi_buf);
      s.pending_buf[s.pending++] = s.bi_buf;
    }
    s.bi_buf = 0;
    s.bi_valid = 0;
  }

  /* ===========================================================================
   * Copy a stored block, storing first the length and its
   * one's complement if requested.
   */
  function copy_block(s, buf, len, header)
  //DeflateState *s;
  //charf    *buf;    /* the input data */
  //unsigned len;     /* its length */
  //int      header;  /* true if block header must be written */
  {
    bi_windup(s);        /* align on byte boundary */

    if (header) {
      put_short(s, len);
      put_short(s, ~len);
    }
  //  while (len--) {
  //    put_byte(s, *buf++);
  //  }
    utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
    s.pending += len;
  }

  /* ===========================================================================
   * Compares to subtrees, using the tree depth as tie breaker when
   * the subtrees have equal frequency. This minimizes the worst case length.
   */
  function smaller(tree, n, m, depth) {
    var _n2 = n*2;
    var _m2 = m*2;
    return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
           (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
  }

  /* ===========================================================================
   * Restore the heap property by moving down the tree starting at node k,
   * exchanging a node with the smallest of its two sons if necessary, stopping
   * when the heap property is re-established (each father smaller than its
   * two sons).
   */
  function pqdownheap(s, tree, k)
  //    deflate_state *s;
  //    ct_data *tree;  /* the tree to restore */
  //    int k;               /* node to move down */
  {
    var v = s.heap[k];
    var j = k << 1;  /* left son of k */
    while (j <= s.heap_len) {
      /* Set j to the smallest of the two sons: */
      if (j < s.heap_len &&
        smaller(tree, s.heap[j+1], s.heap[j], s.depth)) {
        j++;
      }
      /* Exit if v is smaller than both sons */
      if (smaller(tree, v, s.heap[j], s.depth)) { break; }

      /* Exchange v with the smallest son */
      s.heap[k] = s.heap[j];
      k = j;

      /* And continue down the tree, setting j to the left son of k */
      j <<= 1;
    }
    s.heap[k] = v;
  }


  // inlined manually
  // var SMALLEST = 1;

  /* ===========================================================================
   * Send the block data compressed using the given Huffman trees
   */
  function compress_block(s, ltree, dtree)
  //    deflate_state *s;
  //    const ct_data *ltree; /* literal tree */
  //    const ct_data *dtree; /* distance tree */
  {
    var dist;           /* distance of matched string */
    var lc;             /* match length or unmatched char (if dist == 0) */
    var lx = 0;         /* running index in l_buf */
    var code;           /* the code to send */
    var extra;          /* number of extra bits to send */

    if (s.last_lit !== 0) {
      do {
        dist = (s.pending_buf[s.d_buf + lx*2] << 8) | (s.pending_buf[s.d_buf + lx*2 + 1]);
        lc = s.pending_buf[s.l_buf + lx];
        lx++;

        if (dist === 0) {
          send_code(s, lc, ltree); /* send a literal byte */
          //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
        } else {
          /* Here, lc is the match length - MIN_MATCH */
          code = _length_code[lc];
          send_code(s, code+LITERALS+1, ltree); /* send the length code */
          extra = extra_lbits[code];
          if (extra !== 0) {
            lc -= base_length[code];
            send_bits(s, lc, extra);       /* send the extra length bits */
          }
          dist--; /* dist is now the match distance - 1 */
          code = d_code(dist);
          //Assert (code < D_CODES, "bad d_code");

          send_code(s, code, dtree);       /* send the distance code */
          extra = extra_dbits[code];
          if (extra !== 0) {
            dist -= base_dist[code];
            send_bits(s, dist, extra);   /* send the extra distance bits */
          }
        } /* literal or match pair ? */

        /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
        //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
        //       "pendingBuf overflow");

      } while (lx < s.last_lit);
    }

    send_code(s, END_BLOCK, ltree);
  }


  /* ===========================================================================
   * Construct one Huffman tree and assigns the code bit strings and lengths.
   * Update the total bit length for the current block.
   * IN assertion: the field freq is set for all tree elements.
   * OUT assertions: the fields len and code are set to the optimal bit length
   *     and corresponding code. The length opt_len is updated; static_len is
   *     also updated if stree is not null. The field max_code is set.
   */
  function build_tree(s, desc)
  //    deflate_state *s;
  //    tree_desc *desc; /* the tree descriptor */
  {
    var tree     = desc.dyn_tree;
    var stree    = desc.stat_desc.static_tree;
    var has_stree = desc.stat_desc.has_stree;
    var elems    = desc.stat_desc.elems;
    var n, m;          /* iterate over heap elements */
    var max_code = -1; /* largest code with non zero frequency */
    var node;          /* new node being created */

    /* Construct the initial heap, with least frequent element in
     * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
     * heap[0] is not used.
     */
    s.heap_len = 0;
    s.heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
      if (tree[n * 2]/*.Freq*/ !== 0) {
        s.heap[++s.heap_len] = max_code = n;
        s.depth[n] = 0;

      } else {
        tree[n*2 + 1]/*.Len*/ = 0;
      }
    }

    /* The pkzip format requires that at least one distance code exists,
     * and that at least one bit should be sent even if there is only one
     * possible code. So to avoid special checks later on we force at least
     * two codes of non zero frequency.
     */
    while (s.heap_len < 2) {
      node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
      tree[node * 2]/*.Freq*/ = 1;
      s.depth[node] = 0;
      s.opt_len--;

      if (has_stree) {
        s.static_len -= stree[node*2 + 1]/*.Len*/;
      }
      /* node is 0 or 1 so it does not have extra bits */
    }
    desc.max_code = max_code;

    /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
     * establish sub-heaps of increasing lengths:
     */
    for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

    /* Construct the Huffman tree by repeatedly combining the least two
     * frequent nodes.
     */
    node = elems;              /* next internal node of the tree */
    do {
      //pqremove(s, tree, n);  /* n = node of least frequency */
      /*** pqremove ***/
      n = s.heap[1/*SMALLEST*/];
      s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
      pqdownheap(s, tree, 1/*SMALLEST*/);
      /***/

      m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

      s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
      s.heap[--s.heap_max] = m;

      /* Create a new node father of n and m */
      tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
      s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
      tree[n*2 + 1]/*.Dad*/ = tree[m*2 + 1]/*.Dad*/ = node;

      /* and insert the new node in the heap */
      s.heap[1/*SMALLEST*/] = node++;
      pqdownheap(s, tree, 1/*SMALLEST*/);

    } while (s.heap_len >= 2);

    s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

    /* At this point, the fields freq and dad are set. We can now
     * generate the bit lengths.
     */
    gen_bitlen(s, desc);

    /* The field len is now set, we can generate the bit codes */
    gen_codes(tree, max_code, s.bl_count);
  }


  /* ===========================================================================
   * Scan a literal or distance tree to determine the frequencies of the codes
   * in the bit length tree.
   */
  function scan_tree(s, tree, max_code)
  //    deflate_state *s;
  //    ct_data *tree;   /* the tree to be scanned */
  //    int max_code;    /* and its largest code of non zero frequency */
  {
    var n;                     /* iterates over all tree elements */
    var prevlen = -1;          /* last emitted length */
    var curlen;                /* length of current code */

    var nextlen = tree[0*2 + 1]/*.Len*/; /* length of next code */

    var count = 0;             /* repeat count of the current code */
    var max_count = 7;         /* max repeat count */
    var min_count = 4;         /* min repeat count */

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    }
    tree[(max_code+1)*2 + 1]/*.Len*/ = 0xffff; /* guard */

    for (n = 0; n <= max_code; n++) {
      curlen = nextlen;
      nextlen = tree[(n+1)*2 + 1]/*.Len*/;

      if (++count < max_count && curlen === nextlen) {
        continue;

      } else if (count < min_count) {
        s.bl_tree[curlen * 2]/*.Freq*/ += count;

      } else if (curlen !== 0) {

        if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
        s.bl_tree[REP_3_6*2]/*.Freq*/++;

      } else if (count <= 10) {
        s.bl_tree[REPZ_3_10*2]/*.Freq*/++;

      } else {
        s.bl_tree[REPZ_11_138*2]/*.Freq*/++;
      }

      count = 0;
      prevlen = curlen;

      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;

      } else if (curlen === nextlen) {
        max_count = 6;
        min_count = 3;

      } else {
        max_count = 7;
        min_count = 4;
      }
    }
  }


  /* ===========================================================================
   * Send a literal or distance tree in compressed form, using the codes in
   * bl_tree.
   */
  function send_tree(s, tree, max_code)
  //    deflate_state *s;
  //    ct_data *tree; /* the tree to be scanned */
  //    int max_code;       /* and its largest code of non zero frequency */
  {
    var n;                     /* iterates over all tree elements */
    var prevlen = -1;          /* last emitted length */
    var curlen;                /* length of current code */

    var nextlen = tree[0*2 + 1]/*.Len*/; /* length of next code */

    var count = 0;             /* repeat count of the current code */
    var max_count = 7;         /* max repeat count */
    var min_count = 4;         /* min repeat count */

    /* tree[max_code+1].Len = -1; */  /* guard already set */
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    }

    for (n = 0; n <= max_code; n++) {
      curlen = nextlen;
      nextlen = tree[(n+1)*2 + 1]/*.Len*/;

      if (++count < max_count && curlen === nextlen) {
        continue;

      } else if (count < min_count) {
        do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

      } else if (curlen !== 0) {
        if (curlen !== prevlen) {
          send_code(s, curlen, s.bl_tree);
          count--;
        }
        //Assert(count >= 3 && count <= 6, " 3_6?");
        send_code(s, REP_3_6, s.bl_tree);
        send_bits(s, count-3, 2);

      } else if (count <= 10) {
        send_code(s, REPZ_3_10, s.bl_tree);
        send_bits(s, count-3, 3);

      } else {
        send_code(s, REPZ_11_138, s.bl_tree);
        send_bits(s, count-11, 7);
      }

      count = 0;
      prevlen = curlen;
      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;

      } else if (curlen === nextlen) {
        max_count = 6;
        min_count = 3;

      } else {
        max_count = 7;
        min_count = 4;
      }
    }
  }


  /* ===========================================================================
   * Construct the Huffman tree for the bit lengths and return the index in
   * bl_order of the last bit length code to send.
   */
  function build_bl_tree(s) {
    var max_blindex;  /* index of last bit length code of non zero freq */

    /* Determine the bit length frequencies for literal and distance trees */
    scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
    scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

    /* Build the bit length tree: */
    build_tree(s, s.bl_desc);
    /* opt_len now includes the length of the tree representations, except
     * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
     */

    /* Determine the number of bit length codes to send. The pkzip format
     * requires that at least 4 bit length codes be sent. (appnote.txt says
     * 3 but the actual value used is 4.)
     */
    for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {
      if (s.bl_tree[bl_order[max_blindex]*2 + 1]/*.Len*/ !== 0) {
        break;
      }
    }
    /* Update opt_len to include the bit length tree and counts */
    s.opt_len += 3*(max_blindex+1) + 5+5+4;
    //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
    //        s->opt_len, s->static_len));

    return max_blindex;
  }


  /* ===========================================================================
   * Send the header for a block using dynamic Huffman trees: the counts, the
   * lengths of the bit length codes, the literal tree and the distance tree.
   * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
   */
  function send_all_trees(s, lcodes, dcodes, blcodes)
  //    deflate_state *s;
  //    int lcodes, dcodes, blcodes; /* number of codes for each tree */
  {
    var rank;                    /* index in bl_order */

    //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
    //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
    //        "too many codes");
    //Tracev((stderr, "\nbl counts: "));
    send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */
    send_bits(s, dcodes-1,   5);
    send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */
    for (rank = 0; rank < blcodes; rank++) {
      //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
      send_bits(s, s.bl_tree[bl_order[rank]*2 + 1]/*.Len*/, 3);
    }
    //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

    send_tree(s, s.dyn_ltree, lcodes-1); /* literal tree */
    //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

    send_tree(s, s.dyn_dtree, dcodes-1); /* distance tree */
    //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
  }


  /* ===========================================================================
   * Check if the data type is TEXT or BINARY, using the following algorithm:
   * - TEXT if the two conditions below are satisfied:
   *    a) There are no non-portable control characters belonging to the
   *       "black list" (0..6, 14..25, 28..31).
   *    b) There is at least one printable character belonging to the
   *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
   * - BINARY otherwise.
   * - The following partially-portable control characters form a
   *   "gray list" that is ignored in this detection algorithm:
   *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
   * IN assertion: the fields Freq of dyn_ltree are set.
   */
  function detect_data_type(s) {
    /* black_mask is the bit mask of black-listed bytes
     * set bits 0..6, 14..25, and 28..31
     * 0xf3ffc07f = binary 11110011111111111100000001111111
     */
    var black_mask = 0xf3ffc07f;
    var n;

    /* Check for non-textual ("black-listed") bytes. */
    for (n = 0; n <= 31; n++, black_mask >>>= 1) {
      if ((black_mask & 1) && (s.dyn_ltree[n*2]/*.Freq*/ !== 0)) {
        return Z_BINARY;
      }
    }

    /* Check for textual ("white-listed") bytes. */
    if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
        s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
    for (n = 32; n < LITERALS; n++) {
      if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
        return Z_TEXT;
      }
    }

    /* There are no "black-listed" or "white-listed" bytes:
     * this stream either is empty or has tolerated ("gray-listed") bytes only.
     */
    return Z_BINARY;
  }


  var static_init_done = false;

  /* ===========================================================================
   * Initialize the tree data structures for a new zlib stream.
   */
  function _tr_init(s)
  {

    if (!static_init_done) {
      tr_static_init();
      static_init_done = true;
    }

    s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
    s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
    s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

    s.bi_buf = 0;
    s.bi_valid = 0;

    /* Initialize the first block of the first file: */
    init_block(s);
  }


  /* ===========================================================================
   * Send a stored block
   */
  function _tr_stored_block(s, buf, stored_len, last)
  //DeflateState *s;
  //charf *buf;       /* input block */
  //ulg stored_len;   /* length of input block */
  //int last;         /* one if this is the last block for a file */
  {
    send_bits(s, (STORED_BLOCK<<1)+(last ? 1 : 0), 3);    /* send block type */
    copy_block(s, buf, stored_len, true); /* with header */
  }


  /* ===========================================================================
   * Send one empty static block to give enough lookahead for inflate.
   * This takes 10 bits, of which 7 may remain in the bit buffer.
   */
  function _tr_align(s) {
    send_bits(s, STATIC_TREES<<1, 3);
    send_code(s, END_BLOCK, static_ltree);
    bi_flush(s);
  }


  /* ===========================================================================
   * Determine the best encoding for the current block: dynamic trees, static
   * trees or store, and output the encoded block to the zip file.
   */
  function _tr_flush_block(s, buf, stored_len, last)
  //DeflateState *s;
  //charf *buf;       /* input block, or NULL if too old */
  //ulg stored_len;   /* length of input block */
  //int last;         /* one if this is the last block for a file */
  {
    var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
    var max_blindex = 0;        /* index of last bit length code of non zero freq */

    /* Build the Huffman trees unless a stored block is forced */
    if (s.level > 0) {

      /* Check if the file is binary or text */
      if (s.strm.data_type === Z_UNKNOWN) {
        s.strm.data_type = detect_data_type(s);
      }

      /* Construct the literal and distance trees */
      build_tree(s, s.l_desc);
      // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
      //        s->static_len));

      build_tree(s, s.d_desc);
      // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
      //        s->static_len));
      /* At this point, opt_len and static_len are the total bit lengths of
       * the compressed block data, excluding the tree representations.
       */

      /* Build the bit length tree for the above two trees, and get the index
       * in bl_order of the last bit length code to send.
       */
      max_blindex = build_bl_tree(s);

      /* Determine the best encoding. Compute the block lengths in bytes. */
      opt_lenb = (s.opt_len+3+7) >>> 3;
      static_lenb = (s.static_len+3+7) >>> 3;

      // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
      //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
      //        s->last_lit));

      if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

    } else {
      // Assert(buf != (char*)0, "lost buf");
      opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
    }

    if ((stored_len+4 <= opt_lenb) && (buf !== -1)) {
      /* 4: two words for the lengths */

      /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
       * Otherwise we can't have processed more than WSIZE input bytes since
       * the last block flush, because compression would have been
       * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
       * transform a block into a stored block.
       */
      _tr_stored_block(s, buf, stored_len, last);

    } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

      send_bits(s, (STATIC_TREES<<1) + (last ? 1 : 0), 3);
      compress_block(s, static_ltree, static_dtree);

    } else {
      send_bits(s, (DYN_TREES<<1) + (last ? 1 : 0), 3);
      send_all_trees(s, s.l_desc.max_code+1, s.d_desc.max_code+1, max_blindex+1);
      compress_block(s, s.dyn_ltree, s.dyn_dtree);
    }
    // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
    /* The above check is made mod 2^32, for files larger than 512 MB
     * and uLong implemented on 32 bits.
     */
    init_block(s);

    if (last) {
      bi_windup(s);
    }
    // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
    //       s->compressed_len-7*last));
  }

  /* ===========================================================================
   * Save the match info and tally the frequency counts. Return true if
   * the current block must be flushed.
   */
  function _tr_tally(s, dist, lc)
  //    deflate_state *s;
  //    unsigned dist;  /* distance of matched string */
  //    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
  {
    //var out_length, in_length, dcode;

    s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
    s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

    s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
    s.last_lit++;

    if (dist === 0) {
      /* lc is the unmatched char */
      s.dyn_ltree[lc*2]/*.Freq*/++;
    } else {
      s.matches++;
      /* Here, lc is the match length - MIN_MATCH */
      dist--;             /* dist = match distance - 1 */
      //Assert((ush)dist < (ush)MAX_DIST(s) &&
      //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
      //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

      s.dyn_ltree[(_length_code[lc]+LITERALS+1) * 2]/*.Freq*/++;
      s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
    }

  // (!) This block is disabled in zlib defailts,
  // don't enable it for binary compatibility

  //#ifdef TRUNCATE_BLOCK
  //  /* Try to guess if it is profitable to stop the current block here */
  //  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
  //    /* Compute an upper bound for the compressed length */
  //    out_length = s.last_lit*8;
  //    in_length = s.strstart - s.block_start;
  //
  //    for (dcode = 0; dcode < D_CODES; dcode++) {
  //      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
  //    }
  //    out_length >>>= 3;
  //    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
  //    //       s->last_lit, in_length, out_length,
  //    //       100L - out_length*100L/in_length));
  //    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
  //      return true;
  //    }
  //  }
  //#endif

    return (s.last_lit === s.lit_bufsize-1);
    /* We avoid equality with lit_bufsize because of wraparound at 64K
     * on 16 bit machines and because stored blocks are restricted to
     * 64K-1 bytes.
     */
  }

  exports._tr_init  = _tr_init;
  exports._tr_stored_block = _tr_stored_block;
  exports._tr_flush_block  = _tr_flush_block;
  exports._tr_tally = _tr_tally;
  exports._tr_align = _tr_align;


/***/ },
/* 1209 */
/***/ function(module, exports) {

  'use strict';


  function ZStream() {
    /* next input byte */
    this.input = null; // JS specific, because we have no pointers
    this.next_in = 0;
    /* number of bytes available at input */
    this.avail_in = 0;
    /* total number of input bytes read so far */
    this.total_in = 0;
    /* next output byte should be put there */
    this.output = null; // JS specific, because we have no pointers
    this.next_out = 0;
    /* remaining free space at output */
    this.avail_out = 0;
    /* total number of bytes output so far */
    this.total_out = 0;
    /* last error message, NULL if no error */
    this.msg = ''/*Z_NULL*/;
    /* not visible by applications */
    this.state = null;
    /* best guess about the data type: binary or text */
    this.data_type = 2/*Z_UNKNOWN*/;
    /* adler32 value of the uncompressed data */
    this.adler = 0;
  }

  module.exports = ZStream;


/***/ },
/* 1210 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var fs = __webpack_require__(126)

  module.exports = function (pth, cb) {
  	var fn = typeof fs.access === 'function' ? fs.access : fs.stat;

  	fn(pth, function (err) {
  		cb(null, !err);
  	});
  };

  module.exports.sync = function (pth) {
  	var fn = typeof fs.accessSync === 'function' ? fs.accessSync : fs.statSync;

  	try {
  		fn(pth);
  		return true;
  	} catch (err) {
  		return false;
  	}
  };


/***/ },
/* 1211 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(process) {'use strict';

  function posix(path) {
  	return path.charAt(0) === '/';
  };

  function win32(path) {
  	// https://github.com/joyent/node/blob/b3fcc245fb25539909ef1d5eaa01dbf92e168633/lib/path.js#L56
  	var splitDeviceRe = /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;
  	var result = splitDeviceRe.exec(path);
  	var device = result[1] || '';
  	var isUnc = !!device && device.charAt(1) !== ':';

  	// UNC paths are always absolute
  	return !!result[2] || isUnc;
  };

  module.exports = process.platform === 'win32' ? win32 : posix;
  module.exports.posix = posix;
  module.exports.win32 = win32;

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(111)))

/***/ },
/* 1212 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function(crypto) {
    function pbkdf2(password, salt, iterations, keylen, digest, callback) {
      if ('function' === typeof digest) {
        callback = digest
        digest = undefined
      }

      if ('function' !== typeof callback)
        throw new Error('No callback provided to pbkdf2')

      setTimeout(function() {
        var result

        try {
          result = pbkdf2Sync(password, salt, iterations, keylen, digest)
        } catch (e) {
          return callback(e)
        }

        callback(undefined, result)
      })
    }

    function pbkdf2Sync(password, salt, iterations, keylen, digest) {
      if ('number' !== typeof iterations)
        throw new TypeError('Iterations not a number')

      if (iterations < 0)
        throw new TypeError('Bad iterations')

      if ('number' !== typeof keylen)
        throw new TypeError('Key length not a number')

      if (keylen < 0)
        throw new TypeError('Bad key length')

      digest = digest || 'sha1'

      if (!Buffer.isBuffer(password)) password = new Buffer(password)
      if (!Buffer.isBuffer(salt)) salt = new Buffer(salt)

      var hLen, l = 1, r, T
      var DK = new Buffer(keylen)
      var block1 = new Buffer(salt.length + 4)
      salt.copy(block1, 0, 0, salt.length)

      for (var i = 1; i <= l; i++) {
        block1.writeUInt32BE(i, salt.length)

        var U = crypto.createHmac(digest, password).update(block1).digest()

        if (!hLen) {
          hLen = U.length
          T = new Buffer(hLen)
          l = Math.ceil(keylen / hLen)
          r = keylen - (l - 1) * hLen

          if (keylen > (Math.pow(2, 32) - 1) * hLen)
            throw new TypeError('keylen exceeds maximum length')
        }

        U.copy(T, 0, 0, hLen)

        for (var j = 1; j < iterations; j++) {
          U = crypto.createHmac(digest, password).update(U).digest()

          for (var k = 0; k < hLen; k++) {
            T[k] ^= U[k]
          }
        }

        var destPos = (i - 1) * hLen
        var len = (i == l ? r : hLen)
        T.copy(DK, destPos, 0, len)
      }

      return DK
    }

    return {
      pbkdf2: pbkdf2,
      pbkdf2Sync: pbkdf2Sync
    }
  }

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(115).Buffer))

/***/ },
/* 1213 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  module.exports = __webpack_require__(1227);


/***/ },
/* 1214 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule AutoFocusUtils
   */

  'use strict';

  var ReactDOMComponentTree = __webpack_require__(108);

  var focusNode = __webpack_require__(440);

  var AutoFocusUtils = {
    focusDOMComponent: function () {
      focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
    }
  };

  module.exports = AutoFocusUtils;

/***/ },
/* 1215 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule BeforeInputEventPlugin
   */

  'use strict';

  var EventConstants = __webpack_require__(155);
  var EventPropagators = __webpack_require__(221);
  var ExecutionEnvironment = __webpack_require__(109);
  var FallbackCompositionState = __webpack_require__(1221);
  var SyntheticCompositionEvent = __webpack_require__(1263);
  var SyntheticInputEvent = __webpack_require__(1266);

  var keyOf = __webpack_require__(163);

  var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
  var START_KEYCODE = 229;

  var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

  var documentMode = null;
  if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
    documentMode = document.documentMode;
  }

  // Webkit offers a very useful `textInput` event that can be used to
  // directly represent `beforeInput`. The IE `textinput` event is not as
  // useful, so we don't use it.
  var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

  // In IE9+, we have access to composition events, but the data supplied
  // by the native compositionend event may be incorrect. Japanese ideographic
  // spaces, for instance (\u3000) are not recorded correctly.
  var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

  /**
   * Opera <= 12 includes TextEvent in window, but does not fire
   * text input events. Rely on keypress instead.
   */
  function isPresto() {
    var opera = window.opera;
    return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
  }

  var SPACEBAR_CODE = 32;
  var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

  var topLevelTypes = EventConstants.topLevelTypes;

  // Events and their corresponding property names.
  var eventTypes = {
    beforeInput: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onBeforeInput: null }),
        captured: keyOf({ onBeforeInputCapture: null })
      },
      dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
    },
    compositionEnd: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onCompositionEnd: null }),
        captured: keyOf({ onCompositionEndCapture: null })
      },
      dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
    },
    compositionStart: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onCompositionStart: null }),
        captured: keyOf({ onCompositionStartCapture: null })
      },
      dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
    },
    compositionUpdate: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onCompositionUpdate: null }),
        captured: keyOf({ onCompositionUpdateCapture: null })
      },
      dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
    }
  };

  // Track whether we've ever handled a keypress on the space key.
  var hasSpaceKeypress = false;

  /**
   * Return whether a native keypress event is assumed to be a command.
   * This is required because Firefox fires `keypress` events for key commands
   * (cut, copy, select-all, etc.) even though no character is inserted.
   */
  function isKeypressCommand(nativeEvent) {
    return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
    !(nativeEvent.ctrlKey && nativeEvent.altKey);
  }

  /**
   * Translate native top level events into event types.
   *
   * @param {string} topLevelType
   * @return {object}
   */
  function getCompositionEventType(topLevelType) {
    switch (topLevelType) {
      case topLevelTypes.topCompositionStart:
        return eventTypes.compositionStart;
      case topLevelTypes.topCompositionEnd:
        return eventTypes.compositionEnd;
      case topLevelTypes.topCompositionUpdate:
        return eventTypes.compositionUpdate;
    }
  }

  /**
   * Does our fallback best-guess model think this event signifies that
   * composition has begun?
   *
   * @param {string} topLevelType
   * @param {object} nativeEvent
   * @return {boolean}
   */
  function isFallbackCompositionStart(topLevelType, nativeEvent) {
    return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
  }

  /**
   * Does our fallback mode think that this event is the end of composition?
   *
   * @param {string} topLevelType
   * @param {object} nativeEvent
   * @return {boolean}
   */
  function isFallbackCompositionEnd(topLevelType, nativeEvent) {
    switch (topLevelType) {
      case topLevelTypes.topKeyUp:
        // Command keys insert or clear IME input.
        return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
      case topLevelTypes.topKeyDown:
        // Expect IME keyCode on each keydown. If we get any other
        // code we must have exited earlier.
        return nativeEvent.keyCode !== START_KEYCODE;
      case topLevelTypes.topKeyPress:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topBlur:
        // Events are not possible without cancelling IME.
        return true;
      default:
        return false;
    }
  }

  /**
   * Google Input Tools provides composition data via a CustomEvent,
   * with the `data` property populated in the `detail` object. If this
   * is available on the event object, use it. If not, this is a plain
   * composition event and we have nothing special to extract.
   *
   * @param {object} nativeEvent
   * @return {?string}
   */
  function getDataFromCustomEvent(nativeEvent) {
    var detail = nativeEvent.detail;
    if (typeof detail === 'object' && 'data' in detail) {
      return detail.data;
    }
    return null;
  }

  // Track the current IME composition fallback object, if any.
  var currentComposition = null;

  /**
   * @return {?object} A SyntheticCompositionEvent.
   */
  function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var eventType;
    var fallbackData;

    if (canUseCompositionEvent) {
      eventType = getCompositionEventType(topLevelType);
    } else if (!currentComposition) {
      if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
        eventType = eventTypes.compositionStart;
      }
    } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionEnd;
    }

    if (!eventType) {
      return null;
    }

    if (useFallbackCompositionData) {
      // The current composition is stored statically and must not be
      // overwritten while composition continues.
      if (!currentComposition && eventType === eventTypes.compositionStart) {
        currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
      } else if (eventType === eventTypes.compositionEnd) {
        if (currentComposition) {
          fallbackData = currentComposition.getData();
        }
      }
    }

    var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

    if (fallbackData) {
      // Inject data generated from fallback path into the synthetic event.
      // This matches the property of native CompositionEventInterface.
      event.data = fallbackData;
    } else {
      var customData = getDataFromCustomEvent(nativeEvent);
      if (customData !== null) {
        event.data = customData;
      }
    }

    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} nativeEvent Native browser event.
   * @return {?string} The string corresponding to this `beforeInput` event.
   */
  function getNativeBeforeInputChars(topLevelType, nativeEvent) {
    switch (topLevelType) {
      case topLevelTypes.topCompositionEnd:
        return getDataFromCustomEvent(nativeEvent);
      case topLevelTypes.topKeyPress:
        /**
         * If native `textInput` events are available, our goal is to make
         * use of them. However, there is a special case: the spacebar key.
         * In Webkit, preventing default on a spacebar `textInput` event
         * cancels character insertion, but it *also* causes the browser
         * to fall back to its default spacebar behavior of scrolling the
         * page.
         *
         * Tracking at:
         * https://code.google.com/p/chromium/issues/detail?id=355103
         *
         * To avoid this issue, use the keypress event as if no `textInput`
         * event is available.
         */
        var which = nativeEvent.which;
        if (which !== SPACEBAR_CODE) {
          return null;
        }

        hasSpaceKeypress = true;
        return SPACEBAR_CHAR;

      case topLevelTypes.topTextInput:
        // Record the characters to be added to the DOM.
        var chars = nativeEvent.data;

        // If it's a spacebar character, assume that we have already handled
        // it at the keypress level and bail immediately. Android Chrome
        // doesn't give us keycodes, so we need to blacklist it.
        if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
          return null;
        }

        return chars;

      default:
        // For other native event types, do nothing.
        return null;
    }
  }

  /**
   * For browsers that do not provide the `textInput` event, extract the
   * appropriate string to use for SyntheticInputEvent.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} nativeEvent Native browser event.
   * @return {?string} The fallback string for this `beforeInput` event.
   */
  function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
    // If we are currently composing (IME) and using a fallback to do so,
    // try to extract the composed characters from the fallback object.
    if (currentComposition) {
      if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
        var chars = currentComposition.getData();
        FallbackCompositionState.release(currentComposition);
        currentComposition = null;
        return chars;
      }
      return null;
    }

    switch (topLevelType) {
      case topLevelTypes.topPaste:
        // If a paste event occurs after a keypress, throw out the input
        // chars. Paste events should not lead to BeforeInput events.
        return null;
      case topLevelTypes.topKeyPress:
        /**
         * As of v27, Firefox may fire keypress events even when no character
         * will be inserted. A few possibilities:
         *
         * - `which` is `0`. Arrow keys, Esc key, etc.
         *
         * - `which` is the pressed key code, but no char is available.
         *   Ex: 'AltGr + d` in Polish. There is no modified character for
         *   this key combination and no character is inserted into the
         *   document, but FF fires the keypress for char code `100` anyway.
         *   No `input` event will occur.
         *
         * - `which` is the pressed key code, but a command combination is
         *   being used. Ex: `Cmd+C`. No character is inserted, and no
         *   `input` event will occur.
         */
        if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
          return String.fromCharCode(nativeEvent.which);
        }
        return null;
      case topLevelTypes.topCompositionEnd:
        return useFallbackCompositionData ? null : nativeEvent.data;
      default:
        return null;
    }
  }

  /**
   * Extract a SyntheticInputEvent for `beforeInput`, based on either native
   * `textInput` or fallback behavior.
   *
   * @return {?object} A SyntheticInputEvent.
   */
  function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var chars;

    if (canUseTextInputEvent) {
      chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
    } else {
      chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
    }

    // If no characters are being inserted, no BeforeInput event should
    // be fired.
    if (!chars) {
      return null;
    }

    var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

    event.data = chars;
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }

  /**
   * Create an `onBeforeInput` event to match
   * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
   *
   * This event plugin is based on the native `textInput` event
   * available in Chrome, Safari, Opera, and IE. This event fires after
   * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
   *
   * `beforeInput` is spec'd but not implemented in any browsers, and
   * the `input` event does not provide any useful information about what has
   * actually been added, contrary to the spec. Thus, `textInput` is the best
   * available event to identify the characters that have actually been inserted
   * into the target node.
   *
   * This plugin is also responsible for emitting `composition` events, thus
   * allowing us to share composition fallback code for both `beforeInput` and
   * `composition` event types.
   */
  var BeforeInputEventPlugin = {

    eventTypes: eventTypes,

    extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
    }
  };

  module.exports = BeforeInputEventPlugin;

/***/ },
/* 1216 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule CSSPropertyOperations
   */

  'use strict';

  var CSSProperty = __webpack_require__(486);
  var ExecutionEnvironment = __webpack_require__(109);
  var ReactInstrumentation = __webpack_require__(125);

  var camelizeStyleName = __webpack_require__(1049);
  var dangerousStyleValue = __webpack_require__(1272);
  var hyphenateStyleName = __webpack_require__(1055);
  var memoizeStringOnly = __webpack_require__(1059);
  var warning = __webpack_require__(94);

  var processStyleName = memoizeStringOnly(function (styleName) {
    return hyphenateStyleName(styleName);
  });

  var hasShorthandPropertyBug = false;
  var styleFloatAccessor = 'cssFloat';
  if (ExecutionEnvironment.canUseDOM) {
    var tempStyle = document.createElement('div').style;
    try {
      // IE8 throws "Invalid argument." if resetting shorthand style properties.
      tempStyle.font = '';
    } catch (e) {
      hasShorthandPropertyBug = true;
    }
    // IE8 only supports accessing cssFloat (standard) as styleFloat
    if (document.documentElement.style.cssFloat === undefined) {
      styleFloatAccessor = 'styleFloat';
    }
  }

  if (true) {
    // 'msTransform' is correct, but the other prefixes should be capitalized
    var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

    // style values shouldn't contain a semicolon
    var badStyleValueWithSemicolonPattern = /;\s*$/;

    var warnedStyleNames = {};
    var warnedStyleValues = {};
    var warnedForNaNValue = false;

    var warnHyphenatedStyleName = function (name, owner) {
      if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
        return;
      }

      warnedStyleNames[name] = true;
       true ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
    };

    var warnBadVendoredStyleName = function (name, owner) {
      if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
        return;
      }

      warnedStyleNames[name] = true;
       true ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
    };

    var warnStyleValueWithSemicolon = function (name, value, owner) {
      if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
        return;
      }

      warnedStyleValues[value] = true;
       true ? warning(false, 'Style property values shouldn\'t contain a semicolon.%s ' + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
    };

    var warnStyleValueIsNaN = function (name, value, owner) {
      if (warnedForNaNValue) {
        return;
      }

      warnedForNaNValue = true;
       true ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
    };

    var checkRenderMessage = function (owner) {
      if (owner) {
        var name = owner.getName();
        if (name) {
          return ' Check the render method of `' + name + '`.';
        }
      }
      return '';
    };

    /**
     * @param {string} name
     * @param {*} value
     * @param {ReactDOMComponent} component
     */
    var warnValidStyle = function (name, value, component) {
      var owner;
      if (component) {
        owner = component._currentElement._owner;
      }
      if (name.indexOf('-') > -1) {
        warnHyphenatedStyleName(name, owner);
      } else if (badVendoredStyleNamePattern.test(name)) {
        warnBadVendoredStyleName(name, owner);
      } else if (badStyleValueWithSemicolonPattern.test(value)) {
        warnStyleValueWithSemicolon(name, value, owner);
      }

      if (typeof value === 'number' && isNaN(value)) {
        warnStyleValueIsNaN(name, value, owner);
      }
    };
  }

  /**
   * Operations for dealing with CSS properties.
   */
  var CSSPropertyOperations = {

    /**
     * Serializes a mapping of style properties for use as inline styles:
     *
     *   > createMarkupForStyles({width: '200px', height: 0})
     *   "width:200px;height:0;"
     *
     * Undefined values are ignored so that declarative programming is easier.
     * The result should be HTML-escaped before insertion into the DOM.
     *
     * @param {object} styles
     * @param {ReactDOMComponent} component
     * @return {?string}
     */
    createMarkupForStyles: function (styles, component) {
      var serialized = '';
      for (var styleName in styles) {
        if (!styles.hasOwnProperty(styleName)) {
          continue;
        }
        var styleValue = styles[styleName];
        if (true) {
          warnValidStyle(styleName, styleValue, component);
        }
        if (styleValue != null) {
          serialized += processStyleName(styleName) + ':';
          serialized += dangerousStyleValue(styleName, styleValue, component) + ';';
        }
      }
      return serialized || null;
    },

    /**
     * Sets the value for multiple styles on a node.  If a value is specified as
     * '' (empty string), the corresponding style property will be unset.
     *
     * @param {DOMElement} node
     * @param {object} styles
     * @param {ReactDOMComponent} component
     */
    setValueForStyles: function (node, styles, component) {
      if (true) {
        ReactInstrumentation.debugTool.onNativeOperation(component._debugID, 'update styles', styles);
      }

      var style = node.style;
      for (var styleName in styles) {
        if (!styles.hasOwnProperty(styleName)) {
          continue;
        }
        if (true) {
          warnValidStyle(styleName, styles[styleName], component);
        }
        var styleValue = dangerousStyleValue(styleName, styles[styleName], component);
        if (styleName === 'float' || styleName === 'cssFloat') {
          styleName = styleFloatAccessor;
        }
        if (styleValue) {
          style[styleName] = styleValue;
        } else {
          var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
          if (expansion) {
            // Shorthand property that IE8 won't like unsetting, so unset each
            // component to placate it
            for (var individualStyleName in expansion) {
              style[individualStyleName] = '';
            }
          } else {
            style[styleName] = '';
          }
        }
      }
    }

  };

  module.exports = CSSPropertyOperations;

/***/ },
/* 1217 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ChangeEventPlugin
   */

  'use strict';

  var EventConstants = __webpack_require__(155);
  var EventPluginHub = __webpack_require__(220);
  var EventPropagators = __webpack_require__(221);
  var ExecutionEnvironment = __webpack_require__(109);
  var ReactDOMComponentTree = __webpack_require__(108);
  var ReactUpdates = __webpack_require__(147);
  var SyntheticEvent = __webpack_require__(156);

  var getEventTarget = __webpack_require__(369);
  var isEventSupported = __webpack_require__(371);
  var isTextInputElement = __webpack_require__(513);
  var keyOf = __webpack_require__(163);

  var topLevelTypes = EventConstants.topLevelTypes;

  var eventTypes = {
    change: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onChange: null }),
        captured: keyOf({ onChangeCapture: null })
      },
      dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
    }
  };

  /**
   * For IE shims
   */
  var activeElement = null;
  var activeElementInst = null;
  var activeElementValue = null;
  var activeElementValueProp = null;

  /**
   * SECTION: handle `change` event
   */
  function shouldUseChangeEvent(elem) {
    var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
  }

  var doesChangeEventBubble = false;
  if (ExecutionEnvironment.canUseDOM) {
    // See `handleChange` comment below
    doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
  }

  function manualDispatchChangeEvent(nativeEvent) {
    var event = SyntheticEvent.getPooled(eventTypes.change, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
    EventPropagators.accumulateTwoPhaseDispatches(event);

    // If change and propertychange bubbled, we'd just bind to it like all the
    // other events and have it go through ReactBrowserEventEmitter. Since it
    // doesn't, we manually listen for the events and so we have to enqueue and
    // process the abstract event manually.
    //
    // Batching is necessary here in order to ensure that all event handlers run
    // before the next rerender (including event handlers attached to ancestor
    // elements instead of directly on the input). Without this, controlled
    // components don't work properly in conjunction with event bubbling because
    // the component is rerendered and the value reverted before all the event
    // handlers can run. See https://github.com/facebook/react/issues/708.
    ReactUpdates.batchedUpdates(runEventInBatch, event);
  }

  function runEventInBatch(event) {
    EventPluginHub.enqueueEvents(event);
    EventPluginHub.processEventQueue(false);
  }

  function startWatchingForChangeEventIE8(target, targetInst) {
    activeElement = target;
    activeElementInst = targetInst;
    activeElement.attachEvent('onchange', manualDispatchChangeEvent);
  }

  function stopWatchingForChangeEventIE8() {
    if (!activeElement) {
      return;
    }
    activeElement.detachEvent('onchange', manualDispatchChangeEvent);
    activeElement = null;
    activeElementInst = null;
  }

  function getTargetInstForChangeEvent(topLevelType, targetInst) {
    if (topLevelType === topLevelTypes.topChange) {
      return targetInst;
    }
  }
  function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
    if (topLevelType === topLevelTypes.topFocus) {
      // stopWatching() should be a noop here but we call it just in case we
      // missed a blur event somehow.
      stopWatchingForChangeEventIE8();
      startWatchingForChangeEventIE8(target, targetInst);
    } else if (topLevelType === topLevelTypes.topBlur) {
      stopWatchingForChangeEventIE8();
    }
  }

  /**
   * SECTION: handle `input` event
   */
  var isInputEventSupported = false;
  if (ExecutionEnvironment.canUseDOM) {
    // IE9 claims to support the input event but fails to trigger it when
    // deleting text, so we ignore its input events.
    // IE10+ fire input events to often, such when a placeholder
    // changes or when an input with a placeholder is focused.
    isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 11);
  }

  /**
   * (For IE <=11) Replacement getter/setter for the `value` property that gets
   * set on the active element.
   */
  var newValueProp = {
    get: function () {
      return activeElementValueProp.get.call(this);
    },
    set: function (val) {
      // Cast to a string so we can do equality checks.
      activeElementValue = '' + val;
      activeElementValueProp.set.call(this, val);
    }
  };

  /**
   * (For IE <=11) Starts tracking propertychange events on the passed-in element
   * and override the value property so that we can distinguish user events from
   * value changes in JS.
   */
  function startWatchingForValueChange(target, targetInst) {
    activeElement = target;
    activeElementInst = targetInst;
    activeElementValue = target.value;
    activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

    // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
    // on DOM elements
    Object.defineProperty(activeElement, 'value', newValueProp);
    if (activeElement.attachEvent) {
      activeElement.attachEvent('onpropertychange', handlePropertyChange);
    } else {
      activeElement.addEventListener('propertychange', handlePropertyChange, false);
    }
  }

  /**
   * (For IE <=11) Removes the event listeners from the currently-tracked element,
   * if any exists.
   */
  function stopWatchingForValueChange() {
    if (!activeElement) {
      return;
    }

    // delete restores the original property definition
    delete activeElement.value;

    if (activeElement.detachEvent) {
      activeElement.detachEvent('onpropertychange', handlePropertyChange);
    } else {
      activeElement.removeEventListener('propertychange', handlePropertyChange, false);
    }

    activeElement = null;
    activeElementInst = null;
    activeElementValue = null;
    activeElementValueProp = null;
  }

  /**
   * (For IE <=11) Handles a propertychange event, sending a `change` event if
   * the value of the active element has changed.
   */
  function handlePropertyChange(nativeEvent) {
    if (nativeEvent.propertyName !== 'value') {
      return;
    }
    var value = nativeEvent.srcElement.value;
    if (value === activeElementValue) {
      return;
    }
    activeElementValue = value;

    manualDispatchChangeEvent(nativeEvent);
  }

  /**
   * If a `change` event should be fired, returns the target's ID.
   */
  function getTargetInstForInputEvent(topLevelType, targetInst) {
    if (topLevelType === topLevelTypes.topInput) {
      // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
      // what we want so fall through here and trigger an abstract event
      return targetInst;
    }
  }

  function handleEventsForInputEventIE(topLevelType, target, targetInst) {
    if (topLevelType === topLevelTypes.topFocus) {
      // In IE8, we can capture almost all .value changes by adding a
      // propertychange handler and looking for events with propertyName
      // equal to 'value'
      // In IE9-11, propertychange fires for most input events but is buggy and
      // doesn't fire when text is deleted, but conveniently, selectionchange
      // appears to fire in all of the remaining cases so we catch those and
      // forward the event if the value has changed
      // In either case, we don't want to call the event handler if the value
      // is changed from JS so we redefine a setter for `.value` that updates
      // our activeElementValue variable, allowing us to ignore those changes
      //
      // stopWatching() should be a noop here but we call it just in case we
      // missed a blur event somehow.
      stopWatchingForValueChange();
      startWatchingForValueChange(target, targetInst);
    } else if (topLevelType === topLevelTypes.topBlur) {
      stopWatchingForValueChange();
    }
  }

  // For IE8 and IE9.
  function getTargetInstForInputEventIE(topLevelType, targetInst) {
    if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
      // On the selectionchange event, the target is just document which isn't
      // helpful for us so just check activeElement instead.
      //
      // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
      // propertychange on the first input event after setting `value` from a
      // script and fires only keydown, keypress, keyup. Catching keyup usually
      // gets it and catching keydown lets us fire an event for the first
      // keystroke if user does a key repeat (it'll be a little delayed: right
      // before the second keystroke). Other input methods (e.g., paste) seem to
      // fire selectionchange normally.
      if (activeElement && activeElement.value !== activeElementValue) {
        activeElementValue = activeElement.value;
        return activeElementInst;
      }
    }
  }

  /**
   * SECTION: handle `click` event
   */
  function shouldUseClickEvent(elem) {
    // Use the `click` event to detect changes to checkbox and radio inputs.
    // This approach works across all browsers, whereas `change` does not fire
    // until `blur` in IE8.
    return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
  }

  function getTargetInstForClickEvent(topLevelType, targetInst) {
    if (topLevelType === topLevelTypes.topClick) {
      return targetInst;
    }
  }

  /**
   * This plugin creates an `onChange` event that normalizes change events
   * across form elements. This event fires at a time when it's possible to
   * change the element's value without seeing a flicker.
   *
   * Supported elements are:
   * - input (see `isTextInputElement`)
   * - textarea
   * - select
   */
  var ChangeEventPlugin = {

    eventTypes: eventTypes,

    extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

      var getTargetInstFunc, handleEventFunc;
      if (shouldUseChangeEvent(targetNode)) {
        if (doesChangeEventBubble) {
          getTargetInstFunc = getTargetInstForChangeEvent;
        } else {
          handleEventFunc = handleEventsForChangeEventIE8;
        }
      } else if (isTextInputElement(targetNode)) {
        if (isInputEventSupported) {
          getTargetInstFunc = getTargetInstForInputEvent;
        } else {
          getTargetInstFunc = getTargetInstForInputEventIE;
          handleEventFunc = handleEventsForInputEventIE;
        }
      } else if (shouldUseClickEvent(targetNode)) {
        getTargetInstFunc = getTargetInstForClickEvent;
      }

      if (getTargetInstFunc) {
        var inst = getTargetInstFunc(topLevelType, targetInst);
        if (inst) {
          var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, nativeEventTarget);
          event.type = 'change';
          EventPropagators.accumulateTwoPhaseDispatches(event);
          return event;
        }
      }

      if (handleEventFunc) {
        handleEventFunc(topLevelType, targetNode, targetInst);
      }
    }

  };

  module.exports = ChangeEventPlugin;

/***/ },
/* 1218 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule Danger
   */

  'use strict';

  var DOMLazyTree = __webpack_require__(200);
  var ExecutionEnvironment = __webpack_require__(109);

  var createNodesFromMarkup = __webpack_require__(1052);
  var emptyFunction = __webpack_require__(124);
  var getMarkupWrap = __webpack_require__(442);
  var invariant = __webpack_require__(91);

  var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
  var RESULT_INDEX_ATTR = 'data-danger-index';

  /**
   * Extracts the `nodeName` from a string of markup.
   *
   * NOTE: Extracting the `nodeName` does not require a regular expression match
   * because we make assumptions about React-generated markup (i.e. there are no
   * spaces surrounding the opening tag and there is at least one attribute).
   *
   * @param {string} markup String of markup.
   * @return {string} Node name of the supplied markup.
   * @see http://jsperf.com/extract-nodename
   */
  function getNodeName(markup) {
    return markup.substring(1, markup.indexOf(' '));
  }

  var Danger = {

    /**
     * Renders markup into an array of nodes. The markup is expected to render
     * into a list of root nodes. Also, the length of `resultList` and
     * `markupList` should be the same.
     *
     * @param {array<string>} markupList List of markup strings to render.
     * @return {array<DOMElement>} List of rendered nodes.
     * @internal
     */
    dangerouslyRenderMarkup: function (markupList) {
      !ExecutionEnvironment.canUseDOM ?  true ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : void 0;
      var nodeName;
      var markupByNodeName = {};
      // Group markup by `nodeName` if a wrap is necessary, else by '*'.
      for (var i = 0; i < markupList.length; i++) {
        !markupList[i] ?  true ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : void 0;
        nodeName = getNodeName(markupList[i]);
        nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
        markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
        markupByNodeName[nodeName][i] = markupList[i];
      }
      var resultList = [];
      var resultListAssignmentCount = 0;
      for (nodeName in markupByNodeName) {
        if (!markupByNodeName.hasOwnProperty(nodeName)) {
          continue;
        }
        var markupListByNodeName = markupByNodeName[nodeName];

        // This for-in loop skips the holes of the sparse array. The order of
        // iteration should follow the order of assignment, which happens to match
        // numerical index order, but we don't rely on that.
        var resultIndex;
        for (resultIndex in markupListByNodeName) {
          if (markupListByNodeName.hasOwnProperty(resultIndex)) {
            var markup = markupListByNodeName[resultIndex];

            // Push the requested markup with an additional RESULT_INDEX_ATTR
            // attribute.  If the markup does not start with a < character, it
            // will be discarded below (with an appropriate console.error).
            markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
            // This index will be parsed back out below.
            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
          }
        }

        // Render each group of markup with similar wrapping `nodeName`.
        var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.
        );

        for (var j = 0; j < renderNodes.length; ++j) {
          var renderNode = renderNodes[j];
          if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

            resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
            renderNode.removeAttribute(RESULT_INDEX_ATTR);

            !!resultList.hasOwnProperty(resultIndex) ?  true ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : void 0;

            resultList[resultIndex] = renderNode;

            // This should match resultList.length and markupList.length when
            // we're done.
            resultListAssignmentCount += 1;
          } else if (true) {
            console.error('Danger: Discarding unexpected node:', renderNode);
          }
        }
      }

      // Although resultList was populated out of order, it should now be a dense
      // array.
      !(resultListAssignmentCount === resultList.length) ?  true ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : void 0;

      !(resultList.length === markupList.length) ?  true ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : void 0;

      return resultList;
    },

    /**
     * Replaces a node with a string of markup at its current position within its
     * parent. The markup must render into a single root node.
     *
     * @param {DOMElement} oldChild Child node to replace.
     * @param {string} markup Markup to render in place of the child node.
     * @internal
     */
    dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
      !ExecutionEnvironment.canUseDOM ?  true ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : void 0;
      !markup ?  true ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : void 0;
      !(oldChild.nodeName !== 'HTML') ?  true ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : void 0;

      if (typeof markup === 'string') {
        var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
        oldChild.parentNode.replaceChild(newChild, oldChild);
      } else {
        DOMLazyTree.replaceChildWithTree(oldChild, markup);
      }
    }

  };

  module.exports = Danger;

/***/ },
/* 1219 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule DefaultEventPluginOrder
   */

  'use strict';

  var keyOf = __webpack_require__(163);

  /**
   * Module that is injectable into `EventPluginHub`, that specifies a
   * deterministic ordering of `EventPlugin`s. A convenient way to reason about
   * plugins, without having to package every one of them. This is better than
   * having plugins be ordered in the same order that they are injected because
   * that ordering would be influenced by the packaging order.
   * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
   * preventing default on events is convenient in `SimpleEventPlugin` handlers.
   */
  var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];

  module.exports = DefaultEventPluginOrder;

/***/ },
/* 1220 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule EnterLeaveEventPlugin
   */

  'use strict';

  var EventConstants = __webpack_require__(155);
  var EventPropagators = __webpack_require__(221);
  var ReactDOMComponentTree = __webpack_require__(108);
  var SyntheticMouseEvent = __webpack_require__(275);

  var keyOf = __webpack_require__(163);

  var topLevelTypes = EventConstants.topLevelTypes;

  var eventTypes = {
    mouseEnter: {
      registrationName: keyOf({ onMouseEnter: null }),
      dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
    },
    mouseLeave: {
      registrationName: keyOf({ onMouseLeave: null }),
      dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
    }
  };

  var EnterLeaveEventPlugin = {

    eventTypes: eventTypes,

    /**
     * For almost every interaction we care about, there will be both a top-level
     * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
     * we do not extract duplicate events. However, moving the mouse into the
     * browser from outside will not fire a `mouseout` event. In this case, we use
     * the `mouseover` top-level event.
     */
    extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
        return null;
      }
      if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
        // Must not be a mouse in or mouse out - ignoring.
        return null;
      }

      var win;
      if (nativeEventTarget.window === nativeEventTarget) {
        // `nativeEventTarget` is probably a window object.
        win = nativeEventTarget;
      } else {
        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
        var doc = nativeEventTarget.ownerDocument;
        if (doc) {
          win = doc.defaultView || doc.parentWindow;
        } else {
          win = window;
        }
      }

      var from;
      var to;
      if (topLevelType === topLevelTypes.topMouseOut) {
        from = targetInst;
        var related = nativeEvent.relatedTarget || nativeEvent.toElement;
        to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
      } else {
        // Moving to a node from outside the window.
        from = null;
        to = targetInst;
      }

      if (from === to) {
        // Nothing pertains to our managed components.
        return null;
      }

      var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
      var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);

      var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
      leave.type = 'mouseleave';
      leave.target = fromNode;
      leave.relatedTarget = toNode;

      var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
      enter.type = 'mouseenter';
      enter.target = toNode;
      enter.relatedTarget = fromNode;

      EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);

      return [leave, enter];
    }

  };

  module.exports = EnterLeaveEventPlugin;

/***/ },
/* 1221 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule FallbackCompositionState
   */

  'use strict';

  var _assign = __webpack_require__(100);

  var PooledClass = __webpack_require__(166);

  var getTextContentAccessor = __webpack_require__(511);

  /**
   * This helper class stores information about text content of a target node,
   * allowing comparison of content before and after a given event.
   *
   * Identify the node where selection currently begins, then observe
   * both its text content and its current position in the DOM. Since the
   * browser may natively replace the target node during composition, we can
   * use its position to find its replacement.
   *
   * @param {DOMEventTarget} root
   */
  function FallbackCompositionState(root) {
    this._root = root;
    this._startText = this.getText();
    this._fallbackText = null;
  }

  _assign(FallbackCompositionState.prototype, {
    destructor: function () {
      this._root = null;
      this._startText = null;
      this._fallbackText = null;
    },

    /**
     * Get current text of input.
     *
     * @return {string}
     */
    getText: function () {
      if ('value' in this._root) {
        return this._root.value;
      }
      return this._root[getTextContentAccessor()];
    },

    /**
     * Determine the differing substring between the initially stored
     * text content and the current content.
     *
     * @return {string}
     */
    getData: function () {
      if (this._fallbackText) {
        return this._fallbackText;
      }

      var start;
      var startValue = this._startText;
      var startLength = startValue.length;
      var end;
      var endValue = this.getText();
      var endLength = endValue.length;

      for (start = 0; start < startLength; start++) {
        if (startValue[start] !== endValue[start]) {
          break;
        }
      }

      var minEnd = startLength - start;
      for (end = 1; end <= minEnd; end++) {
        if (startValue[startLength - end] !== endValue[endLength - end]) {
          break;
        }
      }

      var sliceTail = end > 1 ? 1 - end : undefined;
      this._fallbackText = endValue.slice(start, sliceTail);
      return this._fallbackText;
    }
  });

  PooledClass.addPoolingTo(FallbackCompositionState);

  module.exports = FallbackCompositionState;

/***/ },
/* 1222 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule HTMLDOMPropertyConfig
   */

  'use strict';

  var DOMProperty = __webpack_require__(187);

  var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
  var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
  var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
  var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
  var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
  var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

  var HTMLDOMPropertyConfig = {
    isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
    Properties: {
      /**
       * Standard Properties
       */
      accept: 0,
      acceptCharset: 0,
      accessKey: 0,
      action: 0,
      allowFullScreen: HAS_BOOLEAN_VALUE,
      allowTransparency: 0,
      alt: 0,
      async: HAS_BOOLEAN_VALUE,
      autoComplete: 0,
      // autoFocus is polyfilled/normalized by AutoFocusUtils
      // autoFocus: HAS_BOOLEAN_VALUE,
      autoPlay: HAS_BOOLEAN_VALUE,
      capture: HAS_BOOLEAN_VALUE,
      cellPadding: 0,
      cellSpacing: 0,
      charSet: 0,
      challenge: 0,
      checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
      cite: 0,
      classID: 0,
      className: 0,
      cols: HAS_POSITIVE_NUMERIC_VALUE,
      colSpan: 0,
      content: 0,
      contentEditable: 0,
      contextMenu: 0,
      controls: HAS_BOOLEAN_VALUE,
      coords: 0,
      crossOrigin: 0,
      data: 0, // For `<object />` acts as `src`.
      dateTime: 0,
      'default': HAS_BOOLEAN_VALUE,
      defer: HAS_BOOLEAN_VALUE,
      dir: 0,
      disabled: HAS_BOOLEAN_VALUE,
      download: HAS_OVERLOADED_BOOLEAN_VALUE,
      draggable: 0,
      encType: 0,
      form: 0,
      formAction: 0,
      formEncType: 0,
      formMethod: 0,
      formNoValidate: HAS_BOOLEAN_VALUE,
      formTarget: 0,
      frameBorder: 0,
      headers: 0,
      height: 0,
      hidden: HAS_BOOLEAN_VALUE,
      high: 0,
      href: 0,
      hrefLang: 0,
      htmlFor: 0,
      httpEquiv: 0,
      icon: 0,
      id: 0,
      inputMode: 0,
      integrity: 0,
      is: 0,
      keyParams: 0,
      keyType: 0,
      kind: 0,
      label: 0,
      lang: 0,
      list: 0,
      loop: HAS_BOOLEAN_VALUE,
      low: 0,
      manifest: 0,
      marginHeight: 0,
      marginWidth: 0,
      max: 0,
      maxLength: 0,
      media: 0,
      mediaGroup: 0,
      method: 0,
      min: 0,
      minLength: 0,
      // Caution; `option.selected` is not updated if `select.multiple` is
      // disabled with `removeAttribute`.
      multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
      muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
      name: 0,
      nonce: 0,
      noValidate: HAS_BOOLEAN_VALUE,
      open: HAS_BOOLEAN_VALUE,
      optimum: 0,
      pattern: 0,
      placeholder: 0,
      poster: 0,
      preload: 0,
      profile: 0,
      radioGroup: 0,
      readOnly: HAS_BOOLEAN_VALUE,
      rel: 0,
      required: HAS_BOOLEAN_VALUE,
      reversed: HAS_BOOLEAN_VALUE,
      role: 0,
      rows: HAS_POSITIVE_NUMERIC_VALUE,
      rowSpan: HAS_NUMERIC_VALUE,
      sandbox: 0,
      scope: 0,
      scoped: HAS_BOOLEAN_VALUE,
      scrolling: 0,
      seamless: HAS_BOOLEAN_VALUE,
      selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
      shape: 0,
      size: HAS_POSITIVE_NUMERIC_VALUE,
      sizes: 0,
      span: HAS_POSITIVE_NUMERIC_VALUE,
      spellCheck: 0,
      src: 0,
      srcDoc: 0,
      srcLang: 0,
      srcSet: 0,
      start: HAS_NUMERIC_VALUE,
      step: 0,
      style: 0,
      summary: 0,
      tabIndex: 0,
      target: 0,
      title: 0,
      // Setting .type throws on non-<input> tags
      type: 0,
      useMap: 0,
      value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
      width: 0,
      wmode: 0,
      wrap: 0,

      /**
       * RDFa Properties
       */
      about: 0,
      datatype: 0,
      inlist: 0,
      prefix: 0,
      // property is also supported for OpenGraph in meta tags.
      property: 0,
      resource: 0,
      'typeof': 0,
      vocab: 0,

      /**
       * Non-standard Properties
       */
      // autoCapitalize and autoCorrect are supported in Mobile Safari for
      // keyboard hints.
      autoCapitalize: 0,
      autoCorrect: 0,
      // autoSave allows WebKit/Blink to persist values of input fields on page reloads
      autoSave: 0,
      // color is for Safari mask-icon link
      color: 0,
      // itemProp, itemScope, itemType are for
      // Microdata support. See http://schema.org/docs/gs.html
      itemProp: 0,
      itemScope: HAS_BOOLEAN_VALUE,
      itemType: 0,
      // itemID and itemRef are for Microdata support as well but
      // only specified in the WHATWG spec document. See
      // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
      itemID: 0,
      itemRef: 0,
      // results show looking glass icon and recent searches on input
      // search fields in WebKit/Blink
      results: 0,
      // IE-only attribute that specifies security restrictions on an iframe
      // as an alternative to the sandbox attribute on IE<10
      security: 0,
      // IE-only attribute that controls focus behavior
      unselectable: 0
    },
    DOMAttributeNames: {
      acceptCharset: 'accept-charset',
      className: 'class',
      htmlFor: 'for',
      httpEquiv: 'http-equiv'
    },
    DOMPropertyNames: {}
  };

  module.exports = HTMLDOMPropertyConfig;

/***/ },
/* 1223 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule React
   */

  'use strict';

  var _assign = __webpack_require__(100);

  var ReactChildren = __webpack_require__(489);
  var ReactComponent = __webpack_require__(491);
  var ReactClass = __webpack_require__(490);
  var ReactDOMFactories = __webpack_require__(1233);
  var ReactElement = __webpack_require__(135);
  var ReactElementValidator = __webpack_require__(495);
  var ReactPropTypes = __webpack_require__(504);
  var ReactVersion = __webpack_require__(506);

  var onlyChild = __webpack_require__(1278);
  var warning = __webpack_require__(94);

  var createElement = ReactElement.createElement;
  var createFactory = ReactElement.createFactory;
  var cloneElement = ReactElement.cloneElement;

  if (true) {
    createElement = ReactElementValidator.createElement;
    createFactory = ReactElementValidator.createFactory;
    cloneElement = ReactElementValidator.cloneElement;
  }

  var __spread = _assign;

  if (true) {
    var warned = false;
    __spread = function () {
       true ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
      warned = true;
      return _assign.apply(null, arguments);
    };
  }

  var React = {

    // Modern

    Children: {
      map: ReactChildren.map,
      forEach: ReactChildren.forEach,
      count: ReactChildren.count,
      toArray: ReactChildren.toArray,
      only: onlyChild
    },

    Component: ReactComponent,

    createElement: createElement,
    cloneElement: cloneElement,
    isValidElement: ReactElement.isValidElement,

    // Classic

    PropTypes: ReactPropTypes,
    createClass: ReactClass.createClass,
    createFactory: createFactory,
    createMixin: function (mixin) {
      // Currently a noop. Will be used to validate and trace mixins.
      return mixin;
    },

    // This looks DOM specific but these are actually isomorphic helpers
    // since they are just generating DOM strings.
    DOM: ReactDOMFactories,

    version: ReactVersion,

    // Deprecated hook for JSX spread, don't use this for anything.
    __spread: __spread
  };

  module.exports = React;

/***/ },
/* 1224 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2014-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactChildReconciler
   */

  'use strict';

  var ReactReconciler = __webpack_require__(201);

  var instantiateReactComponent = __webpack_require__(512);
  var KeyEscapeUtils = __webpack_require__(360);
  var shouldUpdateReactComponent = __webpack_require__(373);
  var traverseAllChildren = __webpack_require__(374);
  var warning = __webpack_require__(94);

  function instantiateChild(childInstances, child, name) {
    // We found a component instance.
    var keyUnique = childInstances[name] === undefined;
    if (true) {
       true ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', KeyEscapeUtils.unescape(name)) : void 0;
    }
    if (child != null && keyUnique) {
      childInstances[name] = instantiateReactComponent(child);
    }
  }

  /**
   * ReactChildReconciler provides helpers for initializing or updating a set of
   * children. Its output is suitable for passing it onto ReactMultiChild which
   * does diffed reordering and insertion.
   */
  var ReactChildReconciler = {
    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildNodes Nested child maps.
     * @return {?object} A set of child instances.
     * @internal
     */
    instantiateChildren: function (nestedChildNodes, transaction, context) {
      if (nestedChildNodes == null) {
        return null;
      }
      var childInstances = {};
      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
      return childInstances;
    },

    /**
     * Updates the rendered children and returns a new set of children.
     *
     * @param {?object} prevChildren Previously initialized set of children.
     * @param {?object} nextChildren Flat child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @param {object} context
     * @return {?object} A new set of child instances.
     * @internal
     */
    updateChildren: function (prevChildren, nextChildren, removedNodes, transaction, context) {
      // We currently don't have a way to track moves here but if we use iterators
      // instead of for..in we can zip the iterators and check if an item has
      // moved.
      // TODO: If nothing has changed, return the prevChildren object so that we
      // can quickly bailout if nothing has changed.
      if (!nextChildren && !prevChildren) {
        return;
      }
      var name;
      var prevChild;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        prevChild = prevChildren && prevChildren[name];
        var prevElement = prevChild && prevChild._currentElement;
        var nextElement = nextChildren[name];
        if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
          ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
          nextChildren[name] = prevChild;
        } else {
          if (prevChild) {
            removedNodes[name] = ReactReconciler.getNativeNode(prevChild);
            ReactReconciler.unmountComponent(prevChild, false);
          }
          // The child must be instantiated before it's mounted.
          var nextChildInstance = instantiateReactComponent(nextElement);
          nextChildren[name] = nextChildInstance;
        }
      }
      // Unmount children that are no longer present.
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
          prevChild = prevChildren[name];
          removedNodes[name] = ReactReconciler.getNativeNode(prevChild);
          ReactReconciler.unmountComponent(prevChild, false);
        }
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted.
     *
     * @param {?object} renderedChildren Previously initialized set of children.
     * @internal
     */
    unmountChildren: function (renderedChildren, safely) {
      for (var name in renderedChildren) {
        if (renderedChildren.hasOwnProperty(name)) {
          var renderedChild = renderedChildren[name];
          ReactReconciler.unmountComponent(renderedChild, safely);
        }
      }
    }

  };

  module.exports = ReactChildReconciler;

/***/ },
/* 1225 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2016-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactComponentTreeDevtool
   */

  'use strict';

  var invariant = __webpack_require__(91);

  var tree = {};
  var rootIDs = [];

  function updateTree(id, update) {
    if (!tree[id]) {
      tree[id] = {
        parentID: null,
        ownerID: null,
        text: null,
        childIDs: [],
        displayName: 'Unknown',
        isMounted: false,
        updateCount: 0
      };
    }
    update(tree[id]);
  }

  function purgeDeep(id) {
    var item = tree[id];
    if (item) {
      var childIDs = item.childIDs;

      delete tree[id];
      childIDs.forEach(purgeDeep);
    }
  }

  var ReactComponentTreeDevtool = {
    onSetDisplayName: function (id, displayName) {
      updateTree(id, function (item) {
        return item.displayName = displayName;
      });
    },
    onSetChildren: function (id, nextChildIDs) {
      updateTree(id, function (item) {
        var prevChildIDs = item.childIDs;
        item.childIDs = nextChildIDs;

        nextChildIDs.forEach(function (nextChildID) {
          var nextChild = tree[nextChildID];
          !nextChild ?  true ? invariant(false, 'Expected devtool events to fire for the child ' + 'before its parent includes it in onSetChildren().') : invariant(false) : void 0;
          !(nextChild.displayName != null) ?  true ? invariant(false, 'Expected onSetDisplayName() to fire for the child ' + 'before its parent includes it in onSetChildren().') : invariant(false) : void 0;
          !(nextChild.childIDs != null || nextChild.text != null) ?  true ? invariant(false, 'Expected onSetChildren() or onSetText() to fire for the child ' + 'before its parent includes it in onSetChildren().') : invariant(false) : void 0;
          !nextChild.isMounted ?  true ? invariant(false, 'Expected onMountComponent() to fire for the child ' + 'before its parent includes it in onSetChildren().') : invariant(false) : void 0;

          if (prevChildIDs.indexOf(nextChildID) === -1) {
            nextChild.parentID = id;
          }
        });
      });
    },
    onSetOwner: function (id, ownerID) {
      updateTree(id, function (item) {
        return item.ownerID = ownerID;
      });
    },
    onSetText: function (id, text) {
      updateTree(id, function (item) {
        return item.text = text;
      });
    },
    onMountComponent: function (id) {
      updateTree(id, function (item) {
        return item.isMounted = true;
      });
    },
    onMountRootComponent: function (id) {
      rootIDs.push(id);
    },
    onUpdateComponent: function (id) {
      updateTree(id, function (item) {
        return item.updateCount++;
      });
    },
    onUnmountComponent: function (id) {
      updateTree(id, function (item) {
        return item.isMounted = false;
      });
      rootIDs = rootIDs.filter(function (rootID) {
        return rootID !== id;
      });
    },
    purgeUnmountedComponents: function () {
      if (ReactComponentTreeDevtool._preventPurging) {
        // Should only be used for testing.
        return;
      }

      Object.keys(tree).filter(function (id) {
        return !tree[id].isMounted;
      }).forEach(purgeDeep);
    },
    isMounted: function (id) {
      var item = tree[id];
      return item ? item.isMounted : false;
    },
    getChildIDs: function (id) {
      var item = tree[id];
      return item ? item.childIDs : [];
    },
    getDisplayName: function (id) {
      var item = tree[id];
      return item ? item.displayName : 'Unknown';
    },
    getOwnerID: function (id) {
      var item = tree[id];
      return item ? item.ownerID : null;
    },
    getParentID: function (id) {
      var item = tree[id];
      return item ? item.parentID : null;
    },
    getText: function (id) {
      var item = tree[id];
      return item ? item.text : null;
    },
    getUpdateCount: function (id) {
      var item = tree[id];
      return item ? item.updateCount : 0;
    },
    getRootIDs: function () {
      return rootIDs;
    },
    getRegisteredIDs: function () {
      return Object.keys(tree);
    }
  };

  module.exports = ReactComponentTreeDevtool;

/***/ },
/* 1226 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactCompositeComponent
   */

  'use strict';

  var _assign = __webpack_require__(100);

  var ReactComponentEnvironment = __webpack_require__(362);
  var ReactCurrentOwner = __webpack_require__(167);
  var ReactElement = __webpack_require__(135);
  var ReactErrorUtils = __webpack_require__(363);
  var ReactInstanceMap = __webpack_require__(364);
  var ReactInstrumentation = __webpack_require__(125);
  var ReactNodeTypes = __webpack_require__(502);
  var ReactPropTypeLocations = __webpack_require__(274);
  var ReactPropTypeLocationNames = __webpack_require__(273);
  var ReactReconciler = __webpack_require__(201);
  var ReactUpdateQueue = __webpack_require__(505);

  var emptyObject = __webpack_require__(249);
  var invariant = __webpack_require__(91);
  var shouldUpdateReactComponent = __webpack_require__(373);
  var warning = __webpack_require__(94);

  function getDeclarationErrorAddendum(component) {
    var owner = component._currentElement._owner || null;
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  }

  function StatelessComponent(Component) {}
  StatelessComponent.prototype.render = function () {
    var Component = ReactInstanceMap.get(this)._currentElement.type;
    var element = Component(this.props, this.context, this.updater);
    warnIfInvalidElement(Component, element);
    return element;
  };

  function warnIfInvalidElement(Component, element) {
    if (true) {
       true ? warning(element === null || element === false || ReactElement.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
    }
  }

  function invokeComponentDidMountWithTimer() {
    var publicInstance = this._instance;
    if (this._debugID !== 0) {
      ReactInstrumentation.debugTool.onBeginLifeCycleTimer(this._debugID, 'componentDidMount');
    }
    publicInstance.componentDidMount();
    if (this._debugID !== 0) {
      ReactInstrumentation.debugTool.onEndLifeCycleTimer(this._debugID, 'componentDidMount');
    }
  }

  function invokeComponentDidUpdateWithTimer(prevProps, prevState, prevContext) {
    var publicInstance = this._instance;
    if (this._debugID !== 0) {
      ReactInstrumentation.debugTool.onBeginLifeCycleTimer(this._debugID, 'componentDidUpdate');
    }
    publicInstance.componentDidUpdate(prevProps, prevState, prevContext);
    if (this._debugID !== 0) {
      ReactInstrumentation.debugTool.onEndLifeCycleTimer(this._debugID, 'componentDidUpdate');
    }
  }

  function shouldConstruct(Component) {
    return Component.prototype && Component.prototype.isReactComponent;
  }

  /**
   * ------------------ The Life-Cycle of a Composite Component ------------------
   *
   * - constructor: Initialization of state. The instance is now retained.
   *   - componentWillMount
   *   - render
   *   - [children's constructors]
   *     - [children's componentWillMount and render]
   *     - [children's componentDidMount]
   *     - componentDidMount
   *
   *       Update Phases:
   *       - componentWillReceiveProps (only called if parent updated)
   *       - shouldComponentUpdate
   *         - componentWillUpdate
   *           - render
   *           - [children's constructors or receive props phases]
   *         - componentDidUpdate
   *
   *     - componentWillUnmount
   *     - [children's componentWillUnmount]
   *   - [children destroyed]
   * - (destroyed): The instance is now blank, released by React and ready for GC.
   *
   * -----------------------------------------------------------------------------
   */

  /**
   * An incrementing ID assigned to each component when it is mounted. This is
   * used to enforce the order in which `ReactUpdates` updates dirty components.
   *
   * @private
   */
  var nextMountID = 1;

  /**
   * @lends {ReactCompositeComponent.prototype}
   */
  var ReactCompositeComponentMixin = {

    /**
     * Base constructor for all composite component.
     *
     * @param {ReactElement} element
     * @final
     * @internal
     */
    construct: function (element) {
      this._currentElement = element;
      this._rootNodeID = null;
      this._instance = null;
      this._nativeParent = null;
      this._nativeContainerInfo = null;

      // See ReactUpdateQueue
      this._updateBatchNumber = null;
      this._pendingElement = null;
      this._pendingStateQueue = null;
      this._pendingReplaceState = false;
      this._pendingForceUpdate = false;

      this._renderedNodeType = null;
      this._renderedComponent = null;
      this._context = null;
      this._mountOrder = 0;
      this._topLevelWrapper = null;

      // See ReactUpdates and ReactUpdateQueue.
      this._pendingCallbacks = null;

      // ComponentWillUnmount shall only be called once
      this._calledComponentWillUnmount = false;
    },

    /**
     * Initializes the component, renders markup, and registers event listeners.
     *
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @param {?object} nativeParent
     * @param {?object} nativeContainerInfo
     * @param {?object} context
     * @return {?string} Rendered markup to be inserted into the DOM.
     * @final
     * @internal
     */
    mountComponent: function (transaction, nativeParent, nativeContainerInfo, context) {
      this._context = context;
      this._mountOrder = nextMountID++;
      this._nativeParent = nativeParent;
      this._nativeContainerInfo = nativeContainerInfo;

      var publicProps = this._processProps(this._currentElement.props);
      var publicContext = this._processContext(context);

      var Component = this._currentElement.type;

      // Initialize the public class
      var inst = this._constructComponent(publicProps, publicContext);
      var renderedElement;

      // Support functional components
      if (!shouldConstruct(Component) && (inst == null || inst.render == null)) {
        renderedElement = inst;
        warnIfInvalidElement(Component, renderedElement);
        !(inst === null || inst === false || ReactElement.isValidElement(inst)) ?  true ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : invariant(false) : void 0;
        inst = new StatelessComponent(Component);
      }

      if (true) {
        // This will throw later in _renderValidatedComponent, but add an early
        // warning now to help debugging
        if (inst.render == null) {
           true ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
        }

        var propsMutated = inst.props !== publicProps;
        var componentName = Component.displayName || Component.name || 'Component';

         true ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\'s constructor was passed.', componentName, componentName) : void 0;
      }

      // These should be set up in the constructor, but as a convenience for
      // simpler class abstractions, we set them up after the fact.
      inst.props = publicProps;
      inst.context = publicContext;
      inst.refs = emptyObject;
      inst.updater = ReactUpdateQueue;

      this._instance = inst;

      // Store a reference from the instance back to the internal representation
      ReactInstanceMap.set(inst, this);

      if (true) {
        // Since plain JS classes are defined without any special initialization
        // logic, we can not catch common errors early. Therefore, we have to
        // catch them here, at initialization time, instead.
         true ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
         true ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
         true ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
         true ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
         true ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
         true ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
         true ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
      }

      var initialState = inst.state;
      if (initialState === undefined) {
        inst.state = initialState = null;
      }
      !(typeof initialState === 'object' && !Array.isArray(initialState)) ?  true ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : void 0;

      this._pendingStateQueue = null;
      this._pendingReplaceState = false;
      this._pendingForceUpdate = false;

      var markup;
      if (inst.unstable_handleError) {
        markup = this.performInitialMountWithErrorHandling(renderedElement, nativeParent, nativeContainerInfo, transaction, context);
      } else {
        markup = this.performInitialMount(renderedElement, nativeParent, nativeContainerInfo, transaction, context);
      }

      if (inst.componentDidMount) {
        if (true) {
          transaction.getReactMountReady().enqueue(invokeComponentDidMountWithTimer, this);
        } else {
          transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
        }
      }

      return markup;
    },

    _constructComponent: function (publicProps, publicContext) {
      if (true) {
        ReactCurrentOwner.current = this;
        try {
          return this._constructComponentWithoutOwner(publicProps, publicContext);
        } finally {
          ReactCurrentOwner.current = null;
        }
      } else {
        return this._constructComponentWithoutOwner(publicProps, publicContext);
      }
    },

    _constructComponentWithoutOwner: function (publicProps, publicContext) {
      var Component = this._currentElement.type;
      var instanceOrElement;
      if (shouldConstruct(Component)) {
        if (true) {
          if (this._debugID !== 0) {
            ReactInstrumentation.debugTool.onBeginLifeCycleTimer(this._debugID, 'ctor');
          }
        }
        instanceOrElement = new Component(publicProps, publicContext, ReactUpdateQueue);
        if (true) {
          if (this._debugID !== 0) {
            ReactInstrumentation.debugTool.onEndLifeCycleTimer(this._debugID, 'ctor');
          }
        }
      } else {
        // This can still be an instance in case of factory components
        // but we'll count this as time spent rendering as the more common case.
        if (true) {
          if (this._debugID !== 0) {
            ReactInstrumentation.debugTool.onBeginLifeCycleTimer(this._debugID, 'render');
          }
        }
        instanceOrElement = Component(publicProps, publicContext, ReactUpdateQueue);
        if (true) {
          if (this._debugID !== 0) {
            ReactInstrumentation.debugTool.onEndLifeCycleTimer(this._debugID, 'render');
          }
        }
      }
      return instanceOrElement;
    },

    performInitialMountWithErrorHandling: function (renderedElement, nativeParent, nativeContainerInfo, transaction, context) {
      var markup;
      var checkpoint = transaction.checkpoint();
      try {
        markup = this.performInitialMount(renderedElement, nativeParent, nativeContainerInfo, transaction, context);
      } catch (e) {
        // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
        transaction.rollback(checkpoint);
        this._instance.unstable_handleError(e);
        if (this._pendingStateQueue) {
          this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
        }
        checkpoint = transaction.checkpoint();

        this._renderedComponent.unmountComponent(true);
        transaction.rollback(checkpoint);

        // Try again - we've informed the component about the error, so they can render an error message this time.
        // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
        markup = this.performInitialMount(renderedElement, nativeParent, nativeContainerInfo, transaction, context);
      }
      return markup;
    },

    performInitialMount: function (renderedElement, nativeParent, nativeContainerInfo, transaction, context) {
      var inst = this._instance;
      if (inst.componentWillMount) {
        if (true) {
          if (this._debugID !== 0) {
            ReactInstrumentation.debugTool.onBeginLifeCycleTimer(this._debugID, 'componentWillMount');
          }
        }
        inst.componentWillMount();
        if (true) {
          if (this._debugID !== 0) {
            ReactInstrumentation.debugTool.onEndLifeCycleTimer(this._debugID, 'componentWillMount');
          }
        }
        // When mounting, calls to `setState` by `componentWillMount` will set
        // `this._pendingStateQueue` without triggering a re-render.
        if (this._pendingStateQueue) {
          inst.state = this._processPendingState(inst.props, inst.context);
        }
      }

      // If not a stateless component, we now render
      if (renderedElement === undefined) {
        renderedElement = this._renderValidatedComponent();
      }

      this._renderedNodeType = ReactNodeTypes.getType(renderedElement);
      this._renderedComponent = this._instantiateReactComponent(renderedElement);

      var markup = ReactReconciler.mountComponent(this._renderedComponent, transaction, nativeParent, nativeContainerInfo, this._processChildContext(context));

      if (true) {
        if (this._debugID !== 0) {
          ReactInstrumentation.debugTool.onSetChildren(this._debugID, this._renderedComponent._debugID !== 0 ? [this._renderedComponent._debugID] : []);
        }
      }

      return markup;
    },

    getNativeNode: function () {
      return ReactReconciler.getNativeNode(this._renderedComponent);
    },

    /**
     * Releases any resources allocated by `mountComponent`.
     *
     * @final
     * @internal
     */
    unmountComponent: function (safely) {
      if (!this._renderedComponent) {
        return;
      }
      var inst = this._instance;

      if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
        inst._calledComponentWillUnmount = true;
        if (true) {
          if (this._debugID !== 0) {
            ReactInstrumentation.debugTool.onBeginLifeCycleTimer(this._debugID, 'componentWillUnmount');
          }
        }
        if (safely) {
          var name = this.getName() + '.componentWillUnmount()';
          ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
        } else {
          inst.componentWillUnmount();
        }
        if (true) {
          if (this._debugID !== 0) {
            ReactInstrumentation.debugTool.onEndLifeCycleTimer(this._debugID, 'componentWillUnmount');
          }
        }
      }

      if (this._renderedComponent) {
        ReactReconciler.unmountComponent(this._renderedComponent, safely);
        this._renderedNodeType = null;
        this._renderedComponent = null;
        this._instance = null;
      }

      // Reset pending fields
      // Even if this component is scheduled for another update in ReactUpdates,
      // it would still be ignored because these fields are reset.
      this._pendingStateQueue = null;
      this._pendingReplaceState = false;
      this._pendingForceUpdate = false;
      this._pendingCallbacks = null;
      this._pendingElement = null;

      // These fields do not really need to be reset since this object is no
      // longer accessible.
      this._context = null;
      this._rootNodeID = null;
      this._topLevelWrapper = null;

      // Delete the reference from the instance to this internal representation
      // which allow the internals to be properly cleaned up even if the user
      // leaks a reference to the public instance.
      ReactInstanceMap.remove(inst);

      // Some existing components rely on inst.props even after they've been
      // destroyed (in event handlers).
      // TODO: inst.props = null;
      // TODO: inst.state = null;
      // TODO: inst.context = null;
    },

    /**
     * Filters the context object to only contain keys specified in
     * `contextTypes`
     *
     * @param {object} context
     * @return {?object}
     * @private
     */
    _maskContext: function (context) {
      var Component = this._currentElement.type;
      var contextTypes = Component.contextTypes;
      if (!contextTypes) {
        return emptyObject;
      }
      var maskedContext = {};
      for (var contextName in contextTypes) {
        maskedContext[contextName] = context[contextName];
      }
      return maskedContext;
    },

    /**
     * Filters the context object to only contain keys specified in
     * `contextTypes`, and asserts that they are valid.
     *
     * @param {object} context
     * @return {?object}
     * @private
     */
    _processContext: function (context) {
      var maskedContext = this._maskContext(context);
      if (true) {
        var Component = this._currentElement.type;
        if (Component.contextTypes) {
          this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
        }
      }
      return maskedContext;
    },

    /**
     * @param {object} currentContext
     * @return {object}
     * @private
     */
    _processChildContext: function (currentContext) {
      var Component = this._currentElement.type;
      var inst = this._instance;
      if (true) {
        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
      }
      var childContext = inst.getChildContext && inst.getChildContext();
      if (true) {
        ReactInstrumentation.debugTool.onEndProcessingChildContext();
      }
      if (childContext) {
        !(typeof Component.childContextTypes === 'object') ?  true ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : void 0;
        if (true) {
          this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
        }
        for (var name in childContext) {
          !(name in Component.childContextTypes) ?  true ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : void 0;
        }
        return _assign({}, currentContext, childContext);
      }
      return currentContext;
    },

    /**
     * Processes props by setting default values for unspecified props and
     * asserting that the props are valid. Does not mutate its argument; returns
     * a new props object with defaults merged in.
     *
     * @param {object} newProps
     * @return {object}
     * @private
     */
    _processProps: function (newProps) {
      if (true) {
        var Component = this._currentElement.type;
        if (Component.propTypes) {
          this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);
        }
      }
      return newProps;
    },

    /**
     * Assert that the props are valid
     *
     * @param {object} propTypes Map of prop name to a ReactPropType
     * @param {object} props
     * @param {string} location e.g. "prop", "context", "child context"
     * @private
     */
    _checkPropTypes: function (propTypes, props, location) {
      // TODO: Stop validating prop types here and only use the element
      // validation.
      var componentName = this.getName();
      for (var propName in propTypes) {
        if (propTypes.hasOwnProperty(propName)) {
          var error;
          try {
            // This is intentionally an invariant that gets caught. It's the same
            // behavior as without this statement except with a better message.
            !(typeof propTypes[propName] === 'function') ?  true ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : void 0;
            error = propTypes[propName](props, propName, componentName, location);
          } catch (ex) {
            error = ex;
          }
          if (error instanceof Error) {
            // We may want to extend this logic for similar errors in
            // top-level render calls, so I'm abstracting it away into
            // a function to minimize refactoring in the future
            var addendum = getDeclarationErrorAddendum(this);

            if (location === ReactPropTypeLocations.prop) {
              // Preface gives us something to blacklist in warning module
               true ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : void 0;
            } else {
               true ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : void 0;
            }
          }
        }
      }
    },

    receiveComponent: function (nextElement, transaction, nextContext) {
      var prevElement = this._currentElement;
      var prevContext = this._context;

      this._pendingElement = null;

      this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
    },

    /**
     * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
     * is set, update the component.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    performUpdateIfNecessary: function (transaction) {
      if (this._pendingElement != null) {
        ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
      } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
        this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
      } else {
        this._updateBatchNumber = null;
      }
    },

    /**
     * Perform an update to a mounted component. The componentWillReceiveProps and
     * shouldComponentUpdate methods are called, then (assuming the update isn't
     * skipped) the remaining update lifecycle methods are called and the DOM
     * representation is updated.
     *
     * By default, this implements React's rendering and reconciliation algorithm.
     * Sophisticated clients may wish to override this.
     *
     * @param {ReactReconcileTransaction} transaction
     * @param {ReactElement} prevParentElement
     * @param {ReactElement} nextParentElement
     * @internal
     * @overridable
     */
    updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
      var inst = this._instance;
      var willReceive = false;
      var nextContext;
      var nextProps;

      // Determine if the context has changed or not
      if (this._context === nextUnmaskedContext) {
        nextContext = inst.context;
      } else {
        nextContext = this._processContext(nextUnmaskedContext);
        willReceive = true;
      }

      // Distinguish between a props update versus a simple state update
      if (prevParentElement === nextParentElement) {
        // Skip checking prop types again -- we don't read inst.props to avoid
        // warning for DOM component props in this upgrade
        nextProps = nextParentElement.props;
      } else {
        nextProps = this._processProps(nextParentElement.props);
        willReceive = true;
      }

      // An update here will schedule an update but immediately set
      // _pendingStateQueue which will ensure that any state updates gets
      // immediately reconciled instead of waiting for the next batch.
      if (willReceive && inst.componentWillReceiveProps) {
        if (true) {
          if (this._debugID !== 0) {
            ReactInstrumentation.debugTool.onBeginLifeCycleTimer(this._debugID, 'componentWillReceiveProps');
          }
        }
        inst.componentWillReceiveProps(nextProps, nextContext);
        if (true) {
          if (this._debugID !== 0) {
            ReactInstrumentation.debugTool.onEndLifeCycleTimer(this._debugID, 'componentWillReceiveProps');
          }
        }
      }

      var nextState = this._processPendingState(nextProps, nextContext);
      var shouldUpdate = true;

      if (!this._pendingForceUpdate && inst.shouldComponentUpdate) {
        if (true) {
          if (this._debugID !== 0) {
            ReactInstrumentation.debugTool.onBeginLifeCycleTimer(this._debugID, 'shouldComponentUpdate');
          }
        }
        shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
        if (true) {
          if (this._debugID !== 0) {
            ReactInstrumentation.debugTool.onEndLifeCycleTimer(this._debugID, 'shouldComponentUpdate');
          }
        }
      }

      if (true) {
         true ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
      }

      this._updateBatchNumber = null;
      if (shouldUpdate) {
        this._pendingForceUpdate = false;
        // Will set `this.props`, `this.state` and `this.context`.
        this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
      } else {
        // If it's determined that a component should not update, we still want
        // to set props and state but we shortcut the rest of the update.
        this._currentElement = nextParentElement;
        this._context = nextUnmaskedContext;
        inst.props = nextProps;
        inst.state = nextState;
        inst.context = nextContext;
      }
    },

    _processPendingState: function (props, context) {
      var inst = this._instance;
      var queue = this._pendingStateQueue;
      var replace = this._pendingReplaceState;
      this._pendingReplaceState = false;
      this._pendingStateQueue = null;

      if (!queue) {
        return inst.state;
      }

      if (replace && queue.length === 1) {
        return queue[0];
      }

      var nextState = _assign({}, replace ? queue[0] : inst.state);
      for (var i = replace ? 1 : 0; i < queue.length; i++) {
        var partial = queue[i];
        _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
      }

      return nextState;
    },

    /**
     * Merges new props and state, notifies delegate methods of update and
     * performs update.
     *
     * @param {ReactElement} nextElement Next element
     * @param {object} nextProps Next public object to set as properties.
     * @param {?object} nextState Next object to set as state.
     * @param {?object} nextContext Next public object to set as context.
     * @param {ReactReconcileTransaction} transaction
     * @param {?object} unmaskedContext
     * @private
     */
    _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
      var inst = this._instance;

      var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
      var prevProps;
      var prevState;
      var prevContext;
      if (hasComponentDidUpdate) {
        prevProps = inst.props;
        prevState = inst.state;
        prevContext = inst.context;
      }

      if (inst.componentWillUpdate) {
        if (true) {
          if (this._debugID !== 0) {
            ReactInstrumentation.debugTool.onBeginLifeCycleTimer(this._debugID, 'componentWillUpdate');
          }
        }
        inst.componentWillUpdate(nextProps, nextState, nextContext);
        if (true) {
          if (this._debugID !== 0) {
            ReactInstrumentation.debugTool.onEndLifeCycleTimer(this._debugID, 'componentWillUpdate');
          }
        }
      }

      this._currentElement = nextElement;
      this._context = unmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;

      this._updateRenderedComponent(transaction, unmaskedContext);

      if (hasComponentDidUpdate) {
        if (true) {
          transaction.getReactMountReady().enqueue(invokeComponentDidUpdateWithTimer.bind(this, prevProps, prevState, prevContext), this);
        } else {
          transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
        }
      }
    },

    /**
     * Call the component's `render` method and update the DOM accordingly.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    _updateRenderedComponent: function (transaction, context) {
      var prevComponentInstance = this._renderedComponent;
      var prevRenderedElement = prevComponentInstance._currentElement;
      var nextRenderedElement = this._renderValidatedComponent();
      if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
        ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
      } else {
        var oldNativeNode = ReactReconciler.getNativeNode(prevComponentInstance);
        ReactReconciler.unmountComponent(prevComponentInstance, false);

        this._renderedNodeType = ReactNodeTypes.getType(nextRenderedElement);
        this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);

        var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, transaction, this._nativeParent, this._nativeContainerInfo, this._processChildContext(context));

        if (true) {
          if (this._debugID !== 0) {
            ReactInstrumentation.debugTool.onSetChildren(this._debugID, this._renderedComponent._debugID !== 0 ? [this._renderedComponent._debugID] : []);
          }
        }

        this._replaceNodeWithMarkup(oldNativeNode, nextMarkup, prevComponentInstance);
      }
    },

    /**
     * Overridden in shallow rendering.
     *
     * @protected
     */
    _replaceNodeWithMarkup: function (oldNativeNode, nextMarkup, prevInstance) {
      ReactComponentEnvironment.replaceNodeWithMarkup(oldNativeNode, nextMarkup, prevInstance);
    },

    /**
     * @protected
     */
    _renderValidatedComponentWithoutOwnerOrContext: function () {
      var inst = this._instance;

      if (true) {
        if (this._debugID !== 0) {
          ReactInstrumentation.debugTool.onBeginLifeCycleTimer(this._debugID, 'render');
        }
      }
      var renderedComponent = inst.render();
      if (true) {
        if (this._debugID !== 0) {
          ReactInstrumentation.debugTool.onEndLifeCycleTimer(this._debugID, 'render');
        }
      }

      if (true) {
        // We allow auto-mocks to proceed as if they're returning null.
        if (renderedComponent === undefined && inst.render._isMockFunction) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          renderedComponent = null;
        }
      }

      return renderedComponent;
    },

    /**
     * @private
     */
    _renderValidatedComponent: function () {
      var renderedComponent;
      ReactCurrentOwner.current = this;
      try {
        renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
      } finally {
        ReactCurrentOwner.current = null;
      }
      !(
      // TODO: An `isValidNode` function would probably be more appropriate
      renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ?  true ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : void 0;

      return renderedComponent;
    },

    /**
     * Lazily allocates the refs object and stores `component` as `ref`.
     *
     * @param {string} ref Reference name.
     * @param {component} component Component to store as `ref`.
     * @final
     * @private
     */
    attachRef: function (ref, component) {
      var inst = this.getPublicInstance();
      !(inst != null) ?  true ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : void 0;
      var publicComponentInstance = component.getPublicInstance();
      if (true) {
        var componentName = component && component.getName ? component.getName() : 'a component';
         true ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
      }
      var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
      refs[ref] = publicComponentInstance;
    },

    /**
     * Detaches a reference name.
     *
     * @param {string} ref Name to dereference.
     * @final
     * @private
     */
    detachRef: function (ref) {
      var refs = this.getPublicInstance().refs;
      delete refs[ref];
    },

    /**
     * Get a text description of the component that can be used to identify it
     * in error messages.
     * @return {string} The name or null.
     * @internal
     */
    getName: function () {
      var type = this._currentElement.type;
      var constructor = this._instance && this._instance.constructor;
      return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
    },

    /**
     * Get the publicly accessible representation of this component - i.e. what
     * is exposed by refs and returned by render. Can be null for stateless
     * components.
     *
     * @return {ReactComponent} the public component instance.
     * @internal
     */
    getPublicInstance: function () {
      var inst = this._instance;
      if (inst instanceof StatelessComponent) {
        return null;
      }
      return inst;
    },

    // Stub
    _instantiateReactComponent: null

  };

  var ReactCompositeComponent = {

    Mixin: ReactCompositeComponentMixin

  };

  module.exports = ReactCompositeComponent;

/***/ },
/* 1227 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOM
   */

  /* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

  'use strict';

  var ReactDOMComponentTree = __webpack_require__(108);
  var ReactDefaultInjection = __webpack_require__(1246);
  var ReactMount = __webpack_require__(499);
  var ReactReconciler = __webpack_require__(201);
  var ReactUpdates = __webpack_require__(147);
  var ReactVersion = __webpack_require__(506);

  var findDOMNode = __webpack_require__(1273);
  var getNativeComponentFromComposite = __webpack_require__(510);
  var renderSubtreeIntoContainer = __webpack_require__(1280);
  var warning = __webpack_require__(94);

  ReactDefaultInjection.inject();

  var React = {
    findDOMNode: findDOMNode,
    render: ReactMount.render,
    unmountComponentAtNode: ReactMount.unmountComponentAtNode,
    version: ReactVersion,

    /* eslint-disable camelcase */
    unstable_batchedUpdates: ReactUpdates.batchedUpdates,
    unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
  };

  // Inject the runtime into a devtools global hook regardless of browser.
  // Allows for debugging when the hook is injected on the page.
  /* eslint-enable camelcase */
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
    __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
      ComponentTree: {
        getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
        getNodeFromInstance: function (inst) {
          // inst is an internal instance (but could be a composite)
          if (inst._renderedComponent) {
            inst = getNativeComponentFromComposite(inst);
          }
          if (inst) {
            return ReactDOMComponentTree.getNodeFromInstance(inst);
          } else {
            return null;
          }
        }
      },
      Mount: ReactMount,
      Reconciler: ReactReconciler
    });
  }

  if (true) {
    var ExecutionEnvironment = __webpack_require__(109);
    if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

      // First check if devtools is not installed
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
        // If we're in Chrome or Firefox, provide a download link if not installed.
        if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
          // Firefox does not have the issue with devtools loaded over file://
          var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
          console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
        }
      }

      var testFunc = function testFn() {};
       true ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, 'It looks like you\'re using a minified copy of the development build ' + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;

      // If we're in IE8, check to see if we are in compatibility mode and provide
      // information on preventing compatibility mode
      var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

       true ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;

      var expectedFeatures = [
      // shims
      Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim];

      for (var i = 0; i < expectedFeatures.length; i++) {
        if (!expectedFeatures[i]) {
           true ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
          break;
        }
      }
    }
  }

  module.exports = React;

/***/ },
/* 1228 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMButton
   */

  'use strict';

  var DisabledInputUtils = __webpack_require__(270);

  /**
   * Implements a <button> native component that does not receive mouse events
   * when `disabled` is set.
   */
  var ReactDOMButton = {
    getNativeProps: DisabledInputUtils.getNativeProps
  };

  module.exports = ReactDOMButton;

/***/ },
/* 1229 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMComponent
   */

  /* global hasOwnProperty:true */

  'use strict';

  var _assign = __webpack_require__(100);

  var AutoFocusUtils = __webpack_require__(1214);
  var CSSPropertyOperations = __webpack_require__(1216);
  var DOMLazyTree = __webpack_require__(200);
  var DOMNamespaces = __webpack_require__(488);
  var DOMProperty = __webpack_require__(187);
  var DOMPropertyOperations = __webpack_require__(358);
  var EventConstants = __webpack_require__(155);
  var EventPluginHub = __webpack_require__(220);
  var EventPluginRegistry = __webpack_require__(271);
  var ReactBrowserEventEmitter = __webpack_require__(272);
  var ReactComponentBrowserEnvironment = __webpack_require__(492);
  var ReactDOMButton = __webpack_require__(1228);
  var ReactDOMComponentFlags = __webpack_require__(493);
  var ReactDOMComponentTree = __webpack_require__(108);
  var ReactDOMInput = __webpack_require__(1236);
  var ReactDOMOption = __webpack_require__(1238);
  var ReactDOMSelect = __webpack_require__(494);
  var ReactDOMTextarea = __webpack_require__(1241);
  var ReactInstrumentation = __webpack_require__(125);
  var ReactMultiChild = __webpack_require__(1252);
  var ReactServerRenderingTransaction = __webpack_require__(1257);

  var emptyFunction = __webpack_require__(124);
  var escapeTextContentForBrowser = __webpack_require__(277);
  var invariant = __webpack_require__(91);
  var isEventSupported = __webpack_require__(371);
  var keyOf = __webpack_require__(163);
  var shallowEqual = __webpack_require__(443);
  var validateDOMNesting = __webpack_require__(375);
  var warning = __webpack_require__(94);

  var Flags = ReactDOMComponentFlags;
  var deleteListener = EventPluginHub.deleteListener;
  var getNode = ReactDOMComponentTree.getNodeFromInstance;
  var listenTo = ReactBrowserEventEmitter.listenTo;
  var registrationNameModules = EventPluginRegistry.registrationNameModules;

  // For quickly matching children type, to test if can be treated as content.
  var CONTENT_TYPES = { 'string': true, 'number': true };

  var STYLE = keyOf({ style: null });
  var HTML = keyOf({ __html: null });
  var RESERVED_PROPS = {
    children: null,
    dangerouslySetInnerHTML: null,
    suppressContentEditableWarning: null
  };

  // Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
  var DOC_FRAGMENT_TYPE = 11;

  function getDeclarationErrorAddendum(internalInstance) {
    if (internalInstance) {
      var owner = internalInstance._currentElement._owner || null;
      if (owner) {
        var name = owner.getName();
        if (name) {
          return ' This DOM node was rendered by `' + name + '`.';
        }
      }
    }
    return '';
  }

  function friendlyStringify(obj) {
    if (typeof obj === 'object') {
      if (Array.isArray(obj)) {
        return '[' + obj.map(friendlyStringify).join(', ') + ']';
      } else {
        var pairs = [];
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
            pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
          }
        }
        return '{' + pairs.join(', ') + '}';
      }
    } else if (typeof obj === 'string') {
      return JSON.stringify(obj);
    } else if (typeof obj === 'function') {
      return '[function object]';
    }
    // Differs from JSON.stringify in that undefined because undefined and that
    // inf and nan don't become null
    return String(obj);
  }

  var styleMutationWarning = {};

  function checkAndWarnForMutatedStyle(style1, style2, component) {
    if (style1 == null || style2 == null) {
      return;
    }
    if (shallowEqual(style1, style2)) {
      return;
    }

    var componentName = component._tag;
    var owner = component._currentElement._owner;
    var ownerName;
    if (owner) {
      ownerName = owner.getName();
    }

    var hash = ownerName + '|' + componentName;

    if (styleMutationWarning.hasOwnProperty(hash)) {
      return;
    }

    styleMutationWarning[hash] = true;

     true ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
  }

  /**
   * @param {object} component
   * @param {?object} props
   */
  function assertValidProps(component, props) {
    if (!props) {
      return;
    }
    // Note the use of `==` which checks for null or undefined.
    if (voidElementTags[component._tag]) {
      !(props.children == null && props.dangerouslySetInnerHTML == null) ?  true ? invariant(false, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : invariant(false) : void 0;
    }
    if (props.dangerouslySetInnerHTML != null) {
      !(props.children == null) ?  true ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : void 0;
      !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ?  true ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : void 0;
    }
    if (true) {
       true ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
       true ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
       true ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
    }
    !(props.style == null || typeof props.style === 'object') ?  true ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : void 0;
  }

  function enqueuePutListener(inst, registrationName, listener, transaction) {
    if (transaction instanceof ReactServerRenderingTransaction) {
      return;
    }
    if (true) {
      // IE8 has no API for event capturing and the `onScroll` event doesn't
      // bubble.
       true ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : void 0;
    }
    var containerInfo = inst._nativeContainerInfo;
    var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
    var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
    listenTo(registrationName, doc);
    transaction.getReactMountReady().enqueue(putListener, {
      inst: inst,
      registrationName: registrationName,
      listener: listener
    });
  }

  function putListener() {
    var listenerToPut = this;
    EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
  }

  function optionPostMount() {
    var inst = this;
    ReactDOMOption.postMountWrapper(inst);
  }

  var setContentChildForInstrumentation = emptyFunction;
  if (true) {
    setContentChildForInstrumentation = function (contentToUse) {
      var debugID = this._debugID;
      var contentDebugID = debugID + '#text';
      this._contentDebugID = contentDebugID;
      ReactInstrumentation.debugTool.onSetDisplayName(contentDebugID, '#text');
      ReactInstrumentation.debugTool.onSetText(contentDebugID, '' + contentToUse);
      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
    };
  }

  // There are so many media events, it makes sense to just
  // maintain a list rather than create a `trapBubbledEvent` for each
  var mediaEvents = {
    topAbort: 'abort',
    topCanPlay: 'canplay',
    topCanPlayThrough: 'canplaythrough',
    topDurationChange: 'durationchange',
    topEmptied: 'emptied',
    topEncrypted: 'encrypted',
    topEnded: 'ended',
    topError: 'error',
    topLoadedData: 'loadeddata',
    topLoadedMetadata: 'loadedmetadata',
    topLoadStart: 'loadstart',
    topPause: 'pause',
    topPlay: 'play',
    topPlaying: 'playing',
    topProgress: 'progress',
    topRateChange: 'ratechange',
    topSeeked: 'seeked',
    topSeeking: 'seeking',
    topStalled: 'stalled',
    topSuspend: 'suspend',
    topTimeUpdate: 'timeupdate',
    topVolumeChange: 'volumechange',
    topWaiting: 'waiting'
  };

  function trapBubbledEventsLocal() {
    var inst = this;
    // If a component renders to null or if another component fatals and causes
    // the state of the tree to be corrupted, `node` here can be null.
    !inst._rootNodeID ?  true ? invariant(false, 'Must be mounted to trap events') : invariant(false) : void 0;
    var node = getNode(inst);
    !node ?  true ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : void 0;

    switch (inst._tag) {
      case 'iframe':
      case 'object':
        inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
        break;
      case 'video':
      case 'audio':

        inst._wrapperState.listeners = [];
        // Create listener for each media event
        for (var event in mediaEvents) {
          if (mediaEvents.hasOwnProperty(event)) {
            inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
          }
        }

        break;
      case 'img':
        inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
        break;
      case 'form':
        inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
        break;
      case 'input':
      case 'select':
      case 'textarea':
        inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topInvalid, 'invalid', node)];
        break;
    }
  }

  function postUpdateSelectWrapper() {
    ReactDOMSelect.postUpdateWrapper(this);
  }

  // For HTML, certain tags should omit their close tag. We keep a whitelist for
  // those special-case tags.

  var omittedCloseTags = {
    'area': true,
    'base': true,
    'br': true,
    'col': true,
    'embed': true,
    'hr': true,
    'img': true,
    'input': true,
    'keygen': true,
    'link': true,
    'meta': true,
    'param': true,
    'source': true,
    'track': true,
    'wbr': true
  };

  // NOTE: menuitem's close tag should be omitted, but that causes problems.
  var newlineEatingTags = {
    'listing': true,
    'pre': true,
    'textarea': true
  };

  // For HTML, certain tags cannot have children. This has the same purpose as
  // `omittedCloseTags` except that `menuitem` should still have its closing tag.

  var voidElementTags = _assign({
    'menuitem': true
  }, omittedCloseTags);

  // We accept any tag to be rendered but since this gets injected into arbitrary
  // HTML, we want to make sure that it's a safe tag.
  // http://www.w3.org/TR/REC-xml/#NT-Name

  var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
  var validatedTagCache = {};
  var hasOwnProperty = {}.hasOwnProperty;

  function validateDangerousTag(tag) {
    if (!hasOwnProperty.call(validatedTagCache, tag)) {
      !VALID_TAG_REGEX.test(tag) ?  true ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : void 0;
      validatedTagCache[tag] = true;
    }
  }

  function isCustomComponent(tagName, props) {
    return tagName.indexOf('-') >= 0 || props.is != null;
  }

  var globalIdCounter = 1;

  /**
   * Creates a new React class that is idempotent and capable of containing other
   * React components. It accepts event listeners and DOM properties that are
   * valid according to `DOMProperty`.
   *
   *  - Event listeners: `onClick`, `onMouseDown`, etc.
   *  - DOM properties: `className`, `name`, `title`, etc.
   *
   * The `style` property functions differently from the DOM API. It accepts an
   * object mapping of style properties to values.
   *
   * @constructor ReactDOMComponent
   * @extends ReactMultiChild
   */
  function ReactDOMComponent(element) {
    var tag = element.type;
    validateDangerousTag(tag);
    this._currentElement = element;
    this._tag = tag.toLowerCase();
    this._namespaceURI = null;
    this._renderedChildren = null;
    this._previousStyle = null;
    this._previousStyleCopy = null;
    this._nativeNode = null;
    this._nativeParent = null;
    this._rootNodeID = null;
    this._domID = null;
    this._nativeContainerInfo = null;
    this._wrapperState = null;
    this._topLevelWrapper = null;
    this._flags = 0;
    if (true) {
      this._ancestorInfo = null;
      this._contentDebugID = null;
    }
  }

  ReactDOMComponent.displayName = 'ReactDOMComponent';

  ReactDOMComponent.Mixin = {

    /**
     * Generates root tag markup then recurses. This method has side effects and
     * is not idempotent.
     *
     * @internal
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @param {?ReactDOMComponent} the containing DOM component instance
     * @param {?object} info about the native container
     * @param {object} context
     * @return {string} The computed markup.
     */
    mountComponent: function (transaction, nativeParent, nativeContainerInfo, context) {
      this._rootNodeID = globalIdCounter++;
      this._domID = nativeContainerInfo._idCounter++;
      this._nativeParent = nativeParent;
      this._nativeContainerInfo = nativeContainerInfo;

      var props = this._currentElement.props;

      switch (this._tag) {
        case 'iframe':
        case 'object':
        case 'img':
        case 'form':
        case 'video':
        case 'audio':
          this._wrapperState = {
            listeners: null
          };
          transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
          break;
        case 'button':
          props = ReactDOMButton.getNativeProps(this, props, nativeParent);
          break;
        case 'input':
          ReactDOMInput.mountWrapper(this, props, nativeParent);
          props = ReactDOMInput.getNativeProps(this, props);
          transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
          break;
        case 'option':
          ReactDOMOption.mountWrapper(this, props, nativeParent);
          props = ReactDOMOption.getNativeProps(this, props);
          break;
        case 'select':
          ReactDOMSelect.mountWrapper(this, props, nativeParent);
          props = ReactDOMSelect.getNativeProps(this, props);
          transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
          break;
        case 'textarea':
          ReactDOMTextarea.mountWrapper(this, props, nativeParent);
          props = ReactDOMTextarea.getNativeProps(this, props);
          transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
          break;
      }

      assertValidProps(this, props);

      // We create tags in the namespace of their parent container, except HTML
      // tags get no namespace.
      var namespaceURI;
      var parentTag;
      if (nativeParent != null) {
        namespaceURI = nativeParent._namespaceURI;
        parentTag = nativeParent._tag;
      } else if (nativeContainerInfo._tag) {
        namespaceURI = nativeContainerInfo._namespaceURI;
        parentTag = nativeContainerInfo._tag;
      }
      if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
        namespaceURI = DOMNamespaces.html;
      }
      if (namespaceURI === DOMNamespaces.html) {
        if (this._tag === 'svg') {
          namespaceURI = DOMNamespaces.svg;
        } else if (this._tag === 'math') {
          namespaceURI = DOMNamespaces.mathml;
        }
      }
      this._namespaceURI = namespaceURI;

      if (true) {
        var parentInfo;
        if (nativeParent != null) {
          parentInfo = nativeParent._ancestorInfo;
        } else if (nativeContainerInfo._tag) {
          parentInfo = nativeContainerInfo._ancestorInfo;
        }
        if (parentInfo) {
          // parentInfo should always be present except for the top-level
          // component when server rendering
          validateDOMNesting(this._tag, this, parentInfo);
        }
        this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
      }

      var mountImage;
      if (transaction.useCreateElement) {
        var ownerDocument = nativeContainerInfo._ownerDocument;
        var el;
        if (namespaceURI === DOMNamespaces.html) {
          if (this._tag === 'script') {
            // Create the script via .innerHTML so its "parser-inserted" flag is
            // set to true and it does not execute
            var div = ownerDocument.createElement('div');
            var type = this._currentElement.type;
            div.innerHTML = '<' + type + '></' + type + '>';
            el = div.removeChild(div.firstChild);
          } else {
            el = ownerDocument.createElement(this._currentElement.type, props.is || null);
          }
        } else {
          el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
        }
        ReactDOMComponentTree.precacheNode(this, el);
        this._flags |= Flags.hasCachedChildNodes;
        if (!this._nativeParent) {
          DOMPropertyOperations.setAttributeForRoot(el);
        }
        this._updateDOMProperties(null, props, transaction);
        var lazyTree = DOMLazyTree(el);
        this._createInitialChildren(transaction, props, context, lazyTree);
        mountImage = lazyTree;
      } else {
        var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
        var tagContent = this._createContentMarkup(transaction, props, context);
        if (!tagContent && omittedCloseTags[this._tag]) {
          mountImage = tagOpen + '/>';
        } else {
          mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
        }
      }

      switch (this._tag) {
        case 'button':
        case 'input':
        case 'select':
        case 'textarea':
          if (props.autoFocus) {
            transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
          }
          break;
        case 'option':
          transaction.getReactMountReady().enqueue(optionPostMount, this);
      }

      return mountImage;
    },

    /**
     * Creates markup for the open tag and all attributes.
     *
     * This method has side effects because events get registered.
     *
     * Iterating over object properties is faster than iterating over arrays.
     * @see http://jsperf.com/obj-vs-arr-iteration
     *
     * @private
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @param {object} props
     * @return {string} Markup of opening tag.
     */
    _createOpenTagMarkupAndPutListeners: function (transaction, props) {
      var ret = '<' + this._currentElement.type;

      for (var propKey in props) {
        if (!props.hasOwnProperty(propKey)) {
          continue;
        }
        var propValue = props[propKey];
        if (propValue == null) {
          continue;
        }
        if (registrationNameModules.hasOwnProperty(propKey)) {
          if (propValue) {
            enqueuePutListener(this, propKey, propValue, transaction);
          }
        } else {
          if (propKey === STYLE) {
            if (propValue) {
              if (true) {
                // See `_updateDOMProperties`. style block
                this._previousStyle = propValue;
              }
              propValue = this._previousStyleCopy = _assign({}, props.style);
            }
            propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
          }
          var markup = null;
          if (this._tag != null && isCustomComponent(this._tag, props)) {
            if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
              markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
            }
          } else {
            markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
          }
          if (markup) {
            ret += ' ' + markup;
          }
        }
      }

      // For static pages, no need to put React ID and checksum. Saves lots of
      // bytes.
      if (transaction.renderToStaticMarkup) {
        return ret;
      }

      if (!this._nativeParent) {
        ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
      }
      ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
      return ret;
    },

    /**
     * Creates markup for the content between the tags.
     *
     * @private
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @param {object} props
     * @param {object} context
     * @return {string} Content markup.
     */
    _createContentMarkup: function (transaction, props, context) {
      var ret = '';

      // Intentional use of != to avoid catching zero/false.
      var innerHTML = props.dangerouslySetInnerHTML;
      if (innerHTML != null) {
        if (innerHTML.__html != null) {
          ret = innerHTML.__html;
        }
      } else {
        var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
        var childrenToUse = contentToUse != null ? null : props.children;
        if (contentToUse != null) {
          // TODO: Validate that text is allowed as a child of this node
          ret = escapeTextContentForBrowser(contentToUse);
          if (true) {
            setContentChildForInstrumentation.call(this, contentToUse);
          }
        } else if (childrenToUse != null) {
          var mountImages = this.mountChildren(childrenToUse, transaction, context);
          ret = mountImages.join('');
        }
      }
      if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
        // text/html ignores the first character in these tags if it's a newline
        // Prefer to break application/xml over text/html (for now) by adding
        // a newline specifically to get eaten by the parser. (Alternately for
        // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
        // \r is normalized out by HTMLTextAreaElement#value.)
        // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
        // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
        // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
        // See: Parsing of "textarea" "listing" and "pre" elements
        //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
        return '\n' + ret;
      } else {
        return ret;
      }
    },

    _createInitialChildren: function (transaction, props, context, lazyTree) {
      // Intentional use of != to avoid catching zero/false.
      var innerHTML = props.dangerouslySetInnerHTML;
      if (innerHTML != null) {
        if (innerHTML.__html != null) {
          DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
        }
      } else {
        var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
        var childrenToUse = contentToUse != null ? null : props.children;
        if (contentToUse != null) {
          // TODO: Validate that text is allowed as a child of this node
          if (true) {
            setContentChildForInstrumentation.call(this, contentToUse);
          }
          DOMLazyTree.queueText(lazyTree, contentToUse);
        } else if (childrenToUse != null) {
          var mountImages = this.mountChildren(childrenToUse, transaction, context);
          for (var i = 0; i < mountImages.length; i++) {
            DOMLazyTree.queueChild(lazyTree, mountImages[i]);
          }
        }
      }
    },

    /**
     * Receives a next element and updates the component.
     *
     * @internal
     * @param {ReactElement} nextElement
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @param {object} context
     */
    receiveComponent: function (nextElement, transaction, context) {
      var prevElement = this._currentElement;
      this._currentElement = nextElement;
      this.updateComponent(transaction, prevElement, nextElement, context);
    },

    /**
     * Updates a native DOM component after it has already been allocated and
     * attached to the DOM. Reconciles the root DOM node, then recurses.
     *
     * @param {ReactReconcileTransaction} transaction
     * @param {ReactElement} prevElement
     * @param {ReactElement} nextElement
     * @internal
     * @overridable
     */
    updateComponent: function (transaction, prevElement, nextElement, context) {
      var lastProps = prevElement.props;
      var nextProps = this._currentElement.props;

      switch (this._tag) {
        case 'button':
          lastProps = ReactDOMButton.getNativeProps(this, lastProps);
          nextProps = ReactDOMButton.getNativeProps(this, nextProps);
          break;
        case 'input':
          ReactDOMInput.updateWrapper(this);
          lastProps = ReactDOMInput.getNativeProps(this, lastProps);
          nextProps = ReactDOMInput.getNativeProps(this, nextProps);
          break;
        case 'option':
          lastProps = ReactDOMOption.getNativeProps(this, lastProps);
          nextProps = ReactDOMOption.getNativeProps(this, nextProps);
          break;
        case 'select':
          lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
          nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
          break;
        case 'textarea':
          ReactDOMTextarea.updateWrapper(this);
          lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
          nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
          break;
      }

      assertValidProps(this, nextProps);
      this._updateDOMProperties(lastProps, nextProps, transaction);
      this._updateDOMChildren(lastProps, nextProps, transaction, context);

      if (this._tag === 'select') {
        // <select> value update needs to occur after <option> children
        // reconciliation
        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
      }
    },

    /**
     * Reconciles the properties by detecting differences in property values and
     * updating the DOM as necessary. This function is probably the single most
     * critical path for performance optimization.
     *
     * TODO: Benchmark whether checking for changed values in memory actually
     *       improves performance (especially statically positioned elements).
     * TODO: Benchmark the effects of putting this at the top since 99% of props
     *       do not change for a given reconciliation.
     * TODO: Benchmark areas that can be improved with caching.
     *
     * @private
     * @param {object} lastProps
     * @param {object} nextProps
     * @param {?DOMElement} node
     */
    _updateDOMProperties: function (lastProps, nextProps, transaction) {
      var propKey;
      var styleName;
      var styleUpdates;
      for (propKey in lastProps) {
        if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
          continue;
        }
        if (propKey === STYLE) {
          var lastStyle = this._previousStyleCopy;
          for (styleName in lastStyle) {
            if (lastStyle.hasOwnProperty(styleName)) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          this._previousStyleCopy = null;
        } else if (registrationNameModules.hasOwnProperty(propKey)) {
          if (lastProps[propKey]) {
            // Only call deleteListener if there was a listener previously or
            // else willDeleteListener gets called when there wasn't actually a
            // listener (e.g., onClick={null})
            deleteListener(this, propKey);
          }
        } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
          DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
        }
      }
      for (propKey in nextProps) {
        var nextProp = nextProps[propKey];
        var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
        if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
          continue;
        }
        if (propKey === STYLE) {
          if (nextProp) {
            if (true) {
              checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
              this._previousStyle = nextProp;
            }
            nextProp = this._previousStyleCopy = _assign({}, nextProp);
          } else {
            this._previousStyleCopy = null;
          }
          if (lastProp) {
            // Unset styles on `lastProp` but not on `nextProp`.
            for (styleName in lastProp) {
              if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                styleUpdates = styleUpdates || {};
                styleUpdates[styleName] = '';
              }
            }
            // Update styles that changed since `lastProp`.
            for (styleName in nextProp) {
              if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                styleUpdates = styleUpdates || {};
                styleUpdates[styleName] = nextProp[styleName];
              }
            }
          } else {
            // Relies on `updateStylesByID` not mutating `styleUpdates`.
            styleUpdates = nextProp;
          }
        } else if (registrationNameModules.hasOwnProperty(propKey)) {
          if (nextProp) {
            enqueuePutListener(this, propKey, nextProp, transaction);
          } else if (lastProp) {
            deleteListener(this, propKey);
          }
        } else if (isCustomComponent(this._tag, nextProps)) {
          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
            DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
          }
        } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
          var node = getNode(this);
          // If we're updating to null or undefined, we should remove the property
          // from the DOM node instead of inadvertently setting to a string. This
          // brings us in line with the same behavior we have on initial render.
          if (nextProp != null) {
            DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
          } else {
            DOMPropertyOperations.deleteValueForProperty(node, propKey);
          }
        }
      }
      if (styleUpdates) {
        CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
      }
    },

    /**
     * Reconciles the children with the various properties that affect the
     * children content.
     *
     * @param {object} lastProps
     * @param {object} nextProps
     * @param {ReactReconcileTransaction} transaction
     * @param {object} context
     */
    _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
      var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
      var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

      var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
      var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

      // Note the use of `!=` which checks for null or undefined.
      var lastChildren = lastContent != null ? null : lastProps.children;
      var nextChildren = nextContent != null ? null : nextProps.children;

      // If we're switching from children to content/html or vice versa, remove
      // the old content
      var lastHasContentOrHtml = lastContent != null || lastHtml != null;
      var nextHasContentOrHtml = nextContent != null || nextHtml != null;
      if (lastChildren != null && nextChildren == null) {
        this.updateChildren(null, transaction, context);
      } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
        this.updateTextContent('');
        if (true) {
          ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
        }
      }

      if (nextContent != null) {
        if (lastContent !== nextContent) {
          this.updateTextContent('' + nextContent);
          if (true) {
            this._contentDebugID = this._debugID + '#text';
            setContentChildForInstrumentation.call(this, nextContent);
          }
        }
      } else if (nextHtml != null) {
        if (lastHtml !== nextHtml) {
          this.updateMarkup('' + nextHtml);
        }
        if (true) {
          ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
        }
      } else if (nextChildren != null) {
        if (true) {
          if (this._contentDebugID) {
            ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
            this._contentDebugID = null;
          }
        }

        this.updateChildren(nextChildren, transaction, context);
      }
    },

    getNativeNode: function () {
      return getNode(this);
    },

    /**
     * Destroys all event registrations for this instance. Does not remove from
     * the DOM. That must be done by the parent.
     *
     * @internal
     */
    unmountComponent: function (safely) {
      switch (this._tag) {
        case 'iframe':
        case 'object':
        case 'img':
        case 'form':
        case 'video':
        case 'audio':
          var listeners = this._wrapperState.listeners;
          if (listeners) {
            for (var i = 0; i < listeners.length; i++) {
              listeners[i].remove();
            }
          }
          break;
        case 'html':
        case 'head':
        case 'body':
          /**
           * Components like <html> <head> and <body> can't be removed or added
           * easily in a cross-browser way, however it's valuable to be able to
           * take advantage of React's reconciliation for styling and <title>
           * management. So we just document it and throw in dangerous cases.
           */
           true ?  true ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : void 0;
          break;
      }

      this.unmountChildren(safely);
      ReactDOMComponentTree.uncacheNode(this);
      EventPluginHub.deleteAllListeners(this);
      ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
      this._rootNodeID = null;
      this._domID = null;
      this._wrapperState = null;

      if (true) {
        if (this._contentDebugID) {
          ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
          this._contentDebugID = null;
        }
      }
    },

    getPublicInstance: function () {
      return getNode(this);
    }

  };

  _assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

  module.exports = ReactDOMComponent;

/***/ },
/* 1230 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMContainerInfo
   */

  'use strict';

  var validateDOMNesting = __webpack_require__(375);

  var DOC_NODE_TYPE = 9;

  function ReactDOMContainerInfo(topLevelWrapper, node) {
    var info = {
      _topLevelWrapper: topLevelWrapper,
      _idCounter: 1,
      _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
      _node: node,
      _tag: node ? node.nodeName.toLowerCase() : null,
      _namespaceURI: node ? node.namespaceURI : null
    };
    if (true) {
      info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
    }
    return info;
  }

  module.exports = ReactDOMContainerInfo;

/***/ },
/* 1231 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMDebugTool
   */

  'use strict';

  var ReactDOMUnknownPropertyDevtool = __webpack_require__(1243);

  var warning = __webpack_require__(94);

  var eventHandlers = [];
  var handlerDoesThrowForEvent = {};

  function emitEvent(handlerFunctionName, arg1, arg2, arg3, arg4, arg5) {
    if (true) {
      eventHandlers.forEach(function (handler) {
        try {
          if (handler[handlerFunctionName]) {
            handler[handlerFunctionName](arg1, arg2, arg3, arg4, arg5);
          }
        } catch (e) {
           true ? warning(!handlerDoesThrowForEvent[handlerFunctionName], 'exception thrown by devtool while handling %s: %s', handlerFunctionName, e.message) : void 0;
          handlerDoesThrowForEvent[handlerFunctionName] = true;
        }
      });
    }
  }

  var ReactDOMDebugTool = {
    addDevtool: function (devtool) {
      eventHandlers.push(devtool);
    },
    removeDevtool: function (devtool) {
      for (var i = 0; i < eventHandlers.length; i++) {
        if (eventHandlers[i] === devtool) {
          eventHandlers.splice(i, 1);
          i--;
        }
      }
    },
    onCreateMarkupForProperty: function (name, value) {
      emitEvent('onCreateMarkupForProperty', name, value);
    },
    onSetValueForProperty: function (node, name, value) {
      emitEvent('onSetValueForProperty', node, name, value);
    },
    onDeleteValueForProperty: function (node, name) {
      emitEvent('onDeleteValueForProperty', node, name);
    }
  };

  ReactDOMDebugTool.addDevtool(ReactDOMUnknownPropertyDevtool);

  module.exports = ReactDOMDebugTool;

/***/ },
/* 1232 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2014-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMEmptyComponent
   */

  'use strict';

  var _assign = __webpack_require__(100);

  var DOMLazyTree = __webpack_require__(200);
  var ReactDOMComponentTree = __webpack_require__(108);

  var ReactDOMEmptyComponent = function (instantiate) {
    // ReactCompositeComponent uses this:
    this._currentElement = null;
    // ReactDOMComponentTree uses these:
    this._nativeNode = null;
    this._nativeParent = null;
    this._nativeContainerInfo = null;
    this._domID = null;
  };
  _assign(ReactDOMEmptyComponent.prototype, {
    mountComponent: function (transaction, nativeParent, nativeContainerInfo, context) {
      var domID = nativeContainerInfo._idCounter++;
      this._domID = domID;
      this._nativeParent = nativeParent;
      this._nativeContainerInfo = nativeContainerInfo;

      var nodeValue = ' react-empty: ' + this._domID + ' ';
      if (transaction.useCreateElement) {
        var ownerDocument = nativeContainerInfo._ownerDocument;
        var node = ownerDocument.createComment(nodeValue);
        ReactDOMComponentTree.precacheNode(this, node);
        return DOMLazyTree(node);
      } else {
        if (transaction.renderToStaticMarkup) {
          // Normally we'd insert a comment node, but since this is a situation
          // where React won't take over (static pages), we can simply return
          // nothing.
          return '';
        }
        return '<!--' + nodeValue + '-->';
      }
    },
    receiveComponent: function () {},
    getNativeNode: function () {
      return ReactDOMComponentTree.getNodeFromInstance(this);
    },
    unmountComponent: function () {
      ReactDOMComponentTree.uncacheNode(this);
    }
  });

  module.exports = ReactDOMEmptyComponent;

/***/ },
/* 1233 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMFactories
   */

  'use strict';

  var ReactElement = __webpack_require__(135);
  var ReactElementValidator = __webpack_require__(495);

  var mapObject = __webpack_require__(1058);

  /**
   * Create a factory that creates HTML tag elements.
   *
   * @param {string} tag Tag name (e.g. `div`).
   * @private
   */
  function createDOMFactory(tag) {
    if (true) {
      return ReactElementValidator.createFactory(tag);
    }
    return ReactElement.createFactory(tag);
  }

  /**
   * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
   * This is also accessible via `React.DOM`.
   *
   * @public
   */
  var ReactDOMFactories = mapObject({
    a: 'a',
    abbr: 'abbr',
    address: 'address',
    area: 'area',
    article: 'article',
    aside: 'aside',
    audio: 'audio',
    b: 'b',
    base: 'base',
    bdi: 'bdi',
    bdo: 'bdo',
    big: 'big',
    blockquote: 'blockquote',
    body: 'body',
    br: 'br',
    button: 'button',
    canvas: 'canvas',
    caption: 'caption',
    cite: 'cite',
    code: 'code',
    col: 'col',
    colgroup: 'colgroup',
    data: 'data',
    datalist: 'datalist',
    dd: 'dd',
    del: 'del',
    details: 'details',
    dfn: 'dfn',
    dialog: 'dialog',
    div: 'div',
    dl: 'dl',
    dt: 'dt',
    em: 'em',
    embed: 'embed',
    fieldset: 'fieldset',
    figcaption: 'figcaption',
    figure: 'figure',
    footer: 'footer',
    form: 'form',
    h1: 'h1',
    h2: 'h2',
    h3: 'h3',
    h4: 'h4',
    h5: 'h5',
    h6: 'h6',
    head: 'head',
    header: 'header',
    hgroup: 'hgroup',
    hr: 'hr',
    html: 'html',
    i: 'i',
    iframe: 'iframe',
    img: 'img',
    input: 'input',
    ins: 'ins',
    kbd: 'kbd',
    keygen: 'keygen',
    label: 'label',
    legend: 'legend',
    li: 'li',
    link: 'link',
    main: 'main',
    map: 'map',
    mark: 'mark',
    menu: 'menu',
    menuitem: 'menuitem',
    meta: 'meta',
    meter: 'meter',
    nav: 'nav',
    noscript: 'noscript',
    object: 'object',
    ol: 'ol',
    optgroup: 'optgroup',
    option: 'option',
    output: 'output',
    p: 'p',
    param: 'param',
    picture: 'picture',
    pre: 'pre',
    progress: 'progress',
    q: 'q',
    rp: 'rp',
    rt: 'rt',
    ruby: 'ruby',
    s: 's',
    samp: 'samp',
    script: 'script',
    section: 'section',
    select: 'select',
    small: 'small',
    source: 'source',
    span: 'span',
    strong: 'strong',
    style: 'style',
    sub: 'sub',
    summary: 'summary',
    sup: 'sup',
    table: 'table',
    tbody: 'tbody',
    td: 'td',
    textarea: 'textarea',
    tfoot: 'tfoot',
    th: 'th',
    thead: 'thead',
    time: 'time',
    title: 'title',
    tr: 'tr',
    track: 'track',
    u: 'u',
    ul: 'ul',
    'var': 'var',
    video: 'video',
    wbr: 'wbr',

    // SVG
    circle: 'circle',
    clipPath: 'clipPath',
    defs: 'defs',
    ellipse: 'ellipse',
    g: 'g',
    image: 'image',
    line: 'line',
    linearGradient: 'linearGradient',
    mask: 'mask',
    path: 'path',
    pattern: 'pattern',
    polygon: 'polygon',
    polyline: 'polyline',
    radialGradient: 'radialGradient',
    rect: 'rect',
    stop: 'stop',
    svg: 'svg',
    text: 'text',
    tspan: 'tspan'

  }, createDOMFactory);

  module.exports = ReactDOMFactories;

/***/ },
/* 1234 */
/***/ function(module, exports) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMFeatureFlags
   */

  'use strict';

  var ReactDOMFeatureFlags = {
    useCreateElement: true
  };

  module.exports = ReactDOMFeatureFlags;

/***/ },
/* 1235 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMIDOperations
   */

  'use strict';

  var DOMChildrenOperations = __webpack_require__(357);
  var ReactDOMComponentTree = __webpack_require__(108);

  /**
   * Operations used to process updates to DOM nodes.
   */
  var ReactDOMIDOperations = {

    /**
     * Updates a component's children by processing a series of updates.
     *
     * @param {array<object>} updates List of update configurations.
     * @internal
     */
    dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
      var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
      DOMChildrenOperations.processUpdates(node, updates);
    }
  };

  module.exports = ReactDOMIDOperations;

/***/ },
/* 1236 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMInput
   */

  'use strict';

  var _assign = __webpack_require__(100);

  var DisabledInputUtils = __webpack_require__(270);
  var DOMPropertyOperations = __webpack_require__(358);
  var LinkedValueUtils = __webpack_require__(361);
  var ReactDOMComponentTree = __webpack_require__(108);
  var ReactUpdates = __webpack_require__(147);

  var invariant = __webpack_require__(91);
  var warning = __webpack_require__(94);

  var didWarnValueLink = false;
  var didWarnCheckedLink = false;
  var didWarnValueNull = false;
  var didWarnValueDefaultValue = false;
  var didWarnCheckedDefaultChecked = false;
  var didWarnControlledToUncontrolled = false;
  var didWarnUncontrolledToControlled = false;

  function forceUpdateIfMounted() {
    if (this._rootNodeID) {
      // DOM component is still mounted; update
      ReactDOMInput.updateWrapper(this);
    }
  }

  function warnIfValueIsNull(props) {
    if (props != null && props.value === null && !didWarnValueNull) {
       true ? warning(false, '`value` prop on `input` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.') : void 0;

      didWarnValueNull = true;
    }
  }

  /**
   * Implements an <input> native component that allows setting these optional
   * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
   *
   * If `checked` or `value` are not supplied (or null/undefined), user actions
   * that affect the checked state or value will trigger updates to the element.
   *
   * If they are supplied (and not null/undefined), the rendered element will not
   * trigger updates to the element. Instead, the props must change in order for
   * the rendered element to be updated.
   *
   * The rendered element will be initialized as unchecked (or `defaultChecked`)
   * with an empty value (or `defaultValue`).
   *
   * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
   */
  var ReactDOMInput = {
    getNativeProps: function (inst, props) {
      var value = LinkedValueUtils.getValue(props);
      var checked = LinkedValueUtils.getChecked(props);

      var nativeProps = _assign({
        // Make sure we set .type before any other properties (setting .value
        // before .type means .value is lost in IE11 and below)
        type: undefined
      }, DisabledInputUtils.getNativeProps(inst, props), {
        defaultChecked: undefined,
        defaultValue: undefined,
        value: value != null ? value : inst._wrapperState.initialValue,
        checked: checked != null ? checked : inst._wrapperState.initialChecked,
        onChange: inst._wrapperState.onChange
      });

      return nativeProps;
    },

    mountWrapper: function (inst, props) {
      if (true) {
        LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);

        var owner = inst._currentElement._owner;

        if (props.valueLink !== undefined && !didWarnValueLink) {
           true ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
          didWarnValueLink = true;
        }
        if (props.checkedLink !== undefined && !didWarnCheckedLink) {
           true ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
          didWarnCheckedLink = true;
        }
        if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
           true ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
          didWarnCheckedDefaultChecked = true;
        }
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
           true ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
          didWarnValueDefaultValue = true;
        }
        warnIfValueIsNull(props);
      }

      var defaultValue = props.defaultValue;
      inst._wrapperState = {
        initialChecked: props.defaultChecked || false,
        initialValue: defaultValue != null ? defaultValue : null,
        listeners: null,
        onChange: _handleChange.bind(inst)
      };

      if (true) {
        inst._wrapperState.controlled = props.checked !== undefined || props.value !== undefined;
      }
    },

    updateWrapper: function (inst) {
      var props = inst._currentElement.props;

      if (true) {
        warnIfValueIsNull(props);

        var initialValue = inst._wrapperState.initialChecked || inst._wrapperState.initialValue;
        var defaultValue = props.defaultChecked || props.defaultValue;
        var controlled = props.checked !== undefined || props.value !== undefined;
        var owner = inst._currentElement._owner;

        if ((initialValue || !inst._wrapperState.controlled) && controlled && !didWarnUncontrolledToControlled) {
           true ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
          didWarnUncontrolledToControlled = true;
        }
        if (inst._wrapperState.controlled && (defaultValue || !controlled) && !didWarnControlledToUncontrolled) {
           true ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
          didWarnControlledToUncontrolled = true;
        }
      }

      // TODO: Shouldn't this be getChecked(props)?
      var checked = props.checked;
      if (checked != null) {
        DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
      }

      var value = LinkedValueUtils.getValue(props);
      if (value != null) {
        // Cast `value` to a string to ensure the value is set correctly. While
        // browsers typically do this as necessary, jsdom doesn't.
        DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'value', '' + value);
      }
    }
  };

  function _handleChange(event) {
    var props = this._currentElement.props;

    var returnValue = LinkedValueUtils.executeOnChange(props, event);

    // Here we use asap to wait until all updates have propagated, which
    // is important when using controlled components within layers:
    // https://github.com/facebook/react/issues/1698
    ReactUpdates.asap(forceUpdateIfMounted, this);

    var name = props.name;
    if (props.type === 'radio' && name != null) {
      var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
      var queryRoot = rootNode;

      while (queryRoot.parentNode) {
        queryRoot = queryRoot.parentNode;
      }

      // If `rootNode.form` was non-null, then we could try `form.elements`,
      // but that sometimes behaves strangely in IE8. We could also try using
      // `form.getElementsByName`, but that will only return direct children
      // and won't include inputs that use the HTML5 `form=` attribute. Since
      // the input might not even be in a form, let's just use the global
      // `querySelectorAll` to ensure we don't miss anything.
      var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

      for (var i = 0; i < group.length; i++) {
        var otherNode = group[i];
        if (otherNode === rootNode || otherNode.form !== rootNode.form) {
          continue;
        }
        // This will throw if radio buttons rendered by different copies of React
        // and the same name are rendered into the same form (same as #1939).
        // That's probably okay; we don't support it just as we don't support
        // mixing React radio buttons with non-React ones.
        var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
        !otherInstance ?  true ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : void 0;
        // If this is a controlled radio button group, forcing the input that
        // was previously checked to update will cause it to be come re-checked
        // as appropriate.
        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
      }
    }

    return returnValue;
  }

  module.exports = ReactDOMInput;

/***/ },
/* 1237 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMInstrumentation
   */

  'use strict';

  var ReactDOMDebugTool = __webpack_require__(1231);

  module.exports = { debugTool: ReactDOMDebugTool };

/***/ },
/* 1238 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMOption
   */

  'use strict';

  var _assign = __webpack_require__(100);

  var ReactChildren = __webpack_require__(489);
  var ReactDOMComponentTree = __webpack_require__(108);
  var ReactDOMSelect = __webpack_require__(494);

  var warning = __webpack_require__(94);

  /**
   * Implements an <option> native component that warns when `selected` is set.
   */
  var ReactDOMOption = {
    mountWrapper: function (inst, props, nativeParent) {
      // TODO (yungsters): Remove support for `selected` in <option>.
      if (true) {
         true ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
      }

      // Look up whether this option is 'selected'
      var selectValue = null;
      if (nativeParent != null) {
        var selectParent = nativeParent;

        if (selectParent._tag === 'optgroup') {
          selectParent = selectParent._nativeParent;
        }

        if (selectParent != null && selectParent._tag === 'select') {
          selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
        }
      }

      // If the value is null (e.g., no specified value or after initial mount)
      // or missing (e.g., for <datalist>), we don't change props.selected
      var selected = null;
      if (selectValue != null) {
        selected = false;
        if (Array.isArray(selectValue)) {
          // multiple
          for (var i = 0; i < selectValue.length; i++) {
            if ('' + selectValue[i] === '' + props.value) {
              selected = true;
              break;
            }
          }
        } else {
          selected = '' + selectValue === '' + props.value;
        }
      }

      inst._wrapperState = { selected: selected };
    },

    postMountWrapper: function (inst) {
      // value="" should make a value attribute (#6219)
      var props = inst._currentElement.props;
      if (props.value != null) {
        var node = ReactDOMComponentTree.getNodeFromInstance(inst);
        node.setAttribute('value', props.value);
      }
    },

    getNativeProps: function (inst, props) {
      var nativeProps = _assign({ selected: undefined, children: undefined }, props);

      // Read state only from initial mount because <select> updates value
      // manually; we need the initial state only for server rendering
      if (inst._wrapperState.selected != null) {
        nativeProps.selected = inst._wrapperState.selected;
      }

      var content = '';

      // Flatten children and warn if they aren't strings or numbers;
      // invalid types are ignored.
      ReactChildren.forEach(props.children, function (child) {
        if (child == null) {
          return;
        }
        if (typeof child === 'string' || typeof child === 'number') {
          content += child;
        } else {
           true ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
        }
      });

      if (content) {
        nativeProps.children = content;
      }

      return nativeProps;
    }

  };

  module.exports = ReactDOMOption;

/***/ },
/* 1239 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMSelection
   */

  'use strict';

  var ExecutionEnvironment = __webpack_require__(109);

  var getNodeForCharacterOffset = __webpack_require__(1276);
  var getTextContentAccessor = __webpack_require__(511);

  /**
   * While `isCollapsed` is available on the Selection object and `collapsed`
   * is available on the Range object, IE11 sometimes gets them wrong.
   * If the anchor/focus nodes and offsets are the same, the range is collapsed.
   */
  function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
    return anchorNode === focusNode && anchorOffset === focusOffset;
  }

  /**
   * Get the appropriate anchor and focus node/offset pairs for IE.
   *
   * The catch here is that IE's selection API doesn't provide information
   * about whether the selection is forward or backward, so we have to
   * behave as though it's always forward.
   *
   * IE text differs from modern selection in that it behaves as though
   * block elements end with a new line. This means character offsets will
   * differ between the two APIs.
   *
   * @param {DOMElement} node
   * @return {object}
   */
  function getIEOffsets(node) {
    var selection = document.selection;
    var selectedRange = selection.createRange();
    var selectedLength = selectedRange.text.length;

    // Duplicate selection so we can move range without breaking user selection.
    var fromStart = selectedRange.duplicate();
    fromStart.moveToElementText(node);
    fromStart.setEndPoint('EndToStart', selectedRange);

    var startOffset = fromStart.text.length;
    var endOffset = startOffset + selectedLength;

    return {
      start: startOffset,
      end: endOffset
    };
  }

  /**
   * @param {DOMElement} node
   * @return {?object}
   */
  function getModernOffsets(node) {
    var selection = window.getSelection && window.getSelection();

    if (!selection || selection.rangeCount === 0) {
      return null;
    }

    var anchorNode = selection.anchorNode;
    var anchorOffset = selection.anchorOffset;
    var focusNode = selection.focusNode;
    var focusOffset = selection.focusOffset;

    var currentRange = selection.getRangeAt(0);

    // In Firefox, range.startContainer and range.endContainer can be "anonymous
    // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
    // divs do not seem to expose properties, triggering a "Permission denied
    // error" if any of its properties are accessed. The only seemingly possible
    // way to avoid erroring is to access a property that typically works for
    // non-anonymous divs and catch any error that may otherwise arise. See
    // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
    try {
      /* eslint-disable no-unused-expressions */
      currentRange.startContainer.nodeType;
      currentRange.endContainer.nodeType;
      /* eslint-enable no-unused-expressions */
    } catch (e) {
      return null;
    }

    // If the node and offset values are the same, the selection is collapsed.
    // `Selection.isCollapsed` is available natively, but IE sometimes gets
    // this value wrong.
    var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

    var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

    var tempRange = currentRange.cloneRange();
    tempRange.selectNodeContents(node);
    tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

    var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

    var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
    var end = start + rangeLength;

    // Detect whether the selection is backward.
    var detectionRange = document.createRange();
    detectionRange.setStart(anchorNode, anchorOffset);
    detectionRange.setEnd(focusNode, focusOffset);
    var isBackward = detectionRange.collapsed;

    return {
      start: isBackward ? end : start,
      end: isBackward ? start : end
    };
  }

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  function setIEOffsets(node, offsets) {
    var range = document.selection.createRange().duplicate();
    var start, end;

    if (offsets.end === undefined) {
      start = offsets.start;
      end = start;
    } else if (offsets.start > offsets.end) {
      start = offsets.end;
      end = offsets.start;
    } else {
      start = offsets.start;
      end = offsets.end;
    }

    range.moveToElementText(node);
    range.moveStart('character', start);
    range.setEndPoint('EndToStart', range);
    range.moveEnd('character', end - start);
    range.select();
  }

  /**
   * In modern non-IE browsers, we can support both forward and backward
   * selections.
   *
   * Note: IE10+ supports the Selection object, but it does not support
   * the `extend` method, which means that even in modern IE, it's not possible
   * to programmatically create a backward selection. Thus, for all IE
   * versions, we use the old IE API to create our selections.
   *
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  function setModernOffsets(node, offsets) {
    if (!window.getSelection) {
      return;
    }

    var selection = window.getSelection();
    var length = node[getTextContentAccessor()].length;
    var start = Math.min(offsets.start, length);
    var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

    // IE 11 uses modern selection, but doesn't support the extend method.
    // Flip backward selections, so we can set with a single range.
    if (!selection.extend && start > end) {
      var temp = end;
      end = start;
      start = temp;
    }

    var startMarker = getNodeForCharacterOffset(node, start);
    var endMarker = getNodeForCharacterOffset(node, end);

    if (startMarker && endMarker) {
      var range = document.createRange();
      range.setStart(startMarker.node, startMarker.offset);
      selection.removeAllRanges();

      if (start > end) {
        selection.addRange(range);
        selection.extend(endMarker.node, endMarker.offset);
      } else {
        range.setEnd(endMarker.node, endMarker.offset);
        selection.addRange(range);
      }
    }
  }

  var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

  var ReactDOMSelection = {
    /**
     * @param {DOMElement} node
     */
    getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

    /**
     * @param {DOMElement|DOMTextNode} node
     * @param {object} offsets
     */
    setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
  };

  module.exports = ReactDOMSelection;

/***/ },
/* 1240 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMTextComponent
   */

  'use strict';

  var _assign = __webpack_require__(100);

  var DOMChildrenOperations = __webpack_require__(357);
  var DOMLazyTree = __webpack_require__(200);
  var ReactDOMComponentTree = __webpack_require__(108);
  var ReactInstrumentation = __webpack_require__(125);

  var escapeTextContentForBrowser = __webpack_require__(277);
  var invariant = __webpack_require__(91);
  var validateDOMNesting = __webpack_require__(375);

  /**
   * Text nodes violate a couple assumptions that React makes about components:
   *
   *  - When mounting text into the DOM, adjacent text nodes are merged.
   *  - Text nodes cannot be assigned a React root ID.
   *
   * This component is used to wrap strings between comment nodes so that they
   * can undergo the same reconciliation that is applied to elements.
   *
   * TODO: Investigate representing React components in the DOM with text nodes.
   *
   * @class ReactDOMTextComponent
   * @extends ReactComponent
   * @internal
   */
  var ReactDOMTextComponent = function (text) {
    // TODO: This is really a ReactText (ReactNode), not a ReactElement
    this._currentElement = text;
    this._stringText = '' + text;
    // ReactDOMComponentTree uses these:
    this._nativeNode = null;
    this._nativeParent = null;

    // Properties
    this._domID = null;
    this._mountIndex = 0;
    this._closingComment = null;
    this._commentNodes = null;
  };

  _assign(ReactDOMTextComponent.prototype, {

    /**
     * Creates the markup for this text node. This node is not intended to have
     * any features besides containing text content.
     *
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @return {string} Markup for this text node.
     * @internal
     */
    mountComponent: function (transaction, nativeParent, nativeContainerInfo, context) {
      if (true) {
        ReactInstrumentation.debugTool.onSetText(this._debugID, this._stringText);

        var parentInfo;
        if (nativeParent != null) {
          parentInfo = nativeParent._ancestorInfo;
        } else if (nativeContainerInfo != null) {
          parentInfo = nativeContainerInfo._ancestorInfo;
        }
        if (parentInfo) {
          // parentInfo should always be present except for the top-level
          // component when server rendering
          validateDOMNesting('#text', this, parentInfo);
        }
      }

      var domID = nativeContainerInfo._idCounter++;
      var openingValue = ' react-text: ' + domID + ' ';
      var closingValue = ' /react-text ';
      this._domID = domID;
      this._nativeParent = nativeParent;
      if (transaction.useCreateElement) {
        var ownerDocument = nativeContainerInfo._ownerDocument;
        var openingComment = ownerDocument.createComment(openingValue);
        var closingComment = ownerDocument.createComment(closingValue);
        var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
        if (this._stringText) {
          DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
        }
        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
        ReactDOMComponentTree.precacheNode(this, openingComment);
        this._closingComment = closingComment;
        return lazyTree;
      } else {
        var escapedText = escapeTextContentForBrowser(this._stringText);

        if (transaction.renderToStaticMarkup) {
          // Normally we'd wrap this between comment nodes for the reasons stated
          // above, but since this is a situation where React won't take over
          // (static pages), we can simply return the text as it is.
          return escapedText;
        }

        return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
      }
    },

    /**
     * Updates this component by updating the text content.
     *
     * @param {ReactText} nextText The next text content
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    receiveComponent: function (nextText, transaction) {
      if (nextText !== this._currentElement) {
        this._currentElement = nextText;
        var nextStringText = '' + nextText;
        if (nextStringText !== this._stringText) {
          // TODO: Save this as pending props and use performUpdateIfNecessary
          // and/or updateComponent to do the actual update for consistency with
          // other component types?
          this._stringText = nextStringText;
          var commentNodes = this.getNativeNode();
          DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);

          if (true) {
            ReactInstrumentation.debugTool.onSetText(this._debugID, nextStringText);
          }
        }
      }
    },

    getNativeNode: function () {
      var nativeNode = this._commentNodes;
      if (nativeNode) {
        return nativeNode;
      }
      if (!this._closingComment) {
        var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
        var node = openingComment.nextSibling;
        while (true) {
          !(node != null) ?  true ? invariant(false, 'Missing closing comment for text component %s', this._domID) : invariant(false) : void 0;
          if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
            this._closingComment = node;
            break;
          }
          node = node.nextSibling;
        }
      }
      nativeNode = [this._nativeNode, this._closingComment];
      this._commentNodes = nativeNode;
      return nativeNode;
    },

    unmountComponent: function () {
      this._closingComment = null;
      this._commentNodes = null;
      ReactDOMComponentTree.uncacheNode(this);
    }

  });

  module.exports = ReactDOMTextComponent;

/***/ },
/* 1241 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMTextarea
   */

  'use strict';

  var _assign = __webpack_require__(100);

  var DisabledInputUtils = __webpack_require__(270);
  var DOMPropertyOperations = __webpack_require__(358);
  var LinkedValueUtils = __webpack_require__(361);
  var ReactDOMComponentTree = __webpack_require__(108);
  var ReactUpdates = __webpack_require__(147);

  var invariant = __webpack_require__(91);
  var warning = __webpack_require__(94);

  var didWarnValueLink = false;
  var didWarnValueNull = false;
  var didWarnValDefaultVal = false;

  function forceUpdateIfMounted() {
    if (this._rootNodeID) {
      // DOM component is still mounted; update
      ReactDOMTextarea.updateWrapper(this);
    }
  }

  function warnIfValueIsNull(props) {
    if (props != null && props.value === null && !didWarnValueNull) {
       true ? warning(false, '`value` prop on `textarea` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.') : void 0;

      didWarnValueNull = true;
    }
  }

  /**
   * Implements a <textarea> native component that allows setting `value`, and
   * `defaultValue`. This differs from the traditional DOM API because value is
   * usually set as PCDATA children.
   *
   * If `value` is not supplied (or null/undefined), user actions that affect the
   * value will trigger updates to the element.
   *
   * If `value` is supplied (and not null/undefined), the rendered element will
   * not trigger updates to the element. Instead, the `value` prop must change in
   * order for the rendered element to be updated.
   *
   * The rendered element will be initialized with an empty value, the prop
   * `defaultValue` if specified, or the children content (deprecated).
   */
  var ReactDOMTextarea = {
    getNativeProps: function (inst, props) {
      !(props.dangerouslySetInnerHTML == null) ?  true ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : void 0;

      // Always set children to the same thing. In IE9, the selection range will
      // get reset if `textContent` is mutated.
      var nativeProps = _assign({}, DisabledInputUtils.getNativeProps(inst, props), {
        defaultValue: undefined,
        value: undefined,
        children: inst._wrapperState.initialValue,
        onChange: inst._wrapperState.onChange
      });

      return nativeProps;
    },

    mountWrapper: function (inst, props) {
      if (true) {
        LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
        if (props.valueLink !== undefined && !didWarnValueLink) {
           true ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
          didWarnValueLink = true;
        }
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
           true ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
          didWarnValDefaultVal = true;
        }
        warnIfValueIsNull(props);
      }

      var defaultValue = props.defaultValue;
      // TODO (yungsters): Remove support for children content in <textarea>.
      var children = props.children;
      if (children != null) {
        if (true) {
           true ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
        }
        !(defaultValue == null) ?  true ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : void 0;
        if (Array.isArray(children)) {
          !(children.length <= 1) ?  true ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : void 0;
          children = children[0];
        }

        defaultValue = '' + children;
      }
      if (defaultValue == null) {
        defaultValue = '';
      }
      var value = LinkedValueUtils.getValue(props);
      inst._wrapperState = {
        // We save the initial value so that `ReactDOMComponent` doesn't update
        // `textContent` (unnecessary since we update value).
        // The initial value can be a boolean or object so that's why it's
        // forced to be a string.
        initialValue: '' + (value != null ? value : defaultValue),
        listeners: null,
        onChange: _handleChange.bind(inst)
      };
    },

    updateWrapper: function (inst) {
      var props = inst._currentElement.props;

      if (true) {
        warnIfValueIsNull(props);
      }

      var value = LinkedValueUtils.getValue(props);
      if (value != null) {
        // Cast `value` to a string to ensure the value is set correctly. While
        // browsers typically do this as necessary, jsdom doesn't.
        DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'value', '' + value);
      }
    }
  };

  function _handleChange(event) {
    var props = this._currentElement.props;
    var returnValue = LinkedValueUtils.executeOnChange(props, event);
    ReactUpdates.asap(forceUpdateIfMounted, this);
    return returnValue;
  }

  module.exports = ReactDOMTextarea;

/***/ },
/* 1242 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2015-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMTreeTraversal
   */

  'use strict';

  var invariant = __webpack_require__(91);

  /**
   * Return the lowest common ancestor of A and B, or null if they are in
   * different trees.
   */
  function getLowestCommonAncestor(instA, instB) {
    !('_nativeNode' in instA) ?  true ? invariant(false, 'getNodeFromInstance: Invalid argument.') : invariant(false) : void 0;
    !('_nativeNode' in instB) ?  true ? invariant(false, 'getNodeFromInstance: Invalid argument.') : invariant(false) : void 0;

    var depthA = 0;
    for (var tempA = instA; tempA; tempA = tempA._nativeParent) {
      depthA++;
    }
    var depthB = 0;
    for (var tempB = instB; tempB; tempB = tempB._nativeParent) {
      depthB++;
    }

    // If A is deeper, crawl up.
    while (depthA - depthB > 0) {
      instA = instA._nativeParent;
      depthA--;
    }

    // If B is deeper, crawl up.
    while (depthB - depthA > 0) {
      instB = instB._nativeParent;
      depthB--;
    }

    // Walk in lockstep until we find a match.
    var depth = depthA;
    while (depth--) {
      if (instA === instB) {
        return instA;
      }
      instA = instA._nativeParent;
      instB = instB._nativeParent;
    }
    return null;
  }

  /**
   * Return if A is an ancestor of B.
   */
  function isAncestor(instA, instB) {
    !('_nativeNode' in instA) ?  true ? invariant(false, 'isAncestor: Invalid argument.') : invariant(false) : void 0;
    !('_nativeNode' in instB) ?  true ? invariant(false, 'isAncestor: Invalid argument.') : invariant(false) : void 0;

    while (instB) {
      if (instB === instA) {
        return true;
      }
      instB = instB._nativeParent;
    }
    return false;
  }

  /**
   * Return the parent instance of the passed-in instance.
   */
  function getParentInstance(inst) {
    !('_nativeNode' in inst) ?  true ? invariant(false, 'getParentInstance: Invalid argument.') : invariant(false) : void 0;

    return inst._nativeParent;
  }

  /**
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
   */
  function traverseTwoPhase(inst, fn, arg) {
    var path = [];
    while (inst) {
      path.push(inst);
      inst = inst._nativeParent;
    }
    var i;
    for (i = path.length; i-- > 0;) {
      fn(path[i], false, arg);
    }
    for (i = 0; i < path.length; i++) {
      fn(path[i], true, arg);
    }
  }

  /**
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
   * should would receive a `mouseEnter` or `mouseLeave` event.
   *
   * Does not invoke the callback on the nearest common ancestor because nothing
   * "entered" or "left" that element.
   */
  function traverseEnterLeave(from, to, fn, argFrom, argTo) {
    var common = from && to ? getLowestCommonAncestor(from, to) : null;
    var pathFrom = [];
    while (from && from !== common) {
      pathFrom.push(from);
      from = from._nativeParent;
    }
    var pathTo = [];
    while (to && to !== common) {
      pathTo.push(to);
      to = to._nativeParent;
    }
    var i;
    for (i = 0; i < pathFrom.length; i++) {
      fn(pathFrom[i], true, argFrom);
    }
    for (i = pathTo.length; i-- > 0;) {
      fn(pathTo[i], false, argTo);
    }
  }

  module.exports = {
    isAncestor: isAncestor,
    getLowestCommonAncestor: getLowestCommonAncestor,
    getParentInstance: getParentInstance,
    traverseTwoPhase: traverseTwoPhase,
    traverseEnterLeave: traverseEnterLeave
  };

/***/ },
/* 1243 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMUnknownPropertyDevtool
   */

  'use strict';

  var DOMProperty = __webpack_require__(187);
  var EventPluginRegistry = __webpack_require__(271);

  var warning = __webpack_require__(94);

  if (true) {
    var reactProps = {
      children: true,
      dangerouslySetInnerHTML: true,
      key: true,
      ref: true
    };
    var warnedProperties = {};

    var warnUnknownProperty = function (name) {
      if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
        return;
      }
      if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
        return;
      }

      warnedProperties[name] = true;
      var lowerCasedName = name.toLowerCase();

      // data-* attributes should be lowercase; suggest the lowercase version
      var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

      // For now, only warn when we have a suggested correction. This prevents
      // logging too much when using transferPropsTo.
       true ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : void 0;

      var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;

       true ? warning(registrationName == null, 'Unknown event handler property %s. Did you mean `%s`?', name, registrationName) : void 0;
    };
  }

  var ReactDOMUnknownPropertyDevtool = {
    onCreateMarkupForProperty: function (name, value) {
      warnUnknownProperty(name);
    },
    onSetValueForProperty: function (node, name, value) {
      warnUnknownProperty(name);
    },
    onDeleteValueForProperty: function (node, name) {
      warnUnknownProperty(name);
    }
  };

  module.exports = ReactDOMUnknownPropertyDevtool;

/***/ },
/* 1244 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2016-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDebugTool
   */

  'use strict';

  var ExecutionEnvironment = __webpack_require__(109);

  var performanceNow = __webpack_require__(1061);
  var warning = __webpack_require__(94);

  var eventHandlers = [];
  var handlerDoesThrowForEvent = {};

  function emitEvent(handlerFunctionName, arg1, arg2, arg3, arg4, arg5) {
    if (true) {
      eventHandlers.forEach(function (handler) {
        try {
          if (handler[handlerFunctionName]) {
            handler[handlerFunctionName](arg1, arg2, arg3, arg4, arg5);
          }
        } catch (e) {
           true ? warning(!handlerDoesThrowForEvent[handlerFunctionName], 'exception thrown by devtool while handling %s: %s', handlerFunctionName, e.message) : void 0;
          handlerDoesThrowForEvent[handlerFunctionName] = true;
        }
      });
    }
  }

  var isProfiling = false;
  var flushHistory = [];
  var currentFlushNesting = 0;
  var currentFlushMeasurements = null;
  var currentFlushStartTime = null;
  var currentTimerDebugID = null;
  var currentTimerStartTime = null;
  var currentTimerType = null;

  function clearHistory() {
    ReactComponentTreeDevtool.purgeUnmountedComponents();
    ReactNativeOperationHistoryDevtool.clearHistory();
  }

  function getTreeSnapshot(registeredIDs) {
    return registeredIDs.reduce(function (tree, id) {
      var ownerID = ReactComponentTreeDevtool.getOwnerID(id);
      var parentID = ReactComponentTreeDevtool.getParentID(id);
      tree[id] = {
        displayName: ReactComponentTreeDevtool.getDisplayName(id),
        text: ReactComponentTreeDevtool.getText(id),
        updateCount: ReactComponentTreeDevtool.getUpdateCount(id),
        childIDs: ReactComponentTreeDevtool.getChildIDs(id),
        // Text nodes don't have owners but this is close enough.
        ownerID: ownerID || ReactComponentTreeDevtool.getOwnerID(parentID),
        parentID: parentID
      };
      return tree;
    }, {});
  }

  function resetMeasurements() {
    if (true) {
      var previousStartTime = currentFlushStartTime;
      var previousMeasurements = currentFlushMeasurements || [];
      var previousOperations = ReactNativeOperationHistoryDevtool.getHistory();

      if (!isProfiling || currentFlushNesting === 0) {
        currentFlushStartTime = null;
        currentFlushMeasurements = null;
        clearHistory();
        return;
      }

      if (previousMeasurements.length || previousOperations.length) {
        var registeredIDs = ReactComponentTreeDevtool.getRegisteredIDs();
        flushHistory.push({
          duration: performanceNow() - previousStartTime,
          measurements: previousMeasurements || [],
          operations: previousOperations || [],
          treeSnapshot: getTreeSnapshot(registeredIDs)
        });
      }

      clearHistory();
      currentFlushStartTime = performanceNow();
      currentFlushMeasurements = [];
    }
  }

  function checkDebugID(debugID) {
     true ? warning(debugID, 'ReactDebugTool: debugID may not be empty.') : void 0;
  }

  var ReactDebugTool = {
    addDevtool: function (devtool) {
      eventHandlers.push(devtool);
    },
    removeDevtool: function (devtool) {
      for (var i = 0; i < eventHandlers.length; i++) {
        if (eventHandlers[i] === devtool) {
          eventHandlers.splice(i, 1);
          i--;
        }
      }
    },
    beginProfiling: function () {
      if (true) {
        if (isProfiling) {
          return;
        }

        isProfiling = true;
        flushHistory.length = 0;
        resetMeasurements();
      }
    },
    endProfiling: function () {
      if (true) {
        if (!isProfiling) {
          return;
        }

        isProfiling = false;
        resetMeasurements();
      }
    },
    getFlushHistory: function () {
      if (true) {
        return flushHistory;
      }
    },
    onBeginFlush: function () {
      if (true) {
        currentFlushNesting++;
        resetMeasurements();
      }
      emitEvent('onBeginFlush');
    },
    onEndFlush: function () {
      if (true) {
        resetMeasurements();
        currentFlushNesting--;
      }
      emitEvent('onEndFlush');
    },
    onBeginLifeCycleTimer: function (debugID, timerType) {
      checkDebugID(debugID);
      emitEvent('onBeginLifeCycleTimer', debugID, timerType);
      if (true) {
        if (isProfiling && currentFlushNesting > 0) {
           true ? warning(!currentTimerType, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
          currentTimerStartTime = performanceNow();
          currentTimerDebugID = debugID;
          currentTimerType = timerType;
        }
      }
    },
    onEndLifeCycleTimer: function (debugID, timerType) {
      checkDebugID(debugID);
      if (true) {
        if (isProfiling && currentFlushNesting > 0) {
           true ? warning(currentTimerType === timerType, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
          currentFlushMeasurements.push({
            timerType: timerType,
            instanceID: debugID,
            duration: performanceNow() - currentTimerStartTime
          });
          currentTimerStartTime = null;
          currentTimerDebugID = null;
          currentTimerType = null;
        }
      }
      emitEvent('onEndLifeCycleTimer', debugID, timerType);
    },
    onBeginReconcilerTimer: function (debugID, timerType) {
      checkDebugID(debugID);
      emitEvent('onBeginReconcilerTimer', debugID, timerType);
    },
    onEndReconcilerTimer: function (debugID, timerType) {
      checkDebugID(debugID);
      emitEvent('onEndReconcilerTimer', debugID, timerType);
    },
    onBeginProcessingChildContext: function () {
      emitEvent('onBeginProcessingChildContext');
    },
    onEndProcessingChildContext: function () {
      emitEvent('onEndProcessingChildContext');
    },
    onNativeOperation: function (debugID, type, payload) {
      checkDebugID(debugID);
      emitEvent('onNativeOperation', debugID, type, payload);
    },
    onSetState: function () {
      emitEvent('onSetState');
    },
    onSetDisplayName: function (debugID, displayName) {
      checkDebugID(debugID);
      emitEvent('onSetDisplayName', debugID, displayName);
    },
    onSetChildren: function (debugID, childDebugIDs) {
      checkDebugID(debugID);
      emitEvent('onSetChildren', debugID, childDebugIDs);
    },
    onSetOwner: function (debugID, ownerDebugID) {
      checkDebugID(debugID);
      emitEvent('onSetOwner', debugID, ownerDebugID);
    },
    onSetText: function (debugID, text) {
      checkDebugID(debugID);
      emitEvent('onSetText', debugID, text);
    },
    onMountRootComponent: function (debugID) {
      checkDebugID(debugID);
      emitEvent('onMountRootComponent', debugID);
    },
    onMountComponent: function (debugID) {
      checkDebugID(debugID);
      emitEvent('onMountComponent', debugID);
    },
    onUpdateComponent: function (debugID) {
      checkDebugID(debugID);
      emitEvent('onUpdateComponent', debugID);
    },
    onUnmountComponent: function (debugID) {
      checkDebugID(debugID);
      emitEvent('onUnmountComponent', debugID);
    }
  };

  if (true) {
    var ReactInvalidSetStateWarningDevTool = __webpack_require__(1250);
    var ReactNativeOperationHistoryDevtool = __webpack_require__(1253);
    var ReactComponentTreeDevtool = __webpack_require__(1225);
    ReactDebugTool.addDevtool(ReactInvalidSetStateWarningDevTool);
    ReactDebugTool.addDevtool(ReactComponentTreeDevtool);
    ReactDebugTool.addDevtool(ReactNativeOperationHistoryDevtool);
    var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
    if (/[?&]react_perf\b/.test(url)) {
      ReactDebugTool.beginProfiling();
    }
  }

  module.exports = ReactDebugTool;

/***/ },
/* 1245 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDefaultBatchingStrategy
   */

  'use strict';

  var _assign = __webpack_require__(100);

  var ReactUpdates = __webpack_require__(147);
  var Transaction = __webpack_require__(276);

  var emptyFunction = __webpack_require__(124);

  var RESET_BATCHED_UPDATES = {
    initialize: emptyFunction,
    close: function () {
      ReactDefaultBatchingStrategy.isBatchingUpdates = false;
    }
  };

  var FLUSH_BATCHED_UPDATES = {
    initialize: emptyFunction,
    close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
  };

  var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

  function ReactDefaultBatchingStrategyTransaction() {
    this.reinitializeTransaction();
  }

  _assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
    getTransactionWrappers: function () {
      return TRANSACTION_WRAPPERS;
    }
  });

  var transaction = new ReactDefaultBatchingStrategyTransaction();

  var ReactDefaultBatchingStrategy = {
    isBatchingUpdates: false,

    /**
     * Call the provided function in a context within which calls to `setState`
     * and friends are batched such that components aren't updated unnecessarily.
     */
    batchedUpdates: function (callback, a, b, c, d, e) {
      var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

      ReactDefaultBatchingStrategy.isBatchingUpdates = true;

      // The code is written this way to avoid extra allocations
      if (alreadyBatchingUpdates) {
        callback(a, b, c, d, e);
      } else {
        transaction.perform(callback, null, a, b, c, d, e);
      }
    }
  };

  module.exports = ReactDefaultBatchingStrategy;

/***/ },
/* 1246 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDefaultInjection
   */

  'use strict';

  var BeforeInputEventPlugin = __webpack_require__(1215);
  var ChangeEventPlugin = __webpack_require__(1217);
  var DefaultEventPluginOrder = __webpack_require__(1219);
  var EnterLeaveEventPlugin = __webpack_require__(1220);
  var HTMLDOMPropertyConfig = __webpack_require__(1222);
  var ReactComponentBrowserEnvironment = __webpack_require__(492);
  var ReactDOMComponent = __webpack_require__(1229);
  var ReactDOMComponentTree = __webpack_require__(108);
  var ReactDOMEmptyComponent = __webpack_require__(1232);
  var ReactDOMTreeTraversal = __webpack_require__(1242);
  var ReactDOMTextComponent = __webpack_require__(1240);
  var ReactDefaultBatchingStrategy = __webpack_require__(1245);
  var ReactEventListener = __webpack_require__(1248);
  var ReactInjection = __webpack_require__(1249);
  var ReactReconcileTransaction = __webpack_require__(1255);
  var SVGDOMPropertyConfig = __webpack_require__(1258);
  var SelectEventPlugin = __webpack_require__(1259);
  var SimpleEventPlugin = __webpack_require__(1260);

  var alreadyInjected = false;

  function inject() {
    if (alreadyInjected) {
      // TODO: This is currently true because these injections are shared between
      // the client and the server package. They should be built independently
      // and not share any injection state. Then this problem will be solved.
      return;
    }
    alreadyInjected = true;

    ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

    /**
     * Inject modules for resolving DOM hierarchy and plugin ordering.
     */
    ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
    ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
    ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);

    /**
     * Some important event plugins included by default (without having to require
     * them).
     */
    ReactInjection.EventPluginHub.injectEventPluginsByName({
      SimpleEventPlugin: SimpleEventPlugin,
      EnterLeaveEventPlugin: EnterLeaveEventPlugin,
      ChangeEventPlugin: ChangeEventPlugin,
      SelectEventPlugin: SelectEventPlugin,
      BeforeInputEventPlugin: BeforeInputEventPlugin
    });

    ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);

    ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);

    ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
    ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

    ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
      return new ReactDOMEmptyComponent(instantiate);
    });

    ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
    ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

    ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
  }

  module.exports = {
    inject: inject
  };

/***/ },
/* 1247 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactEventEmitterMixin
   */

  'use strict';

  var EventPluginHub = __webpack_require__(220);

  function runEventQueueInBatch(events) {
    EventPluginHub.enqueueEvents(events);
    EventPluginHub.processEventQueue(false);
  }

  var ReactEventEmitterMixin = {

    /**
     * Streams a fired top-level event to `EventPluginHub` where plugins have the
     * opportunity to create `ReactEvent`s to be dispatched.
     */
    handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
      runEventQueueInBatch(events);
    }
  };

  module.exports = ReactEventEmitterMixin;

/***/ },
/* 1248 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactEventListener
   */

  'use strict';

  var _assign = __webpack_require__(100);

  var EventListener = __webpack_require__(439);
  var ExecutionEnvironment = __webpack_require__(109);
  var PooledClass = __webpack_require__(166);
  var ReactDOMComponentTree = __webpack_require__(108);
  var ReactUpdates = __webpack_require__(147);

  var getEventTarget = __webpack_require__(369);
  var getUnboundedScrollPosition = __webpack_require__(1053);

  /**
   * Find the deepest React component completely containing the root of the
   * passed-in instance (for use when entire React trees are nested within each
   * other). If React trees are not nested, returns null.
   */
  function findParent(inst) {
    // TODO: It may be a good idea to cache this to prevent unnecessary DOM
    // traversal, but caching is difficult to do correctly without using a
    // mutation observer to listen for all DOM changes.
    while (inst._nativeParent) {
      inst = inst._nativeParent;
    }
    var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
    var container = rootNode.parentNode;
    return ReactDOMComponentTree.getClosestInstanceFromNode(container);
  }

  // Used to store ancestor hierarchy in top level callback
  function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
    this.topLevelType = topLevelType;
    this.nativeEvent = nativeEvent;
    this.ancestors = [];
  }
  _assign(TopLevelCallbackBookKeeping.prototype, {
    destructor: function () {
      this.topLevelType = null;
      this.nativeEvent = null;
      this.ancestors.length = 0;
    }
  });
  PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

  function handleTopLevelImpl(bookKeeping) {
    var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
    var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);

    // Loop through the hierarchy, in case there's any nested components.
    // It's important that we build the array of ancestors before calling any
    // event handlers, because event handlers can modify the DOM, leading to
    // inconsistencies with ReactMount's node cache. See #1105.
    var ancestor = targetInst;
    do {
      bookKeeping.ancestors.push(ancestor);
      ancestor = ancestor && findParent(ancestor);
    } while (ancestor);

    for (var i = 0; i < bookKeeping.ancestors.length; i++) {
      targetInst = bookKeeping.ancestors[i];
      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
    }
  }

  function scrollValueMonitor(cb) {
    var scrollPosition = getUnboundedScrollPosition(window);
    cb(scrollPosition);
  }

  var ReactEventListener = {
    _enabled: true,
    _handleTopLevel: null,

    WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

    setHandleTopLevel: function (handleTopLevel) {
      ReactEventListener._handleTopLevel = handleTopLevel;
    },

    setEnabled: function (enabled) {
      ReactEventListener._enabled = !!enabled;
    },

    isEnabled: function () {
      return ReactEventListener._enabled;
    },

    /**
     * Traps top-level events by using event bubbling.
     *
     * @param {string} topLevelType Record from `EventConstants`.
     * @param {string} handlerBaseName Event name (e.g. "click").
     * @param {object} handle Element on which to attach listener.
     * @return {?object} An object with a remove function which will forcefully
     *                  remove the listener.
     * @internal
     */
    trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
      var element = handle;
      if (!element) {
        return null;
      }
      return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
    },

    /**
     * Traps a top-level event by using event capturing.
     *
     * @param {string} topLevelType Record from `EventConstants`.
     * @param {string} handlerBaseName Event name (e.g. "click").
     * @param {object} handle Element on which to attach listener.
     * @return {?object} An object with a remove function which will forcefully
     *                  remove the listener.
     * @internal
     */
    trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
      var element = handle;
      if (!element) {
        return null;
      }
      return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
    },

    monitorScrollValue: function (refresh) {
      var callback = scrollValueMonitor.bind(null, refresh);
      EventListener.listen(window, 'scroll', callback);
    },

    dispatchEvent: function (topLevelType, nativeEvent) {
      if (!ReactEventListener._enabled) {
        return;
      }

      var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
      try {
        // Event queue being processed in the same cycle allows
        // `preventDefault`.
        ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
      } finally {
        TopLevelCallbackBookKeeping.release(bookKeeping);
      }
    }
  };

  module.exports = ReactEventListener;

/***/ },
/* 1249 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactInjection
   */

  'use strict';

  var DOMProperty = __webpack_require__(187);
  var EventPluginHub = __webpack_require__(220);
  var EventPluginUtils = __webpack_require__(359);
  var ReactComponentEnvironment = __webpack_require__(362);
  var ReactClass = __webpack_require__(490);
  var ReactEmptyComponent = __webpack_require__(496);
  var ReactBrowserEventEmitter = __webpack_require__(272);
  var ReactNativeComponent = __webpack_require__(501);
  var ReactUpdates = __webpack_require__(147);

  var ReactInjection = {
    Component: ReactComponentEnvironment.injection,
    Class: ReactClass.injection,
    DOMProperty: DOMProperty.injection,
    EmptyComponent: ReactEmptyComponent.injection,
    EventPluginHub: EventPluginHub.injection,
    EventPluginUtils: EventPluginUtils.injection,
    EventEmitter: ReactBrowserEventEmitter.injection,
    NativeComponent: ReactNativeComponent.injection,
    Updates: ReactUpdates.injection
  };

  module.exports = ReactInjection;

/***/ },
/* 1250 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2016-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactInvalidSetStateWarningDevTool
   */

  'use strict';

  var warning = __webpack_require__(94);

  if (true) {
    var processingChildContext = false;

    var warnInvalidSetState = function () {
       true ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
    };
  }

  var ReactInvalidSetStateWarningDevTool = {
    onBeginProcessingChildContext: function () {
      processingChildContext = true;
    },
    onEndProcessingChildContext: function () {
      processingChildContext = false;
    },
    onSetState: function () {
      warnInvalidSetState();
    }
  };

  module.exports = ReactInvalidSetStateWarningDevTool;

/***/ },
/* 1251 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactMarkupChecksum
   */

  'use strict';

  var adler32 = __webpack_require__(1271);

  var TAG_END = /\/?>/;
  var COMMENT_START = /^<\!\-\-/;

  var ReactMarkupChecksum = {
    CHECKSUM_ATTR_NAME: 'data-react-checksum',

    /**
     * @param {string} markup Markup string
     * @return {string} Markup string with checksum attribute attached
     */
    addChecksumToMarkup: function (markup) {
      var checksum = adler32(markup);

      // Add checksum (handle both parent tags, comments and self-closing tags)
      if (COMMENT_START.test(markup)) {
        return markup;
      } else {
        return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
      }
    },

    /**
     * @param {string} markup to use
     * @param {DOMElement} element root React element
     * @returns {boolean} whether or not the markup is the same
     */
    canReuseMarkup: function (markup, element) {
      var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
      existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
      var markupChecksum = adler32(markup);
      return markupChecksum === existingChecksum;
    }
  };

  module.exports = ReactMarkupChecksum;

/***/ },
/* 1252 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactMultiChild
   */

  'use strict';

  var ReactComponentEnvironment = __webpack_require__(362);
  var ReactInstrumentation = __webpack_require__(125);
  var ReactMultiChildUpdateTypes = __webpack_require__(500);

  var ReactCurrentOwner = __webpack_require__(167);
  var ReactReconciler = __webpack_require__(201);
  var ReactChildReconciler = __webpack_require__(1224);

  var emptyFunction = __webpack_require__(124);
  var flattenChildren = __webpack_require__(1274);
  var invariant = __webpack_require__(91);

  /**
   * Make an update for markup to be rendered and inserted at a supplied index.
   *
   * @param {string} markup Markup that renders into an element.
   * @param {number} toIndex Destination index.
   * @private
   */
  function makeInsertMarkup(markup, afterNode, toIndex) {
    // NOTE: Null values reduce hidden classes.
    return {
      type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
      content: markup,
      fromIndex: null,
      fromNode: null,
      toIndex: toIndex,
      afterNode: afterNode
    };
  }

  /**
   * Make an update for moving an existing element to another index.
   *
   * @param {number} fromIndex Source index of the existing element.
   * @param {number} toIndex Destination index of the element.
   * @private
   */
  function makeMove(child, afterNode, toIndex) {
    // NOTE: Null values reduce hidden classes.
    return {
      type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
      content: null,
      fromIndex: child._mountIndex,
      fromNode: ReactReconciler.getNativeNode(child),
      toIndex: toIndex,
      afterNode: afterNode
    };
  }

  /**
   * Make an update for removing an element at an index.
   *
   * @param {number} fromIndex Index of the element to remove.
   * @private
   */
  function makeRemove(child, node) {
    // NOTE: Null values reduce hidden classes.
    return {
      type: ReactMultiChildUpdateTypes.REMOVE_NODE,
      content: null,
      fromIndex: child._mountIndex,
      fromNode: node,
      toIndex: null,
      afterNode: null
    };
  }

  /**
   * Make an update for setting the markup of a node.
   *
   * @param {string} markup Markup that renders into an element.
   * @private
   */
  function makeSetMarkup(markup) {
    // NOTE: Null values reduce hidden classes.
    return {
      type: ReactMultiChildUpdateTypes.SET_MARKUP,
      content: markup,
      fromIndex: null,
      fromNode: null,
      toIndex: null,
      afterNode: null
    };
  }

  /**
   * Make an update for setting the text content.
   *
   * @param {string} textContent Text content to set.
   * @private
   */
  function makeTextContent(textContent) {
    // NOTE: Null values reduce hidden classes.
    return {
      type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
      content: textContent,
      fromIndex: null,
      fromNode: null,
      toIndex: null,
      afterNode: null
    };
  }

  /**
   * Push an update, if any, onto the queue. Creates a new queue if none is
   * passed and always returns the queue. Mutative.
   */
  function enqueue(queue, update) {
    if (update) {
      queue = queue || [];
      queue.push(update);
    }
    return queue;
  }

  /**
   * Processes any enqueued updates.
   *
   * @private
   */
  function processQueue(inst, updateQueue) {
    ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
  }

  var setChildrenForInstrumentation = emptyFunction;
  if (true) {
    setChildrenForInstrumentation = function (children) {
      ReactInstrumentation.debugTool.onSetChildren(this._debugID, children ? Object.keys(children).map(function (key) {
        return children[key]._debugID;
      }) : []);
    };
  }

  /**
   * ReactMultiChild are capable of reconciling multiple children.
   *
   * @class ReactMultiChild
   * @internal
   */
  var ReactMultiChild = {

    /**
     * Provides common functionality for components that must reconcile multiple
     * children. This is used by `ReactDOMComponent` to mount, update, and
     * unmount child components.
     *
     * @lends {ReactMultiChild.prototype}
     */
    Mixin: {

      _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
        if (true) {
          if (this._currentElement) {
            try {
              ReactCurrentOwner.current = this._currentElement._owner;
              return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
            } finally {
              ReactCurrentOwner.current = null;
            }
          }
        }
        return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
      },

      _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, removedNodes, transaction, context) {
        var nextChildren;
        if (true) {
          if (this._currentElement) {
            try {
              ReactCurrentOwner.current = this._currentElement._owner;
              nextChildren = flattenChildren(nextNestedChildrenElements);
            } finally {
              ReactCurrentOwner.current = null;
            }
            ReactChildReconciler.updateChildren(prevChildren, nextChildren, removedNodes, transaction, context);
            return nextChildren;
          }
        }
        nextChildren = flattenChildren(nextNestedChildrenElements);
        ReactChildReconciler.updateChildren(prevChildren, nextChildren, removedNodes, transaction, context);
        return nextChildren;
      },

      /**
       * Generates a "mount image" for each of the supplied children. In the case
       * of `ReactDOMComponent`, a mount image is a string of markup.
       *
       * @param {?object} nestedChildren Nested child maps.
       * @return {array} An array of mounted representations.
       * @internal
       */
      mountChildren: function (nestedChildren, transaction, context) {
        var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
        this._renderedChildren = children;

        var mountImages = [];
        var index = 0;
        for (var name in children) {
          if (children.hasOwnProperty(name)) {
            var child = children[name];
            var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._nativeContainerInfo, context);
            child._mountIndex = index++;
            mountImages.push(mountImage);
          }
        }

        if (true) {
          setChildrenForInstrumentation.call(this, children);
        }

        return mountImages;
      },

      /**
       * Replaces any rendered children with a text content string.
       *
       * @param {string} nextContent String of content.
       * @internal
       */
      updateTextContent: function (nextContent) {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        ReactChildReconciler.unmountChildren(prevChildren, false);
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
             true ?  true ? invariant(false, 'updateTextContent called on non-empty component.') : invariant(false) : void 0;
          }
        }
        // Set new text content.
        var updates = [makeTextContent(nextContent)];
        processQueue(this, updates);
      },

      /**
       * Replaces any rendered children with a markup string.
       *
       * @param {string} nextMarkup String of markup.
       * @internal
       */
      updateMarkup: function (nextMarkup) {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        ReactChildReconciler.unmountChildren(prevChildren, false);
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
             true ?  true ? invariant(false, 'updateTextContent called on non-empty component.') : invariant(false) : void 0;
          }
        }
        var updates = [makeSetMarkup(nextMarkup)];
        processQueue(this, updates);
      },

      /**
       * Updates the rendered children with new children.
       *
       * @param {?object} nextNestedChildrenElements Nested child element maps.
       * @param {ReactReconcileTransaction} transaction
       * @internal
       */
      updateChildren: function (nextNestedChildrenElements, transaction, context) {
        // Hook used by React ART
        this._updateChildren(nextNestedChildrenElements, transaction, context);
      },

      /**
       * @param {?object} nextNestedChildrenElements Nested child element maps.
       * @param {ReactReconcileTransaction} transaction
       * @final
       * @protected
       */
      _updateChildren: function (nextNestedChildrenElements, transaction, context) {
        var prevChildren = this._renderedChildren;
        var removedNodes = {};
        var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, removedNodes, transaction, context);
        if (!nextChildren && !prevChildren) {
          return;
        }
        var updates = null;
        var name;
        // `nextIndex` will increment for each child in `nextChildren`, but
        // `lastIndex` will be the last index visited in `prevChildren`.
        var lastIndex = 0;
        var nextIndex = 0;
        var lastPlacedNode = null;
        for (name in nextChildren) {
          if (!nextChildren.hasOwnProperty(name)) {
            continue;
          }
          var prevChild = prevChildren && prevChildren[name];
          var nextChild = nextChildren[name];
          if (prevChild === nextChild) {
            updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            prevChild._mountIndex = nextIndex;
          } else {
            if (prevChild) {
              // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
              lastIndex = Math.max(prevChild._mountIndex, lastIndex);
              // The `removedNodes` loop below will actually remove the child.
            }
            // The child must be instantiated before it's mounted.
            updates = enqueue(updates, this._mountChildAtIndex(nextChild, lastPlacedNode, nextIndex, transaction, context));
          }
          nextIndex++;
          lastPlacedNode = ReactReconciler.getNativeNode(nextChild);
        }
        // Remove children that are no longer present.
        for (name in removedNodes) {
          if (removedNodes.hasOwnProperty(name)) {
            updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
          }
        }
        if (updates) {
          processQueue(this, updates);
        }
        this._renderedChildren = nextChildren;

        if (true) {
          setChildrenForInstrumentation.call(this, nextChildren);
        }
      },

      /**
       * Unmounts all rendered children. This should be used to clean up children
       * when this component is unmounted. It does not actually perform any
       * backend operations.
       *
       * @internal
       */
      unmountChildren: function (safely) {
        var renderedChildren = this._renderedChildren;
        ReactChildReconciler.unmountChildren(renderedChildren, safely);
        this._renderedChildren = null;
      },

      /**
       * Moves a child component to the supplied index.
       *
       * @param {ReactComponent} child Component to move.
       * @param {number} toIndex Destination index of the element.
       * @param {number} lastIndex Last index visited of the siblings of `child`.
       * @protected
       */
      moveChild: function (child, afterNode, toIndex, lastIndex) {
        // If the index of `child` is less than `lastIndex`, then it needs to
        // be moved. Otherwise, we do not need to move it because a child will be
        // inserted or moved before `child`.
        if (child._mountIndex < lastIndex) {
          return makeMove(child, afterNode, toIndex);
        }
      },

      /**
       * Creates a child component.
       *
       * @param {ReactComponent} child Component to create.
       * @param {string} mountImage Markup to insert.
       * @protected
       */
      createChild: function (child, afterNode, mountImage) {
        return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
      },

      /**
       * Removes a child component.
       *
       * @param {ReactComponent} child Child to remove.
       * @protected
       */
      removeChild: function (child, node) {
        return makeRemove(child, node);
      },

      /**
       * Mounts a child with the supplied name.
       *
       * NOTE: This is part of `updateChildren` and is here for readability.
       *
       * @param {ReactComponent} child Component to mount.
       * @param {string} name Name of the child.
       * @param {number} index Index at which to insert the child.
       * @param {ReactReconcileTransaction} transaction
       * @private
       */
      _mountChildAtIndex: function (child, afterNode, index, transaction, context) {
        var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._nativeContainerInfo, context);
        child._mountIndex = index;
        return this.createChild(child, afterNode, mountImage);
      },

      /**
       * Unmounts a rendered child.
       *
       * NOTE: This is part of `updateChildren` and is here for readability.
       *
       * @param {ReactComponent} child Component to unmount.
       * @private
       */
      _unmountChild: function (child, node) {
        var update = this.removeChild(child, node);
        child._mountIndex = null;
        return update;
      }

    }

  };

  module.exports = ReactMultiChild;

/***/ },
/* 1253 */
/***/ function(module, exports) {

  /**
   * Copyright 2016-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactNativeOperationHistoryDevtool
   */

  'use strict';

  var history = [];

  var ReactNativeOperationHistoryDevtool = {
    onNativeOperation: function (debugID, type, payload) {
      history.push({
        instanceID: debugID,
        type: type,
        payload: payload
      });
    },
    clearHistory: function () {
      if (ReactNativeOperationHistoryDevtool._preventClearing) {
        // Should only be used for tests.
        return;
      }

      history = [];
    },
    getHistory: function () {
      return history;
    }
  };

  module.exports = ReactNativeOperationHistoryDevtool;

/***/ },
/* 1254 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactOwner
   */

  'use strict';

  var invariant = __webpack_require__(91);

  /**
   * ReactOwners are capable of storing references to owned components.
   *
   * All components are capable of //being// referenced by owner components, but
   * only ReactOwner components are capable of //referencing// owned components.
   * The named reference is known as a "ref".
   *
   * Refs are available when mounted and updated during reconciliation.
   *
   *   var MyComponent = React.createClass({
   *     render: function() {
   *       return (
   *         <div onClick={this.handleClick}>
   *           <CustomComponent ref="custom" />
   *         </div>
   *       );
   *     },
   *     handleClick: function() {
   *       this.refs.custom.handleClick();
   *     },
   *     componentDidMount: function() {
   *       this.refs.custom.initialize();
   *     }
   *   });
   *
   * Refs should rarely be used. When refs are used, they should only be done to
   * control data that is not handled by React's data flow.
   *
   * @class ReactOwner
   */
  var ReactOwner = {

    /**
     * @param {?object} object
     * @return {boolean} True if `object` is a valid owner.
     * @final
     */
    isValidOwner: function (object) {
      return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
    },

    /**
     * Adds a component by ref to an owner component.
     *
     * @param {ReactComponent} component Component to reference.
     * @param {string} ref Name by which to refer to the component.
     * @param {ReactOwner} owner Component on which to record the ref.
     * @final
     * @internal
     */
    addComponentAsRefTo: function (component, ref, owner) {
      !ReactOwner.isValidOwner(owner) ?  true ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : void 0;
      owner.attachRef(ref, component);
    },

    /**
     * Removes a component by ref from an owner component.
     *
     * @param {ReactComponent} component Component to dereference.
     * @param {string} ref Name of the ref to remove.
     * @param {ReactOwner} owner Component on which the ref is recorded.
     * @final
     * @internal
     */
    removeComponentAsRefFrom: function (component, ref, owner) {
      !ReactOwner.isValidOwner(owner) ?  true ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : void 0;
      var ownerPublicInstance = owner.getPublicInstance();
      // Check that `component`'s owner is still alive and that `component` is still the current ref
      // because we do not want to detach the ref if another component stole it.
      if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
        owner.detachRef(ref);
      }
    }

  };

  module.exports = ReactOwner;

/***/ },
/* 1255 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactReconcileTransaction
   */

  'use strict';

  var _assign = __webpack_require__(100);

  var CallbackQueue = __webpack_require__(487);
  var PooledClass = __webpack_require__(166);
  var ReactBrowserEventEmitter = __webpack_require__(272);
  var ReactInputSelection = __webpack_require__(498);
  var Transaction = __webpack_require__(276);

  /**
   * Ensures that, when possible, the selection range (currently selected text
   * input) is not disturbed by performing the transaction.
   */
  var SELECTION_RESTORATION = {
    /**
     * @return {Selection} Selection information.
     */
    initialize: ReactInputSelection.getSelectionInformation,
    /**
     * @param {Selection} sel Selection information returned from `initialize`.
     */
    close: ReactInputSelection.restoreSelection
  };

  /**
   * Suppresses events (blur/focus) that could be inadvertently dispatched due to
   * high level DOM manipulations (like temporarily removing a text input from the
   * DOM).
   */
  var EVENT_SUPPRESSION = {
    /**
     * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
     * the reconciliation.
     */
    initialize: function () {
      var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
      ReactBrowserEventEmitter.setEnabled(false);
      return currentlyEnabled;
    },

    /**
     * @param {boolean} previouslyEnabled Enabled status of
     *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
     *   restores the previous value.
     */
    close: function (previouslyEnabled) {
      ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
    }
  };

  /**
   * Provides a queue for collecting `componentDidMount` and
   * `componentDidUpdate` callbacks during the transaction.
   */
  var ON_DOM_READY_QUEUEING = {
    /**
     * Initializes the internal `onDOMReady` queue.
     */
    initialize: function () {
      this.reactMountReady.reset();
    },

    /**
     * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
     */
    close: function () {
      this.reactMountReady.notifyAll();
    }
  };

  /**
   * Executed within the scope of the `Transaction` instance. Consider these as
   * being member methods, but with an implied ordering while being isolated from
   * each other.
   */
  var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

  /**
   * Currently:
   * - The order that these are listed in the transaction is critical:
   * - Suppresses events.
   * - Restores selection range.
   *
   * Future:
   * - Restore document/overflow scroll positions that were unintentionally
   *   modified via DOM insertions above the top viewport boundary.
   * - Implement/integrate with customized constraint based layout system and keep
   *   track of which dimensions must be remeasured.
   *
   * @class ReactReconcileTransaction
   */
  function ReactReconcileTransaction(useCreateElement) {
    this.reinitializeTransaction();
    // Only server-side rendering really needs this option (see
    // `ReactServerRendering`), but server-side uses
    // `ReactServerRenderingTransaction` instead. This option is here so that it's
    // accessible and defaults to false when `ReactDOMComponent` and
    // `ReactTextComponent` checks it in `mountComponent`.`
    this.renderToStaticMarkup = false;
    this.reactMountReady = CallbackQueue.getPooled(null);
    this.useCreateElement = useCreateElement;
  }

  var Mixin = {
    /**
     * @see Transaction
     * @abstract
     * @final
     * @return {array<object>} List of operation wrap procedures.
     *   TODO: convert to array<TransactionWrapper>
     */
    getTransactionWrappers: function () {
      return TRANSACTION_WRAPPERS;
    },

    /**
     * @return {object} The queue to collect `onDOMReady` callbacks with.
     */
    getReactMountReady: function () {
      return this.reactMountReady;
    },

    /**
     * Save current transaction state -- if the return value from this method is
     * passed to `rollback`, the transaction will be reset to that state.
     */
    checkpoint: function () {
      // reactMountReady is the our only stateful wrapper
      return this.reactMountReady.checkpoint();
    },

    rollback: function (checkpoint) {
      this.reactMountReady.rollback(checkpoint);
    },

    /**
     * `PooledClass` looks for this, and will invoke this before allowing this
     * instance to be reused.
     */
    destructor: function () {
      CallbackQueue.release(this.reactMountReady);
      this.reactMountReady = null;
    }
  };

  _assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

  PooledClass.addPoolingTo(ReactReconcileTransaction);

  module.exports = ReactReconcileTransaction;

/***/ },
/* 1256 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactRef
   */

  'use strict';

  var ReactOwner = __webpack_require__(1254);

  var ReactRef = {};

  function attachRef(ref, component, owner) {
    if (typeof ref === 'function') {
      ref(component.getPublicInstance());
    } else {
      // Legacy ref
      ReactOwner.addComponentAsRefTo(component, ref, owner);
    }
  }

  function detachRef(ref, component, owner) {
    if (typeof ref === 'function') {
      ref(null);
    } else {
      // Legacy ref
      ReactOwner.removeComponentAsRefFrom(component, ref, owner);
    }
  }

  ReactRef.attachRefs = function (instance, element) {
    if (element === null || element === false) {
      return;
    }
    var ref = element.ref;
    if (ref != null) {
      attachRef(ref, instance, element._owner);
    }
  };

  ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
    // If either the owner or a `ref` has changed, make sure the newest owner
    // has stored a reference to `this`, and the previous owner (if different)
    // has forgotten the reference to `this`. We use the element instead
    // of the public this.props because the post processing cannot determine
    // a ref. The ref conceptually lives on the element.

    // TODO: Should this even be possible? The owner cannot change because
    // it's forbidden by shouldUpdateReactComponent. The ref can change
    // if you swap the keys of but not the refs. Reconsider where this check
    // is made. It probably belongs where the key checking and
    // instantiateReactComponent is done.

    var prevEmpty = prevElement === null || prevElement === false;
    var nextEmpty = nextElement === null || nextElement === false;

    return(
      // This has a few false positives w/r/t empty components.
      prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref
    );
  };

  ReactRef.detachRefs = function (instance, element) {
    if (element === null || element === false) {
      return;
    }
    var ref = element.ref;
    if (ref != null) {
      detachRef(ref, instance, element._owner);
    }
  };

  module.exports = ReactRef;

/***/ },
/* 1257 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2014-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactServerRenderingTransaction
   */

  'use strict';

  var _assign = __webpack_require__(100);

  var PooledClass = __webpack_require__(166);
  var Transaction = __webpack_require__(276);

  /**
   * Executed within the scope of the `Transaction` instance. Consider these as
   * being member methods, but with an implied ordering while being isolated from
   * each other.
   */
  var TRANSACTION_WRAPPERS = [];

  var noopCallbackQueue = {
    enqueue: function () {}
  };

  /**
   * @class ReactServerRenderingTransaction
   * @param {boolean} renderToStaticMarkup
   */
  function ReactServerRenderingTransaction(renderToStaticMarkup) {
    this.reinitializeTransaction();
    this.renderToStaticMarkup = renderToStaticMarkup;
    this.useCreateElement = false;
  }

  var Mixin = {
    /**
     * @see Transaction
     * @abstract
     * @final
     * @return {array} Empty list of operation wrap procedures.
     */
    getTransactionWrappers: function () {
      return TRANSACTION_WRAPPERS;
    },

    /**
     * @return {object} The queue to collect `onDOMReady` callbacks with.
     */
    getReactMountReady: function () {
      return noopCallbackQueue;
    },

    /**
     * `PooledClass` looks for this, and will invoke this before allowing this
     * instance to be reused.
     */
    destructor: function () {},

    checkpoint: function () {},

    rollback: function () {}
  };

  _assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);

  PooledClass.addPoolingTo(ReactServerRenderingTransaction);

  module.exports = ReactServerRenderingTransaction;

/***/ },
/* 1258 */
/***/ function(module, exports) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SVGDOMPropertyConfig
   */

  'use strict';

  var NS = {
    xlink: 'http://www.w3.org/1999/xlink',
    xml: 'http://www.w3.org/XML/1998/namespace'
  };

  // We use attributes for everything SVG so let's avoid some duplication and run
  // code instead.
  // The following are all specified in the HTML config already so we exclude here.
  // - class (as className)
  // - color
  // - height
  // - id
  // - lang
  // - max
  // - media
  // - method
  // - min
  // - name
  // - style
  // - target
  // - type
  // - width
  var ATTRS = {
    accentHeight: 'accent-height',
    accumulate: 0,
    additive: 0,
    alignmentBaseline: 'alignment-baseline',
    allowReorder: 'allowReorder',
    alphabetic: 0,
    amplitude: 0,
    arabicForm: 'arabic-form',
    ascent: 0,
    attributeName: 'attributeName',
    attributeType: 'attributeType',
    autoReverse: 'autoReverse',
    azimuth: 0,
    baseFrequency: 'baseFrequency',
    baseProfile: 'baseProfile',
    baselineShift: 'baseline-shift',
    bbox: 0,
    begin: 0,
    bias: 0,
    by: 0,
    calcMode: 'calcMode',
    capHeight: 'cap-height',
    clip: 0,
    clipPath: 'clip-path',
    clipRule: 'clip-rule',
    clipPathUnits: 'clipPathUnits',
    colorInterpolation: 'color-interpolation',
    colorInterpolationFilters: 'color-interpolation-filters',
    colorProfile: 'color-profile',
    colorRendering: 'color-rendering',
    contentScriptType: 'contentScriptType',
    contentStyleType: 'contentStyleType',
    cursor: 0,
    cx: 0,
    cy: 0,
    d: 0,
    decelerate: 0,
    descent: 0,
    diffuseConstant: 'diffuseConstant',
    direction: 0,
    display: 0,
    divisor: 0,
    dominantBaseline: 'dominant-baseline',
    dur: 0,
    dx: 0,
    dy: 0,
    edgeMode: 'edgeMode',
    elevation: 0,
    enableBackground: 'enable-background',
    end: 0,
    exponent: 0,
    externalResourcesRequired: 'externalResourcesRequired',
    fill: 0,
    fillOpacity: 'fill-opacity',
    fillRule: 'fill-rule',
    filter: 0,
    filterRes: 'filterRes',
    filterUnits: 'filterUnits',
    floodColor: 'flood-color',
    floodOpacity: 'flood-opacity',
    focusable: 0,
    fontFamily: 'font-family',
    fontSize: 'font-size',
    fontSizeAdjust: 'font-size-adjust',
    fontStretch: 'font-stretch',
    fontStyle: 'font-style',
    fontVariant: 'font-variant',
    fontWeight: 'font-weight',
    format: 0,
    from: 0,
    fx: 0,
    fy: 0,
    g1: 0,
    g2: 0,
    glyphName: 'glyph-name',
    glyphOrientationHorizontal: 'glyph-orientation-horizontal',
    glyphOrientationVertical: 'glyph-orientation-vertical',
    glyphRef: 'glyphRef',
    gradientTransform: 'gradientTransform',
    gradientUnits: 'gradientUnits',
    hanging: 0,
    horizAdvX: 'horiz-adv-x',
    horizOriginX: 'horiz-origin-x',
    ideographic: 0,
    imageRendering: 'image-rendering',
    'in': 0,
    in2: 0,
    intercept: 0,
    k: 0,
    k1: 0,
    k2: 0,
    k3: 0,
    k4: 0,
    kernelMatrix: 'kernelMatrix',
    kernelUnitLength: 'kernelUnitLength',
    kerning: 0,
    keyPoints: 'keyPoints',
    keySplines: 'keySplines',
    keyTimes: 'keyTimes',
    lengthAdjust: 'lengthAdjust',
    letterSpacing: 'letter-spacing',
    lightingColor: 'lighting-color',
    limitingConeAngle: 'limitingConeAngle',
    local: 0,
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    markerHeight: 'markerHeight',
    markerUnits: 'markerUnits',
    markerWidth: 'markerWidth',
    mask: 0,
    maskContentUnits: 'maskContentUnits',
    maskUnits: 'maskUnits',
    mathematical: 0,
    mode: 0,
    numOctaves: 'numOctaves',
    offset: 0,
    opacity: 0,
    operator: 0,
    order: 0,
    orient: 0,
    orientation: 0,
    origin: 0,
    overflow: 0,
    overlinePosition: 'overline-position',
    overlineThickness: 'overline-thickness',
    paintOrder: 'paint-order',
    panose1: 'panose-1',
    pathLength: 'pathLength',
    patternContentUnits: 'patternContentUnits',
    patternTransform: 'patternTransform',
    patternUnits: 'patternUnits',
    pointerEvents: 'pointer-events',
    points: 0,
    pointsAtX: 'pointsAtX',
    pointsAtY: 'pointsAtY',
    pointsAtZ: 'pointsAtZ',
    preserveAlpha: 'preserveAlpha',
    preserveAspectRatio: 'preserveAspectRatio',
    primitiveUnits: 'primitiveUnits',
    r: 0,
    radius: 0,
    refX: 'refX',
    refY: 'refY',
    renderingIntent: 'rendering-intent',
    repeatCount: 'repeatCount',
    repeatDur: 'repeatDur',
    requiredExtensions: 'requiredExtensions',
    requiredFeatures: 'requiredFeatures',
    restart: 0,
    result: 0,
    rotate: 0,
    rx: 0,
    ry: 0,
    scale: 0,
    seed: 0,
    shapeRendering: 'shape-rendering',
    slope: 0,
    spacing: 0,
    specularConstant: 'specularConstant',
    specularExponent: 'specularExponent',
    speed: 0,
    spreadMethod: 'spreadMethod',
    startOffset: 'startOffset',
    stdDeviation: 'stdDeviation',
    stemh: 0,
    stemv: 0,
    stitchTiles: 'stitchTiles',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strikethroughPosition: 'strikethrough-position',
    strikethroughThickness: 'strikethrough-thickness',
    string: 0,
    stroke: 0,
    strokeDasharray: 'stroke-dasharray',
    strokeDashoffset: 'stroke-dashoffset',
    strokeLinecap: 'stroke-linecap',
    strokeLinejoin: 'stroke-linejoin',
    strokeMiterlimit: 'stroke-miterlimit',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    surfaceScale: 'surfaceScale',
    systemLanguage: 'systemLanguage',
    tableValues: 'tableValues',
    targetX: 'targetX',
    targetY: 'targetY',
    textAnchor: 'text-anchor',
    textDecoration: 'text-decoration',
    textRendering: 'text-rendering',
    textLength: 'textLength',
    to: 0,
    transform: 0,
    u1: 0,
    u2: 0,
    underlinePosition: 'underline-position',
    underlineThickness: 'underline-thickness',
    unicode: 0,
    unicodeBidi: 'unicode-bidi',
    unicodeRange: 'unicode-range',
    unitsPerEm: 'units-per-em',
    vAlphabetic: 'v-alphabetic',
    vHanging: 'v-hanging',
    vIdeographic: 'v-ideographic',
    vMathematical: 'v-mathematical',
    values: 0,
    vectorEffect: 'vector-effect',
    version: 0,
    vertAdvY: 'vert-adv-y',
    vertOriginX: 'vert-origin-x',
    vertOriginY: 'vert-origin-y',
    viewBox: 'viewBox',
    viewTarget: 'viewTarget',
    visibility: 0,
    widths: 0,
    wordSpacing: 'word-spacing',
    writingMode: 'writing-mode',
    x: 0,
    xHeight: 'x-height',
    x1: 0,
    x2: 0,
    xChannelSelector: 'xChannelSelector',
    xlinkActuate: 'xlink:actuate',
    xlinkArcrole: 'xlink:arcrole',
    xlinkHref: 'xlink:href',
    xlinkRole: 'xlink:role',
    xlinkShow: 'xlink:show',
    xlinkTitle: 'xlink:title',
    xlinkType: 'xlink:type',
    xmlBase: 'xml:base',
    xmlLang: 'xml:lang',
    xmlSpace: 'xml:space',
    y: 0,
    y1: 0,
    y2: 0,
    yChannelSelector: 'yChannelSelector',
    z: 0,
    zoomAndPan: 'zoomAndPan'
  };

  var SVGDOMPropertyConfig = {
    Properties: {},
    DOMAttributeNamespaces: {
      xlinkActuate: NS.xlink,
      xlinkArcrole: NS.xlink,
      xlinkHref: NS.xlink,
      xlinkRole: NS.xlink,
      xlinkShow: NS.xlink,
      xlinkTitle: NS.xlink,
      xlinkType: NS.xlink,
      xmlBase: NS.xml,
      xmlLang: NS.xml,
      xmlSpace: NS.xml
    },
    DOMAttributeNames: {}
  };

  Object.keys(ATTRS).forEach(function (key) {
    SVGDOMPropertyConfig.Properties[key] = 0;
    if (ATTRS[key]) {
      SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
    }
  });

  module.exports = SVGDOMPropertyConfig;

/***/ },
/* 1259 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SelectEventPlugin
   */

  'use strict';

  var EventConstants = __webpack_require__(155);
  var EventPropagators = __webpack_require__(221);
  var ExecutionEnvironment = __webpack_require__(109);
  var ReactDOMComponentTree = __webpack_require__(108);
  var ReactInputSelection = __webpack_require__(498);
  var SyntheticEvent = __webpack_require__(156);

  var getActiveElement = __webpack_require__(441);
  var isTextInputElement = __webpack_require__(513);
  var keyOf = __webpack_require__(163);
  var shallowEqual = __webpack_require__(443);

  var topLevelTypes = EventConstants.topLevelTypes;

  var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

  var eventTypes = {
    select: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onSelect: null }),
        captured: keyOf({ onSelectCapture: null })
      },
      dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
    }
  };

  var activeElement = null;
  var activeElementInst = null;
  var lastSelection = null;
  var mouseDown = false;

  // Track whether a listener exists for this plugin. If none exist, we do
  // not extract events. See #3639.
  var hasListener = false;
  var ON_SELECT_KEY = keyOf({ onSelect: null });

  /**
   * Get an object which is a unique representation of the current selection.
   *
   * The return value will not be consistent across nodes or browsers, but
   * two identical selections on the same node will return identical objects.
   *
   * @param {DOMElement} node
   * @return {object}
   */
  function getSelection(node) {
    if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
      return {
        start: node.selectionStart,
        end: node.selectionEnd
      };
    } else if (window.getSelection) {
      var selection = window.getSelection();
      return {
        anchorNode: selection.anchorNode,
        anchorOffset: selection.anchorOffset,
        focusNode: selection.focusNode,
        focusOffset: selection.focusOffset
      };
    } else if (document.selection) {
      var range = document.selection.createRange();
      return {
        parentElement: range.parentElement(),
        text: range.text,
        top: range.boundingTop,
        left: range.boundingLeft
      };
    }
  }

  /**
   * Poll selection to see whether it's changed.
   *
   * @param {object} nativeEvent
   * @return {?SyntheticEvent}
   */
  function constructSelectEvent(nativeEvent, nativeEventTarget) {
    // Ensure we have the right element, and that the user is not dragging a
    // selection (this matches native `select` event behavior). In HTML5, select
    // fires only on input and textarea thus if there's no focused element we
    // won't dispatch.
    if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
      return null;
    }

    // Only fire when selection has actually changed.
    var currentSelection = getSelection(activeElement);
    if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
      lastSelection = currentSelection;

      var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);

      syntheticEvent.type = 'select';
      syntheticEvent.target = activeElement;

      EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

      return syntheticEvent;
    }

    return null;
  }

  /**
   * This plugin creates an `onSelect` event that normalizes select events
   * across form elements.
   *
   * Supported elements are:
   * - input (see `isTextInputElement`)
   * - textarea
   * - contentEditable
   *
   * This differs from native browser implementations in the following ways:
   * - Fires on contentEditable fields as well as inputs.
   * - Fires for collapsed selection.
   * - Fires after user input.
   */
  var SelectEventPlugin = {

    eventTypes: eventTypes,

    extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      if (!hasListener) {
        return null;
      }

      var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

      switch (topLevelType) {
        // Track the input node that has focus.
        case topLevelTypes.topFocus:
          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
            activeElement = targetNode;
            activeElementInst = targetInst;
            lastSelection = null;
          }
          break;
        case topLevelTypes.topBlur:
          activeElement = null;
          activeElementInst = null;
          lastSelection = null;
          break;

        // Don't fire the event while the user is dragging. This matches the
        // semantics of the native select event.
        case topLevelTypes.topMouseDown:
          mouseDown = true;
          break;
        case topLevelTypes.topContextMenu:
        case topLevelTypes.topMouseUp:
          mouseDown = false;
          return constructSelectEvent(nativeEvent, nativeEventTarget);

        // Chrome and IE fire non-standard event when selection is changed (and
        // sometimes when it hasn't). IE's event fires out of order with respect
        // to key and input events on deletion, so we discard it.
        //
        // Firefox doesn't support selectionchange, so check selection status
        // after each key entry. The selection changes after keydown and before
        // keyup, but we check on keydown as well in the case of holding down a
        // key, when multiple keydown events are fired but only one keyup is.
        // This is also our approach for IE handling, for the reason above.
        case topLevelTypes.topSelectionChange:
          if (skipSelectionChangeEvent) {
            break;
          }
        // falls through
        case topLevelTypes.topKeyDown:
        case topLevelTypes.topKeyUp:
          return constructSelectEvent(nativeEvent, nativeEventTarget);
      }

      return null;
    },

    didPutListener: function (inst, registrationName, listener) {
      if (registrationName === ON_SELECT_KEY) {
        hasListener = true;
      }
    }
  };

  module.exports = SelectEventPlugin;

/***/ },
/* 1260 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SimpleEventPlugin
   */

  'use strict';

  var EventConstants = __webpack_require__(155);
  var EventListener = __webpack_require__(439);
  var EventPropagators = __webpack_require__(221);
  var ReactDOMComponentTree = __webpack_require__(108);
  var SyntheticAnimationEvent = __webpack_require__(1261);
  var SyntheticClipboardEvent = __webpack_require__(1262);
  var SyntheticEvent = __webpack_require__(156);
  var SyntheticFocusEvent = __webpack_require__(1265);
  var SyntheticKeyboardEvent = __webpack_require__(1267);
  var SyntheticMouseEvent = __webpack_require__(275);
  var SyntheticDragEvent = __webpack_require__(1264);
  var SyntheticTouchEvent = __webpack_require__(1268);
  var SyntheticTransitionEvent = __webpack_require__(1269);
  var SyntheticUIEvent = __webpack_require__(222);
  var SyntheticWheelEvent = __webpack_require__(1270);

  var emptyFunction = __webpack_require__(124);
  var getEventCharCode = __webpack_require__(367);
  var invariant = __webpack_require__(91);
  var keyOf = __webpack_require__(163);

  var topLevelTypes = EventConstants.topLevelTypes;

  var eventTypes = {
    abort: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onAbort: true }),
        captured: keyOf({ onAbortCapture: true })
      }
    },
    animationEnd: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onAnimationEnd: true }),
        captured: keyOf({ onAnimationEndCapture: true })
      }
    },
    animationIteration: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onAnimationIteration: true }),
        captured: keyOf({ onAnimationIterationCapture: true })
      }
    },
    animationStart: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onAnimationStart: true }),
        captured: keyOf({ onAnimationStartCapture: true })
      }
    },
    blur: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onBlur: true }),
        captured: keyOf({ onBlurCapture: true })
      }
    },
    canPlay: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onCanPlay: true }),
        captured: keyOf({ onCanPlayCapture: true })
      }
    },
    canPlayThrough: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onCanPlayThrough: true }),
        captured: keyOf({ onCanPlayThroughCapture: true })
      }
    },
    click: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onClick: true }),
        captured: keyOf({ onClickCapture: true })
      }
    },
    contextMenu: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onContextMenu: true }),
        captured: keyOf({ onContextMenuCapture: true })
      }
    },
    copy: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onCopy: true }),
        captured: keyOf({ onCopyCapture: true })
      }
    },
    cut: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onCut: true }),
        captured: keyOf({ onCutCapture: true })
      }
    },
    doubleClick: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onDoubleClick: true }),
        captured: keyOf({ onDoubleClickCapture: true })
      }
    },
    drag: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onDrag: true }),
        captured: keyOf({ onDragCapture: true })
      }
    },
    dragEnd: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onDragEnd: true }),
        captured: keyOf({ onDragEndCapture: true })
      }
    },
    dragEnter: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onDragEnter: true }),
        captured: keyOf({ onDragEnterCapture: true })
      }
    },
    dragExit: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onDragExit: true }),
        captured: keyOf({ onDragExitCapture: true })
      }
    },
    dragLeave: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onDragLeave: true }),
        captured: keyOf({ onDragLeaveCapture: true })
      }
    },
    dragOver: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onDragOver: true }),
        captured: keyOf({ onDragOverCapture: true })
      }
    },
    dragStart: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onDragStart: true }),
        captured: keyOf({ onDragStartCapture: true })
      }
    },
    drop: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onDrop: true }),
        captured: keyOf({ onDropCapture: true })
      }
    },
    durationChange: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onDurationChange: true }),
        captured: keyOf({ onDurationChangeCapture: true })
      }
    },
    emptied: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onEmptied: true }),
        captured: keyOf({ onEmptiedCapture: true })
      }
    },
    encrypted: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onEncrypted: true }),
        captured: keyOf({ onEncryptedCapture: true })
      }
    },
    ended: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onEnded: true }),
        captured: keyOf({ onEndedCapture: true })
      }
    },
    error: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onError: true }),
        captured: keyOf({ onErrorCapture: true })
      }
    },
    focus: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onFocus: true }),
        captured: keyOf({ onFocusCapture: true })
      }
    },
    input: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onInput: true }),
        captured: keyOf({ onInputCapture: true })
      }
    },
    invalid: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onInvalid: true }),
        captured: keyOf({ onInvalidCapture: true })
      }
    },
    keyDown: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onKeyDown: true }),
        captured: keyOf({ onKeyDownCapture: true })
      }
    },
    keyPress: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onKeyPress: true }),
        captured: keyOf({ onKeyPressCapture: true })
      }
    },
    keyUp: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onKeyUp: true }),
        captured: keyOf({ onKeyUpCapture: true })
      }
    },
    load: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onLoad: true }),
        captured: keyOf({ onLoadCapture: true })
      }
    },
    loadedData: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onLoadedData: true }),
        captured: keyOf({ onLoadedDataCapture: true })
      }
    },
    loadedMetadata: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onLoadedMetadata: true }),
        captured: keyOf({ onLoadedMetadataCapture: true })
      }
    },
    loadStart: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onLoadStart: true }),
        captured: keyOf({ onLoadStartCapture: true })
      }
    },
    // Note: We do not allow listening to mouseOver events. Instead, use the
    // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
    mouseDown: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onMouseDown: true }),
        captured: keyOf({ onMouseDownCapture: true })
      }
    },
    mouseMove: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onMouseMove: true }),
        captured: keyOf({ onMouseMoveCapture: true })
      }
    },
    mouseOut: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onMouseOut: true }),
        captured: keyOf({ onMouseOutCapture: true })
      }
    },
    mouseOver: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onMouseOver: true }),
        captured: keyOf({ onMouseOverCapture: true })
      }
    },
    mouseUp: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onMouseUp: true }),
        captured: keyOf({ onMouseUpCapture: true })
      }
    },
    paste: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onPaste: true }),
        captured: keyOf({ onPasteCapture: true })
      }
    },
    pause: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onPause: true }),
        captured: keyOf({ onPauseCapture: true })
      }
    },
    play: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onPlay: true }),
        captured: keyOf({ onPlayCapture: true })
      }
    },
    playing: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onPlaying: true }),
        captured: keyOf({ onPlayingCapture: true })
      }
    },
    progress: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onProgress: true }),
        captured: keyOf({ onProgressCapture: true })
      }
    },
    rateChange: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onRateChange: true }),
        captured: keyOf({ onRateChangeCapture: true })
      }
    },
    reset: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onReset: true }),
        captured: keyOf({ onResetCapture: true })
      }
    },
    scroll: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onScroll: true }),
        captured: keyOf({ onScrollCapture: true })
      }
    },
    seeked: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onSeeked: true }),
        captured: keyOf({ onSeekedCapture: true })
      }
    },
    seeking: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onSeeking: true }),
        captured: keyOf({ onSeekingCapture: true })
      }
    },
    stalled: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onStalled: true }),
        captured: keyOf({ onStalledCapture: true })
      }
    },
    submit: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onSubmit: true }),
        captured: keyOf({ onSubmitCapture: true })
      }
    },
    suspend: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onSuspend: true }),
        captured: keyOf({ onSuspendCapture: true })
      }
    },
    timeUpdate: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onTimeUpdate: true }),
        captured: keyOf({ onTimeUpdateCapture: true })
      }
    },
    touchCancel: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onTouchCancel: true }),
        captured: keyOf({ onTouchCancelCapture: true })
      }
    },
    touchEnd: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onTouchEnd: true }),
        captured: keyOf({ onTouchEndCapture: true })
      }
    },
    touchMove: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onTouchMove: true }),
        captured: keyOf({ onTouchMoveCapture: true })
      }
    },
    touchStart: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onTouchStart: true }),
        captured: keyOf({ onTouchStartCapture: true })
      }
    },
    transitionEnd: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onTransitionEnd: true }),
        captured: keyOf({ onTransitionEndCapture: true })
      }
    },
    volumeChange: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onVolumeChange: true }),
        captured: keyOf({ onVolumeChangeCapture: true })
      }
    },
    waiting: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onWaiting: true }),
        captured: keyOf({ onWaitingCapture: true })
      }
    },
    wheel: {
      phasedRegistrationNames: {
        bubbled: keyOf({ onWheel: true }),
        captured: keyOf({ onWheelCapture: true })
      }
    }
  };

  var topLevelEventsToDispatchConfig = {
    topAbort: eventTypes.abort,
    topAnimationEnd: eventTypes.animationEnd,
    topAnimationIteration: eventTypes.animationIteration,
    topAnimationStart: eventTypes.animationStart,
    topBlur: eventTypes.blur,
    topCanPlay: eventTypes.canPlay,
    topCanPlayThrough: eventTypes.canPlayThrough,
    topClick: eventTypes.click,
    topContextMenu: eventTypes.contextMenu,
    topCopy: eventTypes.copy,
    topCut: eventTypes.cut,
    topDoubleClick: eventTypes.doubleClick,
    topDrag: eventTypes.drag,
    topDragEnd: eventTypes.dragEnd,
    topDragEnter: eventTypes.dragEnter,
    topDragExit: eventTypes.dragExit,
    topDragLeave: eventTypes.dragLeave,
    topDragOver: eventTypes.dragOver,
    topDragStart: eventTypes.dragStart,
    topDrop: eventTypes.drop,
    topDurationChange: eventTypes.durationChange,
    topEmptied: eventTypes.emptied,
    topEncrypted: eventTypes.encrypted,
    topEnded: eventTypes.ended,
    topError: eventTypes.error,
    topFocus: eventTypes.focus,
    topInput: eventTypes.input,
    topInvalid: eventTypes.invalid,
    topKeyDown: eventTypes.keyDown,
    topKeyPress: eventTypes.keyPress,
    topKeyUp: eventTypes.keyUp,
    topLoad: eventTypes.load,
    topLoadedData: eventTypes.loadedData,
    topLoadedMetadata: eventTypes.loadedMetadata,
    topLoadStart: eventTypes.loadStart,
    topMouseDown: eventTypes.mouseDown,
    topMouseMove: eventTypes.mouseMove,
    topMouseOut: eventTypes.mouseOut,
    topMouseOver: eventTypes.mouseOver,
    topMouseUp: eventTypes.mouseUp,
    topPaste: eventTypes.paste,
    topPause: eventTypes.pause,
    topPlay: eventTypes.play,
    topPlaying: eventTypes.playing,
    topProgress: eventTypes.progress,
    topRateChange: eventTypes.rateChange,
    topReset: eventTypes.reset,
    topScroll: eventTypes.scroll,
    topSeeked: eventTypes.seeked,
    topSeeking: eventTypes.seeking,
    topStalled: eventTypes.stalled,
    topSubmit: eventTypes.submit,
    topSuspend: eventTypes.suspend,
    topTimeUpdate: eventTypes.timeUpdate,
    topTouchCancel: eventTypes.touchCancel,
    topTouchEnd: eventTypes.touchEnd,
    topTouchMove: eventTypes.touchMove,
    topTouchStart: eventTypes.touchStart,
    topTransitionEnd: eventTypes.transitionEnd,
    topVolumeChange: eventTypes.volumeChange,
    topWaiting: eventTypes.waiting,
    topWheel: eventTypes.wheel
  };

  for (var type in topLevelEventsToDispatchConfig) {
    topLevelEventsToDispatchConfig[type].dependencies = [type];
  }

  var ON_CLICK_KEY = keyOf({ onClick: null });
  var onClickListeners = {};

  var SimpleEventPlugin = {

    eventTypes: eventTypes,

    extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
      if (!dispatchConfig) {
        return null;
      }
      var EventConstructor;
      switch (topLevelType) {
        case topLevelTypes.topAbort:
        case topLevelTypes.topCanPlay:
        case topLevelTypes.topCanPlayThrough:
        case topLevelTypes.topDurationChange:
        case topLevelTypes.topEmptied:
        case topLevelTypes.topEncrypted:
        case topLevelTypes.topEnded:
        case topLevelTypes.topError:
        case topLevelTypes.topInput:
        case topLevelTypes.topInvalid:
        case topLevelTypes.topLoad:
        case topLevelTypes.topLoadedData:
        case topLevelTypes.topLoadedMetadata:
        case topLevelTypes.topLoadStart:
        case topLevelTypes.topPause:
        case topLevelTypes.topPlay:
        case topLevelTypes.topPlaying:
        case topLevelTypes.topProgress:
        case topLevelTypes.topRateChange:
        case topLevelTypes.topReset:
        case topLevelTypes.topSeeked:
        case topLevelTypes.topSeeking:
        case topLevelTypes.topStalled:
        case topLevelTypes.topSubmit:
        case topLevelTypes.topSuspend:
        case topLevelTypes.topTimeUpdate:
        case topLevelTypes.topVolumeChange:
        case topLevelTypes.topWaiting:
          // HTML Events
          // @see http://www.w3.org/TR/html5/index.html#events-0
          EventConstructor = SyntheticEvent;
          break;
        case topLevelTypes.topKeyPress:
          // Firefox creates a keypress event for function keys too. This removes
          // the unwanted keypress events. Enter is however both printable and
          // non-printable. One would expect Tab to be as well (but it isn't).
          if (getEventCharCode(nativeEvent) === 0) {
            return null;
          }
        /* falls through */
        case topLevelTypes.topKeyDown:
        case topLevelTypes.topKeyUp:
          EventConstructor = SyntheticKeyboardEvent;
          break;
        case topLevelTypes.topBlur:
        case topLevelTypes.topFocus:
          EventConstructor = SyntheticFocusEvent;
          break;
        case topLevelTypes.topClick:
          // Firefox creates a click event on right mouse clicks. This removes the
          // unwanted click events.
          if (nativeEvent.button === 2) {
            return null;
          }
        /* falls through */
        case topLevelTypes.topContextMenu:
        case topLevelTypes.topDoubleClick:
        case topLevelTypes.topMouseDown:
        case topLevelTypes.topMouseMove:
        case topLevelTypes.topMouseOut:
        case topLevelTypes.topMouseOver:
        case topLevelTypes.topMouseUp:
          EventConstructor = SyntheticMouseEvent;
          break;
        case topLevelTypes.topDrag:
        case topLevelTypes.topDragEnd:
        case topLevelTypes.topDragEnter:
        case topLevelTypes.topDragExit:
        case topLevelTypes.topDragLeave:
        case topLevelTypes.topDragOver:
        case topLevelTypes.topDragStart:
        case topLevelTypes.topDrop:
          EventConstructor = SyntheticDragEvent;
          break;
        case topLevelTypes.topTouchCancel:
        case topLevelTypes.topTouchEnd:
        case topLevelTypes.topTouchMove:
        case topLevelTypes.topTouchStart:
          EventConstructor = SyntheticTouchEvent;
          break;
        case topLevelTypes.topAnimationEnd:
        case topLevelTypes.topAnimationIteration:
        case topLevelTypes.topAnimationStart:
          EventConstructor = SyntheticAnimationEvent;
          break;
        case topLevelTypes.topTransitionEnd:
          EventConstructor = SyntheticTransitionEvent;
          break;
        case topLevelTypes.topScroll:
          EventConstructor = SyntheticUIEvent;
          break;
        case topLevelTypes.topWheel:
          EventConstructor = SyntheticWheelEvent;
          break;
        case topLevelTypes.topCopy:
        case topLevelTypes.topCut:
        case topLevelTypes.topPaste:
          EventConstructor = SyntheticClipboardEvent;
          break;
      }
      !EventConstructor ?  true ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : void 0;
      var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
      EventPropagators.accumulateTwoPhaseDispatches(event);
      return event;
    },

    didPutListener: function (inst, registrationName, listener) {
      // Mobile Safari does not fire properly bubble click events on
      // non-interactive elements, which means delegated click listeners do not
      // fire. The workaround for this bug involves attaching an empty click
      // listener on the target node.
      if (registrationName === ON_CLICK_KEY) {
        var id = inst._rootNodeID;
        var node = ReactDOMComponentTree.getNodeFromInstance(inst);
        if (!onClickListeners[id]) {
          onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);
        }
      }
    },

    willDeleteListener: function (inst, registrationName) {
      if (registrationName === ON_CLICK_KEY) {
        var id = inst._rootNodeID;
        onClickListeners[id].remove();
        delete onClickListeners[id];
      }
    }

  };

  module.exports = SimpleEventPlugin;

/***/ },
/* 1261 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SyntheticAnimationEvent
   */

  'use strict';

  var SyntheticEvent = __webpack_require__(156);

  /**
   * @interface Event
   * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
   * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
   */
  var AnimationEventInterface = {
    animationName: null,
    elapsedTime: null,
    pseudoElement: null
  };

  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticEvent}
   */
  function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }

  SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

  module.exports = SyntheticAnimationEvent;

/***/ },
/* 1262 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SyntheticClipboardEvent
   */

  'use strict';

  var SyntheticEvent = __webpack_require__(156);

  /**
   * @interface Event
   * @see http://www.w3.org/TR/clipboard-apis/
   */
  var ClipboardEventInterface = {
    clipboardData: function (event) {
      return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
    }
  };

  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticUIEvent}
   */
  function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }

  SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

  module.exports = SyntheticClipboardEvent;

/***/ },
/* 1263 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SyntheticCompositionEvent
   */

  'use strict';

  var SyntheticEvent = __webpack_require__(156);

  /**
   * @interface Event
   * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
   */
  var CompositionEventInterface = {
    data: null
  };

  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticUIEvent}
   */
  function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }

  SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

  module.exports = SyntheticCompositionEvent;

/***/ },
/* 1264 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SyntheticDragEvent
   */

  'use strict';

  var SyntheticMouseEvent = __webpack_require__(275);

  /**
   * @interface DragEvent
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */
  var DragEventInterface = {
    dataTransfer: null
  };

  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticUIEvent}
   */
  function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }

  SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

  module.exports = SyntheticDragEvent;

/***/ },
/* 1265 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SyntheticFocusEvent
   */

  'use strict';

  var SyntheticUIEvent = __webpack_require__(222);

  /**
   * @interface FocusEvent
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */
  var FocusEventInterface = {
    relatedTarget: null
  };

  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticUIEvent}
   */
  function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }

  SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

  module.exports = SyntheticFocusEvent;

/***/ },
/* 1266 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SyntheticInputEvent
   */

  'use strict';

  var SyntheticEvent = __webpack_require__(156);

  /**
   * @interface Event
   * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
   *      /#events-inputevents
   */
  var InputEventInterface = {
    data: null
  };

  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticUIEvent}
   */
  function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }

  SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

  module.exports = SyntheticInputEvent;

/***/ },
/* 1267 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SyntheticKeyboardEvent
   */

  'use strict';

  var SyntheticUIEvent = __webpack_require__(222);

  var getEventCharCode = __webpack_require__(367);
  var getEventKey = __webpack_require__(1275);
  var getEventModifierState = __webpack_require__(368);

  /**
   * @interface KeyboardEvent
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */
  var KeyboardEventInterface = {
    key: getEventKey,
    location: null,
    ctrlKey: null,
    shiftKey: null,
    altKey: null,
    metaKey: null,
    repeat: null,
    locale: null,
    getModifierState: getEventModifierState,
    // Legacy Interface
    charCode: function (event) {
      // `charCode` is the result of a KeyPress event and represents the value of
      // the actual printable character.

      // KeyPress is deprecated, but its replacement is not yet final and not
      // implemented in any major browser. Only KeyPress has charCode.
      if (event.type === 'keypress') {
        return getEventCharCode(event);
      }
      return 0;
    },
    keyCode: function (event) {
      // `keyCode` is the result of a KeyDown/Up event and represents the value of
      // physical keyboard key.

      // The actual meaning of the value depends on the users' keyboard layout
      // which cannot be detected. Assuming that it is a US keyboard layout
      // provides a surprisingly accurate mapping for US and European users.
      // Due to this, it is left to the user to implement at this time.
      if (event.type === 'keydown' || event.type === 'keyup') {
        return event.keyCode;
      }
      return 0;
    },
    which: function (event) {
      // `which` is an alias for either `keyCode` or `charCode` depending on the
      // type of the event.
      if (event.type === 'keypress') {
        return getEventCharCode(event);
      }
      if (event.type === 'keydown' || event.type === 'keyup') {
        return event.keyCode;
      }
      return 0;
    }
  };

  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticUIEvent}
   */
  function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }

  SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

  module.exports = SyntheticKeyboardEvent;

/***/ },
/* 1268 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SyntheticTouchEvent
   */

  'use strict';

  var SyntheticUIEvent = __webpack_require__(222);

  var getEventModifierState = __webpack_require__(368);

  /**
   * @interface TouchEvent
   * @see http://www.w3.org/TR/touch-events/
   */
  var TouchEventInterface = {
    touches: null,
    targetTouches: null,
    changedTouches: null,
    altKey: null,
    metaKey: null,
    ctrlKey: null,
    shiftKey: null,
    getModifierState: getEventModifierState
  };

  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticUIEvent}
   */
  function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }

  SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

  module.exports = SyntheticTouchEvent;

/***/ },
/* 1269 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SyntheticTransitionEvent
   */

  'use strict';

  var SyntheticEvent = __webpack_require__(156);

  /**
   * @interface Event
   * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
   * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
   */
  var TransitionEventInterface = {
    propertyName: null,
    elapsedTime: null,
    pseudoElement: null
  };

  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticEvent}
   */
  function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }

  SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

  module.exports = SyntheticTransitionEvent;

/***/ },
/* 1270 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SyntheticWheelEvent
   */

  'use strict';

  var SyntheticMouseEvent = __webpack_require__(275);

  /**
   * @interface WheelEvent
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */
  var WheelEventInterface = {
    deltaX: function (event) {
      return 'deltaX' in event ? event.deltaX :
      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
      'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
    },
    deltaY: function (event) {
      return 'deltaY' in event ? event.deltaY :
      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
      'wheelDeltaY' in event ? -event.wheelDeltaY :
      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
      'wheelDelta' in event ? -event.wheelDelta : 0;
    },
    deltaZ: null,

    // Browsers without "deltaMode" is reporting in raw wheel delta where one
    // notch on the scroll is always +/- 120, roughly equivalent to pixels.
    // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
    // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
    deltaMode: null
  };

  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticMouseEvent}
   */
  function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }

  SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

  module.exports = SyntheticWheelEvent;

/***/ },
/* 1271 */
/***/ function(module, exports) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule adler32
   */

  'use strict';

  var MOD = 65521;

  // adler32 is not cryptographically strong, and is only used to sanity check that
  // markup generated on the server matches the markup generated on the client.
  // This implementation (a modified version of the SheetJS version) has been optimized
  // for our use case, at the expense of conforming to the adler32 specification
  // for non-ascii inputs.
  function adler32(data) {
    var a = 1;
    var b = 0;
    var i = 0;
    var l = data.length;
    var m = l & ~0x3;
    while (i < m) {
      var n = Math.min(i + 4096, m);
      for (; i < n; i += 4) {
        b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
      }
      a %= MOD;
      b %= MOD;
    }
    for (; i < l; i++) {
      b += a += data.charCodeAt(i);
    }
    a %= MOD;
    b %= MOD;
    return a | b << 16;
  }

  module.exports = adler32;

/***/ },
/* 1272 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule dangerousStyleValue
   */

  'use strict';

  var CSSProperty = __webpack_require__(486);
  var warning = __webpack_require__(94);

  var isUnitlessNumber = CSSProperty.isUnitlessNumber;
  var styleWarnings = {};

  /**
   * Convert a value into the proper css writable value. The style name `name`
   * should be logical (no hyphens), as specified
   * in `CSSProperty.isUnitlessNumber`.
   *
   * @param {string} name CSS property name such as `topMargin`.
   * @param {*} value CSS property value such as `10px`.
   * @param {ReactDOMComponent} component
   * @return {string} Normalized style value with dimensions applied.
   */
  function dangerousStyleValue(name, value, component) {
    // Note that we've removed escapeTextForBrowser() calls here since the
    // whole string will be escaped when the attribute is injected into
    // the markup. If you provide unsafe user data here they can inject
    // arbitrary CSS which may be problematic (I couldn't repro this):
    // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
    // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
    // This is not an XSS hole but instead a potential CSS injection issue
    // which has lead to a greater discussion about how we're going to
    // trust URLs moving forward. See #2115901

    var isEmpty = value == null || typeof value === 'boolean' || value === '';
    if (isEmpty) {
      return '';
    }

    var isNonNumeric = isNaN(value);
    if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
      return '' + value; // cast to string
    }

    if (typeof value === 'string') {
      if (true) {
        if (component) {
          var owner = component._currentElement._owner;
          var ownerName = owner ? owner.getName() : null;
          if (ownerName && !styleWarnings[ownerName]) {
            styleWarnings[ownerName] = {};
          }
          var warned = false;
          if (ownerName) {
            var warnings = styleWarnings[ownerName];
            warned = warnings[name];
            if (!warned) {
              warnings[name] = true;
            }
          }
          if (!warned) {
             true ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
          }
        }
      }
      value = value.trim();
    }
    return value + 'px';
  }

  module.exports = dangerousStyleValue;

/***/ },
/* 1273 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule findDOMNode
   */

  'use strict';

  var ReactCurrentOwner = __webpack_require__(167);
  var ReactDOMComponentTree = __webpack_require__(108);
  var ReactInstanceMap = __webpack_require__(364);

  var getNativeComponentFromComposite = __webpack_require__(510);
  var invariant = __webpack_require__(91);
  var warning = __webpack_require__(94);

  /**
   * Returns the DOM node rendered by this element.
   *
   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
   *
   * @param {ReactComponent|DOMElement} componentOrElement
   * @return {?DOMElement} The root node of this element.
   */
  function findDOMNode(componentOrElement) {
    if (true) {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
         true ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
        owner._warnedAboutRefsInRender = true;
      }
    }
    if (componentOrElement == null) {
      return null;
    }
    if (componentOrElement.nodeType === 1) {
      return componentOrElement;
    }

    var inst = ReactInstanceMap.get(componentOrElement);
    if (inst) {
      inst = getNativeComponentFromComposite(inst);
      return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
    }

    if (typeof componentOrElement.render === 'function') {
       true ?  true ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : void 0;
    } else {
       true ?  true ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : void 0;
    }
  }

  module.exports = findDOMNode;

/***/ },
/* 1274 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule flattenChildren
   */

  'use strict';

  var KeyEscapeUtils = __webpack_require__(360);
  var traverseAllChildren = __webpack_require__(374);
  var warning = __webpack_require__(94);

  /**
   * @param {function} traverseContext Context passed through traversal.
   * @param {?ReactComponent} child React child component.
   * @param {!string} name String name of key path to child.
   */
  function flattenSingleChildIntoContext(traverseContext, child, name) {
    // We found a component instance.
    var result = traverseContext;
    var keyUnique = result[name] === undefined;
    if (true) {
       true ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', KeyEscapeUtils.unescape(name)) : void 0;
    }
    if (keyUnique && child != null) {
      result[name] = child;
    }
  }

  /**
   * Flattens children that are typically specified as `props.children`. Any null
   * children will not be included in the resulting object.
   * @return {!object} flattened children keyed by name.
   */
  function flattenChildren(children) {
    if (children == null) {
      return children;
    }
    var result = {};
    traverseAllChildren(children, flattenSingleChildIntoContext, result);
    return result;
  }

  module.exports = flattenChildren;

/***/ },
/* 1275 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule getEventKey
   */

  'use strict';

  var getEventCharCode = __webpack_require__(367);

  /**
   * Normalization of deprecated HTML5 `key` values
   * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
   */
  var normalizeKey = {
    'Esc': 'Escape',
    'Spacebar': ' ',
    'Left': 'ArrowLeft',
    'Up': 'ArrowUp',
    'Right': 'ArrowRight',
    'Down': 'ArrowDown',
    'Del': 'Delete',
    'Win': 'OS',
    'Menu': 'ContextMenu',
    'Apps': 'ContextMenu',
    'Scroll': 'ScrollLock',
    'MozPrintableKey': 'Unidentified'
  };

  /**
   * Translation from legacy `keyCode` to HTML5 `key`
   * Only special keys supported, all others depend on keyboard layout or browser
   * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
   */
  var translateToKey = {
    8: 'Backspace',
    9: 'Tab',
    12: 'Clear',
    13: 'Enter',
    16: 'Shift',
    17: 'Control',
    18: 'Alt',
    19: 'Pause',
    20: 'CapsLock',
    27: 'Escape',
    32: ' ',
    33: 'PageUp',
    34: 'PageDown',
    35: 'End',
    36: 'Home',
    37: 'ArrowLeft',
    38: 'ArrowUp',
    39: 'ArrowRight',
    40: 'ArrowDown',
    45: 'Insert',
    46: 'Delete',
    112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
    118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
    144: 'NumLock',
    145: 'ScrollLock',
    224: 'Meta'
  };

  /**
   * @param {object} nativeEvent Native browser event.
   * @return {string} Normalized `key` property.
   */
  function getEventKey(nativeEvent) {
    if (nativeEvent.key) {
      // Normalize inconsistent values reported by browsers due to
      // implementations of a working draft specification.

      // FireFox implements `key` but returns `MozPrintableKey` for all
      // printable characters (normalized to `Unidentified`), ignore it.
      var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
      if (key !== 'Unidentified') {
        return key;
      }
    }

    // Browser does not implement `key`, polyfill as much of it as we can.
    if (nativeEvent.type === 'keypress') {
      var charCode = getEventCharCode(nativeEvent);

      // The enter-key is technically both printable and non-printable and can
      // thus be captured by `keypress`, no other non-printable key should.
      return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
    }
    if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
      // While user keyboard layout determines the actual meaning of each
      // `keyCode` value, almost all function keys have a universal value.
      return translateToKey[nativeEvent.keyCode] || 'Unidentified';
    }
    return '';
  }

  module.exports = getEventKey;

/***/ },
/* 1276 */
/***/ function(module, exports) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule getNodeForCharacterOffset
   */

  'use strict';

  /**
   * Given any node return the first leaf node without children.
   *
   * @param {DOMElement|DOMTextNode} node
   * @return {DOMElement|DOMTextNode}
   */

  function getLeafNode(node) {
    while (node && node.firstChild) {
      node = node.firstChild;
    }
    return node;
  }

  /**
   * Get the next sibling within a container. This will walk up the
   * DOM if a node's siblings have been exhausted.
   *
   * @param {DOMElement|DOMTextNode} node
   * @return {?DOMElement|DOMTextNode}
   */
  function getSiblingNode(node) {
    while (node) {
      if (node.nextSibling) {
        return node.nextSibling;
      }
      node = node.parentNode;
    }
  }

  /**
   * Get object describing the nodes which contain characters at offset.
   *
   * @param {DOMElement|DOMTextNode} root
   * @param {number} offset
   * @return {?object}
   */
  function getNodeForCharacterOffset(root, offset) {
    var node = getLeafNode(root);
    var nodeStart = 0;
    var nodeEnd = 0;

    while (node) {
      if (node.nodeType === 3) {
        nodeEnd = nodeStart + node.textContent.length;

        if (nodeStart <= offset && nodeEnd >= offset) {
          return {
            node: node,
            offset: offset - nodeStart
          };
        }

        nodeStart = nodeEnd;
      }

      node = getLeafNode(getSiblingNode(node));
    }
  }

  module.exports = getNodeForCharacterOffset;

/***/ },
/* 1277 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule getVendorPrefixedEventName
   */

  'use strict';

  var ExecutionEnvironment = __webpack_require__(109);

  /**
   * Generate a mapping of standard vendor prefixes using the defined style property and event name.
   *
   * @param {string} styleProp
   * @param {string} eventName
   * @returns {object}
   */
  function makePrefixMap(styleProp, eventName) {
    var prefixes = {};

    prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
    prefixes['Webkit' + styleProp] = 'webkit' + eventName;
    prefixes['Moz' + styleProp] = 'moz' + eventName;
    prefixes['ms' + styleProp] = 'MS' + eventName;
    prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

    return prefixes;
  }

  /**
   * A list of event names to a configurable list of vendor prefixes.
   */
  var vendorPrefixes = {
    animationend: makePrefixMap('Animation', 'AnimationEnd'),
    animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
    animationstart: makePrefixMap('Animation', 'AnimationStart'),
    transitionend: makePrefixMap('Transition', 'TransitionEnd')
  };

  /**
   * Event names that have already been detected and prefixed (if applicable).
   */
  var prefixedEventNames = {};

  /**
   * Element to check for prefixes on.
   */
  var style = {};

  /**
   * Bootstrap if a DOM exists.
   */
  if (ExecutionEnvironment.canUseDOM) {
    style = document.createElement('div').style;

    // On some platforms, in particular some releases of Android 4.x,
    // the un-prefixed "animation" and "transition" properties are defined on the
    // style object but the events that fire will still be prefixed, so we need
    // to check if the un-prefixed events are usable, and if not remove them from the map.
    if (!('AnimationEvent' in window)) {
      delete vendorPrefixes.animationend.animation;
      delete vendorPrefixes.animationiteration.animation;
      delete vendorPrefixes.animationstart.animation;
    }

    // Same as above
    if (!('TransitionEvent' in window)) {
      delete vendorPrefixes.transitionend.transition;
    }
  }

  /**
   * Attempts to determine the correct vendor prefixed event name.
   *
   * @param {string} eventName
   * @returns {string}
   */
  function getVendorPrefixedEventName(eventName) {
    if (prefixedEventNames[eventName]) {
      return prefixedEventNames[eventName];
    } else if (!vendorPrefixes[eventName]) {
      return eventName;
    }

    var prefixMap = vendorPrefixes[eventName];

    for (var styleProp in prefixMap) {
      if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
        return prefixedEventNames[eventName] = prefixMap[styleProp];
      }
    }

    return '';
  }

  module.exports = getVendorPrefixedEventName;

/***/ },
/* 1278 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule onlyChild
   */
  'use strict';

  var ReactElement = __webpack_require__(135);

  var invariant = __webpack_require__(91);

  /**
   * Returns the first child in a collection of children and verifies that there
   * is only one child in the collection.
   *
   * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
   *
   * The current implementation of this function assumes that a single child gets
   * passed without a wrapper, but the purpose of this helper function is to
   * abstract away the particular structure of children.
   *
   * @param {?object} children Child collection structure.
   * @return {ReactElement} The first and only `ReactElement` contained in the
   * structure.
   */
  function onlyChild(children) {
    !ReactElement.isValidElement(children) ?  true ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : void 0;
    return children;
  }

  module.exports = onlyChild;

/***/ },
/* 1279 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule quoteAttributeValueForBrowser
   */

  'use strict';

  var escapeTextContentForBrowser = __webpack_require__(277);

  /**
   * Escapes attribute value to prevent scripting attacks.
   *
   * @param {*} value Value to escape.
   * @return {string} An escaped string.
   */
  function quoteAttributeValueForBrowser(value) {
    return '"' + escapeTextContentForBrowser(value) + '"';
  }

  module.exports = quoteAttributeValueForBrowser;

/***/ },
/* 1280 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
  * @providesModule renderSubtreeIntoContainer
  */

  'use strict';

  var ReactMount = __webpack_require__(499);

  module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ },
/* 1281 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(global, process) {/**
   * Copyright (c) 2014, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
   * additional grant of patent rights can be found in the PATENTS file in
   * the same directory.
   */

  !(function(global) {
    "use strict";

    var hasOwn = Object.prototype.hasOwnProperty;
    var undefined; // More compressible than void 0.
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    var inModule = typeof module === "object";
    var runtime = global.regeneratorRuntime;
    if (runtime) {
      if (inModule) {
        // If regeneratorRuntime is defined globally and we're in a module,
        // make the exports object identical to regeneratorRuntime.
        module.exports = runtime;
      }
      // Don't bother evaluating the rest of this file if the runtime was
      // already defined globally.
      return;
    }

    // Define the runtime globally (as expected by generated code) as either
    // module.exports (if we're in a module) or a new, empty object.
    runtime = global.regeneratorRuntime = inModule ? module.exports : {};

    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided, then outerFn.prototype instanceof Generator.
      var generator = Object.create((outerFn || Generator).prototype);
      var context = new Context(tryLocsList || []);

      // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.
      generator._invoke = makeInvokeMethod(innerFn, self, context);

      return generator;
    }
    runtime.wrap = wrap;

    // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
    function tryCatch(fn, obj, arg) {
      try {
        return { type: "normal", arg: fn.call(obj, arg) };
      } catch (err) {
        return { type: "throw", arg: err };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";

    // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
    var ContinueSentinel = {};

    // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";

    // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function(method) {
        prototype[method] = function(arg) {
          return this._invoke(method, arg);
        };
      });
    }

    runtime.isGeneratorFunction = function(genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor
        ? ctor === GeneratorFunction ||
          // For the native GeneratorFunction constructor, the best we can
          // do is to check its .name property.
          (ctor.displayName || ctor.name) === "GeneratorFunction"
        : false;
    };

    runtime.mark = function(genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        if (!(toStringTagSymbol in genFun)) {
          genFun[toStringTagSymbol] = "GeneratorFunction";
        }
      }
      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `value instanceof AwaitArgument` to determine if the yielded value is
    // meant to be awaited. Some may consider the name of this method too
    // cutesy, but they are curmudgeons.
    runtime.awrap = function(arg) {
      return new AwaitArgument(arg);
    };

    function AwaitArgument(arg) {
      this.arg = arg;
    }

    function AsyncIterator(generator) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);
        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;
          if (value instanceof AwaitArgument) {
            return Promise.resolve(value.arg).then(function(value) {
              invoke("next", value, resolve, reject);
            }, function(err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return Promise.resolve(value).then(function(unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration. If the Promise is rejected, however, the
            // result for this iteration will be rejected with the same
            // reason. Note that rejections of yielded Promises are not
            // thrown back into the generator function, as is the case
            // when an awaited Promise is rejected. This difference in
            // behavior between yield and await is important, because it
            // allows the consumer to decide what to do with the yielded
            // rejection (swallow it and continue, manually .throw it back
            // into the generator, abandon iteration, whatever). With
            // await, by contrast, there is no opportunity to examine the
            // rejection reason outside the generator function, so the
            // only option is to throw it from the await expression, and
            // let the generator function handle the exception.
            result.value = unwrapped;
            resolve(result);
          }, reject);
        }
      }

      if (typeof process === "object" && process.domain) {
        invoke = process.domain.bind(invoke);
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new Promise(function(resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise =
          // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          previousPromise ? previousPromise.then(
            callInvokeWithMethodAndArg,
            // Avoid propagating failures to Promises returned by later
            // invocations of the iterator.
            callInvokeWithMethodAndArg
          ) : callInvokeWithMethodAndArg();
      }

      // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).
      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);

    // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
    runtime.async = function(innerFn, outerFn, self, tryLocsList) {
      var iter = new AsyncIterator(
        wrap(innerFn, outerFn, self, tryLocsList)
      );

      return runtime.isGeneratorFunction(outerFn)
        ? iter // If outerFn is a generator, return the full iterator.
        : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
          });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;

      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
          return doneResult();
        }

        while (true) {
          var delegate = context.delegate;
          if (delegate) {
            if (method === "return" ||
                (method === "throw" && delegate.iterator[method] === undefined)) {
              // A return or throw (when the delegate iterator has no throw
              // method) always terminates the yield* loop.
              context.delegate = null;

              // If the delegate iterator has a return method, give it a
              // chance to clean up.
              var returnMethod = delegate.iterator["return"];
              if (returnMethod) {
                var record = tryCatch(returnMethod, delegate.iterator, arg);
                if (record.type === "throw") {
                  // If the return method threw an exception, let that
                  // exception prevail over the original return or throw.
                  method = "throw";
                  arg = record.arg;
                  continue;
                }
              }

              if (method === "return") {
                // Continue with the outer return, now that the delegate
                // iterator has been terminated.
                continue;
              }
            }

            var record = tryCatch(
              delegate.iterator[method],
              delegate.iterator,
              arg
            );

            if (record.type === "throw") {
              context.delegate = null;

              // Like returning generator.throw(uncaught), but without the
              // overhead of an extra function call.
              method = "throw";
              arg = record.arg;
              continue;
            }

            // Delegate generator ran and handled its own exceptions so
            // regardless of what the method was, we continue as if it is
            // "next" with an undefined arg.
            method = "next";
            arg = undefined;

            var info = record.arg;
            if (info.done) {
              context[delegate.resultName] = info.value;
              context.next = delegate.nextLoc;
            } else {
              state = GenStateSuspendedYield;
              return info;
            }

            context.delegate = null;
          }

          if (method === "next") {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = arg;

          } else if (method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw arg;
            }

            if (context.dispatchException(arg)) {
              // If the dispatched exception was caught by a catch block,
              // then let that catch block handle the exception normally.
              method = "next";
              arg = undefined;
            }

          } else if (method === "return") {
            context.abrupt("return", arg);
          }

          state = GenStateExecuting;

          var record = tryCatch(innerFn, self, context);
          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done
              ? GenStateCompleted
              : GenStateSuspendedYield;

            var info = {
              value: record.arg,
              done: context.done
            };

            if (record.arg === ContinueSentinel) {
              if (context.delegate && method === "next") {
                // Deliberately forget the last sent value so that we don't
                // accidentally pass it on to the delegate.
                arg = undefined;
              }
            } else {
              return info;
            }

          } else if (record.type === "throw") {
            state = GenStateCompleted;
            // Dispatch the exception by looping back around to the
            // context.dispatchException(arg) call above.
            method = "throw";
            arg = record.arg;
          }
        }
      };
    }

    // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
    defineIteratorMethods(Gp);

    Gp[iteratorSymbol] = function() {
      return this;
    };

    Gp[toStringTagSymbol] = "Generator";

    Gp.toString = function() {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = { tryLoc: locs[0] };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{ tryLoc: "root" }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    runtime.keys = function(object) {
      var keys = [];
      for (var key in object) {
        keys.push(key);
      }
      keys.reverse();

      // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.
      return function next() {
        while (keys.length) {
          var key = keys.pop();
          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.
        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1, next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined;
            next.done = true;

            return next;
          };

          return next.next = next;
        }
      }

      // Return an iterator with no values.
      return { next: doneResult };
    }
    runtime.values = values;

    function doneResult() {
      return { value: undefined, done: true };
    }

    Context.prototype = {
      constructor: Context,

      reset: function(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.
        this.sent = this._sent = undefined;
        this.done = false;
        this.delegate = null;

        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" &&
                hasOwn.call(this, name) &&
                !isNaN(+name.slice(1))) {
              this[name] = undefined;
            }
          }
        }
      },

      stop: function() {
        this.done = true;

        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;
        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },

      dispatchException: function(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;
        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;
          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }

            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }

            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }

            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },

      abrupt: function(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev &&
              hasOwn.call(entry, "finallyLoc") &&
              this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry &&
            (type === "break" ||
             type === "continue") &&
            finallyEntry.tryLoc <= arg &&
            arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.next = finallyEntry.finallyLoc;
        } else {
          this.complete(record);
        }

        return ContinueSentinel;
      },

      complete: function(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" ||
            record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = record.arg;
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }
      },

      finish: function(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },

      "catch": function(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }

        // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.
        throw new Error("illegal catch attempt");
      },

      delegateYield: function(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        return ContinueSentinel;
      }
    };
  })(
    // Among the various tricks for obtaining a reference to the global
    // object, this seems to be the most reliable technique that does not
    // use indirect eval (which violates Content Security Policy).
    typeof global === "object" ? global :
    typeof window === "object" ? window :
    typeof self === "object" ? self : this
  );

  /* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(111)))

/***/ },
/* 1282 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var isFinite = __webpack_require__(1071);

  module.exports = function (str, n) {
  	if (typeof str !== 'string') {
  		throw new TypeError('Expected a string as the first argument');
  	}

  	if (n < 0 || !isFinite(n)) {
  		throw new TypeError('Expected a finite positive number');
  	}

  	var ret = '';

  	do {
  		if (n & 1) {
  			ret += str;
  		}

  		str += str;
  	} while (n = n >> 1);

  	return ret;
  };


/***/ },
/* 1283 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  exports.__esModule = true;

  var _off = __webpack_require__(1034);

  var _off2 = _interopRequireDefault(_off);

  var _on = __webpack_require__(1035);

  var _on2 = _interopRequireDefault(_on);

  var _scrollLeft = __webpack_require__(1036);

  var _scrollLeft2 = _interopRequireDefault(_scrollLeft);

  var _scrollTop = __webpack_require__(1037);

  var _scrollTop2 = _interopRequireDefault(_scrollTop);

  var _requestAnimationFrame = __webpack_require__(1038);

  var _requestAnimationFrame2 = _interopRequireDefault(_requestAnimationFrame);

  var _Actions = __webpack_require__(212);

  var _DOMStateStorage = __webpack_require__(444);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } /* eslint-disable no-underscore-dangle */

  // FIXME: Stop using this gross hack. This won't collide with any actual
  // history location keys, but it's dirty to sneakily use the same storage here.
  var KEY_PREFIX = 's/';

  // Try at most this many times to scroll, to avoid getting stuck.
  var MAX_SCROLL_ATTEMPTS = 2;

  var ScrollBehavior = function () {
    function ScrollBehavior(history, getCurrentLocation) {
      var _this = this;

      _classCallCheck(this, ScrollBehavior);

      this._onScroll = function () {
        // It's possible that this scroll operation was triggered by what will be a
        // `POP` transition. Instead of updating the saved location immediately, we
        // have to enqueue the update, then potentially cancel it if we observe a
        // location update.
        if (_this._savePositionHandle === null) {
          _this._savePositionHandle = (0, _requestAnimationFrame2.default)(_this._savePosition);
        }

        if (_this._scrollTarget) {
          var _scrollTarget = _this._scrollTarget;
          var xTarget = _scrollTarget[0];
          var yTarget = _scrollTarget[1];

          var x = (0, _scrollLeft2.default)(window);
          var y = (0, _scrollTop2.default)(window);

          if (x === xTarget && y === yTarget) {
            _this._scrollTarget = null;
            _this._cancelCheckScroll();
          }
        }
      };

      this._savePosition = function () {
        _this._savePositionHandle = null;

        // We have to directly update `DOMStateStorage`, because actually updating
        // the location could cause e.g. React Router to re-render the entire page,
        // which would lead to observably bad scroll performance.
        (0, _DOMStateStorage.saveState)(_this._getKey(_this._getCurrentLocation()), [(0, _scrollLeft2.default)(window), (0, _scrollTop2.default)(window)]);
      };

      this._checkScrollPosition = function () {
        _this._checkScrollHandle = null;

        // We can only get here if scrollTarget is set. Every code path that unsets
        // scroll target also cancels the handle to avoid calling this handler.
        // Still, check anyway just in case.
        /* istanbul ignore if: paranoid guard */
        if (!_this._scrollTarget) {
          return;
        }

        var _scrollTarget2 = _this._scrollTarget;
        var x = _scrollTarget2[0];
        var y = _scrollTarget2[1];

        window.scrollTo(x, y);

        ++_this._numScrollAttempts;

        /* istanbul ignore if: paranoid guard */
        if (_this._numScrollAttempts >= MAX_SCROLL_ATTEMPTS) {
          _this._scrollTarget = null;
          return;
        }

        _this._checkScrollHandle = (0, _requestAnimationFrame2.default)(_this._checkScrollPosition);
      };

      this._history = history;
      this._getCurrentLocation = getCurrentLocation;

      // This helps avoid some jankiness in fighting against the browser's
      // default scroll behavior on `POP` transitions.
      /* istanbul ignore if: not supported by any browsers on Travis */
      if ('scrollRestoration' in window.history) {
        this._oldScrollRestoration = window.history.scrollRestoration;
        window.history.scrollRestoration = 'manual';
      } else {
        this._oldScrollRestoration = null;
      }

      this._savePositionHandle = null;
      this._checkScrollHandle = null;
      this._scrollTarget = null;
      this._numScrollAttempts = 0;

      // We have to listen to each scroll update rather than to just location
      // updates, because some browsers will update scroll position before
      // emitting the location change.
      (0, _on2.default)(window, 'scroll', this._onScroll);

      this._unlistenBefore = history.listenBefore(function () {
        if (_this._savePositionHandle !== null) {
          _requestAnimationFrame2.default.cancel(_this._savePositionHandle);
          _this._savePositionHandle = null;
        }
      });
    }

    ScrollBehavior.prototype.stop = function stop() {
      /* istanbul ignore if: not supported by any browsers on Travis */
      if (this._oldScrollRestoration) {
        window.history.scrollRestoration = this._oldScrollRestoration;
      }

      (0, _off2.default)(window, 'scroll', this._onScroll);
      this._cancelCheckScroll();

      this._unlistenBefore();
    };

    ScrollBehavior.prototype.updateScroll = function updateScroll(scrollPosition) {
      // Whatever we were doing before isn't relevant any more.
      this._cancelCheckScroll();

      if (scrollPosition && !Array.isArray(scrollPosition)) {
        this._scrollTarget = this._getDefaultScrollTarget();
      } else {
        this._scrollTarget = scrollPosition;
      }

      // Check the scroll position to see if we even need to scroll.
      this._onScroll();

      if (!this._scrollTarget) {
        return;
      }

      this._numScrollAttempts = 0;
      this._checkScrollPosition();
    };

    ScrollBehavior.prototype.readPosition = function readPosition(location) {
      return (0, _DOMStateStorage.readState)(this._getKey(location));
    };

    ScrollBehavior.prototype._getKey = function _getKey(location) {
      // Use fallback key when actual key is unavailable.
      var key = location.key || this._history.createPath(location);

      return '' + KEY_PREFIX + key;
    };

    ScrollBehavior.prototype._cancelCheckScroll = function _cancelCheckScroll() {
      if (this._checkScrollHandle !== null) {
        _requestAnimationFrame2.default.cancel(this._checkScrollHandle);
        this._checkScrollHandle = null;
      }
    };

    ScrollBehavior.prototype._getDefaultScrollTarget = function _getDefaultScrollTarget() {
      var location = this._getCurrentLocation();
      if (location.action === _Actions.PUSH) {
        return [0, 0];
      }

      return this.readPosition(location) || [0, 0];
    };

    return ScrollBehavior;
  }();

  exports.default = ScrollBehavior;
  module.exports = exports['default'];

/***/ },
/* 1284 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  exports.__esModule = true;

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  exports.default = withScroll;

  var _ScrollBehavior = __webpack_require__(1283);

  var _ScrollBehavior2 = _interopRequireDefault(_ScrollBehavior);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function withScroll(history, shouldUpdateScroll) {
    // history will invoke the onChange callback synchronously, so
    // currentLocation will always be defined when needed.
    var currentLocation = null;

    function getCurrentLocation() {
      return currentLocation;
    }

    var listeners = [];
    var scrollBehavior = null;

    function onChange(location) {
      var prevLocation = currentLocation;
      currentLocation = location;

      listeners.forEach(function (listener) {
        return listener(location);
      });

      var scrollPosition = void 0;
      if (!shouldUpdateScroll) {
        scrollPosition = true;
      } else {
        scrollPosition = shouldUpdateScroll.call(scrollBehavior, prevLocation, location);
      }

      scrollBehavior.updateScroll(scrollPosition);
    }

    var unlisten = null;

    function listen(listener) {
      if (listeners.length === 0) {
        scrollBehavior = new _ScrollBehavior2.default(history, getCurrentLocation);
        unlisten = history.listen(onChange);
      }

      listeners.push(listener);
      listener(currentLocation);

      return function () {
        listeners = listeners.filter(function (item) {
          return item !== listener;
        });

        if (listeners.length === 0) {
          scrollBehavior.stop();
          unlisten();
        }
      };
    }

    return _extends({}, history, {
      listen: listen
    });
  }
  module.exports = exports['default'];

/***/ },
/* 1285 */
/***/ function(module, exports) {

  'use strict';
  module.exports = /^#!.*/;


/***/ },
/* 1286 */
/***/ function(module, exports) {

  /* -*- Mode: js; js-indent-level: 2; -*- */
  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */

  var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

  /**
   * Encode an integer in the range of 0 to 63 to a single base 64 digit.
   */
  exports.encode = function (number) {
    if (0 <= number && number < intToCharMap.length) {
      return intToCharMap[number];
    }
    throw new TypeError("Must be between 0 and 63: " + number);
  };

  /**
   * Decode a single base 64 character code digit to an integer. Returns -1 on
   * failure.
   */
  exports.decode = function (charCode) {
    var bigA = 65;     // 'A'
    var bigZ = 90;     // 'Z'

    var littleA = 97;  // 'a'
    var littleZ = 122; // 'z'

    var zero = 48;     // '0'
    var nine = 57;     // '9'

    var plus = 43;     // '+'
    var slash = 47;    // '/'

    var littleOffset = 26;
    var numberOffset = 52;

    // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
    if (bigA <= charCode && charCode <= bigZ) {
      return (charCode - bigA);
    }

    // 26 - 51: abcdefghijklmnopqrstuvwxyz
    if (littleA <= charCode && charCode <= littleZ) {
      return (charCode - littleA + littleOffset);
    }

    // 52 - 61: 0123456789
    if (zero <= charCode && charCode <= nine) {
      return (charCode - zero + numberOffset);
    }

    // 62: +
    if (charCode == plus) {
      return 62;
    }

    // 63: /
    if (charCode == slash) {
      return 63;
    }

    // Invalid base64 digit.
    return -1;
  };


/***/ },
/* 1287 */
/***/ function(module, exports) {

  /* -*- Mode: js; js-indent-level: 2; -*- */
  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */

  exports.GREATEST_LOWER_BOUND = 1;
  exports.LEAST_UPPER_BOUND = 2;

  /**
   * Recursive implementation of binary search.
   *
   * @param aLow Indices here and lower do not contain the needle.
   * @param aHigh Indices here and higher do not contain the needle.
   * @param aNeedle The element being searched for.
   * @param aHaystack The non-empty array being searched.
   * @param aCompare Function which takes two elements and returns -1, 0, or 1.
   * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
   *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
   *     closest element that is smaller than or greater than the one we are
   *     searching for, respectively, if the exact element cannot be found.
   */
  function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
    // This function terminates when one of the following is true:
    //
    //   1. We find the exact element we are looking for.
    //
    //   2. We did not find the exact element, but we can return the index of
    //      the next-closest element.
    //
    //   3. We did not find the exact element, and there is no next-closest
    //      element than the one we are searching for, so we return -1.
    var mid = Math.floor((aHigh - aLow) / 2) + aLow;
    var cmp = aCompare(aNeedle, aHaystack[mid], true);
    if (cmp === 0) {
      // Found the element we are looking for.
      return mid;
    }
    else if (cmp > 0) {
      // Our needle is greater than aHaystack[mid].
      if (aHigh - mid > 1) {
        // The element is in the upper half.
        return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
      }

      // The exact needle element was not found in this haystack. Determine if
      // we are in termination case (3) or (2) and return the appropriate thing.
      if (aBias == exports.LEAST_UPPER_BOUND) {
        return aHigh < aHaystack.length ? aHigh : -1;
      } else {
        return mid;
      }
    }
    else {
      // Our needle is less than aHaystack[mid].
      if (mid - aLow > 1) {
        // The element is in the lower half.
        return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
      }

      // we are in termination case (3) or (2) and return the appropriate thing.
      if (aBias == exports.LEAST_UPPER_BOUND) {
        return mid;
      } else {
        return aLow < 0 ? -1 : aLow;
      }
    }
  }

  /**
   * This is an implementation of binary search which will always try and return
   * the index of the closest element if there is no exact hit. This is because
   * mappings between original and generated line/col pairs are single points,
   * and there is an implicit region between each of them, so a miss just means
   * that you aren't on the very start of a region.
   *
   * @param aNeedle The element you are looking for.
   * @param aHaystack The array that is being searched.
   * @param aCompare A function which takes the needle and an element in the
   *     array and returns -1, 0, or 1 depending on whether the needle is less
   *     than, equal to, or greater than the element, respectively.
   * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
   *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
   *     closest element that is smaller than or greater than the one we are
   *     searching for, respectively, if the exact element cannot be found.
   *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
   */
  exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
    if (aHaystack.length === 0) {
      return -1;
    }

    var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
                                aCompare, aBias || exports.GREATEST_LOWER_BOUND);
    if (index < 0) {
      return -1;
    }

    // We have found either the exact element, or the next-closest element than
    // the one we are searching for. However, there may be more than one such
    // element. Make sure we always return the smallest of these.
    while (index - 1 >= 0) {
      if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
        break;
      }
      --index;
    }

    return index;
  };


/***/ },
/* 1288 */
/***/ function(module, exports, __webpack_require__) {

  /* -*- Mode: js; js-indent-level: 2; -*- */
  /*
   * Copyright 2014 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */

  var util = __webpack_require__(223);

  /**
   * Determine whether mappingB is after mappingA with respect to generated
   * position.
   */
  function generatedPositionAfter(mappingA, mappingB) {
    // Optimized for most common case
    var lineA = mappingA.generatedLine;
    var lineB = mappingB.generatedLine;
    var columnA = mappingA.generatedColumn;
    var columnB = mappingB.generatedColumn;
    return lineB > lineA || lineB == lineA && columnB >= columnA ||
           util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
  }

  /**
   * A data structure to provide a sorted view of accumulated mappings in a
   * performance conscious manner. It trades a neglibable overhead in general
   * case for a large speedup in case of mappings being added in order.
   */
  function MappingList() {
    this._array = [];
    this._sorted = true;
    // Serves as infimum
    this._last = {generatedLine: -1, generatedColumn: 0};
  }

  /**
   * Iterate through internal items. This method takes the same arguments that
   * `Array.prototype.forEach` takes.
   *
   * NOTE: The order of the mappings is NOT guaranteed.
   */
  MappingList.prototype.unsortedForEach =
    function MappingList_forEach(aCallback, aThisArg) {
      this._array.forEach(aCallback, aThisArg);
    };

  /**
   * Add the given source mapping.
   *
   * @param Object aMapping
   */
  MappingList.prototype.add = function MappingList_add(aMapping) {
    if (generatedPositionAfter(this._last, aMapping)) {
      this._last = aMapping;
      this._array.push(aMapping);
    } else {
      this._sorted = false;
      this._array.push(aMapping);
    }
  };

  /**
   * Returns the flat, sorted array of mappings. The mappings are sorted by
   * generated position.
   *
   * WARNING: This method returns internal data without copying, for
   * performance. The return value must NOT be mutated, and should be treated as
   * an immutable borrow. If you want to take ownership, you must make your own
   * copy.
   */
  MappingList.prototype.toArray = function MappingList_toArray() {
    if (!this._sorted) {
      this._array.sort(util.compareByGeneratedPositionsInflated);
      this._sorted = true;
    }
    return this._array;
  };

  exports.MappingList = MappingList;


/***/ },
/* 1289 */
/***/ function(module, exports) {

  /* -*- Mode: js; js-indent-level: 2; -*- */
  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */

  // It turns out that some (most?) JavaScript engines don't self-host
  // `Array.prototype.sort`. This makes sense because C++ will likely remain
  // faster than JS when doing raw CPU-intensive sorting. However, when using a
  // custom comparator function, calling back and forth between the VM's C++ and
  // JIT'd JS is rather slow *and* loses JIT type information, resulting in
  // worse generated code for the comparator function than would be optimal. In
  // fact, when sorting with a comparator, these costs outweigh the benefits of
  // sorting in C++. By using our own JS-implemented Quick Sort (below), we get
  // a ~3500ms mean speed-up in `bench/bench.html`.

  /**
   * Swap the elements indexed by `x` and `y` in the array `ary`.
   *
   * @param {Array} ary
   *        The array.
   * @param {Number} x
   *        The index of the first item.
   * @param {Number} y
   *        The index of the second item.
   */
  function swap(ary, x, y) {
    var temp = ary[x];
    ary[x] = ary[y];
    ary[y] = temp;
  }

  /**
   * Returns a random integer within the range `low .. high` inclusive.
   *
   * @param {Number} low
   *        The lower bound on the range.
   * @param {Number} high
   *        The upper bound on the range.
   */
  function randomIntInRange(low, high) {
    return Math.round(low + (Math.random() * (high - low)));
  }

  /**
   * The Quick Sort algorithm.
   *
   * @param {Array} ary
   *        An array to sort.
   * @param {function} comparator
   *        Function to use to compare two items.
   * @param {Number} p
   *        Start index of the array
   * @param {Number} r
   *        End index of the array
   */
  function doQuickSort(ary, comparator, p, r) {
    // If our lower bound is less than our upper bound, we (1) partition the
    // array into two pieces and (2) recurse on each half. If it is not, this is
    // the empty array and our base case.

    if (p < r) {
      // (1) Partitioning.
      //
      // The partitioning chooses a pivot between `p` and `r` and moves all
      // elements that are less than or equal to the pivot to the before it, and
      // all the elements that are greater than it after it. The effect is that
      // once partition is done, the pivot is in the exact place it will be when
      // the array is put in sorted order, and it will not need to be moved
      // again. This runs in O(n) time.

      // Always choose a random pivot so that an input array which is reverse
      // sorted does not cause O(n^2) running time.
      var pivotIndex = randomIntInRange(p, r);
      var i = p - 1;

      swap(ary, pivotIndex, r);
      var pivot = ary[r];

      // Immediately after `j` is incremented in this loop, the following hold
      // true:
      //
      //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
      //
      //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
      for (var j = p; j < r; j++) {
        if (comparator(ary[j], pivot) <= 0) {
          i += 1;
          swap(ary, i, j);
        }
      }

      swap(ary, i + 1, j);
      var q = i + 1;

      // (2) Recurse on each half.

      doQuickSort(ary, comparator, p, q - 1);
      doQuickSort(ary, comparator, q + 1, r);
    }
  }

  /**
   * Sort the given array in-place with the given comparator function.
   *
   * @param {Array} ary
   *        An array to sort.
   * @param {function} comparator
   *        Function to use to compare two items.
   */
  exports.quickSort = function (ary, comparator) {
    doQuickSort(ary, comparator, 0, ary.length - 1);
  };


/***/ },
/* 1290 */
/***/ function(module, exports, __webpack_require__) {

  /* -*- Mode: js; js-indent-level: 2; -*- */
  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */

  var util = __webpack_require__(223);
  var binarySearch = __webpack_require__(1287);
  var ArraySet = __webpack_require__(516).ArraySet;
  var base64VLQ = __webpack_require__(517);
  var quickSort = __webpack_require__(1289).quickSort;

  function SourceMapConsumer(aSourceMap) {
    var sourceMap = aSourceMap;
    if (typeof aSourceMap === 'string') {
      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
    }

    return sourceMap.sections != null
      ? new IndexedSourceMapConsumer(sourceMap)
      : new BasicSourceMapConsumer(sourceMap);
  }

  SourceMapConsumer.fromSourceMap = function(aSourceMap) {
    return BasicSourceMapConsumer.fromSourceMap(aSourceMap);
  }

  /**
   * The version of the source mapping spec that we are consuming.
   */
  SourceMapConsumer.prototype._version = 3;

  // `__generatedMappings` and `__originalMappings` are arrays that hold the
  // parsed mapping coordinates from the source map's "mappings" attribute. They
  // are lazily instantiated, accessed via the `_generatedMappings` and
  // `_originalMappings` getters respectively, and we only parse the mappings
  // and create these arrays once queried for a source location. We jump through
  // these hoops because there can be many thousands of mappings, and parsing
  // them is expensive, so we only want to do it if we must.
  //
  // Each object in the arrays is of the form:
  //
  //     {
  //       generatedLine: The line number in the generated code,
  //       generatedColumn: The column number in the generated code,
  //       source: The path to the original source file that generated this
  //               chunk of code,
  //       originalLine: The line number in the original source that
  //                     corresponds to this chunk of generated code,
  //       originalColumn: The column number in the original source that
  //                       corresponds to this chunk of generated code,
  //       name: The name of the original symbol which generated this chunk of
  //             code.
  //     }
  //
  // All properties except for `generatedLine` and `generatedColumn` can be
  // `null`.
  //
  // `_generatedMappings` is ordered by the generated positions.
  //
  // `_originalMappings` is ordered by the original positions.

  SourceMapConsumer.prototype.__generatedMappings = null;
  Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
    get: function () {
      if (!this.__generatedMappings) {
        this._parseMappings(this._mappings, this.sourceRoot);
      }

      return this.__generatedMappings;
    }
  });

  SourceMapConsumer.prototype.__originalMappings = null;
  Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
    get: function () {
      if (!this.__originalMappings) {
        this._parseMappings(this._mappings, this.sourceRoot);
      }

      return this.__originalMappings;
    }
  });

  SourceMapConsumer.prototype._charIsMappingSeparator =
    function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
      var c = aStr.charAt(index);
      return c === ";" || c === ",";
    };

  /**
   * Parse the mappings in a string in to a data structure which we can easily
   * query (the ordered arrays in the `this.__generatedMappings` and
   * `this.__originalMappings` properties).
   */
  SourceMapConsumer.prototype._parseMappings =
    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      throw new Error("Subclasses must implement _parseMappings");
    };

  SourceMapConsumer.GENERATED_ORDER = 1;
  SourceMapConsumer.ORIGINAL_ORDER = 2;

  SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
  SourceMapConsumer.LEAST_UPPER_BOUND = 2;

  /**
   * Iterate over each mapping between an original source/line/column and a
   * generated line/column in this source map.
   *
   * @param Function aCallback
   *        The function that is called with each mapping.
   * @param Object aContext
   *        Optional. If specified, this object will be the value of `this` every
   *        time that `aCallback` is called.
   * @param aOrder
   *        Either `SourceMapConsumer.GENERATED_ORDER` or
   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
   *        iterate over the mappings sorted by the generated file's line/column
   *        order or the original's source/line/column order, respectively. Defaults to
   *        `SourceMapConsumer.GENERATED_ORDER`.
   */
  SourceMapConsumer.prototype.eachMapping =
    function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
      var context = aContext || null;
      var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

      var mappings;
      switch (order) {
      case SourceMapConsumer.GENERATED_ORDER:
        mappings = this._generatedMappings;
        break;
      case SourceMapConsumer.ORIGINAL_ORDER:
        mappings = this._originalMappings;
        break;
      default:
        throw new Error("Unknown order of iteration.");
      }

      var sourceRoot = this.sourceRoot;
      mappings.map(function (mapping) {
        var source = mapping.source === null ? null : this._sources.at(mapping.source);
        if (source != null && sourceRoot != null) {
          source = util.join(sourceRoot, source);
        }
        return {
          source: source,
          generatedLine: mapping.generatedLine,
          generatedColumn: mapping.generatedColumn,
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: mapping.name === null ? null : this._names.at(mapping.name)
        };
      }, this).forEach(aCallback, context);
    };

  /**
   * Returns all generated line and column information for the original source,
   * line, and column provided. If no column is provided, returns all mappings
   * corresponding to a either the line we are searching for or the next
   * closest line that has any mappings. Otherwise, returns all mappings
   * corresponding to the given line and either the column we are searching for
   * or the next closest column that has any offsets.
   *
   * The only argument is an object with the following properties:
   *
   *   - source: The filename of the original source.
   *   - line: The line number in the original source.
   *   - column: Optional. the column number in the original source.
   *
   * and an array of objects is returned, each with the following properties:
   *
   *   - line: The line number in the generated source, or null.
   *   - column: The column number in the generated source, or null.
   */
  SourceMapConsumer.prototype.allGeneratedPositionsFor =
    function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
      var line = util.getArg(aArgs, 'line');

      // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
      // returns the index of the closest mapping less than the needle. By
      // setting needle.originalColumn to 0, we thus find the last mapping for
      // the given line, provided such a mapping exists.
      var needle = {
        source: util.getArg(aArgs, 'source'),
        originalLine: line,
        originalColumn: util.getArg(aArgs, 'column', 0)
      };

      if (this.sourceRoot != null) {
        needle.source = util.relative(this.sourceRoot, needle.source);
      }
      if (!this._sources.has(needle.source)) {
        return [];
      }
      needle.source = this._sources.indexOf(needle.source);

      var mappings = [];

      var index = this._findMapping(needle,
                                    this._originalMappings,
                                    "originalLine",
                                    "originalColumn",
                                    util.compareByOriginalPositions,
                                    binarySearch.LEAST_UPPER_BOUND);
      if (index >= 0) {
        var mapping = this._originalMappings[index];

        if (aArgs.column === undefined) {
          var originalLine = mapping.originalLine;

          // Iterate until either we run out of mappings, or we run into
          // a mapping for a different line than the one we found. Since
          // mappings are sorted, this is guaranteed to find all mappings for
          // the line we found.
          while (mapping && mapping.originalLine === originalLine) {
            mappings.push({
              line: util.getArg(mapping, 'generatedLine', null),
              column: util.getArg(mapping, 'generatedColumn', null),
              lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
            });

            mapping = this._originalMappings[++index];
          }
        } else {
          var originalColumn = mapping.originalColumn;

          // Iterate until either we run out of mappings, or we run into
          // a mapping for a different line than the one we were searching for.
          // Since mappings are sorted, this is guaranteed to find all mappings for
          // the line we are searching for.
          while (mapping &&
                 mapping.originalLine === line &&
                 mapping.originalColumn == originalColumn) {
            mappings.push({
              line: util.getArg(mapping, 'generatedLine', null),
              column: util.getArg(mapping, 'generatedColumn', null),
              lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
            });

            mapping = this._originalMappings[++index];
          }
        }
      }

      return mappings;
    };

  exports.SourceMapConsumer = SourceMapConsumer;

  /**
   * A BasicSourceMapConsumer instance represents a parsed source map which we can
   * query for information about the original file positions by giving it a file
   * position in the generated source.
   *
   * The only parameter is the raw source map (either as a JSON string, or
   * already parsed to an object). According to the spec, source maps have the
   * following attributes:
   *
   *   - version: Which version of the source map spec this map is following.
   *   - sources: An array of URLs to the original source files.
   *   - names: An array of identifiers which can be referrenced by individual mappings.
   *   - sourceRoot: Optional. The URL root from which all sources are relative.
   *   - sourcesContent: Optional. An array of contents of the original source files.
   *   - mappings: A string of base64 VLQs which contain the actual mappings.
   *   - file: Optional. The generated file this source map is associated with.
   *
   * Here is an example source map, taken from the source map spec[0]:
   *
   *     {
   *       version : 3,
   *       file: "out.js",
   *       sourceRoot : "",
   *       sources: ["foo.js", "bar.js"],
   *       names: ["src", "maps", "are", "fun"],
   *       mappings: "AA,AB;;ABCDE;"
   *     }
   *
   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
   */
  function BasicSourceMapConsumer(aSourceMap) {
    var sourceMap = aSourceMap;
    if (typeof aSourceMap === 'string') {
      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
    }

    var version = util.getArg(sourceMap, 'version');
    var sources = util.getArg(sourceMap, 'sources');
    // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
    // requires the array) to play nice here.
    var names = util.getArg(sourceMap, 'names', []);
    var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
    var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
    var mappings = util.getArg(sourceMap, 'mappings');
    var file = util.getArg(sourceMap, 'file', null);

    // Once again, Sass deviates from the spec and supplies the version as a
    // string rather than a number, so we use loose equality checking here.
    if (version != this._version) {
      throw new Error('Unsupported version: ' + version);
    }

    sources = sources
      .map(String)
      // Some source maps produce relative source paths like "./foo.js" instead of
      // "foo.js".  Normalize these first so that future comparisons will succeed.
      // See bugzil.la/1090768.
      .map(util.normalize)
      // Always ensure that absolute sources are internally stored relative to
      // the source root, if the source root is absolute. Not doing this would
      // be particularly problematic when the source root is a prefix of the
      // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
      .map(function (source) {
        return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)
          ? util.relative(sourceRoot, source)
          : source;
      });

    // Pass `true` below to allow duplicate names and sources. While source maps
    // are intended to be compressed and deduplicated, the TypeScript compiler
    // sometimes generates source maps with duplicates in them. See Github issue
    // #72 and bugzil.la/889492.
    this._names = ArraySet.fromArray(names.map(String), true);
    this._sources = ArraySet.fromArray(sources, true);

    this.sourceRoot = sourceRoot;
    this.sourcesContent = sourcesContent;
    this._mappings = mappings;
    this.file = file;
  }

  BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
  BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;

  /**
   * Create a BasicSourceMapConsumer from a SourceMapGenerator.
   *
   * @param SourceMapGenerator aSourceMap
   *        The source map that will be consumed.
   * @returns BasicSourceMapConsumer
   */
  BasicSourceMapConsumer.fromSourceMap =
    function SourceMapConsumer_fromSourceMap(aSourceMap) {
      var smc = Object.create(BasicSourceMapConsumer.prototype);

      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
      smc.sourceRoot = aSourceMap._sourceRoot;
      smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
                                                              smc.sourceRoot);
      smc.file = aSourceMap._file;

      // Because we are modifying the entries (by converting string sources and
      // names to indices into the sources and names ArraySets), we have to make
      // a copy of the entry or else bad things happen. Shared mutable state
      // strikes again! See github issue #191.

      var generatedMappings = aSourceMap._mappings.toArray().slice();
      var destGeneratedMappings = smc.__generatedMappings = [];
      var destOriginalMappings = smc.__originalMappings = [];

      for (var i = 0, length = generatedMappings.length; i < length; i++) {
        var srcMapping = generatedMappings[i];
        var destMapping = new Mapping;
        destMapping.generatedLine = srcMapping.generatedLine;
        destMapping.generatedColumn = srcMapping.generatedColumn;

        if (srcMapping.source) {
          destMapping.source = sources.indexOf(srcMapping.source);
          destMapping.originalLine = srcMapping.originalLine;
          destMapping.originalColumn = srcMapping.originalColumn;

          if (srcMapping.name) {
            destMapping.name = names.indexOf(srcMapping.name);
          }

          destOriginalMappings.push(destMapping);
        }

        destGeneratedMappings.push(destMapping);
      }

      quickSort(smc.__originalMappings, util.compareByOriginalPositions);

      return smc;
    };

  /**
   * The version of the source mapping spec that we are consuming.
   */
  BasicSourceMapConsumer.prototype._version = 3;

  /**
   * The list of original sources.
   */
  Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
    get: function () {
      return this._sources.toArray().map(function (s) {
        return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;
      }, this);
    }
  });

  /**
   * Provide the JIT with a nice shape / hidden class.
   */
  function Mapping() {
    this.generatedLine = 0;
    this.generatedColumn = 0;
    this.source = null;
    this.originalLine = null;
    this.originalColumn = null;
    this.name = null;
  }

  /**
   * Parse the mappings in a string in to a data structure which we can easily
   * query (the ordered arrays in the `this.__generatedMappings` and
   * `this.__originalMappings` properties).
   */
  BasicSourceMapConsumer.prototype._parseMappings =
    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      var generatedLine = 1;
      var previousGeneratedColumn = 0;
      var previousOriginalLine = 0;
      var previousOriginalColumn = 0;
      var previousSource = 0;
      var previousName = 0;
      var length = aStr.length;
      var index = 0;
      var cachedSegments = {};
      var temp = {};
      var originalMappings = [];
      var generatedMappings = [];
      var mapping, str, segment, end, value;

      while (index < length) {
        if (aStr.charAt(index) === ';') {
          generatedLine++;
          index++;
          previousGeneratedColumn = 0;
        }
        else if (aStr.charAt(index) === ',') {
          index++;
        }
        else {
          mapping = new Mapping();
          mapping.generatedLine = generatedLine;

          // Because each offset is encoded relative to the previous one,
          // many segments often have the same encoding. We can exploit this
          // fact by caching the parsed variable length fields of each segment,
          // allowing us to avoid a second parse if we encounter the same
          // segment again.
          for (end = index; end < length; end++) {
            if (this._charIsMappingSeparator(aStr, end)) {
              break;
            }
          }
          str = aStr.slice(index, end);

          segment = cachedSegments[str];
          if (segment) {
            index += str.length;
          } else {
            segment = [];
            while (index < end) {
              base64VLQ.decode(aStr, index, temp);
              value = temp.value;
              index = temp.rest;
              segment.push(value);
            }

            if (segment.length === 2) {
              throw new Error('Found a source, but no line and column');
            }

            if (segment.length === 3) {
              throw new Error('Found a source and line, but no column');
            }

            cachedSegments[str] = segment;
          }

          // Generated column.
          mapping.generatedColumn = previousGeneratedColumn + segment[0];
          previousGeneratedColumn = mapping.generatedColumn;

          if (segment.length > 1) {
            // Original source.
            mapping.source = previousSource + segment[1];
            previousSource += segment[1];

            // Original line.
            mapping.originalLine = previousOriginalLine + segment[2];
            previousOriginalLine = mapping.originalLine;
            // Lines are stored 0-based
            mapping.originalLine += 1;

            // Original column.
            mapping.originalColumn = previousOriginalColumn + segment[3];
            previousOriginalColumn = mapping.originalColumn;

            if (segment.length > 4) {
              // Original name.
              mapping.name = previousName + segment[4];
              previousName += segment[4];
            }
          }

          generatedMappings.push(mapping);
          if (typeof mapping.originalLine === 'number') {
            originalMappings.push(mapping);
          }
        }
      }

      quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
      this.__generatedMappings = generatedMappings;

      quickSort(originalMappings, util.compareByOriginalPositions);
      this.__originalMappings = originalMappings;
    };

  /**
   * Find the mapping that best matches the hypothetical "needle" mapping that
   * we are searching for in the given "haystack" of mappings.
   */
  BasicSourceMapConsumer.prototype._findMapping =
    function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
                                           aColumnName, aComparator, aBias) {
      // To return the position we are searching for, we must first find the
      // mapping for the given position and then return the opposite position it
      // points to. Because the mappings are sorted, we can use binary search to
      // find the best mapping.

      if (aNeedle[aLineName] <= 0) {
        throw new TypeError('Line must be greater than or equal to 1, got '
                            + aNeedle[aLineName]);
      }
      if (aNeedle[aColumnName] < 0) {
        throw new TypeError('Column must be greater than or equal to 0, got '
                            + aNeedle[aColumnName]);
      }

      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
    };

  /**
   * Compute the last column for each generated mapping. The last column is
   * inclusive.
   */
  BasicSourceMapConsumer.prototype.computeColumnSpans =
    function SourceMapConsumer_computeColumnSpans() {
      for (var index = 0; index < this._generatedMappings.length; ++index) {
        var mapping = this._generatedMappings[index];

        // Mappings do not contain a field for the last generated columnt. We
        // can come up with an optimistic estimate, however, by assuming that
        // mappings are contiguous (i.e. given two consecutive mappings, the
        // first mapping ends where the second one starts).
        if (index + 1 < this._generatedMappings.length) {
          var nextMapping = this._generatedMappings[index + 1];

          if (mapping.generatedLine === nextMapping.generatedLine) {
            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
            continue;
          }
        }

        // The last mapping for each line spans the entire line.
        mapping.lastGeneratedColumn = Infinity;
      }
    };

  /**
   * Returns the original source, line, and column information for the generated
   * source's line and column positions provided. The only argument is an object
   * with the following properties:
   *
   *   - line: The line number in the generated source.
   *   - column: The column number in the generated source.
   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
   *     closest element that is smaller than or greater than the one we are
   *     searching for, respectively, if the exact element cannot be found.
   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
   *
   * and an object is returned with the following properties:
   *
   *   - source: The original source file, or null.
   *   - line: The line number in the original source, or null.
   *   - column: The column number in the original source, or null.
   *   - name: The original identifier, or null.
   */
  BasicSourceMapConsumer.prototype.originalPositionFor =
    function SourceMapConsumer_originalPositionFor(aArgs) {
      var needle = {
        generatedLine: util.getArg(aArgs, 'line'),
        generatedColumn: util.getArg(aArgs, 'column')
      };

      var index = this._findMapping(
        needle,
        this._generatedMappings,
        "generatedLine",
        "generatedColumn",
        util.compareByGeneratedPositionsDeflated,
        util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
      );

      if (index >= 0) {
        var mapping = this._generatedMappings[index];

        if (mapping.generatedLine === needle.generatedLine) {
          var source = util.getArg(mapping, 'source', null);
          if (source !== null) {
            source = this._sources.at(source);
            if (this.sourceRoot != null) {
              source = util.join(this.sourceRoot, source);
            }
          }
          var name = util.getArg(mapping, 'name', null);
          if (name !== null) {
            name = this._names.at(name);
          }
          return {
            source: source,
            line: util.getArg(mapping, 'originalLine', null),
            column: util.getArg(mapping, 'originalColumn', null),
            name: name
          };
        }
      }

      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    };

  /**
   * Return true if we have the source content for every source in the source
   * map, false otherwise.
   */
  BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
    function BasicSourceMapConsumer_hasContentsOfAllSources() {
      if (!this.sourcesContent) {
        return false;
      }
      return this.sourcesContent.length >= this._sources.size() &&
        !this.sourcesContent.some(function (sc) { return sc == null; });
    };

  /**
   * Returns the original source content. The only argument is the url of the
   * original source file. Returns null if no original source content is
   * available.
   */
  BasicSourceMapConsumer.prototype.sourceContentFor =
    function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
      if (!this.sourcesContent) {
        return null;
      }

      if (this.sourceRoot != null) {
        aSource = util.relative(this.sourceRoot, aSource);
      }

      if (this._sources.has(aSource)) {
        return this.sourcesContent[this._sources.indexOf(aSource)];
      }

      var url;
      if (this.sourceRoot != null
          && (url = util.urlParse(this.sourceRoot))) {
        // XXX: file:// URIs and absolute paths lead to unexpected behavior for
        // many users. We can help them out when they expect file:// URIs to
        // behave like it would if they were running a local HTTP server. See
        // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
        var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
        if (url.scheme == "file"
            && this._sources.has(fileUriAbsPath)) {
          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
        }

        if ((!url.path || url.path == "/")
            && this._sources.has("/" + aSource)) {
          return this.sourcesContent[this._sources.indexOf("/" + aSource)];
        }
      }

      // This function is used recursively from
      // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
      // don't want to throw if we can't find the source - we just want to
      // return null, so we provide a flag to exit gracefully.
      if (nullOnMissing) {
        return null;
      }
      else {
        throw new Error('"' + aSource + '" is not in the SourceMap.');
      }
    };

  /**
   * Returns the generated line and column information for the original source,
   * line, and column positions provided. The only argument is an object with
   * the following properties:
   *
   *   - source: The filename of the original source.
   *   - line: The line number in the original source.
   *   - column: The column number in the original source.
   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
   *     closest element that is smaller than or greater than the one we are
   *     searching for, respectively, if the exact element cannot be found.
   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
   *
   * and an object is returned with the following properties:
   *
   *   - line: The line number in the generated source, or null.
   *   - column: The column number in the generated source, or null.
   */
  BasicSourceMapConsumer.prototype.generatedPositionFor =
    function SourceMapConsumer_generatedPositionFor(aArgs) {
      var source = util.getArg(aArgs, 'source');
      if (this.sourceRoot != null) {
        source = util.relative(this.sourceRoot, source);
      }
      if (!this._sources.has(source)) {
        return {
          line: null,
          column: null,
          lastColumn: null
        };
      }
      source = this._sources.indexOf(source);

      var needle = {
        source: source,
        originalLine: util.getArg(aArgs, 'line'),
        originalColumn: util.getArg(aArgs, 'column')
      };

      var index = this._findMapping(
        needle,
        this._originalMappings,
        "originalLine",
        "originalColumn",
        util.compareByOriginalPositions,
        util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
      );

      if (index >= 0) {
        var mapping = this._originalMappings[index];

        if (mapping.source === needle.source) {
          return {
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          };
        }
      }

      return {
        line: null,
        column: null,
        lastColumn: null
      };
    };

  exports.BasicSourceMapConsumer = BasicSourceMapConsumer;

  /**
   * An IndexedSourceMapConsumer instance represents a parsed source map which
   * we can query for information. It differs from BasicSourceMapConsumer in
   * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
   * input.
   *
   * The only parameter is a raw source map (either as a JSON string, or already
   * parsed to an object). According to the spec for indexed source maps, they
   * have the following attributes:
   *
   *   - version: Which version of the source map spec this map is following.
   *   - file: Optional. The generated file this source map is associated with.
   *   - sections: A list of section definitions.
   *
   * Each value under the "sections" field has two fields:
   *   - offset: The offset into the original specified at which this section
   *       begins to apply, defined as an object with a "line" and "column"
   *       field.
   *   - map: A source map definition. This source map could also be indexed,
   *       but doesn't have to be.
   *
   * Instead of the "map" field, it's also possible to have a "url" field
   * specifying a URL to retrieve a source map from, but that's currently
   * unsupported.
   *
   * Here's an example source map, taken from the source map spec[0], but
   * modified to omit a section which uses the "url" field.
   *
   *  {
   *    version : 3,
   *    file: "app.js",
   *    sections: [{
   *      offset: {line:100, column:10},
   *      map: {
   *        version : 3,
   *        file: "section.js",
   *        sources: ["foo.js", "bar.js"],
   *        names: ["src", "maps", "are", "fun"],
   *        mappings: "AAAA,E;;ABCDE;"
   *      }
   *    }],
   *  }
   *
   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
   */
  function IndexedSourceMapConsumer(aSourceMap) {
    var sourceMap = aSourceMap;
    if (typeof aSourceMap === 'string') {
      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
    }

    var version = util.getArg(sourceMap, 'version');
    var sections = util.getArg(sourceMap, 'sections');

    if (version != this._version) {
      throw new Error('Unsupported version: ' + version);
    }

    this._sources = new ArraySet();
    this._names = new ArraySet();

    var lastOffset = {
      line: -1,
      column: 0
    };
    this._sections = sections.map(function (s) {
      if (s.url) {
        // The url field will require support for asynchronicity.
        // See https://github.com/mozilla/source-map/issues/16
        throw new Error('Support for url field in sections not implemented.');
      }
      var offset = util.getArg(s, 'offset');
      var offsetLine = util.getArg(offset, 'line');
      var offsetColumn = util.getArg(offset, 'column');

      if (offsetLine < lastOffset.line ||
          (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
        throw new Error('Section offsets must be ordered and non-overlapping.');
      }
      lastOffset = offset;

      return {
        generatedOffset: {
          // The offset fields are 0-based, but we use 1-based indices when
          // encoding/decoding from VLQ.
          generatedLine: offsetLine + 1,
          generatedColumn: offsetColumn + 1
        },
        consumer: new SourceMapConsumer(util.getArg(s, 'map'))
      }
    });
  }

  IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
  IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;

  /**
   * The version of the source mapping spec that we are consuming.
   */
  IndexedSourceMapConsumer.prototype._version = 3;

  /**
   * The list of original sources.
   */
  Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
    get: function () {
      var sources = [];
      for (var i = 0; i < this._sections.length; i++) {
        for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
          sources.push(this._sections[i].consumer.sources[j]);
        }
      }
      return sources;
    }
  });

  /**
   * Returns the original source, line, and column information for the generated
   * source's line and column positions provided. The only argument is an object
   * with the following properties:
   *
   *   - line: The line number in the generated source.
   *   - column: The column number in the generated source.
   *
   * and an object is returned with the following properties:
   *
   *   - source: The original source file, or null.
   *   - line: The line number in the original source, or null.
   *   - column: The column number in the original source, or null.
   *   - name: The original identifier, or null.
   */
  IndexedSourceMapConsumer.prototype.originalPositionFor =
    function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
      var needle = {
        generatedLine: util.getArg(aArgs, 'line'),
        generatedColumn: util.getArg(aArgs, 'column')
      };

      // Find the section containing the generated position we're trying to map
      // to an original position.
      var sectionIndex = binarySearch.search(needle, this._sections,
        function(needle, section) {
          var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
          if (cmp) {
            return cmp;
          }

          return (needle.generatedColumn -
                  section.generatedOffset.generatedColumn);
        });
      var section = this._sections[sectionIndex];

      if (!section) {
        return {
          source: null,
          line: null,
          column: null,
          name: null
        };
      }

      return section.consumer.originalPositionFor({
        line: needle.generatedLine -
          (section.generatedOffset.generatedLine - 1),
        column: needle.generatedColumn -
          (section.generatedOffset.generatedLine === needle.generatedLine
           ? section.generatedOffset.generatedColumn - 1
           : 0),
        bias: aArgs.bias
      });
    };

  /**
   * Return true if we have the source content for every source in the source
   * map, false otherwise.
   */
  IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
    function IndexedSourceMapConsumer_hasContentsOfAllSources() {
      return this._sections.every(function (s) {
        return s.consumer.hasContentsOfAllSources();
      });
    };

  /**
   * Returns the original source content. The only argument is the url of the
   * original source file. Returns null if no original source content is
   * available.
   */
  IndexedSourceMapConsumer.prototype.sourceContentFor =
    function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];

        var content = section.consumer.sourceContentFor(aSource, true);
        if (content) {
          return content;
        }
      }
      if (nullOnMissing) {
        return null;
      }
      else {
        throw new Error('"' + aSource + '" is not in the SourceMap.');
      }
    };

  /**
   * Returns the generated line and column information for the original source,
   * line, and column positions provided. The only argument is an object with
   * the following properties:
   *
   *   - source: The filename of the original source.
   *   - line: The line number in the original source.
   *   - column: The column number in the original source.
   *
   * and an object is returned with the following properties:
   *
   *   - line: The line number in the generated source, or null.
   *   - column: The column number in the generated source, or null.
   */
  IndexedSourceMapConsumer.prototype.generatedPositionFor =
    function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];

        // Only consider this section if the requested source is in the list of
        // sources of the consumer.
        if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {
          continue;
        }
        var generatedPosition = section.consumer.generatedPositionFor(aArgs);
        if (generatedPosition) {
          var ret = {
            line: generatedPosition.line +
              (section.generatedOffset.generatedLine - 1),
            column: generatedPosition.column +
              (section.generatedOffset.generatedLine === generatedPosition.line
               ? section.generatedOffset.generatedColumn - 1
               : 0)
          };
          return ret;
        }
      }

      return {
        line: null,
        column: null
      };
    };

  /**
   * Parse the mappings in a string in to a data structure which we can easily
   * query (the ordered arrays in the `this.__generatedMappings` and
   * `this.__originalMappings` properties).
   */
  IndexedSourceMapConsumer.prototype._parseMappings =
    function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      this.__generatedMappings = [];
      this.__originalMappings = [];
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];
        var sectionMappings = section.consumer._generatedMappings;
        for (var j = 0; j < sectionMappings.length; j++) {
          var mapping = sectionMappings[j];

          var source = section.consumer._sources.at(mapping.source);
          if (section.consumer.sourceRoot !== null) {
            source = util.join(section.consumer.sourceRoot, source);
          }
          this._sources.add(source);
          source = this._sources.indexOf(source);

          var name = section.consumer._names.at(mapping.name);
          this._names.add(name);
          name = this._names.indexOf(name);

          // The mappings coming from the consumer for the section have
          // generated positions relative to the start of the section, so we
          // need to offset them to be relative to the start of the concatenated
          // generated file.
          var adjustedMapping = {
            source: source,
            generatedLine: mapping.generatedLine +
              (section.generatedOffset.generatedLine - 1),
            generatedColumn: mapping.generatedColumn +
              (section.generatedOffset.generatedLine === mapping.generatedLine
              ? section.generatedOffset.generatedColumn - 1
              : 0),
            originalLine: mapping.originalLine,
            originalColumn: mapping.originalColumn,
            name: name
          };

          this.__generatedMappings.push(adjustedMapping);
          if (typeof adjustedMapping.originalLine === 'number') {
            this.__originalMappings.push(adjustedMapping);
          }
        }
      }

      quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
      quickSort(this.__originalMappings, util.compareByOriginalPositions);
    };

  exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;


/***/ },
/* 1291 */
/***/ function(module, exports, __webpack_require__) {

  /* -*- Mode: js; js-indent-level: 2; -*- */
  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */

  var SourceMapGenerator = __webpack_require__(518).SourceMapGenerator;
  var util = __webpack_require__(223);

  // Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
  // operating systems these days (capturing the result).
  var REGEX_NEWLINE = /(\r?\n)/;

  // Newline character code for charCodeAt() comparisons
  var NEWLINE_CODE = 10;

  // Private symbol for identifying `SourceNode`s when multiple versions of
  // the source-map library are loaded. This MUST NOT CHANGE across
  // versions!
  var isSourceNode = "$$$isSourceNode$$$";

  /**
   * SourceNodes provide a way to abstract over interpolating/concatenating
   * snippets of generated JavaScript source code while maintaining the line and
   * column information associated with the original source code.
   *
   * @param aLine The original line number.
   * @param aColumn The original column number.
   * @param aSource The original source's filename.
   * @param aChunks Optional. An array of strings which are snippets of
   *        generated JS, or other SourceNodes.
   * @param aName The original identifier.
   */
  function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
    this.children = [];
    this.sourceContents = {};
    this.line = aLine == null ? null : aLine;
    this.column = aColumn == null ? null : aColumn;
    this.source = aSource == null ? null : aSource;
    this.name = aName == null ? null : aName;
    this[isSourceNode] = true;
    if (aChunks != null) this.add(aChunks);
  }

  /**
   * Creates a SourceNode from generated code and a SourceMapConsumer.
   *
   * @param aGeneratedCode The generated code
   * @param aSourceMapConsumer The SourceMap for the generated code
   * @param aRelativePath Optional. The path that relative sources in the
   *        SourceMapConsumer should be relative to.
   */
  SourceNode.fromStringWithSourceMap =
    function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
      // The SourceNode we want to fill with the generated code
      // and the SourceMap
      var node = new SourceNode();

      // All even indices of this array are one line of the generated code,
      // while all odd indices are the newlines between two adjacent lines
      // (since `REGEX_NEWLINE` captures its match).
      // Processed fragments are removed from this array, by calling `shiftNextLine`.
      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
      var shiftNextLine = function() {
        var lineContents = remainingLines.shift();
        // The last line of a file might not have a newline.
        var newLine = remainingLines.shift() || "";
        return lineContents + newLine;
      };

      // We need to remember the position of "remainingLines"
      var lastGeneratedLine = 1, lastGeneratedColumn = 0;

      // The generate SourceNodes we need a code range.
      // To extract it current and last mapping is used.
      // Here we store the last mapping.
      var lastMapping = null;

      aSourceMapConsumer.eachMapping(function (mapping) {
        if (lastMapping !== null) {
          // We add the code from "lastMapping" to "mapping":
          // First check if there is a new line in between.
          if (lastGeneratedLine < mapping.generatedLine) {
            // Associate first line with "lastMapping"
            addMappingWithCode(lastMapping, shiftNextLine());
            lastGeneratedLine++;
            lastGeneratedColumn = 0;
            // The remaining code is added without mapping
          } else {
            // There is no new line in between.
            // Associate the code between "lastGeneratedColumn" and
            // "mapping.generatedColumn" with "lastMapping"
            var nextLine = remainingLines[0];
            var code = nextLine.substr(0, mapping.generatedColumn -
                                          lastGeneratedColumn);
            remainingLines[0] = nextLine.substr(mapping.generatedColumn -
                                                lastGeneratedColumn);
            lastGeneratedColumn = mapping.generatedColumn;
            addMappingWithCode(lastMapping, code);
            // No more remaining code, continue
            lastMapping = mapping;
            return;
          }
        }
        // We add the generated code until the first mapping
        // to the SourceNode without any mapping.
        // Each line is added as separate string.
        while (lastGeneratedLine < mapping.generatedLine) {
          node.add(shiftNextLine());
          lastGeneratedLine++;
        }
        if (lastGeneratedColumn < mapping.generatedColumn) {
          var nextLine = remainingLines[0];
          node.add(nextLine.substr(0, mapping.generatedColumn));
          remainingLines[0] = nextLine.substr(mapping.generatedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
        }
        lastMapping = mapping;
      }, this);
      // We have processed all mappings.
      if (remainingLines.length > 0) {
        if (lastMapping) {
          // Associate the remaining code in the current line with "lastMapping"
          addMappingWithCode(lastMapping, shiftNextLine());
        }
        // and add the remaining lines without any mapping
        node.add(remainingLines.join(""));
      }

      // Copy sourcesContent into SourceNode
      aSourceMapConsumer.sources.forEach(function (sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          if (aRelativePath != null) {
            sourceFile = util.join(aRelativePath, sourceFile);
          }
          node.setSourceContent(sourceFile, content);
        }
      });

      return node;

      function addMappingWithCode(mapping, code) {
        if (mapping === null || mapping.source === undefined) {
          node.add(code);
        } else {
          var source = aRelativePath
            ? util.join(aRelativePath, mapping.source)
            : mapping.source;
          node.add(new SourceNode(mapping.originalLine,
                                  mapping.originalColumn,
                                  source,
                                  code,
                                  mapping.name));
        }
      }
    };

  /**
   * Add a chunk of generated JS to this source node.
   *
   * @param aChunk A string snippet of generated JS code, another instance of
   *        SourceNode, or an array where each member is one of those things.
   */
  SourceNode.prototype.add = function SourceNode_add(aChunk) {
    if (Array.isArray(aChunk)) {
      aChunk.forEach(function (chunk) {
        this.add(chunk);
      }, this);
    }
    else if (aChunk[isSourceNode] || typeof aChunk === "string") {
      if (aChunk) {
        this.children.push(aChunk);
      }
    }
    else {
      throw new TypeError(
        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
      );
    }
    return this;
  };

  /**
   * Add a chunk of generated JS to the beginning of this source node.
   *
   * @param aChunk A string snippet of generated JS code, another instance of
   *        SourceNode, or an array where each member is one of those things.
   */
  SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
    if (Array.isArray(aChunk)) {
      for (var i = aChunk.length-1; i >= 0; i--) {
        this.prepend(aChunk[i]);
      }
    }
    else if (aChunk[isSourceNode] || typeof aChunk === "string") {
      this.children.unshift(aChunk);
    }
    else {
      throw new TypeError(
        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
      );
    }
    return this;
  };

  /**
   * Walk over the tree of JS snippets in this node and its children. The
   * walking function is called once for each snippet of JS and is passed that
   * snippet and the its original associated source's line/column location.
   *
   * @param aFn The traversal function.
   */
  SourceNode.prototype.walk = function SourceNode_walk(aFn) {
    var chunk;
    for (var i = 0, len = this.children.length; i < len; i++) {
      chunk = this.children[i];
      if (chunk[isSourceNode]) {
        chunk.walk(aFn);
      }
      else {
        if (chunk !== '') {
          aFn(chunk, { source: this.source,
                       line: this.line,
                       column: this.column,
                       name: this.name });
        }
      }
    }
  };

  /**
   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
   * each of `this.children`.
   *
   * @param aSep The separator.
   */
  SourceNode.prototype.join = function SourceNode_join(aSep) {
    var newChildren;
    var i;
    var len = this.children.length;
    if (len > 0) {
      newChildren = [];
      for (i = 0; i < len-1; i++) {
        newChildren.push(this.children[i]);
        newChildren.push(aSep);
      }
      newChildren.push(this.children[i]);
      this.children = newChildren;
    }
    return this;
  };

  /**
   * Call String.prototype.replace on the very right-most source snippet. Useful
   * for trimming whitespace from the end of a source node, etc.
   *
   * @param aPattern The pattern to replace.
   * @param aReplacement The thing to replace the pattern with.
   */
  SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
    var lastChild = this.children[this.children.length - 1];
    if (lastChild[isSourceNode]) {
      lastChild.replaceRight(aPattern, aReplacement);
    }
    else if (typeof lastChild === 'string') {
      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
    }
    else {
      this.children.push(''.replace(aPattern, aReplacement));
    }
    return this;
  };

  /**
   * Set the source content for a source file. This will be added to the SourceMapGenerator
   * in the sourcesContent field.
   *
   * @param aSourceFile The filename of the source file
   * @param aSourceContent The content of the source file
   */
  SourceNode.prototype.setSourceContent =
    function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
    };

  /**
   * Walk over the tree of SourceNodes. The walking function is called for each
   * source file content and is passed the filename and source content.
   *
   * @param aFn The traversal function.
   */
  SourceNode.prototype.walkSourceContents =
    function SourceNode_walkSourceContents(aFn) {
      for (var i = 0, len = this.children.length; i < len; i++) {
        if (this.children[i][isSourceNode]) {
          this.children[i].walkSourceContents(aFn);
        }
      }

      var sources = Object.keys(this.sourceContents);
      for (var i = 0, len = sources.length; i < len; i++) {
        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
      }
    };

  /**
   * Return the string representation of this source node. Walks over the tree
   * and concatenates all the various snippets together to one string.
   */
  SourceNode.prototype.toString = function SourceNode_toString() {
    var str = "";
    this.walk(function (chunk) {
      str += chunk;
    });
    return str;
  };

  /**
   * Returns the string representation of this source node along with a source
   * map.
   */
  SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
    var generated = {
      code: "",
      line: 1,
      column: 0
    };
    var map = new SourceMapGenerator(aArgs);
    var sourceMappingActive = false;
    var lastOriginalSource = null;
    var lastOriginalLine = null;
    var lastOriginalColumn = null;
    var lastOriginalName = null;
    this.walk(function (chunk, original) {
      generated.code += chunk;
      if (original.source !== null
          && original.line !== null
          && original.column !== null) {
        if(lastOriginalSource !== original.source
           || lastOriginalLine !== original.line
           || lastOriginalColumn !== original.column
           || lastOriginalName !== original.name) {
          map.addMapping({
            source: original.source,
            original: {
              line: original.line,
              column: original.column
            },
            generated: {
              line: generated.line,
              column: generated.column
            },
            name: original.name
          });
        }
        lastOriginalSource = original.source;
        lastOriginalLine = original.line;
        lastOriginalColumn = original.column;
        lastOriginalName = original.name;
        sourceMappingActive = true;
      } else if (sourceMappingActive) {
        map.addMapping({
          generated: {
            line: generated.line,
            column: generated.column
          }
        });
        lastOriginalSource = null;
        sourceMappingActive = false;
      }
      for (var idx = 0, length = chunk.length; idx < length; idx++) {
        if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
          generated.line++;
          generated.column = 0;
          // Mappings end at eol
          if (idx + 1 === length) {
            lastOriginalSource = null;
            sourceMappingActive = false;
          } else if (sourceMappingActive) {
            map.addMapping({
              source: original.source,
              original: {
                line: original.line,
                column: original.column
              },
              generated: {
                line: generated.line,
                column: generated.column
              },
              name: original.name
            });
          }
        } else {
          generated.column++;
        }
      }
    });
    this.walkSourceContents(function (sourceFile, sourceContent) {
      map.setSourceContent(sourceFile, sourceContent);
    });

    return { code: generated.code, map: map };
  };

  exports.SourceNode = SourceNode;


/***/ },
/* 1292 */
/***/ function(module, exports) {

  'use strict';
  module.exports = function (str) {
  	return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
  		return '%' + c.charCodeAt(0).toString(16).toUpperCase();
  	});
  };


/***/ },
/* 1293 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var ansiRegex = __webpack_require__(378)();

  module.exports = function (str) {
  	return typeof str === 'string' ? str.replace(ansiRegex, '') : str;
  };


/***/ },
/* 1294 */
/***/ function(module, exports) {

  'use strict';
  module.exports = function toFastProperties(obj) {
  	function f() {}
  	f.prototype = obj;
  	new f();
  	return;
  	eval(obj);
  };


/***/ },
/* 1295 */
/***/ function(module, exports) {

  exports.isatty = function () { return false; };

  function ReadStream() {
    throw new Error('tty.ReadStream is not implemented');
  }
  exports.ReadStream = ReadStream;

  function WriteStream() {
    throw new Error('tty.ReadStream is not implemented');
  }
  exports.WriteStream = WriteStream;


/***/ },
/* 1296 */
/***/ function(module, exports) {

  module.exports = function isBuffer(arg) {
    return arg && typeof arg === 'object'
      && typeof arg.copy === 'function'
      && typeof arg.fill === 'function'
      && typeof arg.readUInt8 === 'function';
  }

/***/ },
/* 1297 */
/***/ function(module, exports, __webpack_require__) {

  var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

  ;(function (exports) {
  	'use strict';

    var Arr = (typeof Uint8Array !== 'undefined')
      ? Uint8Array
      : Array

  	var PLUS   = '+'.charCodeAt(0)
  	var SLASH  = '/'.charCodeAt(0)
  	var NUMBER = '0'.charCodeAt(0)
  	var LOWER  = 'a'.charCodeAt(0)
  	var UPPER  = 'A'.charCodeAt(0)
  	var PLUS_URL_SAFE = '-'.charCodeAt(0)
  	var SLASH_URL_SAFE = '_'.charCodeAt(0)

  	function decode (elt) {
  		var code = elt.charCodeAt(0)
  		if (code === PLUS ||
  		    code === PLUS_URL_SAFE)
  			return 62 // '+'
  		if (code === SLASH ||
  		    code === SLASH_URL_SAFE)
  			return 63 // '/'
  		if (code < NUMBER)
  			return -1 //no match
  		if (code < NUMBER + 10)
  			return code - NUMBER + 26 + 26
  		if (code < UPPER + 26)
  			return code - UPPER
  		if (code < LOWER + 26)
  			return code - LOWER + 26
  	}

  	function b64ToByteArray (b64) {
  		var i, j, l, tmp, placeHolders, arr

  		if (b64.length % 4 > 0) {
  			throw new Error('Invalid string. Length must be a multiple of 4')
  		}

  		// the number of equal signs (place holders)
  		// if there are two placeholders, than the two characters before it
  		// represent one byte
  		// if there is only one, then the three characters before it represent 2 bytes
  		// this is just a cheap hack to not do indexOf twice
  		var len = b64.length
  		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

  		// base64 is 4/3 + up to two characters of the original data
  		arr = new Arr(b64.length * 3 / 4 - placeHolders)

  		// if there are placeholders, only get up to the last complete 4 chars
  		l = placeHolders > 0 ? b64.length - 4 : b64.length

  		var L = 0

  		function push (v) {
  			arr[L++] = v
  		}

  		for (i = 0, j = 0; i < l; i += 4, j += 3) {
  			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
  			push((tmp & 0xFF0000) >> 16)
  			push((tmp & 0xFF00) >> 8)
  			push(tmp & 0xFF)
  		}

  		if (placeHolders === 2) {
  			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
  			push(tmp & 0xFF)
  		} else if (placeHolders === 1) {
  			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
  			push((tmp >> 8) & 0xFF)
  			push(tmp & 0xFF)
  		}

  		return arr
  	}

  	function uint8ToBase64 (uint8) {
  		var i,
  			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
  			output = "",
  			temp, length

  		function encode (num) {
  			return lookup.charAt(num)
  		}

  		function tripletToBase64 (num) {
  			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
  		}

  		// go through the array every three bytes, we'll deal with trailing stuff later
  		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
  			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
  			output += tripletToBase64(temp)
  		}

  		// pad the end with zeros, but make sure to not forget the extra bytes
  		switch (extraBytes) {
  			case 1:
  				temp = uint8[uint8.length - 1]
  				output += encode(temp >> 2)
  				output += encode((temp << 4) & 0x3F)
  				output += '=='
  				break
  			case 2:
  				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
  				output += encode(temp >> 10)
  				output += encode((temp >> 4) & 0x3F)
  				output += encode((temp << 2) & 0x3F)
  				output += '='
  				break
  		}

  		return output
  	}

  	exports.toByteArray = b64ToByteArray
  	exports.fromByteArray = uint8ToBase64
  }( false ? (this.base64js = {}) : exports))


/***/ },
/* 1298 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(522)

  var zeroBuffer = new Buffer(128)
  zeroBuffer.fill(0)

  module.exports = Hmac

  function Hmac (alg, key) {
    if(!(this instanceof Hmac)) return new Hmac(alg, key)
    this._opad = opad
    this._alg = alg

    var blocksize = (alg === 'sha512') ? 128 : 64

    key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key

    if(key.length > blocksize) {
      key = createHash(alg).update(key).digest()
    } else if(key.length < blocksize) {
      key = Buffer.concat([key, zeroBuffer], blocksize)
    }

    var ipad = this._ipad = new Buffer(blocksize)
    var opad = this._opad = new Buffer(blocksize)

    for(var i = 0; i < blocksize; i++) {
      ipad[i] = key[i] ^ 0x36
      opad[i] = key[i] ^ 0x5C
    }

    this._hash = createHash(alg).update(ipad)
  }

  Hmac.prototype.update = function (data, enc) {
    this._hash.update(data, enc)
    return this
  }

  Hmac.prototype.digest = function (enc) {
    var h = this._hash.digest()
    return createHash(this._alg).update(this._opad).update(h).digest(enc)
  }


  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(115).Buffer))

/***/ },
/* 1299 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {var intSize = 4;
  var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
  var chrsz = 8;

  function toArray(buf, bigEndian) {
    if ((buf.length % intSize) !== 0) {
      var len = buf.length + (intSize - (buf.length % intSize));
      buf = Buffer.concat([buf, zeroBuffer], len);
    }

    var arr = [];
    var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
    for (var i = 0; i < buf.length; i += intSize) {
      arr.push(fn.call(buf, i));
    }
    return arr;
  }

  function toBuffer(arr, size, bigEndian) {
    var buf = new Buffer(size);
    var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
    for (var i = 0; i < arr.length; i++) {
      fn.call(buf, arr[i], i * 4, true);
    }
    return buf;
  }

  function hash(buf, fn, hashSize, bigEndian) {
    if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
    var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
    return toBuffer(arr, hashSize, bigEndian);
  }

  module.exports = { hash: hash };

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(115).Buffer))

/***/ },
/* 1300 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
   * Digest Algorithm, as defined in RFC 1321.
   * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   * Distributed under the BSD License
   * See http://pajhome.org.uk/crypt/md5 for more info.
   */

  var helpers = __webpack_require__(1299);

  /*
   * Calculate the MD5 of an array of little-endian words, and a bit length
   */
  function core_md5(x, len)
  {
    /* append padding */
    x[len >> 5] |= 0x80 << ((len) % 32);
    x[(((len + 64) >>> 9) << 4) + 14] = len;

    var a =  1732584193;
    var b = -271733879;
    var c = -1732584194;
    var d =  271733878;

    for(var i = 0; i < x.length; i += 16)
    {
      var olda = a;
      var oldb = b;
      var oldc = c;
      var oldd = d;

      a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
      d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
      c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
      b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
      a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
      d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
      c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
      b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
      a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
      d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
      c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
      b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
      a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
      d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
      c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
      b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

      a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
      d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
      c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
      b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
      a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
      d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
      c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
      b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
      a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
      d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
      c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
      b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
      a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
      d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
      c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
      b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

      a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
      d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
      c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
      b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
      a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
      d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
      c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
      b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
      a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
      d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
      c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
      b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
      a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
      d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
      c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
      b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

      a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
      d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
      c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
      b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
      a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
      d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
      c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
      b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
      a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
      d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
      c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
      b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
      a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
      d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
      c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
      b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

      a = safe_add(a, olda);
      b = safe_add(b, oldb);
      c = safe_add(c, oldc);
      d = safe_add(d, oldd);
    }
    return Array(a, b, c, d);

  }

  /*
   * These functions implement the four basic operations the algorithm uses.
   */
  function md5_cmn(q, a, b, x, s, t)
  {
    return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
  }
  function md5_ff(a, b, c, d, x, s, t)
  {
    return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
  }
  function md5_gg(a, b, c, d, x, s, t)
  {
    return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
  }
  function md5_hh(a, b, c, d, x, s, t)
  {
    return md5_cmn(b ^ c ^ d, a, b, x, s, t);
  }
  function md5_ii(a, b, c, d, x, s, t)
  {
    return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
  }

  /*
   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
   * to work around bugs in some JS interpreters.
   */
  function safe_add(x, y)
  {
    var lsw = (x & 0xFFFF) + (y & 0xFFFF);
    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    return (msw << 16) | (lsw & 0xFFFF);
  }

  /*
   * Bitwise rotate a 32-bit number to the left.
   */
  function bit_rol(num, cnt)
  {
    return (num << cnt) | (num >>> (32 - cnt));
  }

  module.exports = function md5(buf) {
    return helpers.hash(buf, core_md5, 16);
  };


/***/ },
/* 1301 */
/***/ function(module, exports, __webpack_require__) {

  var pbkdf2Export = __webpack_require__(1212)

  module.exports = function (crypto, exports) {
    exports = exports || {}

    var exported = pbkdf2Export(crypto)

    exports.pbkdf2 = exported.pbkdf2
    exports.pbkdf2Sync = exported.pbkdf2Sync

    return exports
  }


/***/ },
/* 1302 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(global, Buffer) {(function() {
    var g = ('undefined' === typeof window ? global : window) || {}
    _crypto = (
      g.crypto || g.msCrypto || __webpack_require__(1315)
    )
    module.exports = function(size) {
      // Modern Browsers
      if(_crypto.getRandomValues) {
        var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
        /* This will not work in older browsers.
         * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
         */
      
        _crypto.getRandomValues(bytes);
        return bytes;
      }
      else if (_crypto.randomBytes) {
        return _crypto.randomBytes(size)
      }
      else
        throw new Error(
          'secure random number generation not supported by this browser\n'+
          'use chrome, FireFox or Internet Explorer 11'
        )
    }
  }())

  /* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(115).Buffer))

/***/ },
/* 1303 */
/***/ function(module, exports) {

  exports.endianness = function () { return 'LE' };

  exports.hostname = function () {
      if (typeof location !== 'undefined') {
          return location.hostname
      }
      else return '';
  };

  exports.loadavg = function () { return [] };

  exports.uptime = function () { return 0 };

  exports.freemem = function () {
      return Number.MAX_VALUE;
  };

  exports.totalmem = function () {
      return Number.MAX_VALUE;
  };

  exports.cpus = function () { return [] };

  exports.type = function () { return 'Browser' };

  exports.release = function () {
      if (typeof navigator !== 'undefined') {
          return navigator.appVersion;
      }
      return '';
  };

  exports.networkInterfaces
  = exports.getNetworkInterfaces
  = function () { return {} };

  exports.arch = function () { return 'javascript' };

  exports.platform = function () { return 'browser' };

  exports.tmpdir = exports.tmpDir = function () {
      return '/tmp';
  };

  exports.EOL = '\n';


/***/ },
/* 1304 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = __webpack_require__(188)


/***/ },
/* 1305 */
/***/ function(module, exports) {

  module.exports = Array.isArray || function (arr) {
    return Object.prototype.toString.call(arr) == '[object Array]';
  };


/***/ },
/* 1306 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = __webpack_require__(524)


/***/ },
/* 1307 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(process) {exports = module.exports = __webpack_require__(525);
  exports.Stream = __webpack_require__(278);
  exports.Readable = exports;
  exports.Writable = __webpack_require__(377);
  exports.Duplex = __webpack_require__(188);
  exports.Transform = __webpack_require__(376);
  exports.PassThrough = __webpack_require__(524);
  if (!process.browser && process.env.READABLE_STREAM === 'disable') {
    module.exports = __webpack_require__(278);
  }

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(111)))

/***/ },
/* 1308 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = __webpack_require__(377)


/***/ },
/* 1309 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {
  module.exports = ripemd160



  /*
  CryptoJS v3.1.2
  code.google.com/p/crypto-js
  (c) 2009-2013 by Jeff Mott. All rights reserved.
  code.google.com/p/crypto-js/wiki/License
  */
  /** @preserve
  (c) 2012 by Cédric Mesnil. All rights reserved.

  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

      - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
      - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */

  // Constants table
  var zl = [
      0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
      7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
      3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
      1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
      4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13];
  var zr = [
      5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
      6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
      15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
      8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
      12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11];
  var sl = [
       11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
      7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
      11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
        11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
      9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ];
  var sr = [
      8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
      9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
      9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
      15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
      8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ];

  var hl =  [ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E];
  var hr =  [ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000];

  var bytesToWords = function (bytes) {
    var words = [];
    for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
      words[b >>> 5] |= bytes[i] << (24 - b % 32);
    }
    return words;
  };

  var wordsToBytes = function (words) {
    var bytes = [];
    for (var b = 0; b < words.length * 32; b += 8) {
      bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
    }
    return bytes;
  };

  var processBlock = function (H, M, offset) {

    // Swap endian
    for (var i = 0; i < 16; i++) {
      var offset_i = offset + i;
      var M_offset_i = M[offset_i];

      // Swap
      M[offset_i] = (
          (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
          (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
      );
    }

    // Working variables
    var al, bl, cl, dl, el;
    var ar, br, cr, dr, er;

    ar = al = H[0];
    br = bl = H[1];
    cr = cl = H[2];
    dr = dl = H[3];
    er = el = H[4];
    // Computation
    var t;
    for (var i = 0; i < 80; i += 1) {
      t = (al +  M[offset+zl[i]])|0;
      if (i<16){
          t +=  f1(bl,cl,dl) + hl[0];
      } else if (i<32) {
          t +=  f2(bl,cl,dl) + hl[1];
      } else if (i<48) {
          t +=  f3(bl,cl,dl) + hl[2];
      } else if (i<64) {
          t +=  f4(bl,cl,dl) + hl[3];
      } else {// if (i<80) {
          t +=  f5(bl,cl,dl) + hl[4];
      }
      t = t|0;
      t =  rotl(t,sl[i]);
      t = (t+el)|0;
      al = el;
      el = dl;
      dl = rotl(cl, 10);
      cl = bl;
      bl = t;

      t = (ar + M[offset+zr[i]])|0;
      if (i<16){
          t +=  f5(br,cr,dr) + hr[0];
      } else if (i<32) {
          t +=  f4(br,cr,dr) + hr[1];
      } else if (i<48) {
          t +=  f3(br,cr,dr) + hr[2];
      } else if (i<64) {
          t +=  f2(br,cr,dr) + hr[3];
      } else {// if (i<80) {
          t +=  f1(br,cr,dr) + hr[4];
      }
      t = t|0;
      t =  rotl(t,sr[i]) ;
      t = (t+er)|0;
      ar = er;
      er = dr;
      dr = rotl(cr, 10);
      cr = br;
      br = t;
    }
    // Intermediate hash value
    t    = (H[1] + cl + dr)|0;
    H[1] = (H[2] + dl + er)|0;
    H[2] = (H[3] + el + ar)|0;
    H[3] = (H[4] + al + br)|0;
    H[4] = (H[0] + bl + cr)|0;
    H[0] =  t;
  };

  function f1(x, y, z) {
    return ((x) ^ (y) ^ (z));
  }

  function f2(x, y, z) {
    return (((x)&(y)) | ((~x)&(z)));
  }

  function f3(x, y, z) {
    return (((x) | (~(y))) ^ (z));
  }

  function f4(x, y, z) {
    return (((x) & (z)) | ((y)&(~(z))));
  }

  function f5(x, y, z) {
    return ((x) ^ ((y) |(~(z))));
  }

  function rotl(x,n) {
    return (x<<n) | (x>>>(32-n));
  }

  function ripemd160(message) {
    var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];

    if (typeof message == 'string')
      message = new Buffer(message, 'utf8');

    var m = bytesToWords(message);

    var nBitsLeft = message.length * 8;
    var nBitsTotal = message.length * 8;

    // Add padding
    m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
    m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
        (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
        (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
    );

    for (var i=0 ; i<m.length; i += 16) {
      processBlock(H, m, i);
    }

    // Swap endian
    for (var i = 0; i < 5; i++) {
        // Shortcut
      var H_i = H[i];

      // Swap
      H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
            (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
    }

    var digestbytes = wordsToBytes(H);
    return new Buffer(digestbytes);
  }



  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(115).Buffer))

/***/ },
/* 1310 */
/***/ function(module, exports) {

  module.exports = function (Buffer) {

    //prototype class for hash functions
    function Hash (blockSize, finalSize) {
      this._block = new Buffer(blockSize) //new Uint32Array(blockSize/4)
      this._finalSize = finalSize
      this._blockSize = blockSize
      this._len = 0
      this._s = 0
    }

    Hash.prototype.init = function () {
      this._s = 0
      this._len = 0
    }

    Hash.prototype.update = function (data, enc) {
      if ("string" === typeof data) {
        enc = enc || "utf8"
        data = new Buffer(data, enc)
      }

      var l = this._len += data.length
      var s = this._s = (this._s || 0)
      var f = 0
      var buffer = this._block

      while (s < l) {
        var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
        var ch = (t - f)

        for (var i = 0; i < ch; i++) {
          buffer[(s % this._blockSize) + i] = data[i + f]
        }

        s += ch
        f += ch

        if ((s % this._blockSize) === 0) {
          this._update(buffer)
        }
      }
      this._s = s

      return this
    }

    Hash.prototype.digest = function (enc) {
      // Suppose the length of the message M, in bits, is l
      var l = this._len * 8

      // Append the bit 1 to the end of the message
      this._block[this._len % this._blockSize] = 0x80

      // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
      this._block.fill(0, this._len % this._blockSize + 1)

      if (l % (this._blockSize * 8) >= this._finalSize * 8) {
        this._update(this._block)
        this._block.fill(0)
      }

      // to this append the block which is equal to the number l written in binary
      // TODO: handle case where l is > Math.pow(2, 29)
      this._block.writeInt32BE(l, this._blockSize - 4)

      var hash = this._update(this._block) || this._hash()

      return enc ? hash.toString(enc) : hash
    }

    Hash.prototype._update = function () {
      throw new Error('_update must be implemented by subclass')
    }

    return Hash
  }


/***/ },
/* 1311 */
/***/ function(module, exports, __webpack_require__) {

  var exports = module.exports = function (alg) {
    var Alg = exports[alg]
    if(!Alg) throw new Error(alg + ' is not supported (we accept pull requests)')
    return new Alg()
  }

  var Buffer = __webpack_require__(115).Buffer
  var Hash   = __webpack_require__(1310)(Buffer)

  exports.sha1 = __webpack_require__(1312)(Buffer, Hash)
  exports.sha256 = __webpack_require__(1313)(Buffer, Hash)
  exports.sha512 = __webpack_require__(1314)(Buffer, Hash)


/***/ },
/* 1312 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
   * in FIPS PUB 180-1
   * Version 2.1a Copyright Paul Johnston 2000 - 2002.
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   * Distributed under the BSD License
   * See http://pajhome.org.uk/crypt/md5 for details.
   */

  var inherits = __webpack_require__(168).inherits

  module.exports = function (Buffer, Hash) {

    var A = 0|0
    var B = 4|0
    var C = 8|0
    var D = 12|0
    var E = 16|0

    var W = new (typeof Int32Array === 'undefined' ? Array : Int32Array)(80)

    var POOL = []

    function Sha1 () {
      if(POOL.length)
        return POOL.pop().init()

      if(!(this instanceof Sha1)) return new Sha1()
      this._w = W
      Hash.call(this, 16*4, 14*4)

      this._h = null
      this.init()
    }

    inherits(Sha1, Hash)

    Sha1.prototype.init = function () {
      this._a = 0x67452301
      this._b = 0xefcdab89
      this._c = 0x98badcfe
      this._d = 0x10325476
      this._e = 0xc3d2e1f0

      Hash.prototype.init.call(this)
      return this
    }

    Sha1.prototype._POOL = POOL
    Sha1.prototype._update = function (X) {

      var a, b, c, d, e, _a, _b, _c, _d, _e

      a = _a = this._a
      b = _b = this._b
      c = _c = this._c
      d = _d = this._d
      e = _e = this._e

      var w = this._w

      for(var j = 0; j < 80; j++) {
        var W = w[j] = j < 16 ? X.readInt32BE(j*4)
          : rol(w[j - 3] ^ w[j -  8] ^ w[j - 14] ^ w[j - 16], 1)

        var t = add(
          add(rol(a, 5), sha1_ft(j, b, c, d)),
          add(add(e, W), sha1_kt(j))
        )

        e = d
        d = c
        c = rol(b, 30)
        b = a
        a = t
      }

      this._a = add(a, _a)
      this._b = add(b, _b)
      this._c = add(c, _c)
      this._d = add(d, _d)
      this._e = add(e, _e)
    }

    Sha1.prototype._hash = function () {
      if(POOL.length < 100) POOL.push(this)
      var H = new Buffer(20)
      //console.log(this._a|0, this._b|0, this._c|0, this._d|0, this._e|0)
      H.writeInt32BE(this._a|0, A)
      H.writeInt32BE(this._b|0, B)
      H.writeInt32BE(this._c|0, C)
      H.writeInt32BE(this._d|0, D)
      H.writeInt32BE(this._e|0, E)
      return H
    }

    /*
     * Perform the appropriate triplet combination function for the current
     * iteration
     */
    function sha1_ft(t, b, c, d) {
      if(t < 20) return (b & c) | ((~b) & d);
      if(t < 40) return b ^ c ^ d;
      if(t < 60) return (b & c) | (b & d) | (c & d);
      return b ^ c ^ d;
    }

    /*
     * Determine the appropriate additive constant for the current iteration
     */
    function sha1_kt(t) {
      return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
             (t < 60) ? -1894007588 : -899497514;
    }

    /*
     * Add integers, wrapping at 2^32. This uses 16-bit operations internally
     * to work around bugs in some JS interpreters.
     * //dominictarr: this is 10 years old, so maybe this can be dropped?)
     *
     */
    function add(x, y) {
      return (x + y ) | 0
    //lets see how this goes on testling.
    //  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
    //  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    //  return (msw << 16) | (lsw & 0xFFFF);
    }

    /*
     * Bitwise rotate a 32-bit number to the left.
     */
    function rol(num, cnt) {
      return (num << cnt) | (num >>> (32 - cnt));
    }

    return Sha1
  }


/***/ },
/* 1313 */
/***/ function(module, exports, __webpack_require__) {

  
  /**
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
   * in FIPS 180-2
   * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   *
   */

  var inherits = __webpack_require__(168).inherits

  module.exports = function (Buffer, Hash) {

    var K = [
        0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
        0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
        0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
        0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
        0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
        0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
        0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
        0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
        0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
        0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
        0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
        0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
        0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
        0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
        0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
        0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
      ]

    var W = new Array(64)

    function Sha256() {
      this.init()

      this._w = W //new Array(64)

      Hash.call(this, 16*4, 14*4)
    }

    inherits(Sha256, Hash)

    Sha256.prototype.init = function () {

      this._a = 0x6a09e667|0
      this._b = 0xbb67ae85|0
      this._c = 0x3c6ef372|0
      this._d = 0xa54ff53a|0
      this._e = 0x510e527f|0
      this._f = 0x9b05688c|0
      this._g = 0x1f83d9ab|0
      this._h = 0x5be0cd19|0

      this._len = this._s = 0

      return this
    }

    function S (X, n) {
      return (X >>> n) | (X << (32 - n));
    }

    function R (X, n) {
      return (X >>> n);
    }

    function Ch (x, y, z) {
      return ((x & y) ^ ((~x) & z));
    }

    function Maj (x, y, z) {
      return ((x & y) ^ (x & z) ^ (y & z));
    }

    function Sigma0256 (x) {
      return (S(x, 2) ^ S(x, 13) ^ S(x, 22));
    }

    function Sigma1256 (x) {
      return (S(x, 6) ^ S(x, 11) ^ S(x, 25));
    }

    function Gamma0256 (x) {
      return (S(x, 7) ^ S(x, 18) ^ R(x, 3));
    }

    function Gamma1256 (x) {
      return (S(x, 17) ^ S(x, 19) ^ R(x, 10));
    }

    Sha256.prototype._update = function(M) {

      var W = this._w
      var a, b, c, d, e, f, g, h
      var T1, T2

      a = this._a | 0
      b = this._b | 0
      c = this._c | 0
      d = this._d | 0
      e = this._e | 0
      f = this._f | 0
      g = this._g | 0
      h = this._h | 0

      for (var j = 0; j < 64; j++) {
        var w = W[j] = j < 16
          ? M.readInt32BE(j * 4)
          : Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16]

        T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w

        T2 = Sigma0256(a) + Maj(a, b, c);
        h = g; g = f; f = e; e = d + T1; d = c; c = b; b = a; a = T1 + T2;
      }

      this._a = (a + this._a) | 0
      this._b = (b + this._b) | 0
      this._c = (c + this._c) | 0
      this._d = (d + this._d) | 0
      this._e = (e + this._e) | 0
      this._f = (f + this._f) | 0
      this._g = (g + this._g) | 0
      this._h = (h + this._h) | 0

    };

    Sha256.prototype._hash = function () {
      var H = new Buffer(32)

      H.writeInt32BE(this._a,  0)
      H.writeInt32BE(this._b,  4)
      H.writeInt32BE(this._c,  8)
      H.writeInt32BE(this._d, 12)
      H.writeInt32BE(this._e, 16)
      H.writeInt32BE(this._f, 20)
      H.writeInt32BE(this._g, 24)
      H.writeInt32BE(this._h, 28)

      return H
    }

    return Sha256

  }


/***/ },
/* 1314 */
/***/ function(module, exports, __webpack_require__) {

  var inherits = __webpack_require__(168).inherits

  module.exports = function (Buffer, Hash) {
    var K = [
      0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
      0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
      0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
      0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
      0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
      0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
      0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
      0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
      0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
      0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
      0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
      0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
      0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
      0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
      0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
      0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
      0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
      0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
      0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
      0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
      0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
      0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
      0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
      0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
      0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
      0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
      0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
      0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
      0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
      0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
      0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
      0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
      0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
      0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
      0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
      0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
      0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
      0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
      0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
      0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
    ]

    var W = new Array(160)

    function Sha512() {
      this.init()
      this._w = W

      Hash.call(this, 128, 112)
    }

    inherits(Sha512, Hash)

    Sha512.prototype.init = function () {

      this._a = 0x6a09e667|0
      this._b = 0xbb67ae85|0
      this._c = 0x3c6ef372|0
      this._d = 0xa54ff53a|0
      this._e = 0x510e527f|0
      this._f = 0x9b05688c|0
      this._g = 0x1f83d9ab|0
      this._h = 0x5be0cd19|0

      this._al = 0xf3bcc908|0
      this._bl = 0x84caa73b|0
      this._cl = 0xfe94f82b|0
      this._dl = 0x5f1d36f1|0
      this._el = 0xade682d1|0
      this._fl = 0x2b3e6c1f|0
      this._gl = 0xfb41bd6b|0
      this._hl = 0x137e2179|0

      this._len = this._s = 0

      return this
    }

    function S (X, Xl, n) {
      return (X >>> n) | (Xl << (32 - n))
    }

    function Ch (x, y, z) {
      return ((x & y) ^ ((~x) & z));
    }

    function Maj (x, y, z) {
      return ((x & y) ^ (x & z) ^ (y & z));
    }

    Sha512.prototype._update = function(M) {

      var W = this._w
      var a, b, c, d, e, f, g, h
      var al, bl, cl, dl, el, fl, gl, hl

      a = this._a | 0
      b = this._b | 0
      c = this._c | 0
      d = this._d | 0
      e = this._e | 0
      f = this._f | 0
      g = this._g | 0
      h = this._h | 0

      al = this._al | 0
      bl = this._bl | 0
      cl = this._cl | 0
      dl = this._dl | 0
      el = this._el | 0
      fl = this._fl | 0
      gl = this._gl | 0
      hl = this._hl | 0

      for (var i = 0; i < 80; i++) {
        var j = i * 2

        var Wi, Wil

        if (i < 16) {
          Wi = W[j] = M.readInt32BE(j * 4)
          Wil = W[j + 1] = M.readInt32BE(j * 4 + 4)

        } else {
          var x  = W[j - 15*2]
          var xl = W[j - 15*2 + 1]
          var gamma0  = S(x, xl, 1) ^ S(x, xl, 8) ^ (x >>> 7)
          var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7)

          x  = W[j - 2*2]
          xl = W[j - 2*2 + 1]
          var gamma1  = S(x, xl, 19) ^ S(xl, x, 29) ^ (x >>> 6)
          var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6)

          // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
          var Wi7  = W[j - 7*2]
          var Wi7l = W[j - 7*2 + 1]

          var Wi16  = W[j - 16*2]
          var Wi16l = W[j - 16*2 + 1]

          Wil = gamma0l + Wi7l
          Wi  = gamma0  + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)
          Wil = Wil + gamma1l
          Wi  = Wi  + gamma1  + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)
          Wil = Wil + Wi16l
          Wi  = Wi  + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)

          W[j] = Wi
          W[j + 1] = Wil
        }

        var maj = Maj(a, b, c)
        var majl = Maj(al, bl, cl)

        var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7)
        var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7)
        var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9)
        var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9)

        // t1 = h + sigma1 + ch + K[i] + W[i]
        var Ki = K[j]
        var Kil = K[j + 1]

        var ch = Ch(e, f, g)
        var chl = Ch(el, fl, gl)

        var t1l = hl + sigma1l
        var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)
        t1l = t1l + chl
        t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)
        t1l = t1l + Kil
        t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)
        t1l = t1l + Wil
        t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)

        // t2 = sigma0 + maj
        var t2l = sigma0l + majl
        var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)

        h  = g
        hl = gl
        g  = f
        gl = fl
        f  = e
        fl = el
        el = (dl + t1l) | 0
        e  = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
        d  = c
        dl = cl
        c  = b
        cl = bl
        b  = a
        bl = al
        al = (t1l + t2l) | 0
        a  = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0
      }

      this._al = (this._al + al) | 0
      this._bl = (this._bl + bl) | 0
      this._cl = (this._cl + cl) | 0
      this._dl = (this._dl + dl) | 0
      this._el = (this._el + el) | 0
      this._fl = (this._fl + fl) | 0
      this._gl = (this._gl + gl) | 0
      this._hl = (this._hl + hl) | 0

      this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0
      this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0
      this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0
      this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
      this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0
      this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0
      this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0
      this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0
    }

    Sha512.prototype._hash = function () {
      var H = new Buffer(64)

      function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset)
        H.writeInt32BE(l, offset + 4)
      }

      writeInt64BE(this._a, this._al, 0)
      writeInt64BE(this._b, this._bl, 8)
      writeInt64BE(this._c, this._cl, 16)
      writeInt64BE(this._d, this._dl, 24)
      writeInt64BE(this._e, this._el, 32)
      writeInt64BE(this._f, this._fl, 40)
      writeInt64BE(this._g, this._gl, 48)
      writeInt64BE(this._h, this._hl, 56)

      return H
    }

    return Sha512

  }


/***/ },
/* 1315 */
/***/ function(module, exports) {

  /* (ignored) */

/***/ },
/* 1316 */
/***/ function(module, exports) {

  /* (ignored) */

/***/ }
/******/ ]);